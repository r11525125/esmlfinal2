
build/lwip_iperf.elf:     file format elf32-littleriscv


Disassembly of section .init:

00001000 <_start>:

_start:
#ifdef USE_GP
.option push
.option norelax
	la gp, __global_pointer$
    1000:	0001f197          	auipc	gp,0x1f
    1004:	1d018193          	addi	gp,gp,464 # 201d0 <__global_pointer$>

00001008 <init>:
	sw a0, smp_lottery_lock, a1
    ret
#endif

init:
	la sp, _sp
    1008:	00024117          	auipc	sp,0x24
    100c:	f2810113          	addi	sp,sp,-216 # 24f30 <__freertos_irq_stack_top>

	/* Load data section */
	la a0, _data_lma
    1010:	0001b517          	auipc	a0,0x1b
    1014:	46c50513          	addi	a0,a0,1132 # 1c47c <_data>
	la a1, _data
    1018:	0001b597          	auipc	a1,0x1b
    101c:	46458593          	addi	a1,a1,1124 # 1c47c <_data>
	la a2, _edata
    1020:	8bc18613          	addi	a2,gp,-1860 # 1fa8c <__bss_start>
	bgeu a1, a2, 2f
    1024:	00c5fc63          	bgeu	a1,a2,103c <init+0x34>
1:
	lw t0, (a0)
    1028:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
    102c:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
    1030:	00450513          	addi	a0,a0,4
	addi a1, a1, 4
    1034:	00458593          	addi	a1,a1,4
	bltu a1, a2, 1b
    1038:	fec5e8e3          	bltu	a1,a2,1028 <init+0x20>
2:

	/* Clear bss section */
	la a0, __bss_start
    103c:	8bc18513          	addi	a0,gp,-1860 # 1fa8c <__bss_start>
	la a1, _end
    1040:	00023597          	auipc	a1,0x23
    1044:	ef058593          	addi	a1,a1,-272 # 23f30 <_end>
	bgeu a0, a1, 2f
    1048:	00b57863          	bgeu	a0,a1,1058 <init+0x50>
1:
	sw zero, (a0)
    104c:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
    1050:	00450513          	addi	a0,a0,4
	bltu a0, a1, 1b
    1054:	feb56ce3          	bltu	a0,a1,104c <init+0x44>
2:

#ifndef NO_LIBC_INIT_ARRAY
	call __libc_init_array
    1058:	028000ef          	jal	ra,1080 <__libc_init_array>
#endif

	call main
    105c:	40c020ef          	jal	ra,3468 <main>

00001060 <mainDone>:
mainDone:
    j mainDone
    1060:	0000006f          	j	1060 <mainDone>

00001064 <_init>:


	.globl _init
_init:
    ret
    1064:	00008067          	ret

Disassembly of section .text:

00001068 <atoi>:
    1068:	00a00613          	li	a2,10
    106c:	00000593          	li	a1,0
    1070:	08c0106f          	j	20fc <strtol>

00001074 <_atoi_r>:
    1074:	00a00693          	li	a3,10
    1078:	00000613          	li	a2,0
    107c:	0640106f          	j	20e0 <_strtol_r>

00001080 <__libc_init_array>:
    1080:	ff010113          	addi	sp,sp,-16
    1084:	00812423          	sw	s0,8(sp)
    1088:	01212023          	sw	s2,0(sp)
    108c:	0001b417          	auipc	s0,0x1b
    1090:	3f040413          	addi	s0,s0,1008 # 1c47c <_data>
    1094:	0001b917          	auipc	s2,0x1b
    1098:	3e890913          	addi	s2,s2,1000 # 1c47c <_data>
    109c:	40890933          	sub	s2,s2,s0
    10a0:	00112623          	sw	ra,12(sp)
    10a4:	00912223          	sw	s1,4(sp)
    10a8:	40295913          	srai	s2,s2,0x2
    10ac:	00090e63          	beqz	s2,10c8 <__libc_init_array+0x48>
    10b0:	00000493          	li	s1,0
    10b4:	00042783          	lw	a5,0(s0)
    10b8:	00148493          	addi	s1,s1,1
    10bc:	00440413          	addi	s0,s0,4
    10c0:	000780e7          	jalr	a5
    10c4:	fe9918e3          	bne	s2,s1,10b4 <__libc_init_array+0x34>
    10c8:	0001b417          	auipc	s0,0x1b
    10cc:	3b440413          	addi	s0,s0,948 # 1c47c <_data>
    10d0:	0001b917          	auipc	s2,0x1b
    10d4:	3ac90913          	addi	s2,s2,940 # 1c47c <_data>
    10d8:	40890933          	sub	s2,s2,s0
    10dc:	40295913          	srai	s2,s2,0x2
    10e0:	00090e63          	beqz	s2,10fc <__libc_init_array+0x7c>
    10e4:	00000493          	li	s1,0
    10e8:	00042783          	lw	a5,0(s0)
    10ec:	00148493          	addi	s1,s1,1
    10f0:	00440413          	addi	s0,s0,4
    10f4:	000780e7          	jalr	a5
    10f8:	fe9918e3          	bne	s2,s1,10e8 <__libc_init_array+0x68>
    10fc:	00c12083          	lw	ra,12(sp)
    1100:	00812403          	lw	s0,8(sp)
    1104:	00412483          	lw	s1,4(sp)
    1108:	00012903          	lw	s2,0(sp)
    110c:	01010113          	addi	sp,sp,16
    1110:	00008067          	ret

00001114 <malloc>:
    1114:	82418793          	addi	a5,gp,-2012 # 1f9f4 <_impure_ptr>
    1118:	00050593          	mv	a1,a0
    111c:	0007a503          	lw	a0,0(a5)
    1120:	0140006f          	j	1134 <_malloc_r>

00001124 <free>:
    1124:	82418793          	addi	a5,gp,-2012 # 1f9f4 <_impure_ptr>
    1128:	00050593          	mv	a1,a0
    112c:	0007a503          	lw	a0,0(a5)
    1130:	1100106f          	j	2240 <_free_r>

00001134 <_malloc_r>:
    1134:	fd010113          	addi	sp,sp,-48
    1138:	02912223          	sw	s1,36(sp)
    113c:	03212023          	sw	s2,32(sp)
    1140:	02112623          	sw	ra,44(sp)
    1144:	02812423          	sw	s0,40(sp)
    1148:	01312e23          	sw	s3,28(sp)
    114c:	01412c23          	sw	s4,24(sp)
    1150:	01512a23          	sw	s5,20(sp)
    1154:	01612823          	sw	s6,16(sp)
    1158:	01712623          	sw	s7,12(sp)
    115c:	01812423          	sw	s8,8(sp)
    1160:	01912223          	sw	s9,4(sp)
    1164:	00b58493          	addi	s1,a1,11
    1168:	01600793          	li	a5,22
    116c:	00050913          	mv	s2,a0
    1170:	0697e663          	bltu	a5,s1,11dc <_malloc_r+0xa8>
    1174:	01000793          	li	a5,16
    1178:	22b7ec63          	bltu	a5,a1,13b0 <_malloc_r+0x27c>
    117c:	361000ef          	jal	ra,1cdc <__malloc_lock>
    1180:	01000493          	li	s1,16
    1184:	01800793          	li	a5,24
    1188:	00200613          	li	a2,2
    118c:	0001e997          	auipc	s3,0x1e
    1190:	02498993          	addi	s3,s3,36 # 1f1b0 <__malloc_av_>
    1194:	00f987b3          	add	a5,s3,a5
    1198:	0047a403          	lw	s0,4(a5)
    119c:	ff878713          	addi	a4,a5,-8
    11a0:	26e40063          	beq	s0,a4,1400 <_malloc_r+0x2cc>
    11a4:	00442783          	lw	a5,4(s0)
    11a8:	00c42683          	lw	a3,12(s0)
    11ac:	00842603          	lw	a2,8(s0)
    11b0:	ffc7f793          	andi	a5,a5,-4
    11b4:	00f407b3          	add	a5,s0,a5
    11b8:	0047a703          	lw	a4,4(a5)
    11bc:	00d62623          	sw	a3,12(a2)
    11c0:	00c6a423          	sw	a2,8(a3)
    11c4:	00176713          	ori	a4,a4,1
    11c8:	00090513          	mv	a0,s2
    11cc:	00e7a223          	sw	a4,4(a5)
    11d0:	311000ef          	jal	ra,1ce0 <__malloc_unlock>
    11d4:	00840513          	addi	a0,s0,8
    11d8:	1e40006f          	j	13bc <_malloc_r+0x288>
    11dc:	ff84f493          	andi	s1,s1,-8
    11e0:	1c04c863          	bltz	s1,13b0 <_malloc_r+0x27c>
    11e4:	1cb4e663          	bltu	s1,a1,13b0 <_malloc_r+0x27c>
    11e8:	2f5000ef          	jal	ra,1cdc <__malloc_lock>
    11ec:	1f700793          	li	a5,503
    11f0:	4a97f463          	bgeu	a5,s1,1698 <_malloc_r+0x564>
    11f4:	0094d793          	srli	a5,s1,0x9
    11f8:	1e078c63          	beqz	a5,13f0 <_malloc_r+0x2bc>
    11fc:	00400713          	li	a4,4
    1200:	42f76863          	bltu	a4,a5,1630 <_malloc_r+0x4fc>
    1204:	0064d793          	srli	a5,s1,0x6
    1208:	03978613          	addi	a2,a5,57
    120c:	03878513          	addi	a0,a5,56
    1210:	00361693          	slli	a3,a2,0x3
    1214:	0001e997          	auipc	s3,0x1e
    1218:	f9c98993          	addi	s3,s3,-100 # 1f1b0 <__malloc_av_>
    121c:	00d986b3          	add	a3,s3,a3
    1220:	0046a403          	lw	s0,4(a3)
    1224:	ff868693          	addi	a3,a3,-8
    1228:	02868c63          	beq	a3,s0,1260 <_malloc_r+0x12c>
    122c:	00442783          	lw	a5,4(s0)
    1230:	00f00593          	li	a1,15
    1234:	ffc7f793          	andi	a5,a5,-4
    1238:	40978733          	sub	a4,a5,s1
    123c:	02e5c063          	blt	a1,a4,125c <_malloc_r+0x128>
    1240:	38075263          	bgez	a4,15c4 <_malloc_r+0x490>
    1244:	00c42403          	lw	s0,12(s0)
    1248:	00868c63          	beq	a3,s0,1260 <_malloc_r+0x12c>
    124c:	00442783          	lw	a5,4(s0)
    1250:	ffc7f793          	andi	a5,a5,-4
    1254:	40978733          	sub	a4,a5,s1
    1258:	fee5d4e3          	bge	a1,a4,1240 <_malloc_r+0x10c>
    125c:	00050613          	mv	a2,a0
    1260:	0109a403          	lw	s0,16(s3)
    1264:	0001e817          	auipc	a6,0x1e
    1268:	f5480813          	addi	a6,a6,-172 # 1f1b8 <__malloc_av_+0x8>
    126c:	1b040863          	beq	s0,a6,141c <_malloc_r+0x2e8>
    1270:	00442583          	lw	a1,4(s0)
    1274:	00f00713          	li	a4,15
    1278:	ffc5f593          	andi	a1,a1,-4
    127c:	409587b3          	sub	a5,a1,s1
    1280:	44f74263          	blt	a4,a5,16c4 <_malloc_r+0x590>
    1284:	0001e717          	auipc	a4,0x1e
    1288:	f5072023          	sw	a6,-192(a4) # 1f1c4 <__malloc_av_+0x14>
    128c:	0001e717          	auipc	a4,0x1e
    1290:	f3072a23          	sw	a6,-204(a4) # 1f1c0 <__malloc_av_+0x10>
    1294:	4007d863          	bgez	a5,16a4 <_malloc_r+0x570>
    1298:	1ff00793          	li	a5,511
    129c:	32b7ea63          	bltu	a5,a1,15d0 <_malloc_r+0x49c>
    12a0:	0035d593          	srli	a1,a1,0x3
    12a4:	00158793          	addi	a5,a1,1
    12a8:	00379793          	slli	a5,a5,0x3
    12ac:	0049a503          	lw	a0,4(s3)
    12b0:	00f987b3          	add	a5,s3,a5
    12b4:	0007a683          	lw	a3,0(a5)
    12b8:	4025d593          	srai	a1,a1,0x2
    12bc:	00100713          	li	a4,1
    12c0:	00b71733          	sll	a4,a4,a1
    12c4:	00a76733          	or	a4,a4,a0
    12c8:	ff878593          	addi	a1,a5,-8
    12cc:	00b42623          	sw	a1,12(s0)
    12d0:	00d42423          	sw	a3,8(s0)
    12d4:	0001e597          	auipc	a1,0x1e
    12d8:	eee5a023          	sw	a4,-288(a1) # 1f1b4 <__malloc_av_+0x4>
    12dc:	0087a023          	sw	s0,0(a5)
    12e0:	0086a623          	sw	s0,12(a3)
    12e4:	40265793          	srai	a5,a2,0x2
    12e8:	00100693          	li	a3,1
    12ec:	00f696b3          	sll	a3,a3,a5
    12f0:	14d76063          	bltu	a4,a3,1430 <_malloc_r+0x2fc>
    12f4:	00e6f7b3          	and	a5,a3,a4
    12f8:	02079463          	bnez	a5,1320 <_malloc_r+0x1ec>
    12fc:	00169693          	slli	a3,a3,0x1
    1300:	ffc67613          	andi	a2,a2,-4
    1304:	00e6f7b3          	and	a5,a3,a4
    1308:	00460613          	addi	a2,a2,4
    130c:	00079a63          	bnez	a5,1320 <_malloc_r+0x1ec>
    1310:	00169693          	slli	a3,a3,0x1
    1314:	00e6f7b3          	and	a5,a3,a4
    1318:	00460613          	addi	a2,a2,4
    131c:	fe078ae3          	beqz	a5,1310 <_malloc_r+0x1dc>
    1320:	00f00513          	li	a0,15
    1324:	00361893          	slli	a7,a2,0x3
    1328:	011988b3          	add	a7,s3,a7
    132c:	00088593          	mv	a1,a7
    1330:	00060313          	mv	t1,a2
    1334:	00c5a403          	lw	s0,12(a1)
    1338:	00859a63          	bne	a1,s0,134c <_malloc_r+0x218>
    133c:	3180006f          	j	1654 <_malloc_r+0x520>
    1340:	32075463          	bgez	a4,1668 <_malloc_r+0x534>
    1344:	00c42403          	lw	s0,12(s0)
    1348:	30858663          	beq	a1,s0,1654 <_malloc_r+0x520>
    134c:	00442783          	lw	a5,4(s0)
    1350:	ffc7f793          	andi	a5,a5,-4
    1354:	40978733          	sub	a4,a5,s1
    1358:	fee554e3          	bge	a0,a4,1340 <_malloc_r+0x20c>
    135c:	00c42683          	lw	a3,12(s0)
    1360:	00842603          	lw	a2,8(s0)
    1364:	0014e593          	ori	a1,s1,1
    1368:	00b42223          	sw	a1,4(s0)
    136c:	00d62623          	sw	a3,12(a2)
    1370:	00c6a423          	sw	a2,8(a3)
    1374:	009404b3          	add	s1,s0,s1
    1378:	0001e697          	auipc	a3,0x1e
    137c:	e496a623          	sw	s1,-436(a3) # 1f1c4 <__malloc_av_+0x14>
    1380:	0001e697          	auipc	a3,0x1e
    1384:	e496a023          	sw	s1,-448(a3) # 1f1c0 <__malloc_av_+0x10>
    1388:	00176693          	ori	a3,a4,1
    138c:	0104a623          	sw	a6,12(s1)
    1390:	0104a423          	sw	a6,8(s1)
    1394:	00d4a223          	sw	a3,4(s1)
    1398:	00f407b3          	add	a5,s0,a5
    139c:	00090513          	mv	a0,s2
    13a0:	00e7a023          	sw	a4,0(a5)
    13a4:	13d000ef          	jal	ra,1ce0 <__malloc_unlock>
    13a8:	00840513          	addi	a0,s0,8
    13ac:	0100006f          	j	13bc <_malloc_r+0x288>
    13b0:	00c00793          	li	a5,12
    13b4:	00f92023          	sw	a5,0(s2)
    13b8:	00000513          	li	a0,0
    13bc:	02c12083          	lw	ra,44(sp)
    13c0:	02812403          	lw	s0,40(sp)
    13c4:	02412483          	lw	s1,36(sp)
    13c8:	02012903          	lw	s2,32(sp)
    13cc:	01c12983          	lw	s3,28(sp)
    13d0:	01812a03          	lw	s4,24(sp)
    13d4:	01412a83          	lw	s5,20(sp)
    13d8:	01012b03          	lw	s6,16(sp)
    13dc:	00c12b83          	lw	s7,12(sp)
    13e0:	00812c03          	lw	s8,8(sp)
    13e4:	00412c83          	lw	s9,4(sp)
    13e8:	03010113          	addi	sp,sp,48
    13ec:	00008067          	ret
    13f0:	20000693          	li	a3,512
    13f4:	04000613          	li	a2,64
    13f8:	03f00513          	li	a0,63
    13fc:	e19ff06f          	j	1214 <_malloc_r+0xe0>
    1400:	00c7a403          	lw	s0,12(a5)
    1404:	00260613          	addi	a2,a2,2
    1408:	d8879ee3          	bne	a5,s0,11a4 <_malloc_r+0x70>
    140c:	0109a403          	lw	s0,16(s3)
    1410:	0001e817          	auipc	a6,0x1e
    1414:	da880813          	addi	a6,a6,-600 # 1f1b8 <__malloc_av_+0x8>
    1418:	e5041ce3          	bne	s0,a6,1270 <_malloc_r+0x13c>
    141c:	0049a703          	lw	a4,4(s3)
    1420:	40265793          	srai	a5,a2,0x2
    1424:	00100693          	li	a3,1
    1428:	00f696b3          	sll	a3,a3,a5
    142c:	ecd774e3          	bgeu	a4,a3,12f4 <_malloc_r+0x1c0>
    1430:	0089a403          	lw	s0,8(s3)
    1434:	00442a83          	lw	s5,4(s0)
    1438:	ffcafb93          	andi	s7,s5,-4
    143c:	009be863          	bltu	s7,s1,144c <_malloc_r+0x318>
    1440:	409b87b3          	sub	a5,s7,s1
    1444:	00f00713          	li	a4,15
    1448:	14f74863          	blt	a4,a5,1598 <_malloc_r+0x464>
    144c:	97818793          	addi	a5,gp,-1672 # 1fb48 <__malloc_top_pad>
    1450:	81c18c13          	addi	s8,gp,-2020 # 1f9ec <__malloc_sbrk_base>
    1454:	0007aa83          	lw	s5,0(a5)
    1458:	000c2703          	lw	a4,0(s8)
    145c:	fff00793          	li	a5,-1
    1460:	01740a33          	add	s4,s0,s7
    1464:	01548ab3          	add	s5,s1,s5
    1468:	34f70663          	beq	a4,a5,17b4 <_malloc_r+0x680>
    146c:	000017b7          	lui	a5,0x1
    1470:	00f78793          	addi	a5,a5,15 # 100f <init+0x7>
    1474:	00fa8ab3          	add	s5,s5,a5
    1478:	fffff7b7          	lui	a5,0xfffff
    147c:	00fafab3          	and	s5,s5,a5
    1480:	000a8593          	mv	a1,s5
    1484:	00090513          	mv	a0,s2
    1488:	0c9000ef          	jal	ra,1d50 <_sbrk_r>
    148c:	fff00793          	li	a5,-1
    1490:	00050b13          	mv	s6,a0
    1494:	28f50663          	beq	a0,a5,1720 <_malloc_r+0x5ec>
    1498:	29456263          	bltu	a0,s4,171c <_malloc_r+0x5e8>
    149c:	bb818c93          	addi	s9,gp,-1096 # 1fd88 <__malloc_current_mallinfo>
    14a0:	000ca783          	lw	a5,0(s9)
    14a4:	00fa87b3          	add	a5,s5,a5
    14a8:	baf1ac23          	sw	a5,-1096(gp) # 1fd88 <__malloc_current_mallinfo>
    14ac:	00078713          	mv	a4,a5
    14b0:	3aaa0663          	beq	s4,a0,185c <_malloc_r+0x728>
    14b4:	000c2683          	lw	a3,0(s8)
    14b8:	fff00793          	li	a5,-1
    14bc:	3af68e63          	beq	a3,a5,1878 <_malloc_r+0x744>
    14c0:	414b07b3          	sub	a5,s6,s4
    14c4:	00e787b3          	add	a5,a5,a4
    14c8:	baf1ac23          	sw	a5,-1096(gp) # 1fd88 <__malloc_current_mallinfo>
    14cc:	007b7c13          	andi	s8,s6,7
    14d0:	300c0663          	beqz	s8,17dc <_malloc_r+0x6a8>
    14d4:	418b0b33          	sub	s6,s6,s8
    14d8:	000017b7          	lui	a5,0x1
    14dc:	008b0b13          	addi	s6,s6,8
    14e0:	fff78a13          	addi	s4,a5,-1 # fff <regnum_t6+0xfe0>
    14e4:	015b0ab3          	add	s5,s6,s5
    14e8:	00878793          	addi	a5,a5,8
    14ec:	014af733          	and	a4,s5,s4
    14f0:	418787b3          	sub	a5,a5,s8
    14f4:	40e787b3          	sub	a5,a5,a4
    14f8:	0147fa33          	and	s4,a5,s4
    14fc:	000a0593          	mv	a1,s4
    1500:	00090513          	mv	a0,s2
    1504:	04d000ef          	jal	ra,1d50 <_sbrk_r>
    1508:	fff00793          	li	a5,-1
    150c:	3cf50063          	beq	a0,a5,18cc <_malloc_r+0x798>
    1510:	41650533          	sub	a0,a0,s6
    1514:	01450ab3          	add	s5,a0,s4
    1518:	000ca783          	lw	a5,0(s9)
    151c:	0001e717          	auipc	a4,0x1e
    1520:	c9672e23          	sw	s6,-868(a4) # 1f1b8 <__malloc_av_+0x8>
    1524:	001aea93          	ori	s5,s5,1
    1528:	00fa07b3          	add	a5,s4,a5
    152c:	baf1ac23          	sw	a5,-1096(gp) # 1fd88 <__malloc_current_mallinfo>
    1530:	015b2223          	sw	s5,4(s6)
    1534:	35340663          	beq	s0,s3,1880 <_malloc_r+0x74c>
    1538:	00f00613          	li	a2,15
    153c:	35767663          	bgeu	a2,s7,1888 <_malloc_r+0x754>
    1540:	00442683          	lw	a3,4(s0)
    1544:	ff4b8713          	addi	a4,s7,-12
    1548:	ff877713          	andi	a4,a4,-8
    154c:	0016f693          	andi	a3,a3,1
    1550:	00e6e6b3          	or	a3,a3,a4
    1554:	00d42223          	sw	a3,4(s0)
    1558:	00500593          	li	a1,5
    155c:	00e406b3          	add	a3,s0,a4
    1560:	00b6a223          	sw	a1,4(a3)
    1564:	00b6a423          	sw	a1,8(a3)
    1568:	36e66c63          	bltu	a2,a4,18e0 <_malloc_r+0x7ac>
    156c:	004b2a83          	lw	s5,4(s6)
    1570:	000b0413          	mv	s0,s6
    1574:	97018713          	addi	a4,gp,-1680 # 1fb40 <__malloc_max_sbrked_mem>
    1578:	00072703          	lw	a4,0(a4)
    157c:	00f77463          	bgeu	a4,a5,1584 <_malloc_r+0x450>
    1580:	96f1a823          	sw	a5,-1680(gp) # 1fb40 <__malloc_max_sbrked_mem>
    1584:	97418713          	addi	a4,gp,-1676 # 1fb44 <__malloc_max_total_mem>
    1588:	00072703          	lw	a4,0(a4)
    158c:	18f77e63          	bgeu	a4,a5,1728 <_malloc_r+0x5f4>
    1590:	96f1aa23          	sw	a5,-1676(gp) # 1fb44 <__malloc_max_total_mem>
    1594:	1940006f          	j	1728 <_malloc_r+0x5f4>
    1598:	0014e713          	ori	a4,s1,1
    159c:	00e42223          	sw	a4,4(s0)
    15a0:	009404b3          	add	s1,s0,s1
    15a4:	0001e717          	auipc	a4,0x1e
    15a8:	c0972a23          	sw	s1,-1004(a4) # 1f1b8 <__malloc_av_+0x8>
    15ac:	0017e793          	ori	a5,a5,1
    15b0:	00090513          	mv	a0,s2
    15b4:	00f4a223          	sw	a5,4(s1)
    15b8:	728000ef          	jal	ra,1ce0 <__malloc_unlock>
    15bc:	00840513          	addi	a0,s0,8
    15c0:	dfdff06f          	j	13bc <_malloc_r+0x288>
    15c4:	00c42683          	lw	a3,12(s0)
    15c8:	00842603          	lw	a2,8(s0)
    15cc:	be9ff06f          	j	11b4 <_malloc_r+0x80>
    15d0:	0095d793          	srli	a5,a1,0x9
    15d4:	00400713          	li	a4,4
    15d8:	12f77863          	bgeu	a4,a5,1708 <_malloc_r+0x5d4>
    15dc:	01400713          	li	a4,20
    15e0:	22f76863          	bltu	a4,a5,1810 <_malloc_r+0x6dc>
    15e4:	05c78693          	addi	a3,a5,92
    15e8:	05b78713          	addi	a4,a5,91
    15ec:	00369693          	slli	a3,a3,0x3
    15f0:	00d986b3          	add	a3,s3,a3
    15f4:	0006a783          	lw	a5,0(a3)
    15f8:	ff868693          	addi	a3,a3,-8
    15fc:	1cf68063          	beq	a3,a5,17bc <_malloc_r+0x688>
    1600:	0047a703          	lw	a4,4(a5)
    1604:	ffc77713          	andi	a4,a4,-4
    1608:	00e5f663          	bgeu	a1,a4,1614 <_malloc_r+0x4e0>
    160c:	0087a783          	lw	a5,8(a5)
    1610:	fef698e3          	bne	a3,a5,1600 <_malloc_r+0x4cc>
    1614:	00c7a683          	lw	a3,12(a5)
    1618:	0049a703          	lw	a4,4(s3)
    161c:	00d42623          	sw	a3,12(s0)
    1620:	00f42423          	sw	a5,8(s0)
    1624:	0086a423          	sw	s0,8(a3)
    1628:	0087a623          	sw	s0,12(a5)
    162c:	cb9ff06f          	j	12e4 <_malloc_r+0x1b0>
    1630:	01400713          	li	a4,20
    1634:	10f77c63          	bgeu	a4,a5,174c <_malloc_r+0x618>
    1638:	05400713          	li	a4,84
    163c:	1ef76863          	bltu	a4,a5,182c <_malloc_r+0x6f8>
    1640:	00c4d793          	srli	a5,s1,0xc
    1644:	06f78613          	addi	a2,a5,111
    1648:	06e78513          	addi	a0,a5,110
    164c:	00361693          	slli	a3,a2,0x3
    1650:	bc5ff06f          	j	1214 <_malloc_r+0xe0>
    1654:	00130313          	addi	t1,t1,1
    1658:	00337793          	andi	a5,t1,3
    165c:	00858593          	addi	a1,a1,8
    1660:	cc079ae3          	bnez	a5,1334 <_malloc_r+0x200>
    1664:	1040006f          	j	1768 <_malloc_r+0x634>
    1668:	00f407b3          	add	a5,s0,a5
    166c:	0047a703          	lw	a4,4(a5)
    1670:	00c42683          	lw	a3,12(s0)
    1674:	00842603          	lw	a2,8(s0)
    1678:	00176713          	ori	a4,a4,1
    167c:	00e7a223          	sw	a4,4(a5)
    1680:	00d62623          	sw	a3,12(a2)
    1684:	00090513          	mv	a0,s2
    1688:	00c6a423          	sw	a2,8(a3)
    168c:	654000ef          	jal	ra,1ce0 <__malloc_unlock>
    1690:	00840513          	addi	a0,s0,8
    1694:	d29ff06f          	j	13bc <_malloc_r+0x288>
    1698:	0034d613          	srli	a2,s1,0x3
    169c:	00848793          	addi	a5,s1,8
    16a0:	aedff06f          	j	118c <_malloc_r+0x58>
    16a4:	00b405b3          	add	a1,s0,a1
    16a8:	0045a783          	lw	a5,4(a1)
    16ac:	00090513          	mv	a0,s2
    16b0:	0017e793          	ori	a5,a5,1
    16b4:	00f5a223          	sw	a5,4(a1)
    16b8:	628000ef          	jal	ra,1ce0 <__malloc_unlock>
    16bc:	00840513          	addi	a0,s0,8
    16c0:	cfdff06f          	j	13bc <_malloc_r+0x288>
    16c4:	0014e713          	ori	a4,s1,1
    16c8:	00e42223          	sw	a4,4(s0)
    16cc:	009404b3          	add	s1,s0,s1
    16d0:	0001e717          	auipc	a4,0x1e
    16d4:	ae972a23          	sw	s1,-1292(a4) # 1f1c4 <__malloc_av_+0x14>
    16d8:	0001e717          	auipc	a4,0x1e
    16dc:	ae972423          	sw	s1,-1304(a4) # 1f1c0 <__malloc_av_+0x10>
    16e0:	0017e713          	ori	a4,a5,1
    16e4:	0104a623          	sw	a6,12(s1)
    16e8:	0104a423          	sw	a6,8(s1)
    16ec:	00e4a223          	sw	a4,4(s1)
    16f0:	00b405b3          	add	a1,s0,a1
    16f4:	00090513          	mv	a0,s2
    16f8:	00f5a023          	sw	a5,0(a1)
    16fc:	5e4000ef          	jal	ra,1ce0 <__malloc_unlock>
    1700:	00840513          	addi	a0,s0,8
    1704:	cb9ff06f          	j	13bc <_malloc_r+0x288>
    1708:	0065d793          	srli	a5,a1,0x6
    170c:	03978693          	addi	a3,a5,57
    1710:	03878713          	addi	a4,a5,56
    1714:	00369693          	slli	a3,a3,0x3
    1718:	ed9ff06f          	j	15f0 <_malloc_r+0x4bc>
    171c:	13340663          	beq	s0,s3,1848 <_malloc_r+0x714>
    1720:	0089a403          	lw	s0,8(s3)
    1724:	00442a83          	lw	s5,4(s0)
    1728:	ffcafa93          	andi	s5,s5,-4
    172c:	409a87b3          	sub	a5,s5,s1
    1730:	009ae663          	bltu	s5,s1,173c <_malloc_r+0x608>
    1734:	00f00713          	li	a4,15
    1738:	e6f740e3          	blt	a4,a5,1598 <_malloc_r+0x464>
    173c:	00090513          	mv	a0,s2
    1740:	5a0000ef          	jal	ra,1ce0 <__malloc_unlock>
    1744:	00000513          	li	a0,0
    1748:	c75ff06f          	j	13bc <_malloc_r+0x288>
    174c:	05c78613          	addi	a2,a5,92
    1750:	05b78513          	addi	a0,a5,91
    1754:	00361693          	slli	a3,a2,0x3
    1758:	abdff06f          	j	1214 <_malloc_r+0xe0>
    175c:	0088a783          	lw	a5,8(a7)
    1760:	fff60613          	addi	a2,a2,-1
    1764:	1d179863          	bne	a5,a7,1934 <_malloc_r+0x800>
    1768:	00367793          	andi	a5,a2,3
    176c:	ff888893          	addi	a7,a7,-8
    1770:	fe0796e3          	bnez	a5,175c <_malloc_r+0x628>
    1774:	0049a703          	lw	a4,4(s3)
    1778:	fff6c793          	not	a5,a3
    177c:	00e7f7b3          	and	a5,a5,a4
    1780:	0001e717          	auipc	a4,0x1e
    1784:	a2f72a23          	sw	a5,-1484(a4) # 1f1b4 <__malloc_av_+0x4>
    1788:	00169693          	slli	a3,a3,0x1
    178c:	cad7e2e3          	bltu	a5,a3,1430 <_malloc_r+0x2fc>
    1790:	ca0680e3          	beqz	a3,1430 <_malloc_r+0x2fc>
    1794:	00f6f733          	and	a4,a3,a5
    1798:	00071a63          	bnez	a4,17ac <_malloc_r+0x678>
    179c:	00169693          	slli	a3,a3,0x1
    17a0:	00f6f733          	and	a4,a3,a5
    17a4:	00430313          	addi	t1,t1,4
    17a8:	fe070ae3          	beqz	a4,179c <_malloc_r+0x668>
    17ac:	00030613          	mv	a2,t1
    17b0:	b75ff06f          	j	1324 <_malloc_r+0x1f0>
    17b4:	010a8a93          	addi	s5,s5,16
    17b8:	cc9ff06f          	j	1480 <_malloc_r+0x34c>
    17bc:	0049a503          	lw	a0,4(s3)
    17c0:	40275593          	srai	a1,a4,0x2
    17c4:	00100713          	li	a4,1
    17c8:	00b71733          	sll	a4,a4,a1
    17cc:	00a76733          	or	a4,a4,a0
    17d0:	0001e597          	auipc	a1,0x1e
    17d4:	9ee5a223          	sw	a4,-1564(a1) # 1f1b4 <__malloc_av_+0x4>
    17d8:	e45ff06f          	j	161c <_malloc_r+0x4e8>
    17dc:	000017b7          	lui	a5,0x1
    17e0:	fff78713          	addi	a4,a5,-1 # fff <regnum_t6+0xfe0>
    17e4:	015b0a33          	add	s4,s6,s5
    17e8:	00ea7a33          	and	s4,s4,a4
    17ec:	414787b3          	sub	a5,a5,s4
    17f0:	00e7fa33          	and	s4,a5,a4
    17f4:	000a0593          	mv	a1,s4
    17f8:	00090513          	mv	a0,s2
    17fc:	554000ef          	jal	ra,1d50 <_sbrk_r>
    1800:	fff00793          	li	a5,-1
    1804:	d0f516e3          	bne	a0,a5,1510 <_malloc_r+0x3dc>
    1808:	00000a13          	li	s4,0
    180c:	d0dff06f          	j	1518 <_malloc_r+0x3e4>
    1810:	05400713          	li	a4,84
    1814:	08f76063          	bltu	a4,a5,1894 <_malloc_r+0x760>
    1818:	00c5d793          	srli	a5,a1,0xc
    181c:	06f78693          	addi	a3,a5,111
    1820:	06e78713          	addi	a4,a5,110
    1824:	00369693          	slli	a3,a3,0x3
    1828:	dc9ff06f          	j	15f0 <_malloc_r+0x4bc>
    182c:	15400713          	li	a4,340
    1830:	08f76063          	bltu	a4,a5,18b0 <_malloc_r+0x77c>
    1834:	00f4d793          	srli	a5,s1,0xf
    1838:	07878613          	addi	a2,a5,120
    183c:	07778513          	addi	a0,a5,119
    1840:	00361693          	slli	a3,a2,0x3
    1844:	9d1ff06f          	j	1214 <_malloc_r+0xe0>
    1848:	bb818c93          	addi	s9,gp,-1096 # 1fd88 <__malloc_current_mallinfo>
    184c:	000ca783          	lw	a5,0(s9)
    1850:	00fa8733          	add	a4,s5,a5
    1854:	bae1ac23          	sw	a4,-1096(gp) # 1fd88 <__malloc_current_mallinfo>
    1858:	c5dff06f          	j	14b4 <_malloc_r+0x380>
    185c:	014a1693          	slli	a3,s4,0x14
    1860:	c4069ae3          	bnez	a3,14b4 <_malloc_r+0x380>
    1864:	0089a403          	lw	s0,8(s3)
    1868:	015b8ab3          	add	s5,s7,s5
    186c:	001aea93          	ori	s5,s5,1
    1870:	01542223          	sw	s5,4(s0)
    1874:	d01ff06f          	j	1574 <_malloc_r+0x440>
    1878:	8161ae23          	sw	s6,-2020(gp) # 1f9ec <__malloc_sbrk_base>
    187c:	c51ff06f          	j	14cc <_malloc_r+0x398>
    1880:	000b0413          	mv	s0,s6
    1884:	cf1ff06f          	j	1574 <_malloc_r+0x440>
    1888:	00100793          	li	a5,1
    188c:	00fb2223          	sw	a5,4(s6)
    1890:	eadff06f          	j	173c <_malloc_r+0x608>
    1894:	15400713          	li	a4,340
    1898:	06f76263          	bltu	a4,a5,18fc <_malloc_r+0x7c8>
    189c:	00f5d793          	srli	a5,a1,0xf
    18a0:	07878693          	addi	a3,a5,120
    18a4:	07778713          	addi	a4,a5,119
    18a8:	00369693          	slli	a3,a3,0x3
    18ac:	d45ff06f          	j	15f0 <_malloc_r+0x4bc>
    18b0:	55400713          	li	a4,1364
    18b4:	06f76263          	bltu	a4,a5,1918 <_malloc_r+0x7e4>
    18b8:	0124d793          	srli	a5,s1,0x12
    18bc:	07d78613          	addi	a2,a5,125
    18c0:	07c78513          	addi	a0,a5,124
    18c4:	00361693          	slli	a3,a2,0x3
    18c8:	94dff06f          	j	1214 <_malloc_r+0xe0>
    18cc:	ff8c0c13          	addi	s8,s8,-8
    18d0:	018a8ab3          	add	s5,s5,s8
    18d4:	416a8ab3          	sub	s5,s5,s6
    18d8:	00000a13          	li	s4,0
    18dc:	c3dff06f          	j	1518 <_malloc_r+0x3e4>
    18e0:	00840593          	addi	a1,s0,8
    18e4:	00090513          	mv	a0,s2
    18e8:	159000ef          	jal	ra,2240 <_free_r>
    18ec:	0089a403          	lw	s0,8(s3)
    18f0:	000ca783          	lw	a5,0(s9)
    18f4:	00442a83          	lw	s5,4(s0)
    18f8:	c7dff06f          	j	1574 <_malloc_r+0x440>
    18fc:	55400713          	li	a4,1364
    1900:	02f76463          	bltu	a4,a5,1928 <_malloc_r+0x7f4>
    1904:	0125d793          	srli	a5,a1,0x12
    1908:	07d78693          	addi	a3,a5,125
    190c:	07c78713          	addi	a4,a5,124
    1910:	00369693          	slli	a3,a3,0x3
    1914:	cddff06f          	j	15f0 <_malloc_r+0x4bc>
    1918:	3f800693          	li	a3,1016
    191c:	07f00613          	li	a2,127
    1920:	07e00513          	li	a0,126
    1924:	8f1ff06f          	j	1214 <_malloc_r+0xe0>
    1928:	3f800693          	li	a3,1016
    192c:	07e00713          	li	a4,126
    1930:	cc1ff06f          	j	15f0 <_malloc_r+0x4bc>
    1934:	0049a783          	lw	a5,4(s3)
    1938:	e51ff06f          	j	1788 <_malloc_r+0x654>

0000193c <memcmp>:
    193c:	00300793          	li	a5,3
    1940:	02c7f863          	bgeu	a5,a2,1970 <memcmp+0x34>
    1944:	00b567b3          	or	a5,a0,a1
    1948:	0037f793          	andi	a5,a5,3
    194c:	00300693          	li	a3,3
    1950:	06079263          	bnez	a5,19b4 <memcmp+0x78>
    1954:	00052703          	lw	a4,0(a0)
    1958:	0005a783          	lw	a5,0(a1)
    195c:	04f71c63          	bne	a4,a5,19b4 <memcmp+0x78>
    1960:	ffc60613          	addi	a2,a2,-4
    1964:	00450513          	addi	a0,a0,4
    1968:	00458593          	addi	a1,a1,4
    196c:	fec6e4e3          	bltu	a3,a2,1954 <memcmp+0x18>
    1970:	fff60793          	addi	a5,a2,-1
    1974:	02060c63          	beqz	a2,19ac <memcmp+0x70>
    1978:	00054703          	lbu	a4,0(a0)
    197c:	0005c683          	lbu	a3,0(a1)
    1980:	02d71e63          	bne	a4,a3,19bc <memcmp+0x80>
    1984:	00178713          	addi	a4,a5,1
    1988:	00150793          	addi	a5,a0,1
    198c:	00e50533          	add	a0,a0,a4
    1990:	0140006f          	j	19a4 <memcmp+0x68>
    1994:	0007c703          	lbu	a4,0(a5)
    1998:	0005c683          	lbu	a3,0(a1)
    199c:	00178793          	addi	a5,a5,1
    19a0:	00d71e63          	bne	a4,a3,19bc <memcmp+0x80>
    19a4:	00158593          	addi	a1,a1,1
    19a8:	fea796e3          	bne	a5,a0,1994 <memcmp+0x58>
    19ac:	00000513          	li	a0,0
    19b0:	00008067          	ret
    19b4:	fff60793          	addi	a5,a2,-1
    19b8:	fc1ff06f          	j	1978 <memcmp+0x3c>
    19bc:	40d70533          	sub	a0,a4,a3
    19c0:	00008067          	ret

000019c4 <memcpy>:
    19c4:	00a5c7b3          	xor	a5,a1,a0
    19c8:	0037f793          	andi	a5,a5,3
    19cc:	00c508b3          	add	a7,a0,a2
    19d0:	06079263          	bnez	a5,1a34 <memcpy+0x70>
    19d4:	00300793          	li	a5,3
    19d8:	04c7fe63          	bgeu	a5,a2,1a34 <memcpy+0x70>
    19dc:	00357793          	andi	a5,a0,3
    19e0:	00050713          	mv	a4,a0
    19e4:	06079863          	bnez	a5,1a54 <memcpy+0x90>
    19e8:	ffc8f613          	andi	a2,a7,-4
    19ec:	fe060793          	addi	a5,a2,-32
    19f0:	08f76c63          	bltu	a4,a5,1a88 <memcpy+0xc4>
    19f4:	02c77c63          	bgeu	a4,a2,1a2c <memcpy+0x68>
    19f8:	00058693          	mv	a3,a1
    19fc:	00070793          	mv	a5,a4
    1a00:	0006a803          	lw	a6,0(a3)
    1a04:	00478793          	addi	a5,a5,4
    1a08:	00468693          	addi	a3,a3,4
    1a0c:	ff07ae23          	sw	a6,-4(a5)
    1a10:	fec7e8e3          	bltu	a5,a2,1a00 <memcpy+0x3c>
    1a14:	fff60793          	addi	a5,a2,-1
    1a18:	40e787b3          	sub	a5,a5,a4
    1a1c:	ffc7f793          	andi	a5,a5,-4
    1a20:	00478793          	addi	a5,a5,4
    1a24:	00f70733          	add	a4,a4,a5
    1a28:	00f585b3          	add	a1,a1,a5
    1a2c:	01176863          	bltu	a4,a7,1a3c <memcpy+0x78>
    1a30:	00008067          	ret
    1a34:	00050713          	mv	a4,a0
    1a38:	ff157ce3          	bgeu	a0,a7,1a30 <memcpy+0x6c>
    1a3c:	0005c783          	lbu	a5,0(a1)
    1a40:	00170713          	addi	a4,a4,1
    1a44:	00158593          	addi	a1,a1,1
    1a48:	fef70fa3          	sb	a5,-1(a4)
    1a4c:	ff1768e3          	bltu	a4,a7,1a3c <memcpy+0x78>
    1a50:	00008067          	ret
    1a54:	0005c683          	lbu	a3,0(a1)
    1a58:	00170713          	addi	a4,a4,1
    1a5c:	00377793          	andi	a5,a4,3
    1a60:	fed70fa3          	sb	a3,-1(a4)
    1a64:	00158593          	addi	a1,a1,1
    1a68:	f80780e3          	beqz	a5,19e8 <memcpy+0x24>
    1a6c:	0005c683          	lbu	a3,0(a1)
    1a70:	00170713          	addi	a4,a4,1
    1a74:	00377793          	andi	a5,a4,3
    1a78:	fed70fa3          	sb	a3,-1(a4)
    1a7c:	00158593          	addi	a1,a1,1
    1a80:	fc079ae3          	bnez	a5,1a54 <memcpy+0x90>
    1a84:	f65ff06f          	j	19e8 <memcpy+0x24>
    1a88:	0005a683          	lw	a3,0(a1)
    1a8c:	0045a283          	lw	t0,4(a1)
    1a90:	0085af83          	lw	t6,8(a1)
    1a94:	00c5af03          	lw	t5,12(a1)
    1a98:	0105ae83          	lw	t4,16(a1)
    1a9c:	0145ae03          	lw	t3,20(a1)
    1aa0:	0185a303          	lw	t1,24(a1)
    1aa4:	01c5a803          	lw	a6,28(a1)
    1aa8:	02458593          	addi	a1,a1,36
    1aac:	00d72023          	sw	a3,0(a4)
    1ab0:	ffc5a683          	lw	a3,-4(a1)
    1ab4:	00572223          	sw	t0,4(a4)
    1ab8:	01f72423          	sw	t6,8(a4)
    1abc:	01e72623          	sw	t5,12(a4)
    1ac0:	01d72823          	sw	t4,16(a4)
    1ac4:	01c72a23          	sw	t3,20(a4)
    1ac8:	00672c23          	sw	t1,24(a4)
    1acc:	01072e23          	sw	a6,28(a4)
    1ad0:	02470713          	addi	a4,a4,36
    1ad4:	fed72e23          	sw	a3,-4(a4)
    1ad8:	faf768e3          	bltu	a4,a5,1a88 <memcpy+0xc4>
    1adc:	f19ff06f          	j	19f4 <memcpy+0x30>

00001ae0 <memmove>:
    1ae0:	02a5f663          	bgeu	a1,a0,1b0c <memmove+0x2c>
    1ae4:	00c587b3          	add	a5,a1,a2
    1ae8:	02f57263          	bgeu	a0,a5,1b0c <memmove+0x2c>
    1aec:	00c50733          	add	a4,a0,a2
    1af0:	0e060a63          	beqz	a2,1be4 <memmove+0x104>
    1af4:	fff78793          	addi	a5,a5,-1
    1af8:	0007c683          	lbu	a3,0(a5)
    1afc:	fff70713          	addi	a4,a4,-1
    1b00:	00d70023          	sb	a3,0(a4)
    1b04:	fef598e3          	bne	a1,a5,1af4 <memmove+0x14>
    1b08:	00008067          	ret
    1b0c:	00f00793          	li	a5,15
    1b10:	02c7e863          	bltu	a5,a2,1b40 <memmove+0x60>
    1b14:	00050793          	mv	a5,a0
    1b18:	fff60693          	addi	a3,a2,-1
    1b1c:	0c060c63          	beqz	a2,1bf4 <memmove+0x114>
    1b20:	00168693          	addi	a3,a3,1
    1b24:	00d786b3          	add	a3,a5,a3
    1b28:	00158593          	addi	a1,a1,1
    1b2c:	fff5c703          	lbu	a4,-1(a1)
    1b30:	00178793          	addi	a5,a5,1
    1b34:	fee78fa3          	sb	a4,-1(a5)
    1b38:	fed798e3          	bne	a5,a3,1b28 <memmove+0x48>
    1b3c:	00008067          	ret
    1b40:	00a5e7b3          	or	a5,a1,a0
    1b44:	0037f793          	andi	a5,a5,3
    1b48:	0a079063          	bnez	a5,1be8 <memmove+0x108>
    1b4c:	ff060893          	addi	a7,a2,-16
    1b50:	ff08f893          	andi	a7,a7,-16
    1b54:	01088893          	addi	a7,a7,16
    1b58:	01150833          	add	a6,a0,a7
    1b5c:	00058713          	mv	a4,a1
    1b60:	00050793          	mv	a5,a0
    1b64:	00072683          	lw	a3,0(a4)
    1b68:	01078793          	addi	a5,a5,16
    1b6c:	01070713          	addi	a4,a4,16
    1b70:	fed7a823          	sw	a3,-16(a5)
    1b74:	ff472683          	lw	a3,-12(a4)
    1b78:	fed7aa23          	sw	a3,-12(a5)
    1b7c:	ff872683          	lw	a3,-8(a4)
    1b80:	fed7ac23          	sw	a3,-8(a5)
    1b84:	ffc72683          	lw	a3,-4(a4)
    1b88:	fed7ae23          	sw	a3,-4(a5)
    1b8c:	fcf81ce3          	bne	a6,a5,1b64 <memmove+0x84>
    1b90:	00c67713          	andi	a4,a2,12
    1b94:	011585b3          	add	a1,a1,a7
    1b98:	00f67813          	andi	a6,a2,15
    1b9c:	04070e63          	beqz	a4,1bf8 <memmove+0x118>
    1ba0:	00058713          	mv	a4,a1
    1ba4:	00078893          	mv	a7,a5
    1ba8:	00300e13          	li	t3,3
    1bac:	00470713          	addi	a4,a4,4
    1bb0:	ffc72303          	lw	t1,-4(a4)
    1bb4:	00488893          	addi	a7,a7,4
    1bb8:	40e806b3          	sub	a3,a6,a4
    1bbc:	fe68ae23          	sw	t1,-4(a7)
    1bc0:	00d586b3          	add	a3,a1,a3
    1bc4:	fede64e3          	bltu	t3,a3,1bac <memmove+0xcc>
    1bc8:	ffc80713          	addi	a4,a6,-4
    1bcc:	ffc77713          	andi	a4,a4,-4
    1bd0:	00470713          	addi	a4,a4,4
    1bd4:	00367613          	andi	a2,a2,3
    1bd8:	00e787b3          	add	a5,a5,a4
    1bdc:	00e585b3          	add	a1,a1,a4
    1be0:	f39ff06f          	j	1b18 <memmove+0x38>
    1be4:	00008067          	ret
    1be8:	fff60693          	addi	a3,a2,-1
    1bec:	00050793          	mv	a5,a0
    1bf0:	f31ff06f          	j	1b20 <memmove+0x40>
    1bf4:	00008067          	ret
    1bf8:	00080613          	mv	a2,a6
    1bfc:	f1dff06f          	j	1b18 <memmove+0x38>

00001c00 <memset>:
    1c00:	00f00313          	li	t1,15
    1c04:	00050713          	mv	a4,a0
    1c08:	02c37e63          	bgeu	t1,a2,1c44 <memset+0x44>
    1c0c:	00f77793          	andi	a5,a4,15
    1c10:	0a079063          	bnez	a5,1cb0 <memset+0xb0>
    1c14:	08059263          	bnez	a1,1c98 <memset+0x98>
    1c18:	ff067693          	andi	a3,a2,-16
    1c1c:	00f67613          	andi	a2,a2,15
    1c20:	00e686b3          	add	a3,a3,a4
    1c24:	00b72023          	sw	a1,0(a4)
    1c28:	00b72223          	sw	a1,4(a4)
    1c2c:	00b72423          	sw	a1,8(a4)
    1c30:	00b72623          	sw	a1,12(a4)
    1c34:	01070713          	addi	a4,a4,16
    1c38:	fed766e3          	bltu	a4,a3,1c24 <memset+0x24>
    1c3c:	00061463          	bnez	a2,1c44 <memset+0x44>
    1c40:	00008067          	ret
    1c44:	40c306b3          	sub	a3,t1,a2
    1c48:	00269693          	slli	a3,a3,0x2
    1c4c:	00000297          	auipc	t0,0x0
    1c50:	005686b3          	add	a3,a3,t0
    1c54:	00c68067          	jr	12(a3)
    1c58:	00b70723          	sb	a1,14(a4)
    1c5c:	00b706a3          	sb	a1,13(a4)
    1c60:	00b70623          	sb	a1,12(a4)
    1c64:	00b705a3          	sb	a1,11(a4)
    1c68:	00b70523          	sb	a1,10(a4)
    1c6c:	00b704a3          	sb	a1,9(a4)
    1c70:	00b70423          	sb	a1,8(a4)
    1c74:	00b703a3          	sb	a1,7(a4)
    1c78:	00b70323          	sb	a1,6(a4)
    1c7c:	00b702a3          	sb	a1,5(a4)
    1c80:	00b70223          	sb	a1,4(a4)
    1c84:	00b701a3          	sb	a1,3(a4)
    1c88:	00b70123          	sb	a1,2(a4)
    1c8c:	00b700a3          	sb	a1,1(a4)
    1c90:	00b70023          	sb	a1,0(a4)
    1c94:	00008067          	ret
    1c98:	0ff5f593          	andi	a1,a1,255
    1c9c:	00859693          	slli	a3,a1,0x8
    1ca0:	00d5e5b3          	or	a1,a1,a3
    1ca4:	01059693          	slli	a3,a1,0x10
    1ca8:	00d5e5b3          	or	a1,a1,a3
    1cac:	f6dff06f          	j	1c18 <memset+0x18>
    1cb0:	00279693          	slli	a3,a5,0x2
    1cb4:	00000297          	auipc	t0,0x0
    1cb8:	005686b3          	add	a3,a3,t0
    1cbc:	00008293          	mv	t0,ra
    1cc0:	fa0680e7          	jalr	-96(a3)
    1cc4:	00028093          	mv	ra,t0
    1cc8:	ff078793          	addi	a5,a5,-16
    1ccc:	40f70733          	sub	a4,a4,a5
    1cd0:	00f60633          	add	a2,a2,a5
    1cd4:	f6c378e3          	bgeu	t1,a2,1c44 <memset+0x44>
    1cd8:	f3dff06f          	j	1c14 <memset+0x14>

00001cdc <__malloc_lock>:
    1cdc:	00008067          	ret

00001ce0 <__malloc_unlock>:
    1ce0:	00008067          	ret

00001ce4 <srand>:
    1ce4:	82418793          	addi	a5,gp,-2012 # 1f9f4 <_impure_ptr>
    1ce8:	0007a783          	lw	a5,0(a5)
    1cec:	0aa7a423          	sw	a0,168(a5)
    1cf0:	0a07a623          	sw	zero,172(a5)
    1cf4:	00008067          	ret

00001cf8 <rand>:
    1cf8:	82418793          	addi	a5,gp,-2012 # 1f9f4 <_impure_ptr>
    1cfc:	0007a803          	lw	a6,0(a5)
    1d00:	4c9585b7          	lui	a1,0x4c958
    1d04:	f2d58593          	addi	a1,a1,-211 # 4c957f2d <__freertos_irq_stack_top+0x4c932ffd>
    1d08:	0a882683          	lw	a3,168(a6)
    1d0c:	0ac82703          	lw	a4,172(a6)
    1d10:	02b687b3          	mul	a5,a3,a1
    1d14:	00178613          	addi	a2,a5,1
    1d18:	00f637b3          	sltu	a5,a2,a5
    1d1c:	0ac82423          	sw	a2,168(a6)
    1d20:	5851f637          	lui	a2,0x5851f
    1d24:	42d60613          	addi	a2,a2,1069 # 5851f42d <__freertos_irq_stack_top+0x584fa4fd>
    1d28:	02c68633          	mul	a2,a3,a2
    1d2c:	02b70733          	mul	a4,a4,a1
    1d30:	02b6b6b3          	mulhu	a3,a3,a1
    1d34:	00c70733          	add	a4,a4,a2
    1d38:	00d70733          	add	a4,a4,a3
    1d3c:	00e787b3          	add	a5,a5,a4
    1d40:	00179513          	slli	a0,a5,0x1
    1d44:	0af82623          	sw	a5,172(a6)
    1d48:	00155513          	srli	a0,a0,0x1
    1d4c:	00008067          	ret

00001d50 <_sbrk_r>:
    1d50:	ff010113          	addi	sp,sp,-16
    1d54:	00812423          	sw	s0,8(sp)
    1d58:	00050413          	mv	s0,a0
    1d5c:	00058513          	mv	a0,a1
    1d60:	00022797          	auipc	a5,0x22
    1d64:	1c07a423          	sw	zero,456(a5) # 23f28 <errno>
    1d68:	00112623          	sw	ra,12(sp)
    1d6c:	6d81a0ef          	jal	ra,1c444 <_sbrk>
    1d70:	fff00793          	li	a5,-1
    1d74:	00f50a63          	beq	a0,a5,1d88 <_sbrk_r+0x38>
    1d78:	00c12083          	lw	ra,12(sp)
    1d7c:	00812403          	lw	s0,8(sp)
    1d80:	01010113          	addi	sp,sp,16
    1d84:	00008067          	ret
    1d88:	00022797          	auipc	a5,0x22
    1d8c:	1a078793          	addi	a5,a5,416 # 23f28 <errno>
    1d90:	0007a783          	lw	a5,0(a5)
    1d94:	fe0782e3          	beqz	a5,1d78 <_sbrk_r+0x28>
    1d98:	00f42023          	sw	a5,0(s0)
    1d9c:	00c12083          	lw	ra,12(sp)
    1da0:	00812403          	lw	s0,8(sp)
    1da4:	01010113          	addi	sp,sp,16
    1da8:	00008067          	ret

00001dac <strlen>:
    1dac:	00357793          	andi	a5,a0,3
    1db0:	00050713          	mv	a4,a0
    1db4:	04079c63          	bnez	a5,1e0c <strlen+0x60>
    1db8:	7f7f86b7          	lui	a3,0x7f7f8
    1dbc:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__freertos_irq_stack_top+0x7f7d304f>
    1dc0:	fff00593          	li	a1,-1
    1dc4:	00470713          	addi	a4,a4,4
    1dc8:	ffc72603          	lw	a2,-4(a4)
    1dcc:	00d677b3          	and	a5,a2,a3
    1dd0:	00d787b3          	add	a5,a5,a3
    1dd4:	00c7e7b3          	or	a5,a5,a2
    1dd8:	00d7e7b3          	or	a5,a5,a3
    1ddc:	feb784e3          	beq	a5,a1,1dc4 <strlen+0x18>
    1de0:	ffc74683          	lbu	a3,-4(a4)
    1de4:	40a707b3          	sub	a5,a4,a0
    1de8:	ffd74603          	lbu	a2,-3(a4)
    1dec:	ffe74503          	lbu	a0,-2(a4)
    1df0:	04068063          	beqz	a3,1e30 <strlen+0x84>
    1df4:	02060a63          	beqz	a2,1e28 <strlen+0x7c>
    1df8:	00a03533          	snez	a0,a0
    1dfc:	00f50533          	add	a0,a0,a5
    1e00:	ffe50513          	addi	a0,a0,-2
    1e04:	00008067          	ret
    1e08:	fa0688e3          	beqz	a3,1db8 <strlen+0xc>
    1e0c:	00074783          	lbu	a5,0(a4)
    1e10:	00170713          	addi	a4,a4,1
    1e14:	00377693          	andi	a3,a4,3
    1e18:	fe0798e3          	bnez	a5,1e08 <strlen+0x5c>
    1e1c:	40a70733          	sub	a4,a4,a0
    1e20:	fff70513          	addi	a0,a4,-1
    1e24:	00008067          	ret
    1e28:	ffd78513          	addi	a0,a5,-3
    1e2c:	00008067          	ret
    1e30:	ffc78513          	addi	a0,a5,-4
    1e34:	00008067          	ret

00001e38 <strncmp>:
    1e38:	0c060a63          	beqz	a2,1f0c <strncmp+0xd4>
    1e3c:	00b567b3          	or	a5,a0,a1
    1e40:	0037f793          	andi	a5,a5,3
    1e44:	08079063          	bnez	a5,1ec4 <strncmp+0x8c>
    1e48:	00300793          	li	a5,3
    1e4c:	06c7fc63          	bgeu	a5,a2,1ec4 <strncmp+0x8c>
    1e50:	00052783          	lw	a5,0(a0)
    1e54:	0005a703          	lw	a4,0(a1)
    1e58:	0ae79e63          	bne	a5,a4,1f14 <strncmp+0xdc>
    1e5c:	ffc60613          	addi	a2,a2,-4
    1e60:	0a060663          	beqz	a2,1f0c <strncmp+0xd4>
    1e64:	feff0337          	lui	t1,0xfeff0
    1e68:	eff30313          	addi	t1,t1,-257 # fefefeff <__freertos_irq_stack_top+0xfefcafcf>
    1e6c:	00678733          	add	a4,a5,t1
    1e70:	808088b7          	lui	a7,0x80808
    1e74:	fff7c793          	not	a5,a5
    1e78:	00f777b3          	and	a5,a4,a5
    1e7c:	08088893          	addi	a7,a7,128 # 80808080 <__freertos_irq_stack_top+0x807e3150>
    1e80:	0117f7b3          	and	a5,a5,a7
    1e84:	08079463          	bnez	a5,1f0c <strncmp+0xd4>
    1e88:	00300e13          	li	t3,3
    1e8c:	02c0006f          	j	1eb8 <strncmp+0x80>
    1e90:	00052703          	lw	a4,0(a0)
    1e94:	0005a683          	lw	a3,0(a1)
    1e98:	006707b3          	add	a5,a4,t1
    1e9c:	fff74813          	not	a6,a4
    1ea0:	0107f7b3          	and	a5,a5,a6
    1ea4:	0117f7b3          	and	a5,a5,a7
    1ea8:	06d71663          	bne	a4,a3,1f14 <strncmp+0xdc>
    1eac:	ffc60613          	addi	a2,a2,-4
    1eb0:	04060e63          	beqz	a2,1f0c <strncmp+0xd4>
    1eb4:	04079c63          	bnez	a5,1f0c <strncmp+0xd4>
    1eb8:	00450513          	addi	a0,a0,4
    1ebc:	00458593          	addi	a1,a1,4
    1ec0:	fcce68e3          	bltu	t3,a2,1e90 <strncmp+0x58>
    1ec4:	00054703          	lbu	a4,0(a0)
    1ec8:	0005c683          	lbu	a3,0(a1)
    1ecc:	fff60613          	addi	a2,a2,-1
    1ed0:	02e69a63          	bne	a3,a4,1f04 <strncmp+0xcc>
    1ed4:	02060c63          	beqz	a2,1f0c <strncmp+0xd4>
    1ed8:	02070a63          	beqz	a4,1f0c <strncmp+0xd4>
    1edc:	00150793          	addi	a5,a0,1
    1ee0:	00c50633          	add	a2,a0,a2
    1ee4:	0100006f          	j	1ef4 <strncmp+0xbc>
    1ee8:	02f60263          	beq	a2,a5,1f0c <strncmp+0xd4>
    1eec:	00178793          	addi	a5,a5,1
    1ef0:	00070e63          	beqz	a4,1f0c <strncmp+0xd4>
    1ef4:	00158593          	addi	a1,a1,1
    1ef8:	0007c703          	lbu	a4,0(a5)
    1efc:	0005c683          	lbu	a3,0(a1)
    1f00:	fed704e3          	beq	a4,a3,1ee8 <strncmp+0xb0>
    1f04:	40d70533          	sub	a0,a4,a3
    1f08:	00008067          	ret
    1f0c:	00000513          	li	a0,0
    1f10:	00008067          	ret
    1f14:	00054703          	lbu	a4,0(a0)
    1f18:	0005c683          	lbu	a3,0(a1)
    1f1c:	fff60613          	addi	a2,a2,-1
    1f20:	fae68ce3          	beq	a3,a4,1ed8 <strncmp+0xa0>
    1f24:	fe1ff06f          	j	1f04 <strncmp+0xcc>

00001f28 <_strtol_l.isra.0>:
    1f28:	ff010113          	addi	sp,sp,-16
    1f2c:	00812623          	sw	s0,12(sp)
    1f30:	00912423          	sw	s1,8(sp)
    1f34:	00050393          	mv	t2,a0
    1f38:	00058313          	mv	t1,a1
    1f3c:	0001de17          	auipc	t3,0x1d
    1f40:	031e0e13          	addi	t3,t3,49 # 1ef6d <_ctype_+0x1>
    1f44:	0080006f          	j	1f4c <_strtol_l.isra.0+0x24>
    1f48:	00070313          	mv	t1,a4
    1f4c:	00130713          	addi	a4,t1,1
    1f50:	fff74783          	lbu	a5,-1(a4)
    1f54:	00fe0833          	add	a6,t3,a5
    1f58:	00084883          	lbu	a7,0(a6)
    1f5c:	0088f893          	andi	a7,a7,8
    1f60:	fe0894e3          	bnez	a7,1f48 <_strtol_l.isra.0+0x20>
    1f64:	02d00513          	li	a0,45
    1f68:	10a78863          	beq	a5,a0,2078 <_strtol_l.isra.0+0x150>
    1f6c:	02b00513          	li	a0,43
    1f70:	08a78263          	beq	a5,a0,1ff4 <_strtol_l.isra.0+0xcc>
    1f74:	00078813          	mv	a6,a5
    1f78:	00000413          	li	s0,0
    1f7c:	08068463          	beqz	a3,2004 <_strtol_l.isra.0+0xdc>
    1f80:	01000793          	li	a5,16
    1f84:	00068f93          	mv	t6,a3
    1f88:	10f68463          	beq	a3,a5,2090 <_strtol_l.isra.0+0x168>
    1f8c:	800002b7          	lui	t0,0x80000
    1f90:	00041463          	bnez	s0,1f98 <_strtol_l.isra.0+0x70>
    1f94:	fff2c293          	not	t0,t0
    1f98:	03f2f4b3          	remu	s1,t0,t6
    1f9c:	00000893          	li	a7,0
    1fa0:	00000513          	li	a0,0
    1fa4:	00900313          	li	t1,9
    1fa8:	01900f13          	li	t5,25
    1fac:	fff00e13          	li	t3,-1
    1fb0:	03f2deb3          	divu	t4,t0,t6
    1fb4:	fd080793          	addi	a5,a6,-48
    1fb8:	00f37863          	bgeu	t1,a5,1fc8 <_strtol_l.isra.0+0xa0>
    1fbc:	fbf80793          	addi	a5,a6,-65
    1fc0:	04ff6c63          	bltu	t5,a5,2018 <_strtol_l.isra.0+0xf0>
    1fc4:	fc980793          	addi	a5,a6,-55
    1fc8:	06d7d063          	bge	a5,a3,2028 <_strtol_l.isra.0+0x100>
    1fcc:	01c88e63          	beq	a7,t3,1fe8 <_strtol_l.isra.0+0xc0>
    1fd0:	fff00893          	li	a7,-1
    1fd4:	00aeea63          	bltu	t4,a0,1fe8 <_strtol_l.isra.0+0xc0>
    1fd8:	06ae8e63          	beq	t4,a0,2054 <_strtol_l.isra.0+0x12c>
    1fdc:	00100893          	li	a7,1
    1fe0:	02af8833          	mul	a6,t6,a0
    1fe4:	01078533          	add	a0,a5,a6
    1fe8:	00170713          	addi	a4,a4,1
    1fec:	fff74803          	lbu	a6,-1(a4)
    1ff0:	fc5ff06f          	j	1fb4 <_strtol_l.isra.0+0x8c>
    1ff4:	00074803          	lbu	a6,0(a4)
    1ff8:	00000413          	li	s0,0
    1ffc:	00230713          	addi	a4,t1,2
    2000:	f80690e3          	bnez	a3,1f80 <_strtol_l.isra.0+0x58>
    2004:	03000793          	li	a5,48
    2008:	0af80e63          	beq	a6,a5,20c4 <_strtol_l.isra.0+0x19c>
    200c:	00a00f93          	li	t6,10
    2010:	00a00693          	li	a3,10
    2014:	f79ff06f          	j	1f8c <_strtol_l.isra.0+0x64>
    2018:	f9f80793          	addi	a5,a6,-97
    201c:	00ff6663          	bltu	t5,a5,2028 <_strtol_l.isra.0+0x100>
    2020:	fa980793          	addi	a5,a6,-87
    2024:	fad7c4e3          	blt	a5,a3,1fcc <_strtol_l.isra.0+0xa4>
    2028:	fff00793          	li	a5,-1
    202c:	02f88863          	beq	a7,a5,205c <_strtol_l.isra.0+0x134>
    2030:	00040463          	beqz	s0,2038 <_strtol_l.isra.0+0x110>
    2034:	40a00533          	neg	a0,a0
    2038:	00060663          	beqz	a2,2044 <_strtol_l.isra.0+0x11c>
    203c:	04089663          	bnez	a7,2088 <_strtol_l.isra.0+0x160>
    2040:	00b62023          	sw	a1,0(a2)
    2044:	00c12403          	lw	s0,12(sp)
    2048:	00812483          	lw	s1,8(sp)
    204c:	01010113          	addi	sp,sp,16
    2050:	00008067          	ret
    2054:	f8f4cae3          	blt	s1,a5,1fe8 <_strtol_l.isra.0+0xc0>
    2058:	f85ff06f          	j	1fdc <_strtol_l.isra.0+0xb4>
    205c:	02200793          	li	a5,34
    2060:	00f3a023          	sw	a5,0(t2)
    2064:	00028513          	mv	a0,t0
    2068:	fc060ee3          	beqz	a2,2044 <_strtol_l.isra.0+0x11c>
    206c:	fff70593          	addi	a1,a4,-1
    2070:	00028513          	mv	a0,t0
    2074:	fcdff06f          	j	2040 <_strtol_l.isra.0+0x118>
    2078:	00074803          	lbu	a6,0(a4)
    207c:	00100413          	li	s0,1
    2080:	00230713          	addi	a4,t1,2
    2084:	ef9ff06f          	j	1f7c <_strtol_l.isra.0+0x54>
    2088:	00050293          	mv	t0,a0
    208c:	fe1ff06f          	j	206c <_strtol_l.isra.0+0x144>
    2090:	03000793          	li	a5,48
    2094:	00f81a63          	bne	a6,a5,20a8 <_strtol_l.isra.0+0x180>
    2098:	00074783          	lbu	a5,0(a4)
    209c:	05800513          	li	a0,88
    20a0:	0df7f793          	andi	a5,a5,223
    20a4:	00a78663          	beq	a5,a0,20b0 <_strtol_l.isra.0+0x188>
    20a8:	01000f93          	li	t6,16
    20ac:	ee1ff06f          	j	1f8c <_strtol_l.isra.0+0x64>
    20b0:	00174803          	lbu	a6,1(a4)
    20b4:	01000f93          	li	t6,16
    20b8:	00270713          	addi	a4,a4,2
    20bc:	01000693          	li	a3,16
    20c0:	ecdff06f          	j	1f8c <_strtol_l.isra.0+0x64>
    20c4:	00074783          	lbu	a5,0(a4)
    20c8:	05800693          	li	a3,88
    20cc:	0df7f793          	andi	a5,a5,223
    20d0:	fed780e3          	beq	a5,a3,20b0 <_strtol_l.isra.0+0x188>
    20d4:	00800f93          	li	t6,8
    20d8:	00800693          	li	a3,8
    20dc:	eb1ff06f          	j	1f8c <_strtol_l.isra.0+0x64>

000020e0 <_strtol_r>:
    20e0:	e49ff06f          	j	1f28 <_strtol_l.isra.0>

000020e4 <strtol_l>:
    20e4:	82418793          	addi	a5,gp,-2012 # 1f9f4 <_impure_ptr>
    20e8:	00060693          	mv	a3,a2
    20ec:	00058613          	mv	a2,a1
    20f0:	00050593          	mv	a1,a0
    20f4:	0007a503          	lw	a0,0(a5)
    20f8:	e31ff06f          	j	1f28 <_strtol_l.isra.0>

000020fc <strtol>:
    20fc:	82418793          	addi	a5,gp,-2012 # 1f9f4 <_impure_ptr>
    2100:	00060693          	mv	a3,a2
    2104:	00058613          	mv	a2,a1
    2108:	00050593          	mv	a1,a0
    210c:	0007a503          	lw	a0,0(a5)
    2110:	e19ff06f          	j	1f28 <_strtol_l.isra.0>

00002114 <_malloc_trim_r>:
    2114:	fe010113          	addi	sp,sp,-32
    2118:	00812c23          	sw	s0,24(sp)
    211c:	00912a23          	sw	s1,20(sp)
    2120:	01212823          	sw	s2,16(sp)
    2124:	01312623          	sw	s3,12(sp)
    2128:	00058413          	mv	s0,a1
    212c:	00112e23          	sw	ra,28(sp)
    2130:	0001d997          	auipc	s3,0x1d
    2134:	08098993          	addi	s3,s3,128 # 1f1b0 <__malloc_av_>
    2138:	00050913          	mv	s2,a0
    213c:	ba1ff0ef          	jal	ra,1cdc <__malloc_lock>
    2140:	0089a683          	lw	a3,8(s3)
    2144:	00001737          	lui	a4,0x1
    2148:	fef70793          	addi	a5,a4,-17 # fef <regnum_t6+0xfd0>
    214c:	0046a483          	lw	s1,4(a3)
    2150:	40878433          	sub	s0,a5,s0
    2154:	ffc4f493          	andi	s1,s1,-4
    2158:	00940433          	add	s0,s0,s1
    215c:	00c45413          	srli	s0,s0,0xc
    2160:	fff40413          	addi	s0,s0,-1
    2164:	00c41413          	slli	s0,s0,0xc
    2168:	00e44e63          	blt	s0,a4,2184 <_malloc_trim_r+0x70>
    216c:	00000593          	li	a1,0
    2170:	00090513          	mv	a0,s2
    2174:	bddff0ef          	jal	ra,1d50 <_sbrk_r>
    2178:	0089a783          	lw	a5,8(s3)
    217c:	009787b3          	add	a5,a5,s1
    2180:	02f50663          	beq	a0,a5,21ac <_malloc_trim_r+0x98>
    2184:	00090513          	mv	a0,s2
    2188:	b59ff0ef          	jal	ra,1ce0 <__malloc_unlock>
    218c:	01c12083          	lw	ra,28(sp)
    2190:	01812403          	lw	s0,24(sp)
    2194:	01412483          	lw	s1,20(sp)
    2198:	01012903          	lw	s2,16(sp)
    219c:	00c12983          	lw	s3,12(sp)
    21a0:	00000513          	li	a0,0
    21a4:	02010113          	addi	sp,sp,32
    21a8:	00008067          	ret
    21ac:	408005b3          	neg	a1,s0
    21b0:	00090513          	mv	a0,s2
    21b4:	b9dff0ef          	jal	ra,1d50 <_sbrk_r>
    21b8:	fff00793          	li	a5,-1
    21bc:	04f50663          	beq	a0,a5,2208 <_malloc_trim_r+0xf4>
    21c0:	bb818793          	addi	a5,gp,-1096 # 1fd88 <__malloc_current_mallinfo>
    21c4:	0007a783          	lw	a5,0(a5)
    21c8:	0089a703          	lw	a4,8(s3)
    21cc:	408484b3          	sub	s1,s1,s0
    21d0:	0014e493          	ori	s1,s1,1
    21d4:	40878433          	sub	s0,a5,s0
    21d8:	00090513          	mv	a0,s2
    21dc:	00972223          	sw	s1,4(a4)
    21e0:	ba81ac23          	sw	s0,-1096(gp) # 1fd88 <__malloc_current_mallinfo>
    21e4:	afdff0ef          	jal	ra,1ce0 <__malloc_unlock>
    21e8:	01c12083          	lw	ra,28(sp)
    21ec:	01812403          	lw	s0,24(sp)
    21f0:	01412483          	lw	s1,20(sp)
    21f4:	01012903          	lw	s2,16(sp)
    21f8:	00c12983          	lw	s3,12(sp)
    21fc:	00100513          	li	a0,1
    2200:	02010113          	addi	sp,sp,32
    2204:	00008067          	ret
    2208:	00000593          	li	a1,0
    220c:	00090513          	mv	a0,s2
    2210:	b41ff0ef          	jal	ra,1d50 <_sbrk_r>
    2214:	0089a703          	lw	a4,8(s3)
    2218:	00f00693          	li	a3,15
    221c:	40e507b3          	sub	a5,a0,a4
    2220:	f6f6d2e3          	bge	a3,a5,2184 <_malloc_trim_r+0x70>
    2224:	81c18693          	addi	a3,gp,-2020 # 1f9ec <__malloc_sbrk_base>
    2228:	0006a683          	lw	a3,0(a3)
    222c:	0017e793          	ori	a5,a5,1
    2230:	00f72223          	sw	a5,4(a4)
    2234:	40d50533          	sub	a0,a0,a3
    2238:	baa1ac23          	sw	a0,-1096(gp) # 1fd88 <__malloc_current_mallinfo>
    223c:	f49ff06f          	j	2184 <_malloc_trim_r+0x70>

00002240 <_free_r>:
    2240:	12058e63          	beqz	a1,237c <_free_r+0x13c>
    2244:	ff010113          	addi	sp,sp,-16
    2248:	00812423          	sw	s0,8(sp)
    224c:	00912223          	sw	s1,4(sp)
    2250:	00058413          	mv	s0,a1
    2254:	00050493          	mv	s1,a0
    2258:	00112623          	sw	ra,12(sp)
    225c:	a81ff0ef          	jal	ra,1cdc <__malloc_lock>
    2260:	ffc42583          	lw	a1,-4(s0)
    2264:	ff840713          	addi	a4,s0,-8
    2268:	0001d517          	auipc	a0,0x1d
    226c:	f4850513          	addi	a0,a0,-184 # 1f1b0 <__malloc_av_>
    2270:	ffe5f793          	andi	a5,a1,-2
    2274:	00f70633          	add	a2,a4,a5
    2278:	00462683          	lw	a3,4(a2)
    227c:	00852803          	lw	a6,8(a0)
    2280:	ffc6f693          	andi	a3,a3,-4
    2284:	1ac80463          	beq	a6,a2,242c <_free_r+0x1ec>
    2288:	00d62223          	sw	a3,4(a2)
    228c:	0015f593          	andi	a1,a1,1
    2290:	00d60833          	add	a6,a2,a3
    2294:	0a059463          	bnez	a1,233c <_free_r+0xfc>
    2298:	ff842303          	lw	t1,-8(s0)
    229c:	00482583          	lw	a1,4(a6)
    22a0:	0001d897          	auipc	a7,0x1d
    22a4:	f1888893          	addi	a7,a7,-232 # 1f1b8 <__malloc_av_+0x8>
    22a8:	40670733          	sub	a4,a4,t1
    22ac:	00872803          	lw	a6,8(a4)
    22b0:	006787b3          	add	a5,a5,t1
    22b4:	0015f593          	andi	a1,a1,1
    22b8:	15180463          	beq	a6,a7,2400 <_free_r+0x1c0>
    22bc:	00c72303          	lw	t1,12(a4)
    22c0:	00682623          	sw	t1,12(a6)
    22c4:	01032423          	sw	a6,8(t1)
    22c8:	1e058063          	beqz	a1,24a8 <_free_r+0x268>
    22cc:	0017e693          	ori	a3,a5,1
    22d0:	00d72223          	sw	a3,4(a4)
    22d4:	00f62023          	sw	a5,0(a2)
    22d8:	1ff00693          	li	a3,511
    22dc:	0af6ec63          	bltu	a3,a5,2394 <_free_r+0x154>
    22e0:	0037d793          	srli	a5,a5,0x3
    22e4:	00178693          	addi	a3,a5,1
    22e8:	00369693          	slli	a3,a3,0x3
    22ec:	00452583          	lw	a1,4(a0)
    22f0:	00d50533          	add	a0,a0,a3
    22f4:	00052603          	lw	a2,0(a0)
    22f8:	4027d693          	srai	a3,a5,0x2
    22fc:	00100793          	li	a5,1
    2300:	00d797b3          	sll	a5,a5,a3
    2304:	00b7e7b3          	or	a5,a5,a1
    2308:	ff850693          	addi	a3,a0,-8
    230c:	00d72623          	sw	a3,12(a4)
    2310:	00c72423          	sw	a2,8(a4)
    2314:	0001d697          	auipc	a3,0x1d
    2318:	eaf6a023          	sw	a5,-352(a3) # 1f1b4 <__malloc_av_+0x4>
    231c:	00e52023          	sw	a4,0(a0)
    2320:	00e62623          	sw	a4,12(a2)
    2324:	00812403          	lw	s0,8(sp)
    2328:	00c12083          	lw	ra,12(sp)
    232c:	00048513          	mv	a0,s1
    2330:	00412483          	lw	s1,4(sp)
    2334:	01010113          	addi	sp,sp,16
    2338:	9a9ff06f          	j	1ce0 <__malloc_unlock>
    233c:	00482583          	lw	a1,4(a6)
    2340:	0015f593          	andi	a1,a1,1
    2344:	02059e63          	bnez	a1,2380 <_free_r+0x140>
    2348:	00d787b3          	add	a5,a5,a3
    234c:	0001d897          	auipc	a7,0x1d
    2350:	e6c88893          	addi	a7,a7,-404 # 1f1b8 <__malloc_av_+0x8>
    2354:	00862683          	lw	a3,8(a2)
    2358:	0017e813          	ori	a6,a5,1
    235c:	00f705b3          	add	a1,a4,a5
    2360:	17168063          	beq	a3,a7,24c0 <_free_r+0x280>
    2364:	00c62603          	lw	a2,12(a2)
    2368:	00c6a623          	sw	a2,12(a3)
    236c:	00d62423          	sw	a3,8(a2)
    2370:	01072223          	sw	a6,4(a4)
    2374:	00f5a023          	sw	a5,0(a1)
    2378:	f61ff06f          	j	22d8 <_free_r+0x98>
    237c:	00008067          	ret
    2380:	0017e693          	ori	a3,a5,1
    2384:	fed42e23          	sw	a3,-4(s0)
    2388:	00f62023          	sw	a5,0(a2)
    238c:	1ff00693          	li	a3,511
    2390:	f4f6f8e3          	bgeu	a3,a5,22e0 <_free_r+0xa0>
    2394:	0097d693          	srli	a3,a5,0x9
    2398:	00400613          	li	a2,4
    239c:	0ed66463          	bltu	a2,a3,2484 <_free_r+0x244>
    23a0:	0067d693          	srli	a3,a5,0x6
    23a4:	03968593          	addi	a1,a3,57
    23a8:	03868613          	addi	a2,a3,56
    23ac:	00359593          	slli	a1,a1,0x3
    23b0:	00b505b3          	add	a1,a0,a1
    23b4:	0005a683          	lw	a3,0(a1)
    23b8:	ff858593          	addi	a1,a1,-8
    23bc:	12d58463          	beq	a1,a3,24e4 <_free_r+0x2a4>
    23c0:	0046a603          	lw	a2,4(a3)
    23c4:	ffc67613          	andi	a2,a2,-4
    23c8:	00c7f663          	bgeu	a5,a2,23d4 <_free_r+0x194>
    23cc:	0086a683          	lw	a3,8(a3)
    23d0:	fed598e3          	bne	a1,a3,23c0 <_free_r+0x180>
    23d4:	00c6a583          	lw	a1,12(a3)
    23d8:	00b72623          	sw	a1,12(a4)
    23dc:	00d72423          	sw	a3,8(a4)
    23e0:	00812403          	lw	s0,8(sp)
    23e4:	00e5a423          	sw	a4,8(a1)
    23e8:	00c12083          	lw	ra,12(sp)
    23ec:	00048513          	mv	a0,s1
    23f0:	00412483          	lw	s1,4(sp)
    23f4:	00e6a623          	sw	a4,12(a3)
    23f8:	01010113          	addi	sp,sp,16
    23fc:	8e5ff06f          	j	1ce0 <__malloc_unlock>
    2400:	14059463          	bnez	a1,2548 <_free_r+0x308>
    2404:	00862583          	lw	a1,8(a2)
    2408:	00c62603          	lw	a2,12(a2)
    240c:	00f687b3          	add	a5,a3,a5
    2410:	0017e693          	ori	a3,a5,1
    2414:	00c5a623          	sw	a2,12(a1)
    2418:	00b62423          	sw	a1,8(a2)
    241c:	00d72223          	sw	a3,4(a4)
    2420:	00f70733          	add	a4,a4,a5
    2424:	00f72023          	sw	a5,0(a4)
    2428:	efdff06f          	j	2324 <_free_r+0xe4>
    242c:	0015f593          	andi	a1,a1,1
    2430:	00d787b3          	add	a5,a5,a3
    2434:	02059063          	bnez	a1,2454 <_free_r+0x214>
    2438:	ff842583          	lw	a1,-8(s0)
    243c:	40b70733          	sub	a4,a4,a1
    2440:	00c72683          	lw	a3,12(a4)
    2444:	00872603          	lw	a2,8(a4)
    2448:	00b787b3          	add	a5,a5,a1
    244c:	00d62623          	sw	a3,12(a2)
    2450:	00c6a423          	sw	a2,8(a3)
    2454:	82018693          	addi	a3,gp,-2016 # 1f9f0 <__malloc_trim_threshold>
    2458:	0017e613          	ori	a2,a5,1
    245c:	0006a683          	lw	a3,0(a3)
    2460:	00c72223          	sw	a2,4(a4)
    2464:	0001d617          	auipc	a2,0x1d
    2468:	d4e62a23          	sw	a4,-684(a2) # 1f1b8 <__malloc_av_+0x8>
    246c:	ead7ece3          	bltu	a5,a3,2324 <_free_r+0xe4>
    2470:	97818793          	addi	a5,gp,-1672 # 1fb48 <__malloc_top_pad>
    2474:	0007a583          	lw	a1,0(a5)
    2478:	00048513          	mv	a0,s1
    247c:	c99ff0ef          	jal	ra,2114 <_malloc_trim_r>
    2480:	ea5ff06f          	j	2324 <_free_r+0xe4>
    2484:	01400613          	li	a2,20
    2488:	02d67463          	bgeu	a2,a3,24b0 <_free_r+0x270>
    248c:	05400613          	li	a2,84
    2490:	06d66a63          	bltu	a2,a3,2504 <_free_r+0x2c4>
    2494:	00c7d693          	srli	a3,a5,0xc
    2498:	06f68593          	addi	a1,a3,111
    249c:	06e68613          	addi	a2,a3,110
    24a0:	00359593          	slli	a1,a1,0x3
    24a4:	f0dff06f          	j	23b0 <_free_r+0x170>
    24a8:	00d787b3          	add	a5,a5,a3
    24ac:	ea9ff06f          	j	2354 <_free_r+0x114>
    24b0:	05c68593          	addi	a1,a3,92
    24b4:	05b68613          	addi	a2,a3,91
    24b8:	00359593          	slli	a1,a1,0x3
    24bc:	ef5ff06f          	j	23b0 <_free_r+0x170>
    24c0:	0001d697          	auipc	a3,0x1d
    24c4:	d0e6a223          	sw	a4,-764(a3) # 1f1c4 <__malloc_av_+0x14>
    24c8:	0001d697          	auipc	a3,0x1d
    24cc:	cee6ac23          	sw	a4,-776(a3) # 1f1c0 <__malloc_av_+0x10>
    24d0:	01172623          	sw	a7,12(a4)
    24d4:	01172423          	sw	a7,8(a4)
    24d8:	01072223          	sw	a6,4(a4)
    24dc:	00f5a023          	sw	a5,0(a1)
    24e0:	e45ff06f          	j	2324 <_free_r+0xe4>
    24e4:	00452503          	lw	a0,4(a0)
    24e8:	00100793          	li	a5,1
    24ec:	40265613          	srai	a2,a2,0x2
    24f0:	00c79633          	sll	a2,a5,a2
    24f4:	00a66633          	or	a2,a2,a0
    24f8:	0001d797          	auipc	a5,0x1d
    24fc:	cac7ae23          	sw	a2,-836(a5) # 1f1b4 <__malloc_av_+0x4>
    2500:	ed9ff06f          	j	23d8 <_free_r+0x198>
    2504:	15400613          	li	a2,340
    2508:	00d66c63          	bltu	a2,a3,2520 <_free_r+0x2e0>
    250c:	00f7d693          	srli	a3,a5,0xf
    2510:	07868593          	addi	a1,a3,120
    2514:	07768613          	addi	a2,a3,119
    2518:	00359593          	slli	a1,a1,0x3
    251c:	e95ff06f          	j	23b0 <_free_r+0x170>
    2520:	55400613          	li	a2,1364
    2524:	00d66c63          	bltu	a2,a3,253c <_free_r+0x2fc>
    2528:	0127d693          	srli	a3,a5,0x12
    252c:	07d68593          	addi	a1,a3,125
    2530:	07c68613          	addi	a2,a3,124
    2534:	00359593          	slli	a1,a1,0x3
    2538:	e79ff06f          	j	23b0 <_free_r+0x170>
    253c:	3f800593          	li	a1,1016
    2540:	07e00613          	li	a2,126
    2544:	e6dff06f          	j	23b0 <_free_r+0x170>
    2548:	0017e693          	ori	a3,a5,1
    254c:	00d72223          	sw	a3,4(a4)
    2550:	00f62023          	sw	a5,0(a2)
    2554:	dd1ff06f          	j	2324 <_free_r+0xe4>

00002558 <cleanup_glue>:
    2558:	ff010113          	addi	sp,sp,-16
    255c:	00812423          	sw	s0,8(sp)
    2560:	00058413          	mv	s0,a1
    2564:	0005a583          	lw	a1,0(a1)
    2568:	00912223          	sw	s1,4(sp)
    256c:	00112623          	sw	ra,12(sp)
    2570:	00050493          	mv	s1,a0
    2574:	00058463          	beqz	a1,257c <cleanup_glue+0x24>
    2578:	fe1ff0ef          	jal	ra,2558 <cleanup_glue>
    257c:	00040593          	mv	a1,s0
    2580:	00812403          	lw	s0,8(sp)
    2584:	00c12083          	lw	ra,12(sp)
    2588:	00048513          	mv	a0,s1
    258c:	00412483          	lw	s1,4(sp)
    2590:	01010113          	addi	sp,sp,16
    2594:	cadff06f          	j	2240 <_free_r>

00002598 <_reclaim_reent>:
    2598:	82418793          	addi	a5,gp,-2012 # 1f9f4 <_impure_ptr>
    259c:	0007a783          	lw	a5,0(a5)
    25a0:	10a78263          	beq	a5,a0,26a4 <_reclaim_reent+0x10c>
    25a4:	04c52703          	lw	a4,76(a0)
    25a8:	fe010113          	addi	sp,sp,-32
    25ac:	00912a23          	sw	s1,20(sp)
    25b0:	00112e23          	sw	ra,28(sp)
    25b4:	00812c23          	sw	s0,24(sp)
    25b8:	01212823          	sw	s2,16(sp)
    25bc:	01312623          	sw	s3,12(sp)
    25c0:	00050493          	mv	s1,a0
    25c4:	04070263          	beqz	a4,2608 <_reclaim_reent+0x70>
    25c8:	00000913          	li	s2,0
    25cc:	08000993          	li	s3,128
    25d0:	012707b3          	add	a5,a4,s2
    25d4:	0007a583          	lw	a1,0(a5)
    25d8:	00058e63          	beqz	a1,25f4 <_reclaim_reent+0x5c>
    25dc:	0005a403          	lw	s0,0(a1)
    25e0:	00048513          	mv	a0,s1
    25e4:	c5dff0ef          	jal	ra,2240 <_free_r>
    25e8:	00040593          	mv	a1,s0
    25ec:	fe0418e3          	bnez	s0,25dc <_reclaim_reent+0x44>
    25f0:	04c4a703          	lw	a4,76(s1)
    25f4:	00490913          	addi	s2,s2,4
    25f8:	fd391ce3          	bne	s2,s3,25d0 <_reclaim_reent+0x38>
    25fc:	00070593          	mv	a1,a4
    2600:	00048513          	mv	a0,s1
    2604:	c3dff0ef          	jal	ra,2240 <_free_r>
    2608:	0404a583          	lw	a1,64(s1)
    260c:	00058663          	beqz	a1,2618 <_reclaim_reent+0x80>
    2610:	00048513          	mv	a0,s1
    2614:	c2dff0ef          	jal	ra,2240 <_free_r>
    2618:	1484a583          	lw	a1,328(s1)
    261c:	02058063          	beqz	a1,263c <_reclaim_reent+0xa4>
    2620:	14c48913          	addi	s2,s1,332
    2624:	01258c63          	beq	a1,s2,263c <_reclaim_reent+0xa4>
    2628:	0005a403          	lw	s0,0(a1)
    262c:	00048513          	mv	a0,s1
    2630:	c11ff0ef          	jal	ra,2240 <_free_r>
    2634:	00040593          	mv	a1,s0
    2638:	fe8918e3          	bne	s2,s0,2628 <_reclaim_reent+0x90>
    263c:	0544a583          	lw	a1,84(s1)
    2640:	00058663          	beqz	a1,264c <_reclaim_reent+0xb4>
    2644:	00048513          	mv	a0,s1
    2648:	bf9ff0ef          	jal	ra,2240 <_free_r>
    264c:	0384a783          	lw	a5,56(s1)
    2650:	02078c63          	beqz	a5,2688 <_reclaim_reent+0xf0>
    2654:	03c4a783          	lw	a5,60(s1)
    2658:	00048513          	mv	a0,s1
    265c:	000780e7          	jalr	a5
    2660:	2e04a583          	lw	a1,736(s1)
    2664:	02058263          	beqz	a1,2688 <_reclaim_reent+0xf0>
    2668:	01812403          	lw	s0,24(sp)
    266c:	01c12083          	lw	ra,28(sp)
    2670:	01012903          	lw	s2,16(sp)
    2674:	00c12983          	lw	s3,12(sp)
    2678:	00048513          	mv	a0,s1
    267c:	01412483          	lw	s1,20(sp)
    2680:	02010113          	addi	sp,sp,32
    2684:	ed5ff06f          	j	2558 <cleanup_glue>
    2688:	01c12083          	lw	ra,28(sp)
    268c:	01812403          	lw	s0,24(sp)
    2690:	01412483          	lw	s1,20(sp)
    2694:	01012903          	lw	s2,16(sp)
    2698:	00c12983          	lw	s3,12(sp)
    269c:	02010113          	addi	sp,sp,32
    26a0:	00008067          	ret
    26a4:	00008067          	ret

000026a8 <uart_writeAvailability>:
#include "type.h"
#include "soc.h"


    static inline u32 read_u32(u32 address){
        return *((volatile u32*) address);
    26a8:	00452503          	lw	a0,4(a0)
        enum UartStop stop;
        u32 clockDivider;
    } Uart_Config;
    
    static u32 uart_writeAvailability(u32 reg){
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    26ac:	01055513          	srli	a0,a0,0x10
    }
    26b0:	0ff57513          	andi	a0,a0,255
    26b4:	00008067          	ret

000026b8 <uart_write>:
    static u32 uart_readOccupancy(u32 reg){
        return read_u32(reg + UART_STATUS) >> 24;
    }
    
    static void uart_write(u32 reg, char data){
    26b8:	ff010113          	addi	sp,sp,-16
    26bc:	00112623          	sw	ra,12(sp)
    26c0:	00812423          	sw	s0,8(sp)
    26c4:	00912223          	sw	s1,4(sp)
    26c8:	00050413          	mv	s0,a0
    26cc:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    26d0:	00040513          	mv	a0,s0
    26d4:	fd5ff0ef          	jal	ra,26a8 <uart_writeAvailability>
    26d8:	fe050ce3          	beqz	a0,26d0 <uart_write+0x18>
    }
    
    static inline void write_u32(u32 data, u32 address){
        *((volatile u32*) address) = data;
    26dc:	00942023          	sw	s1,0(s0)
        write_u32(data, reg + UART_DATA);
    }
    26e0:	00c12083          	lw	ra,12(sp)
    26e4:	00812403          	lw	s0,8(sp)
    26e8:	00412483          	lw	s1,4(sp)
    26ec:	01010113          	addi	sp,sp,16
    26f0:	00008067          	ret

000026f4 <clint_getTime>:
        write_u32(0xFFFFFFFF, p + 4);
        write_u32(cmp, p + 0);
        write_u32(cmp >> 32, p + 4);
    }
    
    static u64 clint_getTime(u32 p){
    26f4:	00050693          	mv	a3,a0
    readReg_u32 (clint_getTimeHigh, CLINT_TIME_ADDR+4)
    26f8:	0000c7b7          	lui	a5,0xc
    26fc:	ffc78713          	addi	a4,a5,-4 # bffc <netif_add+0xb0>
    2700:	00e68733          	add	a4,a3,a4
        return *((volatile u32*) address);
    2704:	00072583          	lw	a1,0(a4)
    readReg_u32 (clint_getTimeLow , CLINT_TIME_ADDR)
    2708:	ff878793          	addi	a5,a5,-8
    270c:	00f687b3          	add	a5,a3,a5
    2710:	0007a503          	lw	a0,0(a5)
    2714:	00072783          	lw	a5,0(a4)
    
        /* Likewise, must guard against rollover when reading */
        do {
            hi = clint_getTimeHigh(p);
            lo = clint_getTimeLow(p);
        } while (clint_getTimeHigh(p) != hi);
    2718:	feb790e3          	bne	a5,a1,26f8 <clint_getTime+0x4>
    
        return (((u64)hi) << 32) | lo;
    }
    271c:	00008067          	ret

00002720 <bsp_printHex>:
#define ENABLE_BRIDGE_FULL_TO_LITE          1 // If this is enabled, bsp_printf_full can be called with bsp_printf. Enabling both ENABLE_BSP_PRINTF and ENABLE_BSP_PRINTF_FULL, bsp_printf_full will be remained as bsp_printf_full. Default: Enable
#define ENABLE_PRINTF_WARNING               1 // Print warning when the specifier not supported. Default: Enable

    //bsp_printHex is used in BSP_PRINTF
    static void bsp_printHex(uint32_t val)
    {
    2720:	ff010113          	addi	sp,sp,-16
    2724:	00112623          	sw	ra,12(sp)
    2728:	00812423          	sw	s0,8(sp)
    272c:	00912223          	sw	s1,4(sp)
    2730:	00050493          	mv	s1,a0
        uint32_t digits;
        digits =8;

        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    2734:	01c00413          	li	s0,28
    2738:	0280006f          	j	2760 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    273c:	0084d7b3          	srl	a5,s1,s0
    2740:	00f7f713          	andi	a4,a5,15
    2744:	0001c7b7          	lui	a5,0x1c
    2748:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    274c:	00e787b3          	add	a5,a5,a4
    2750:	0007c583          	lbu	a1,0(a5)
    2754:	f8010537          	lui	a0,0xf8010
    2758:	f61ff0ef          	jal	ra,26b8 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    275c:	ffc40413          	addi	s0,s0,-4
    2760:	fc045ee3          	bgez	s0,273c <bsp_printHex+0x1c>
        }
    }
    2764:	00c12083          	lw	ra,12(sp)
    2768:	00812403          	lw	s0,8(sp)
    276c:	00412483          	lw	s1,4(sp)
    2770:	01010113          	addi	sp,sp,16
    2774:	00008067          	ret

00002778 <bsp_printHex_lower>:

    static void bsp_printHex_lower(uint32_t val)
        {
    2778:	ff010113          	addi	sp,sp,-16
    277c:	00112623          	sw	ra,12(sp)
    2780:	00812423          	sw	s0,8(sp)
    2784:	00912223          	sw	s1,4(sp)
    2788:	00050493          	mv	s1,a0
            uint32_t digits;
            digits =8;

            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    278c:	01c00413          	li	s0,28
    2790:	0280006f          	j	27b8 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    2794:	0084d7b3          	srl	a5,s1,s0
    2798:	00f7f713          	andi	a4,a5,15
    279c:	0001c7b7          	lui	a5,0x1c
    27a0:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    27a4:	00e787b3          	add	a5,a5,a4
    27a8:	0007c583          	lbu	a1,0(a5)
    27ac:	f8010537          	lui	a0,0xf8010
    27b0:	f09ff0ef          	jal	ra,26b8 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    27b4:	ffc40413          	addi	s0,s0,-4
    27b8:	fc045ee3          	bgez	s0,2794 <bsp_printHex_lower+0x1c>
            }
        }
    27bc:	00c12083          	lw	ra,12(sp)
    27c0:	00812403          	lw	s0,8(sp)
    27c4:	00412483          	lw	s1,4(sp)
    27c8:	01010113          	addi	sp,sp,16
    27cc:	00008067          	ret

000027d0 <bsp_printf_c>:
    }

    #endif //#if (ENABLE_FLOATING_POINT_SUPPORT)

    static void bsp_printf_c(int c)
    {
    27d0:	ff010113          	addi	sp,sp,-16
    27d4:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    27d8:	0ff57593          	andi	a1,a0,255
    27dc:	f8010537          	lui	a0,0xf8010
    27e0:	ed9ff0ef          	jal	ra,26b8 <uart_write>
    }
    27e4:	00c12083          	lw	ra,12(sp)
    27e8:	01010113          	addi	sp,sp,16
    27ec:	00008067          	ret

000027f0 <bsp_printf_s>:
    
    static void bsp_printf_s(char *p)
    {
    27f0:	ff010113          	addi	sp,sp,-16
    27f4:	00112623          	sw	ra,12(sp)
    27f8:	00812423          	sw	s0,8(sp)
    27fc:	00050413          	mv	s0,a0
        while (*p)
    2800:	00044583          	lbu	a1,0(s0)
    2804:	00058a63          	beqz	a1,2818 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    2808:	00140413          	addi	s0,s0,1
    280c:	f8010537          	lui	a0,0xf8010
    2810:	ea9ff0ef          	jal	ra,26b8 <uart_write>
    2814:	fedff06f          	j	2800 <bsp_printf_s+0x10>
    }
    2818:	00c12083          	lw	ra,12(sp)
    281c:	00812403          	lw	s0,8(sp)
    2820:	01010113          	addi	sp,sp,16
    2824:	00008067          	ret

00002828 <bsp_printf_d>:
    
    static void bsp_printf_d(int val)
    {
    2828:	fd010113          	addi	sp,sp,-48
    282c:	02112623          	sw	ra,44(sp)
    2830:	02812423          	sw	s0,40(sp)
    2834:	02912223          	sw	s1,36(sp)
    2838:	00050493          	mv	s1,a0
        char buffer[32];
        char *p = buffer;
        if (val < 0) {
    283c:	00054663          	bltz	a0,2848 <bsp_printf_d+0x20>
    {
    2840:	00010413          	mv	s0,sp
    2844:	02c0006f          	j	2870 <bsp_printf_d+0x48>
            bsp_printf_c('-');
    2848:	02d00513          	li	a0,45
    284c:	f85ff0ef          	jal	ra,27d0 <bsp_printf_c>
            val = -val;
    2850:	409004b3          	neg	s1,s1
    2854:	fedff06f          	j	2840 <bsp_printf_d+0x18>
        }
        while (val || p == buffer) {
            *(p++) = '0' + val % 10;
    2858:	00a00713          	li	a4,10
    285c:	02e4e7b3          	rem	a5,s1,a4
    2860:	03078793          	addi	a5,a5,48
    2864:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    2868:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    286c:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    2870:	fe0494e3          	bnez	s1,2858 <bsp_printf_d+0x30>
    2874:	00010793          	mv	a5,sp
    2878:	fef400e3          	beq	s0,a5,2858 <bsp_printf_d+0x30>
    287c:	0100006f          	j	288c <bsp_printf_d+0x64>
        }
        while (p != buffer)
            bsp_printf_c(*(--p));
    2880:	fff40413          	addi	s0,s0,-1
    2884:	00044503          	lbu	a0,0(s0)
    2888:	f49ff0ef          	jal	ra,27d0 <bsp_printf_c>
        while (p != buffer)
    288c:	00010793          	mv	a5,sp
    2890:	fef418e3          	bne	s0,a5,2880 <bsp_printf_d+0x58>
    }
    2894:	02c12083          	lw	ra,44(sp)
    2898:	02812403          	lw	s0,40(sp)
    289c:	02412483          	lw	s1,36(sp)
    28a0:	03010113          	addi	sp,sp,48
    28a4:	00008067          	ret

000028a8 <bsp_printf_x>:
    
    static void bsp_printf_x(int val)
    {
    28a8:	ff010113          	addi	sp,sp,-16
    28ac:	00112623          	sw	ra,12(sp)
        int i,digi=2;
    
        for(i=0;i<8;i++)
    28b0:	00000713          	li	a4,0
    28b4:	00700793          	li	a5,7
    28b8:	02e7c063          	blt	a5,a4,28d8 <bsp_printf_x+0x30>
        {
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    28bc:	00271693          	slli	a3,a4,0x2
    28c0:	ff000793          	li	a5,-16
    28c4:	00d797b3          	sll	a5,a5,a3
    28c8:	00f577b3          	and	a5,a0,a5
    28cc:	00078663          	beqz	a5,28d8 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    28d0:	00170713          	addi	a4,a4,1
    28d4:	fe1ff06f          	j	28b4 <bsp_printf_x+0xc>
            {
                digi=i+1;
                break;
            }
        }
        bsp_printHex_lower(val);
    28d8:	ea1ff0ef          	jal	ra,2778 <bsp_printHex_lower>
    }
    28dc:	00c12083          	lw	ra,12(sp)
    28e0:	01010113          	addi	sp,sp,16
    28e4:	00008067          	ret

000028e8 <bsp_printf_X>:
    
    static void bsp_printf_X(int val)
        {
    28e8:	ff010113          	addi	sp,sp,-16
    28ec:	00112623          	sw	ra,12(sp)
            int i,digi=2;

            for(i=0;i<8;i++)
    28f0:	00000713          	li	a4,0
    28f4:	00700793          	li	a5,7
    28f8:	02e7c063          	blt	a5,a4,2918 <bsp_printf_X+0x30>
            {
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    28fc:	00271693          	slli	a3,a4,0x2
    2900:	ff000793          	li	a5,-16
    2904:	00d797b3          	sll	a5,a5,a3
    2908:	00f577b3          	and	a5,a0,a5
    290c:	00078663          	beqz	a5,2918 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    2910:	00170713          	addi	a4,a4,1
    2914:	fe1ff06f          	j	28f4 <bsp_printf_X+0xc>
                {
                    digi=i+1;
                    break;
                }
            }
            bsp_printHex(val);
    2918:	e09ff0ef          	jal	ra,2720 <bsp_printHex>
        }
    291c:	00c12083          	lw	ra,12(sp)
    2920:	01010113          	addi	sp,sp,16
    2924:	00008067          	ret

00002928 <dmasg_priority>:
        u32 ca = dmasg_ca(base, channel);
        write_u32(fifo_base << 0 | fifo_bytes-1 << 16,  ca+DMASG_CHANNEL_FIFO);
    }
    
    static void dmasg_priority(u32 base, u32 channel, u32 priority, u32 weight){
        u32 ca = dmasg_ca(base, channel);
    2928:	00759593          	slli	a1,a1,0x7
    292c:	00a585b3          	add	a1,a1,a0
        write_u32(priority | weight << 8,  ca+DMASG_CHANNEL_PRIORITY);
    2930:	00869693          	slli	a3,a3,0x8
    2934:	00c6e6b3          	or	a3,a3,a2
        *((volatile u32*) address) = data;
    2938:	04d5a223          	sw	a3,68(a1)
    }
    293c:	00008067          	ret

00002940 <plic_set_priority>:
#define PLIC_CLAIM_BASE         0x200004
#define PLIC_ENABLE_PER_HART    0x80
#define PLIC_CONTEXT_PER_HART   0x1000

    static void plic_set_priority(u32 plic, u32 gateway, u32 priority){
        write_u32(priority, plic + PLIC_PRIORITY_BASE + gateway*4);
    2940:	00259593          	slli	a1,a1,0x2
    2944:	00a585b3          	add	a1,a1,a0
    2948:	00c5a023          	sw	a2,0(a1)
    }
    294c:	00008067          	ret

00002950 <plic_set_enable>:
    static u32 plic_get_priority(u32 plic, u32 gateway){
        return read_u32(plic + PLIC_PRIORITY_BASE + gateway*4);
    }
    
    static void plic_set_enable(u32 plic, u32 target,u32 gateway, u32 enable){
        u32 word = plic + PLIC_ENABLE_BASE + target * PLIC_ENABLE_PER_HART + (gateway / 32 * 4);
    2950:	00759593          	slli	a1,a1,0x7
    2954:	00a58533          	add	a0,a1,a0
    2958:	00565593          	srli	a1,a2,0x5
    295c:	00259593          	slli	a1,a1,0x2
    2960:	00b50533          	add	a0,a0,a1
    2964:	000025b7          	lui	a1,0x2
    2968:	00b50533          	add	a0,a0,a1
        u32 mask = 1 << (gateway % 32);
    296c:	00100793          	li	a5,1
    2970:	00c797b3          	sll	a5,a5,a2
        if (enable)
    2974:	00068a63          	beqz	a3,2988 <plic_set_enable+0x38>
        return *((volatile u32*) address);
    2978:	00052603          	lw	a2,0(a0) # f8010000 <__freertos_irq_stack_top+0xf7feb0d0>
            write_u32(read_u32(word) | mask, word);
    297c:	00c7e7b3          	or	a5,a5,a2
        *((volatile u32*) address) = data;
    2980:	00f52023          	sw	a5,0(a0)
    2984:	00008067          	ret
        return *((volatile u32*) address);
    2988:	00052603          	lw	a2,0(a0)
        else
            write_u32(read_u32(word) & ~mask, word);
    298c:	fff7c793          	not	a5,a5
    2990:	00c7f7b3          	and	a5,a5,a2
        *((volatile u32*) address) = data;
    2994:	00f52023          	sw	a5,0(a0)
    }
    2998:	00008067          	ret

0000299c <plic_set_threshold>:
    
    static void plic_set_threshold(u32 plic, u32 target, u32 threshold){
        write_u32(threshold, plic + PLIC_THRESHOLD_BASE + target*PLIC_CONTEXT_PER_HART);
    299c:	00c59593          	slli	a1,a1,0xc
    29a0:	00a585b3          	add	a1,a1,a0
    29a4:	00200537          	lui	a0,0x200
    29a8:	00a585b3          	add	a1,a1,a0
    29ac:	00c5a023          	sw	a2,0(a1) # 2000 <_strtol_l.isra.0+0xd8>
    }
    29b0:	00008067          	ret

000029b4 <plic_claim>:
    static u32 plic_get_threshold(u32 plic, u32 target){
        return read_u32(plic + PLIC_THRESHOLD_BASE + target*PLIC_CONTEXT_PER_HART);
    }
    
    static u32 plic_claim(u32 plic, u32 target){
        return read_u32(plic + PLIC_CLAIM_BASE + target*PLIC_CONTEXT_PER_HART);
    29b4:	00c59593          	slli	a1,a1,0xc
    29b8:	00a585b3          	add	a1,a1,a0
    29bc:	00200537          	lui	a0,0x200
    29c0:	00450513          	addi	a0,a0,4 # 200004 <__freertos_irq_stack_top+0x1db0d4>
    29c4:	00a585b3          	add	a1,a1,a0
        return *((volatile u32*) address);
    29c8:	0005a503          	lw	a0,0(a1)
    }
    29cc:	00008067          	ret

000029d0 <plic_release>:
    
    static void plic_release(u32 plic, u32 target, u32 gateway){
        write_u32(gateway,plic + PLIC_CLAIM_BASE + target*PLIC_CONTEXT_PER_HART);
    29d0:	00c59593          	slli	a1,a1,0xc
    29d4:	00a585b3          	add	a1,a1,a0
    29d8:	00200537          	lui	a0,0x200
    29dc:	00450513          	addi	a0,a0,4 # 200004 <__freertos_irq_stack_top+0x1db0d4>
    29e0:	00a585b3          	add	a1,a1,a0
        *((volatile u32*) address) = data;
    29e4:	00c5a023          	sw	a2,0(a1)
    }
    29e8:	00008067          	ret

000029ec <clock_sel>:
    bsp_printf("\n*** CRASH ***\n");
    while(1){}
}

static void clock_sel(int speed) {
    int v=(speed==Speed_1000Mhz)?0x03:0x00;
    29ec:	00400793          	li	a5,4
    29f0:	00f50a63          	beq	a0,a5,2a04 <clock_sel+0x18>
    29f4:	00000713          	li	a4,0
    29f8:	f81207b7          	lui	a5,0xf8120
    29fc:	00e7a023          	sw	a4,0(a5) # f8120000 <__freertos_irq_stack_top+0xf80fb0d0>
    write_u32(v,IO_APB_SLAVE_2_APB);
}
    2a00:	00008067          	ret
    int v=(speed==Speed_1000Mhz)?0x03:0x00;
    2a04:	00300713          	li	a4,3
    2a08:	ff1ff06f          	j	29f8 <clock_sel+0xc>

00002a0c <bsp_printf>:

    static void bsp_printf(const char *format, ...)
    {
    2a0c:	fc010113          	addi	sp,sp,-64
    2a10:	00112e23          	sw	ra,28(sp)
    2a14:	00812c23          	sw	s0,24(sp)
    2a18:	00912a23          	sw	s1,20(sp)
    2a1c:	00050493          	mv	s1,a0
    2a20:	02b12223          	sw	a1,36(sp)
    2a24:	02c12423          	sw	a2,40(sp)
    2a28:	02d12623          	sw	a3,44(sp)
    2a2c:	02e12823          	sw	a4,48(sp)
    2a30:	02f12a23          	sw	a5,52(sp)
    2a34:	03012c23          	sw	a6,56(sp)
    2a38:	03112e23          	sw	a7,60(sp)
        int i;
        va_list ap;
    
        va_start(ap, format);
    2a3c:	02410793          	addi	a5,sp,36
    2a40:	00f12623          	sw	a5,12(sp)
    
        for (i = 0; format[i]; i++)
    2a44:	00000413          	li	s0,0
    2a48:	01c0006f          	j	2a64 <bsp_printf+0x58>
            if (format[i] == '%') {
                while (format[++i]) {
                    if (format[i] == 'c') {
                        bsp_printf_c(va_arg(ap,int));
    2a4c:	00c12783          	lw	a5,12(sp)
    2a50:	00478713          	addi	a4,a5,4
    2a54:	00e12623          	sw	a4,12(sp)
    2a58:	0007a503          	lw	a0,0(a5)
    2a5c:	d75ff0ef          	jal	ra,27d0 <bsp_printf_c>
        for (i = 0; format[i]; i++)
    2a60:	00140413          	addi	s0,s0,1
    2a64:	008487b3          	add	a5,s1,s0
    2a68:	0007c503          	lbu	a0,0(a5)
    2a6c:	0c050263          	beqz	a0,2b30 <bsp_printf+0x124>
            if (format[i] == '%') {
    2a70:	02500793          	li	a5,37
    2a74:	06f50663          	beq	a0,a5,2ae0 <bsp_printf+0xd4>
                        break;
                    }
#endif //#if (ENABLE_FLOATING_POINT_SUPPORT)
                }
            } else
                bsp_printf_c(format[i]);
    2a78:	d59ff0ef          	jal	ra,27d0 <bsp_printf_c>
    2a7c:	fe5ff06f          	j	2a60 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    2a80:	00c12783          	lw	a5,12(sp)
    2a84:	00478713          	addi	a4,a5,4
    2a88:	00e12623          	sw	a4,12(sp)
    2a8c:	0007a503          	lw	a0,0(a5)
    2a90:	d61ff0ef          	jal	ra,27f0 <bsp_printf_s>
                        break;
    2a94:	fcdff06f          	j	2a60 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    2a98:	00c12783          	lw	a5,12(sp)
    2a9c:	00478713          	addi	a4,a5,4
    2aa0:	00e12623          	sw	a4,12(sp)
    2aa4:	0007a503          	lw	a0,0(a5)
    2aa8:	d81ff0ef          	jal	ra,2828 <bsp_printf_d>
                        break;
    2aac:	fb5ff06f          	j	2a60 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    2ab0:	00c12783          	lw	a5,12(sp)
    2ab4:	00478713          	addi	a4,a5,4
    2ab8:	00e12623          	sw	a4,12(sp)
    2abc:	0007a503          	lw	a0,0(a5)
    2ac0:	e29ff0ef          	jal	ra,28e8 <bsp_printf_X>
                        break;
    2ac4:	f9dff06f          	j	2a60 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    2ac8:	00c12783          	lw	a5,12(sp)
    2acc:	00478713          	addi	a4,a5,4
    2ad0:	00e12623          	sw	a4,12(sp)
    2ad4:	0007a503          	lw	a0,0(a5)
    2ad8:	dd1ff0ef          	jal	ra,28a8 <bsp_printf_x>
                        break;
    2adc:	f85ff06f          	j	2a60 <bsp_printf+0x54>
                while (format[++i]) {
    2ae0:	00140413          	addi	s0,s0,1
    2ae4:	008487b3          	add	a5,s1,s0
    2ae8:	0007c783          	lbu	a5,0(a5)
    2aec:	f6078ae3          	beqz	a5,2a60 <bsp_printf+0x54>
                    if (format[i] == 'c') {
    2af0:	06300713          	li	a4,99
    2af4:	f4e78ce3          	beq	a5,a4,2a4c <bsp_printf+0x40>
                    else if (format[i] == 's') {
    2af8:	07300713          	li	a4,115
    2afc:	f8e782e3          	beq	a5,a4,2a80 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    2b00:	06400713          	li	a4,100
    2b04:	f8e78ae3          	beq	a5,a4,2a98 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    2b08:	05800713          	li	a4,88
    2b0c:	fae782e3          	beq	a5,a4,2ab0 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    2b10:	07800713          	li	a4,120
    2b14:	fae78ae3          	beq	a5,a4,2ac8 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    2b18:	06600713          	li	a4,102
    2b1c:	fce792e3          	bne	a5,a4,2ae0 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    2b20:	0001c537          	lui	a0,0x1c
    2b24:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    2b28:	cc9ff0ef          	jal	ra,27f0 <bsp_printf_s>
                        break;
    2b2c:	f35ff06f          	j	2a60 <bsp_printf+0x54>
    
        va_end(ap);
    }
    2b30:	01c12083          	lw	ra,28(sp)
    2b34:	01812403          	lw	s0,24(sp)
    2b38:	01412483          	lw	s1,20(sp)
    2b3c:	04010113          	addi	sp,sp,64
    2b40:	00008067          	ret

00002b44 <LwIP_Init>:
static void LwIP_Init(void) {
    2b44:	fe010113          	addi	sp,sp,-32
    2b48:	00112e23          	sw	ra,28(sp)
    2b4c:	00812c23          	sw	s0,24(sp)
    2b50:	00912a23          	sw	s1,20(sp)
    2b54:	01212823          	sw	s2,16(sp)
    2b58:	01312623          	sw	s3,12(sp)
    2b5c:	01412423          	sw	s4,8(sp)
    IP4_ADDR(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
    2b60:	371fb7b7          	lui	a5,0x371fb
    2b64:	8c078793          	addi	a5,a5,-1856 # 371fa8c0 <__freertos_irq_stack_top+0x371d5990>
    2b68:	90f1a023          	sw	a5,-1792(gp) # 1fad0 <ipaddr>
    IP4_ADDR(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
    2b6c:	010007b7          	lui	a5,0x1000
    2b70:	fff78793          	addi	a5,a5,-1 # ffffff <__freertos_irq_stack_top+0xfdb0cf>
    2b74:	8ef1ae23          	sw	a5,-1796(gp) # 1facc <netmask>
    IP4_ADDR(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
    2b78:	011fb7b7          	lui	a5,0x11fb
    2b7c:	8c078793          	addi	a5,a5,-1856 # 11fa8c0 <__freertos_irq_stack_top+0x11d5990>
    2b80:	8ef1ac23          	sw	a5,-1800(gp) # 1fac8 <gw>
    lwip_init();
    2b84:	195110ef          	jal	ra,14518 <lwip_init>
    netif_add(&gnetif,&ipaddr,&netmask,&gw,NULL,ethernetif_init,sniff_input);
    2b88:	98018a13          	addi	s4,gp,-1664 # 1fb50 <gnetif>
    2b8c:	00003837          	lui	a6,0x3
    2b90:	f1c80813          	addi	a6,a6,-228 # 2f1c <sniff_input>
    2b94:	000067b7          	lui	a5,0x6
    2b98:	f6078793          	addi	a5,a5,-160 # 5f60 <ethernetif_init>
    2b9c:	00000713          	li	a4,0
    2ba0:	8f818693          	addi	a3,gp,-1800 # 1fac8 <gw>
    2ba4:	8fc18613          	addi	a2,gp,-1796 # 1facc <netmask>
    2ba8:	90018593          	addi	a1,gp,-1792 # 1fad0 <ipaddr>
    2bac:	98018513          	addi	a0,gp,-1664 # 1fb50 <gnetif>
    2bb0:	39c090ef          	jal	ra,bf4c <netif_add>
    netif_set_default(&gnetif);
    2bb4:	98018513          	addi	a0,gp,-1664 # 1fb50 <gnetif>
    2bb8:	369080ef          	jal	ra,b720 <netif_set_default>
    if(netif_is_link_up(&gnetif)) netif_set_up(&gnetif);
    2bbc:	035a4783          	lbu	a5,53(s4)
    2bc0:	0027d793          	srli	a5,a5,0x2
    2bc4:	0017f793          	andi	a5,a5,1
    2bc8:	06078663          	beqz	a5,2c34 <LwIP_Init+0xf0>
    2bcc:	98018513          	addi	a0,gp,-1664 # 1fb50 <gnetif>
    2bd0:	554090ef          	jal	ra,c124 <netif_set_up>
    icmp_pcb = raw_new(IP_PROTO_ICMP);
    2bd4:	00100513          	li	a0,1
    2bd8:	53c0e0ef          	jal	ra,11114 <raw_new>
    2bdc:	8ea1aa23          	sw	a0,-1804(gp) # 1fac4 <icmp_pcb>
    raw_recv(icmp_pcb,icmp_recv_cb,NULL);
    2be0:	00000613          	li	a2,0
    2be4:	000035b7          	lui	a1,0x3
    2be8:	c9058593          	addi	a1,a1,-880 # 2c90 <icmp_recv_cb>
    2bec:	2100e0ef          	jal	ra,10dfc <raw_recv>
    raw_bind(icmp_pcb,IP_ADDR_ANY);
    2bf0:	8ac18593          	addi	a1,gp,-1876 # 1fa7c <ip_addr_any>
    2bf4:	8f41a503          	lw	a0,-1804(gp) # 1fac4 <icmp_pcb>
    2bf8:	1740e0ef          	jal	ra,10d6c <raw_bind>
    sys_timeout(5000,reset_flow_stats,NULL);
    2bfc:	00000613          	li	a2,0
    2c00:	000035b7          	lui	a1,0x3
    2c04:	c4058593          	addi	a1,a1,-960 # 2c40 <reset_flow_stats>
    2c08:	00001537          	lui	a0,0x1
    2c0c:	38850513          	addi	a0,a0,904 # 1388 <_malloc_r+0x254>
    2c10:	2750e0ef          	jal	ra,11684 <sys_timeout>
}
    2c14:	01c12083          	lw	ra,28(sp)
    2c18:	01812403          	lw	s0,24(sp)
    2c1c:	01412483          	lw	s1,20(sp)
    2c20:	01012903          	lw	s2,16(sp)
    2c24:	00c12983          	lw	s3,12(sp)
    2c28:	00812a03          	lw	s4,8(sp)
    2c2c:	02010113          	addi	sp,sp,32
    2c30:	00008067          	ret
    else                           netif_set_down(&gnetif);
    2c34:	98018513          	addi	a0,gp,-1664 # 1fb50 <gnetif>
    2c38:	558090ef          	jal	ra,c190 <netif_set_down>
    2c3c:	f99ff06f          	j	2bd4 <LwIP_Init+0x90>

00002c40 <reset_flow_stats>:
static void reset_flow_stats(void *arg) {
    2c40:	ff010113          	addi	sp,sp,-16
    2c44:	00112623          	sw	ra,12(sp)
    2c48:	00812423          	sw	s0,8(sp)
    struct flow_stats *f = flow_head;
    2c4c:	8f01a503          	lw	a0,-1808(gp) # 1fac0 <flow_head>
    while (f) {
    2c50:	00050a63          	beqz	a0,2c64 <reset_flow_stats+0x24>
        struct flow_stats *n = f->next;
    2c54:	01852403          	lw	s0,24(a0)
        free(f);
    2c58:	cccfe0ef          	jal	ra,1124 <free>
        f = n;
    2c5c:	00040513          	mv	a0,s0
    2c60:	ff1ff06f          	j	2c50 <reset_flow_stats+0x10>
    flow_head = NULL;
    2c64:	8e01a823          	sw	zero,-1808(gp) # 1fac0 <flow_head>
    sys_timeout(5000, reset_flow_stats, NULL);
    2c68:	00000613          	li	a2,0
    2c6c:	000035b7          	lui	a1,0x3
    2c70:	c4058593          	addi	a1,a1,-960 # 2c40 <reset_flow_stats>
    2c74:	00001537          	lui	a0,0x1
    2c78:	38850513          	addi	a0,a0,904 # 1388 <_malloc_r+0x254>
    2c7c:	2090e0ef          	jal	ra,11684 <sys_timeout>
}
    2c80:	00c12083          	lw	ra,12(sp)
    2c84:	00812403          	lw	s0,8(sp)
    2c88:	01010113          	addi	sp,sp,16
    2c8c:	00008067          	ret

00002c90 <icmp_recv_cb>:
{
    2c90:	ff010113          	addi	sp,sp,-16
    2c94:	00112623          	sw	ra,12(sp)
    2c98:	00812423          	sw	s0,8(sp)
    2c9c:	00912223          	sw	s1,4(sp)
    2ca0:	01212023          	sw	s2,0(sp)
    2ca4:	00060493          	mv	s1,a2
    2ca8:	00068913          	mv	s2,a3
    struct ip_hdr *iph = (struct ip_hdr *)p->payload;
    2cac:	00462783          	lw	a5,4(a2)
        ((u8_t*)p->payload + (IPH_HL(iph)*4));
    2cb0:	0007c403          	lbu	s0,0(a5)
    2cb4:	00f47413          	andi	s0,s0,15
    2cb8:	00241413          	slli	s0,s0,0x2
    struct icmp_echo_hdr *ie = (struct icmp_echo_hdr *)
    2cbc:	00878433          	add	s0,a5,s0
    if (ie->type==ICMP_ECHO) {
    2cc0:	00044683          	lbu	a3,0(s0)
    2cc4:	00800713          	li	a4,8
    2cc8:	02e68463          	beq	a3,a4,2cf0 <icmp_recv_cb+0x60>
    pbuf_free(p);
    2ccc:	00048513          	mv	a0,s1
    2cd0:	681090ef          	jal	ra,cb50 <pbuf_free>
}
    2cd4:	00100513          	li	a0,1
    2cd8:	00c12083          	lw	ra,12(sp)
    2cdc:	00812403          	lw	s0,8(sp)
    2ce0:	00412483          	lw	s1,4(sp)
    2ce4:	00012903          	lw	s2,0(sp)
    2ce8:	01010113          	addi	sp,sp,16
    2cec:	00008067          	ret
        ie->type = ICMP_ER;
    2cf0:	00040023          	sb	zero,0(s0)
        ie->chksum=0;
    2cf4:	00040123          	sb	zero,2(s0)
    2cf8:	000401a3          	sb	zero,3(s0)
        ie->chksum=inet_chksum(ie,p->tot_len-(IPH_HL(iph)*4));
    2cfc:	00865703          	lhu	a4,8(a2)
    2d00:	0007c583          	lbu	a1,0(a5)
    2d04:	00f5f593          	andi	a1,a1,15
    2d08:	0ff5f593          	andi	a1,a1,255
    2d0c:	00259593          	slli	a1,a1,0x2
    2d10:	40b705b3          	sub	a1,a4,a1
    2d14:	01059593          	slli	a1,a1,0x10
    2d18:	0105d593          	srli	a1,a1,0x10
    2d1c:	00040513          	mv	a0,s0
    2d20:	7a9110ef          	jal	ra,14cc8 <inet_chksum>
    2d24:	00a40123          	sb	a0,2(s0)
    2d28:	00855513          	srli	a0,a0,0x8
    2d2c:	00a401a3          	sb	a0,3(s0)
        raw_sendto(icmp_pcb,p,addr);
    2d30:	00090613          	mv	a2,s2
    2d34:	00048593          	mv	a1,s1
    2d38:	8f41a503          	lw	a0,-1804(gp) # 1fac4 <icmp_pcb>
    2d3c:	29c0e0ef          	jal	ra,10fd8 <raw_sendto>
    2d40:	f8dff06f          	j	2ccc <icmp_recv_cb+0x3c>

00002d44 <eml_mahalanobis_distance_squared>:
* \param n_features Length of the input values arrays
*/
float
eml_mahalanobis_distance_squared(const float *x1, const float *x2,
                const float *precision, int n_features)
{
    2d44:	fd010113          	addi	sp,sp,-48
    2d48:	02112623          	sw	ra,44(sp)
    2d4c:	02812423          	sw	s0,40(sp)
    2d50:	02912223          	sw	s1,36(sp)
    2d54:	03212023          	sw	s2,32(sp)
    2d58:	01312e23          	sw	s3,28(sp)
    2d5c:	01412c23          	sw	s4,24(sp)
    2d60:	01512a23          	sw	s5,20(sp)
    2d64:	01612823          	sw	s6,16(sp)
    2d68:	01712623          	sw	s7,12(sp)
    2d6c:	01812423          	sw	s8,8(sp)
    2d70:	00050a93          	mv	s5,a0
    2d74:	00058a13          	mv	s4,a1
    2d78:	00060b13          	mv	s6,a2
    2d7c:	00068493          	mv	s1,a3
    float distance = 0.0;

    for (int i=0; i<n_features; i++) {
    2d80:	00000993          	li	s3,0
    float distance = 0.0;
    2d84:	00000b93          	li	s7,0
    for (int i=0; i<n_features; i++) {
    2d88:	0380006f          	j	2dc0 <eml_mahalanobis_distance_squared+0x7c>
        float accumulate = 0.0f;
        for (int j=0; j<n_features; j++) {
            accumulate += (precision[j*n_features+i] * (x1[j] - x2[j]));
        }
        distance += (accumulate * (x1[i] - x2[i]));
    2d8c:	00299793          	slli	a5,s3,0x2
    2d90:	00fa8733          	add	a4,s5,a5
    2d94:	00fa07b3          	add	a5,s4,a5
    2d98:	0007a583          	lw	a1,0(a5)
    2d9c:	00072503          	lw	a0,0(a4)
    2da0:	068190ef          	jal	ra,1be08 <__subsf3>
    2da4:	00090593          	mv	a1,s2
    2da8:	4dd180ef          	jal	ra,1ba84 <__mulsf3>
    2dac:	00050593          	mv	a1,a0
    2db0:	000b8513          	mv	a0,s7
    2db4:	6e4180ef          	jal	ra,1b498 <__addsf3>
    2db8:	00050b93          	mv	s7,a0
    for (int i=0; i<n_features; i++) {
    2dbc:	00198993          	addi	s3,s3,1
    2dc0:	0699d063          	bge	s3,s1,2e20 <eml_mahalanobis_distance_squared+0xdc>
        for (int j=0; j<n_features; j++) {
    2dc4:	00000413          	li	s0,0
        float accumulate = 0.0f;
    2dc8:	00000913          	li	s2,0
        for (int j=0; j<n_features; j++) {
    2dcc:	fc9450e3          	bge	s0,s1,2d8c <eml_mahalanobis_distance_squared+0x48>
            accumulate += (precision[j*n_features+i] * (x1[j] - x2[j]));
    2dd0:	029407b3          	mul	a5,s0,s1
    2dd4:	013787b3          	add	a5,a5,s3
    2dd8:	00279793          	slli	a5,a5,0x2
    2ddc:	00fb07b3          	add	a5,s6,a5
    2de0:	0007ac03          	lw	s8,0(a5)
    2de4:	00241793          	slli	a5,s0,0x2
    2de8:	00fa8733          	add	a4,s5,a5
    2dec:	00fa07b3          	add	a5,s4,a5
    2df0:	0007a583          	lw	a1,0(a5)
    2df4:	00072503          	lw	a0,0(a4)
    2df8:	010190ef          	jal	ra,1be08 <__subsf3>
    2dfc:	00050593          	mv	a1,a0
    2e00:	000c0513          	mv	a0,s8
    2e04:	481180ef          	jal	ra,1ba84 <__mulsf3>
    2e08:	00050593          	mv	a1,a0
    2e0c:	00090513          	mv	a0,s2
    2e10:	688180ef          	jal	ra,1b498 <__addsf3>
    2e14:	00050913          	mv	s2,a0
        for (int j=0; j<n_features; j++) {
    2e18:	00140413          	addi	s0,s0,1
    2e1c:	fb1ff06f          	j	2dcc <eml_mahalanobis_distance_squared+0x88>
    }

    return distance;
}
    2e20:	000b8513          	mv	a0,s7
    2e24:	02c12083          	lw	ra,44(sp)
    2e28:	02812403          	lw	s0,40(sp)
    2e2c:	02412483          	lw	s1,36(sp)
    2e30:	02012903          	lw	s2,32(sp)
    2e34:	01c12983          	lw	s3,28(sp)
    2e38:	01812a03          	lw	s4,24(sp)
    2e3c:	01412a83          	lw	s5,20(sp)
    2e40:	01012b03          	lw	s6,16(sp)
    2e44:	00c12b83          	lw	s7,12(sp)
    2e48:	00812c03          	lw	s8,8(sp)
    2e4c:	03010113          	addi	sp,sp,48
    2e50:	00008067          	ret

00002e54 <eml_elliptic_envelope_predict>:
int
eml_elliptic_envelope_predict(const EmlEllipticEnvelope *self,
                            const float *features, int n_features,
                            float *out_dist)
{
    EML_PRECONDITION(n_features == self->n_features, EmlSizeMismatch);
    2e54:	00052783          	lw	a5,0(a0)
    2e58:	08c79263          	bne	a5,a2,2edc <eml_elliptic_envelope_predict+0x88>
{
    2e5c:	ff010113          	addi	sp,sp,-16
    2e60:	00112623          	sw	ra,12(sp)
    2e64:	00812423          	sw	s0,8(sp)
    2e68:	00912223          	sw	s1,4(sp)
    2e6c:	01212023          	sw	s2,0(sp)
    2e70:	00068493          	mv	s1,a3
    2e74:	00060693          	mv	a3,a2
    2e78:	00058793          	mv	a5,a1
    2e7c:	00050413          	mv	s0,a0

    const float dist = \
        eml_mahalanobis_distance_squared(features, self->means, self->precision, n_features);
    2e80:	00c52603          	lw	a2,12(a0)
    2e84:	00852583          	lw	a1,8(a0)
    2e88:	00078513          	mv	a0,a5
    2e8c:	eb9ff0ef          	jal	ra,2d44 <eml_mahalanobis_distance_squared>
    2e90:	00050913          	mv	s2,a0
    const float dist_from_boundary = (-dist) - self->decision_boundary;
    2e94:	00442583          	lw	a1,4(s0)
    2e98:	80000537          	lui	a0,0x80000
    2e9c:	01254533          	xor	a0,a0,s2
    2ea0:	769180ef          	jal	ra,1be08 <__subsf3>

    const int outlier = (dist_from_boundary < 0 ) ? 1 : 0;
    2ea4:	00100413          	li	s0,1
    2ea8:	00000593          	li	a1,0
    2eac:	315180ef          	jal	ra,1b9c0 <__lesf2>
    2eb0:	00054463          	bltz	a0,2eb8 <eml_elliptic_envelope_predict+0x64>
    2eb4:	00000413          	li	s0,0
    2eb8:	0ff47513          	andi	a0,s0,255

    if (out_dist) {
    2ebc:	00048463          	beqz	s1,2ec4 <eml_elliptic_envelope_predict+0x70>
        //*out_dist = dist_from_boundary;
        *out_dist = dist;
    2ec0:	0124a023          	sw	s2,0(s1)
    }

    return outlier;
}
    2ec4:	00c12083          	lw	ra,12(sp)
    2ec8:	00812403          	lw	s0,8(sp)
    2ecc:	00412483          	lw	s1,4(sp)
    2ed0:	00012903          	lw	s2,0(sp)
    2ed4:	01010113          	addi	sp,sp,16
    2ed8:	00008067          	ret
    EML_PRECONDITION(n_features == self->n_features, EmlSizeMismatch);
    2edc:	00100513          	li	a0,1
}
    2ee0:	00008067          	ret

00002ee4 <packet_anomaly_detector_predict>:
        packet_anomaly_detector_means,
        packet_anomaly_detector_precisions
    };

    // Prediction function
    float packet_anomaly_detector_predict(const float *features, int n_features) {
    2ee4:	fe010113          	addi	sp,sp,-32
    2ee8:	00112e23          	sw	ra,28(sp)
        float dist = 0.0;
    2eec:	00000793          	li	a5,0
    2ef0:	00f12623          	sw	a5,12(sp)
        const int class = eml_elliptic_envelope_predict(&packet_anomaly_detector_classifier,
    2ef4:	00c10693          	addi	a3,sp,12
    2ef8:	00058613          	mv	a2,a1
    2efc:	00050593          	mv	a1,a0
    2f00:	0001c537          	lui	a0,0x1c
    2f04:	48050513          	addi	a0,a0,1152 # 1c480 <packet_anomaly_detector_classifier>
    2f08:	f4dff0ef          	jal	ra,2e54 <eml_elliptic_envelope_predict>
                                features, n_features, &dist);
        return dist; 
    }
    2f0c:	00c12503          	lw	a0,12(sp)
    2f10:	01c12083          	lw	ra,28(sp)
    2f14:	02010113          	addi	sp,sp,32
    2f18:	00008067          	ret

00002f1c <sniff_input>:
static err_t sniff_input(struct pbuf *p, struct netif *netif) {
    2f1c:	fb010113          	addi	sp,sp,-80
    2f20:	04112623          	sw	ra,76(sp)
    2f24:	04812423          	sw	s0,72(sp)
    2f28:	04912223          	sw	s1,68(sp)
    2f2c:	05212023          	sw	s2,64(sp)
    2f30:	03312e23          	sw	s3,60(sp)
    2f34:	03412c23          	sw	s4,56(sp)
    2f38:	03512a23          	sw	s5,52(sp)
    2f3c:	03612823          	sw	s6,48(sp)
    2f40:	03712623          	sw	s7,44(sp)
    2f44:	00050493          	mv	s1,a0
    2f48:	00058a13          	mv	s4,a1
    const struct eth_hdr *eth = (const struct eth_hdr *)p->payload;
    2f4c:	00452783          	lw	a5,4(a0)
    u16_t etype = lwip_ntohs(eth->type);
    2f50:	00c7c503          	lbu	a0,12(a5)
    2f54:	00d7c783          	lbu	a5,13(a5)
    2f58:	00879793          	slli	a5,a5,0x8
    2f5c:	00a7e533          	or	a0,a5,a0
    2f60:	518070ef          	jal	ra,a478 <lwip_htons>
    if (etype == ETHTYPE_ARP ||
    2f64:	80050513          	addi	a0,a0,-2048
    2f68:	0a051263          	bnez	a0,300c <sniff_input+0xf0>
        p->tot_len < SIZEOF_ETH_HDR + sizeof(struct ip_hdr)) {
    2f6c:	0084d703          	lhu	a4,8(s1)
        etype != ETHTYPE_IP ||
    2f70:	02100793          	li	a5,33
    2f74:	08e7fc63          	bgeu	a5,a4,300c <sniff_input+0xf0>
    const struct ip_hdr *iph = (const struct ip_hdr *)((u8_t*)p->payload + SIZEOF_ETH_HDR);
    2f78:	0044a783          	lw	a5,4(s1)
    2f7c:	00e78b13          	addi	s6,a5,14
    u8_t proto = IPH_PROTO(iph);
    2f80:	0177ca83          	lbu	s5,23(a5)
    u16_t ihl   = IPH_HL_BYTES(iph);
    2f84:	00e7c903          	lbu	s2,14(a5)
    2f88:	00f97913          	andi	s2,s2,15
    2f8c:	00291913          	slli	s2,s2,0x2
    if (proto == PROTO_ICMP) {
    2f90:	00100713          	li	a4,1
    2f94:	0aea8e63          	beq	s5,a4,3050 <sniff_input+0x134>
    if (proto == PROTO_UDP) {
    2f98:	01100713          	li	a4,17
    2f9c:	0cea8663          	beq	s5,a4,3068 <sniff_input+0x14c>
    if (proto==PROTO_TCP) {
    2fa0:	00600793          	li	a5,6
    2fa4:	10fa8a63          	beq	s5,a5,30b8 <sniff_input+0x19c>
        const struct udp_hdr *udph = (const struct udp_hdr *)((u8_t*)iph + ihl);
    2fa8:	012b0433          	add	s0,s6,s2
        sport = lwip_ntohs(udph->src);
    2fac:	00044503          	lbu	a0,0(s0)
    2fb0:	00144783          	lbu	a5,1(s0)
    2fb4:	00879793          	slli	a5,a5,0x8
    2fb8:	00a7e533          	or	a0,a5,a0
    2fbc:	4bc070ef          	jal	ra,a478 <lwip_htons>
    2fc0:	00050993          	mv	s3,a0
        dport = lwip_ntohs(udph->dest);
    2fc4:	00244503          	lbu	a0,2(s0)
    2fc8:	00344783          	lbu	a5,3(s0)
    2fcc:	00879793          	slli	a5,a5,0x8
    2fd0:	00a7e533          	or	a0,a5,a0
    2fd4:	4a4070ef          	jal	ra,a478 <lwip_htons>
    2fd8:	00050b93          	mv	s7,a0
    if (sport==IPERF_PORT || dport==IPERF_PORT) {
    2fdc:	000017b7          	lui	a5,0x1
    2fe0:	38978793          	addi	a5,a5,905 # 1389 <_malloc_r+0x255>
    2fe4:	1ef98863          	beq	s3,a5,31d4 <sniff_input+0x2b8>
    2fe8:	000017b7          	lui	a5,0x1
    2fec:	38978793          	addi	a5,a5,905 # 1389 <_malloc_r+0x255>
    2ff0:	1efb8663          	beq	s7,a5,31dc <sniff_input+0x2c0>
    err_t ret = ethernet_input(p, netif);
    2ff4:	000a0593          	mv	a1,s4
    2ff8:	00048513          	mv	a0,s1
    2ffc:	1e1030ef          	jal	ra,69dc <ethernet_input>
    3000:	00050413          	mv	s0,a0
    sys_check_timeouts();
    3004:	0450e0ef          	jal	ra,11848 <sys_check_timeouts>
    return ret;
    3008:	0180006f          	j	3020 <sniff_input+0x104>
        err_t r = ethernet_input(p, netif);
    300c:	000a0593          	mv	a1,s4
    3010:	00048513          	mv	a0,s1
    3014:	1c9030ef          	jal	ra,69dc <ethernet_input>
    3018:	00050413          	mv	s0,a0
        sys_check_timeouts();
    301c:	02d0e0ef          	jal	ra,11848 <sys_check_timeouts>
}
    3020:	00040513          	mv	a0,s0
    3024:	04c12083          	lw	ra,76(sp)
    3028:	04812403          	lw	s0,72(sp)
    302c:	04412483          	lw	s1,68(sp)
    3030:	04012903          	lw	s2,64(sp)
    3034:	03c12983          	lw	s3,60(sp)
    3038:	03812a03          	lw	s4,56(sp)
    303c:	03412a83          	lw	s5,52(sp)
    3040:	03012b03          	lw	s6,48(sp)
    3044:	02c12b83          	lw	s7,44(sp)
    3048:	05010113          	addi	sp,sp,80
    304c:	00008067          	ret
        err_t r = ethernet_input(p, netif);
    3050:	000a0593          	mv	a1,s4
    3054:	00048513          	mv	a0,s1
    3058:	185030ef          	jal	ra,69dc <ethernet_input>
    305c:	00050413          	mv	s0,a0
        sys_check_timeouts();
    3060:	7e80e0ef          	jal	ra,11848 <sys_check_timeouts>
        return r;
    3064:	fbdff06f          	j	3020 <sniff_input+0x104>
        const struct udp_hdr *udph = (const struct udp_hdr *)((u8_t*)iph + ihl);
    3068:	012b0633          	add	a2,s6,s2
        if (ip4_addr3(&iph->dest)==224 && ip4_addr4(&iph->dest)==251 &&
    306c:	0207c683          	lbu	a3,32(a5)
    3070:	0e000713          	li	a4,224
    3074:	f2e696e3          	bne	a3,a4,2fa0 <sniff_input+0x84>
    3078:	0217c703          	lbu	a4,33(a5)
    307c:	0fb00793          	li	a5,251
    3080:	f2f710e3          	bne	a4,a5,2fa0 <sniff_input+0x84>
            lwip_ntohs(udph->dest)==5353) {
    3084:	00264503          	lbu	a0,2(a2)
    3088:	00364783          	lbu	a5,3(a2)
    308c:	00879793          	slli	a5,a5,0x8
    3090:	00a7e533          	or	a0,a5,a0
    3094:	3e4070ef          	jal	ra,a478 <lwip_htons>
        if (ip4_addr3(&iph->dest)==224 && ip4_addr4(&iph->dest)==251 &&
    3098:	000017b7          	lui	a5,0x1
    309c:	4e978793          	addi	a5,a5,1257 # 14e9 <_malloc_r+0x3b5>
    30a0:	f0f510e3          	bne	a0,a5,2fa0 <sniff_input+0x84>
            pbuf_free(p);
    30a4:	00048513          	mv	a0,s1
    30a8:	2a9090ef          	jal	ra,cb50 <pbuf_free>
            sys_check_timeouts();
    30ac:	79c0e0ef          	jal	ra,11848 <sys_check_timeouts>
            return ERR_OK;
    30b0:	00000413          	li	s0,0
    30b4:	f6dff06f          	j	3020 <sniff_input+0x104>
        const struct tcp_hdr *tcph = (const struct tcp_hdr *)((u8_t*)iph + ihl);
    30b8:	012b0433          	add	s0,s6,s2
        sport = lwip_ntohs(tcph->src);
    30bc:	00044503          	lbu	a0,0(s0)
    30c0:	00144783          	lbu	a5,1(s0)
    30c4:	00879793          	slli	a5,a5,0x8
    30c8:	00a7e533          	or	a0,a5,a0
    30cc:	3ac070ef          	jal	ra,a478 <lwip_htons>
    30d0:	00050993          	mv	s3,a0
        dport = lwip_ntohs(tcph->dest);
    30d4:	00244503          	lbu	a0,2(s0)
    30d8:	00344783          	lbu	a5,3(s0)
    30dc:	00879793          	slli	a5,a5,0x8
    30e0:	00a7e533          	or	a0,a5,a0
    30e4:	394070ef          	jal	ra,a478 <lwip_htons>
    30e8:	00050b93          	mv	s7,a0
    30ec:	ef1ff06f          	j	2fdc <sniff_input+0xc0>
        while (*pp && (*pp)->sport!=sport) pp=&(*pp)->next;
    30f0:	01878413          	addi	s0,a5,24
    30f4:	00042783          	lw	a5,0(s0)
    30f8:	00078663          	beqz	a5,3104 <sniff_input+0x1e8>
    30fc:	0007d703          	lhu	a4,0(a5)
    3100:	ff3718e3          	bne	a4,s3,30f0 <sniff_input+0x1d4>
        if (!*pp) {
    3104:	0e078063          	beqz	a5,31e4 <sniff_input+0x2c8>
        struct flow_stats *f = *pp;
    3108:	00042983          	lw	s3,0(s0)
        if (f) {
    310c:	ee0984e3          	beqz	s3,2ff4 <sniff_input+0xd8>
            if (proto==PROTO_TCP) {
    3110:	00600793          	li	a5,6
    3114:	10fa8c63          	beq	s5,a5,322c <sniff_input+0x310>
                f->tot_pkts++;
    3118:	0049a903          	lw	s2,4(s3)
    311c:	00190913          	addi	s2,s2,1
    3120:	0129a223          	sw	s2,4(s3)
                f->tot_bytes  += p->tot_len;
    3124:	0084d403          	lhu	s0,8(s1)
    3128:	0089a783          	lw	a5,8(s3)
    312c:	00f40433          	add	s0,s0,a5
    3130:	0089a423          	sw	s0,8(s3)
                if (dport==IPERF_PORT) {
    3134:	000017b7          	lui	a5,0x1
    3138:	38978793          	addi	a5,a5,905 # 1389 <_malloc_r+0x255>
    313c:	1afb8863          	beq	s7,a5,32ec <sniff_input+0x3d0>
                    f->dst_pkts++;
    3140:	0109a783          	lw	a5,16(s3)
    3144:	00178793          	addi	a5,a5,1
    3148:	00f9a823          	sw	a5,16(s3)
                    (float)f->sport, (float)f->tot_pkts, (float)f->tot_bytes,
    314c:	0009d503          	lhu	a0,0(s3)
    3150:	13c190ef          	jal	ra,1c28c <__floatunsisf>
                float score = packet_anomaly_detector_predict((float[]){
    3154:	00a12423          	sw	a0,8(sp)
                    (float)f->sport, (float)f->tot_pkts, (float)f->tot_bytes,
    3158:	00090513          	mv	a0,s2
    315c:	130190ef          	jal	ra,1c28c <__floatunsisf>
                float score = packet_anomaly_detector_predict((float[]){
    3160:	00a12623          	sw	a0,12(sp)
                    (float)f->sport, (float)f->tot_pkts, (float)f->tot_bytes,
    3164:	00040513          	mv	a0,s0
    3168:	124190ef          	jal	ra,1c28c <__floatunsisf>
                float score = packet_anomaly_detector_predict((float[]){
    316c:	00a12823          	sw	a0,16(sp)
                    (float)f->src_pkts, (float)f->dst_pkts, (float)f->src_bytes
    3170:	00c9a503          	lw	a0,12(s3)
    3174:	118190ef          	jal	ra,1c28c <__floatunsisf>
                float score = packet_anomaly_detector_predict((float[]){
    3178:	00a12a23          	sw	a0,20(sp)
                    (float)f->src_pkts, (float)f->dst_pkts, (float)f->src_bytes
    317c:	0109a503          	lw	a0,16(s3)
    3180:	10c190ef          	jal	ra,1c28c <__floatunsisf>
                float score = packet_anomaly_detector_predict((float[]){
    3184:	00a12c23          	sw	a0,24(sp)
                    (float)f->src_pkts, (float)f->dst_pkts, (float)f->src_bytes
    3188:	0149a503          	lw	a0,20(s3)
    318c:	100190ef          	jal	ra,1c28c <__floatunsisf>
                float score = packet_anomaly_detector_predict((float[]){
    3190:	00a12e23          	sw	a0,28(sp)
    3194:	00600593          	li	a1,6
    3198:	00810513          	addi	a0,sp,8
    319c:	d49ff0ef          	jal	ra,2ee4 <packet_anomaly_detector_predict>
                if (score > 50.0f) {
    31a0:	8281a583          	lw	a1,-2008(gp) # 1f9f8 <_impure_ptr+0x4>
    31a4:	758180ef          	jal	ra,1b8fc <__gesf2>
    31a8:	e4a056e3          	blez	a0,2ff4 <sniff_input+0xd8>
                    bsp_printf(
    31ac:	0149a803          	lw	a6,20(s3)
    31b0:	0109a783          	lw	a5,16(s3)
    31b4:	00c9a703          	lw	a4,12(s3)
    31b8:	0089a683          	lw	a3,8(s3)
    31bc:	0049a603          	lw	a2,4(s3)
    31c0:	0009d583          	lhu	a1,0(s3)
    31c4:	0001c537          	lui	a0,0x1c
    31c8:	5ac50513          	addi	a0,a0,1452 # 1c5ac <packet_anomaly_detector_means+0x8c>
    31cc:	841ff0ef          	jal	ra,2a0c <bsp_printf>
    31d0:	e25ff06f          	j	2ff4 <sniff_input+0xd8>
    31d4:	8f018413          	addi	s0,gp,-1808 # 1fac0 <flow_head>
    31d8:	f1dff06f          	j	30f4 <sniff_input+0x1d8>
    31dc:	8f018413          	addi	s0,gp,-1808 # 1fac0 <flow_head>
    31e0:	f15ff06f          	j	30f4 <sniff_input+0x1d8>
            *pp = malloc(sizeof(**pp));
    31e4:	01c00513          	li	a0,28
    31e8:	f2dfd0ef          	jal	ra,1114 <malloc>
    31ec:	00a42023          	sw	a0,0(s0)
            if (*pp) {
    31f0:	f0050ce3          	beqz	a0,3108 <sniff_input+0x1ec>
                (*pp)->sport     = sport;
    31f4:	01351023          	sh	s3,0(a0)
                (*pp)->tot_pkts  = 0;
    31f8:	00042783          	lw	a5,0(s0)
    31fc:	0007a223          	sw	zero,4(a5)
                (*pp)->tot_bytes = 0;
    3200:	00042783          	lw	a5,0(s0)
    3204:	0007a423          	sw	zero,8(a5)
                (*pp)->src_pkts  = 0;
    3208:	00042783          	lw	a5,0(s0)
    320c:	0007a623          	sw	zero,12(a5)
                (*pp)->dst_pkts  = 0;
    3210:	00042783          	lw	a5,0(s0)
    3214:	0007a823          	sw	zero,16(a5)
                (*pp)->src_bytes = 0;
    3218:	00042783          	lw	a5,0(s0)
    321c:	0007aa23          	sw	zero,20(a5)
                (*pp)->next      = NULL;
    3220:	00042783          	lw	a5,0(s0)
    3224:	0007ac23          	sw	zero,24(a5)
    3228:	ee1ff06f          	j	3108 <sniff_input+0x1ec>
                const struct tcp_hdr *tcph = (const struct tcp_hdr *)((u8_t*)iph + ihl);
    322c:	012b0933          	add	s2,s6,s2
                u8_t flags = TCPH_FLAGS(tcph);
    3230:	00c94503          	lbu	a0,12(s2)
    3234:	00d94783          	lbu	a5,13(s2)
    3238:	00879793          	slli	a5,a5,0x8
    323c:	00a7e533          	or	a0,a5,a0
    3240:	238070ef          	jal	ra,a478 <lwip_htons>
    3244:	0ff57513          	andi	a0,a0,255
                if (flags & TCP_PSH) {
    3248:	00857793          	andi	a5,a0,8
    324c:	02078c63          	beqz	a5,3284 <sniff_input+0x368>
                    f->tot_pkts++;
    3250:	0049a783          	lw	a5,4(s3)
    3254:	00178793          	addi	a5,a5,1
    3258:	00f9a223          	sw	a5,4(s3)
                    f->tot_bytes  += p->tot_len;
    325c:	0084d703          	lhu	a4,8(s1)
    3260:	0089a783          	lw	a5,8(s3)
    3264:	00e787b3          	add	a5,a5,a4
    3268:	00f9a423          	sw	a5,8(s3)
                    if (dport==IPERF_PORT) {
    326c:	000017b7          	lui	a5,0x1
    3270:	38978793          	addi	a5,a5,905 # 1389 <_malloc_r+0x255>
    3274:	02fb8a63          	beq	s7,a5,32a8 <sniff_input+0x38c>
                        f->dst_pkts++;
    3278:	0109a783          	lw	a5,16(s3)
    327c:	00178793          	addi	a5,a5,1
    3280:	00f9a823          	sw	a5,16(s3)
                if ((flags&TCP_FIN)||(flags&TCP_RST)) {
    3284:	00557513          	andi	a0,a0,5
    3288:	d60506e3          	beqz	a0,2ff4 <sniff_input+0xd8>
                    if (f->tot_pkts > 0) {
    328c:	0049a603          	lw	a2,4(s3)
    3290:	02061c63          	bnez	a2,32c8 <sniff_input+0x3ac>
                    *pp = f->next;
    3294:	0189a783          	lw	a5,24(s3)
    3298:	00f42023          	sw	a5,0(s0)
                    free(f);
    329c:	00098513          	mv	a0,s3
    32a0:	e85fd0ef          	jal	ra,1124 <free>
    32a4:	d51ff06f          	j	2ff4 <sniff_input+0xd8>
                        f->src_pkts++;
    32a8:	00c9a783          	lw	a5,12(s3)
    32ac:	00178793          	addi	a5,a5,1
    32b0:	00f9a623          	sw	a5,12(s3)
                        f->src_bytes += p->tot_len;
    32b4:	0084d703          	lhu	a4,8(s1)
    32b8:	0149a783          	lw	a5,20(s3)
    32bc:	00e787b3          	add	a5,a5,a4
    32c0:	00f9aa23          	sw	a5,20(s3)
    32c4:	fc1ff06f          	j	3284 <sniff_input+0x368>
                        bsp_printf(
    32c8:	0149a803          	lw	a6,20(s3)
    32cc:	0109a783          	lw	a5,16(s3)
    32d0:	00c9a703          	lw	a4,12(s3)
    32d4:	0089a683          	lw	a3,8(s3)
    32d8:	0009d583          	lhu	a1,0(s3)
    32dc:	0001c537          	lui	a0,0x1c
    32e0:	5ac50513          	addi	a0,a0,1452 # 1c5ac <packet_anomaly_detector_means+0x8c>
    32e4:	f28ff0ef          	jal	ra,2a0c <bsp_printf>
    32e8:	fadff06f          	j	3294 <sniff_input+0x378>
                    f->src_pkts++;
    32ec:	00c9a783          	lw	a5,12(s3)
    32f0:	00178793          	addi	a5,a5,1
    32f4:	00f9a623          	sw	a5,12(s3)
                    f->src_bytes += p->tot_len;
    32f8:	0084d703          	lhu	a4,8(s1)
    32fc:	0149a783          	lw	a5,20(s3)
    3300:	00e787b3          	add	a5,a5,a4
    3304:	00f9aa23          	sw	a5,20(s3)
    3308:	e45ff06f          	j	314c <sniff_input+0x230>

0000330c <sys_jiffies>:
u32_t sys_jiffies(void) {
    330c:	ff010113          	addi	sp,sp,-16
    3310:	00112623          	sw	ra,12(sp)
    u32 t = machineTimer_getTime(BSP_MACHINE_TIMER);
    3314:	f8b00537          	lui	a0,0xf8b00
    3318:	bdcff0ef          	jal	ra,26f4 <clint_getTime>
    return (t * 1000U) / SYSTEM_MACHINE_TIMER_HZ;
    331c:	3e800793          	li	a5,1000
    3320:	02f50533          	mul	a0,a0,a5
}
    3324:	0bebc7b7          	lui	a5,0xbebc
    3328:	20078793          	addi	a5,a5,512 # bebc200 <__freertos_irq_stack_top+0xbe972d0>
    332c:	02f55533          	divu	a0,a0,a5
    3330:	00c12083          	lw	ra,12(sp)
    3334:	01010113          	addi	sp,sp,16
    3338:	00008067          	ret

0000333c <sys_now>:
u32_t sys_now(void) { return sys_jiffies(); }
    333c:	ff010113          	addi	sp,sp,-16
    3340:	00112623          	sw	ra,12(sp)
    3344:	fc9ff0ef          	jal	ra,330c <sys_jiffies>
    3348:	00c12083          	lw	ra,12(sp)
    334c:	01010113          	addi	sp,sp,16
    3350:	00008067          	ret

00003354 <interrupt_init>:
void interrupt_init(void) {
    3354:	ff010113          	addi	sp,sp,-16
    3358:	00112623          	sw	ra,12(sp)
    plic_set_threshold(BSP_PLIC,BSP_PLIC_CPU_0,0);
    335c:	00000613          	li	a2,0
    3360:	00000593          	li	a1,0
    3364:	f8c00537          	lui	a0,0xf8c00
    3368:	e34ff0ef          	jal	ra,299c <plic_set_threshold>
    plic_set_priority(BSP_PLIC,SYSTEM_PLIC_USER_INTERRUPT_A_INTERRUPT,1);
    336c:	00100613          	li	a2,1
    3370:	01000593          	li	a1,16
    3374:	f8c00537          	lui	a0,0xf8c00
    3378:	dc8ff0ef          	jal	ra,2940 <plic_set_priority>
    plic_set_enable(BSP_PLIC,BSP_PLIC_CPU_0,SYSTEM_PLIC_USER_INTERRUPT_A_INTERRUPT,1);
    337c:	00100693          	li	a3,1
    3380:	01000613          	li	a2,16
    3384:	00000593          	li	a1,0
    3388:	f8c00537          	lui	a0,0xf8c00
    338c:	dc4ff0ef          	jal	ra,2950 <plic_set_enable>
    csr_write(mtvec,trap_entry);
    3390:	0001b7b7          	lui	a5,0x1b
    3394:	40878793          	addi	a5,a5,1032 # 1b408 <trap_entry>
    3398:	30579073          	csrw	mtvec,a5
    csr_set(mie,MIE_MEIE);
    339c:	000017b7          	lui	a5,0x1
    33a0:	80078793          	addi	a5,a5,-2048 # 800 <regnum_t6+0x7e1>
    33a4:	3047a073          	csrs	mie,a5
    csr_write(mstatus,MSTATUS_MPP|MSTATUS_MIE);
    33a8:	000027b7          	lui	a5,0x2
    33ac:	80878793          	addi	a5,a5,-2040 # 1808 <_malloc_r+0x6d4>
    33b0:	30079073          	csrw	mstatus,a5
}
    33b4:	00c12083          	lw	ra,12(sp)
    33b8:	01010113          	addi	sp,sp,16
    33bc:	00008067          	ret

000033c0 <crash>:
void crash(void) {
    33c0:	ff010113          	addi	sp,sp,-16
    33c4:	00112623          	sw	ra,12(sp)
    bsp_printf("\n*** CRASH ***\n");
    33c8:	0001c537          	lui	a0,0x1c
    33cc:	5fc50513          	addi	a0,a0,1532 # 1c5fc <packet_anomaly_detector_means+0xdc>
    33d0:	e3cff0ef          	jal	ra,2a0c <bsp_printf>
    while(1){}
    33d4:	0000006f          	j	33d4 <crash+0x14>

000033d8 <userInterrupt>:
void userInterrupt(void) {
    33d8:	ff010113          	addi	sp,sp,-16
    33dc:	00112623          	sw	ra,12(sp)
    33e0:	00812423          	sw	s0,8(sp)
    flush_data_cache();
    33e4:	191020ef          	jal	ra,5d74 <flush_data_cache>
    while((claim=plic_claim(BSP_PLIC,BSP_PLIC_CPU_0))) {
    33e8:	00000593          	li	a1,0
    33ec:	f8c00537          	lui	a0,0xf8c00
    33f0:	dc4ff0ef          	jal	ra,29b4 <plic_claim>
    33f4:	00050413          	mv	s0,a0
    33f8:	02050863          	beqz	a0,3428 <userInterrupt+0x50>
        if(claim==SYSTEM_PLIC_USER_INTERRUPT_A_INTERRUPT) {
    33fc:	01000793          	li	a5,16
    3400:	02f41263          	bne	s0,a5,3424 <userInterrupt+0x4c>
            ethernetif_input(&gnetif);
    3404:	98018513          	addi	a0,gp,-1664 # 1fb50 <gnetif>
    3408:	309020ef          	jal	ra,5f10 <ethernetif_input>
            sys_check_timeouts();
    340c:	43c0e0ef          	jal	ra,11848 <sys_check_timeouts>
        plic_release(BSP_PLIC,BSP_PLIC_CPU_0,claim);
    3410:	00040613          	mv	a2,s0
    3414:	00000593          	li	a1,0
    3418:	f8c00537          	lui	a0,0xf8c00
    341c:	db4ff0ef          	jal	ra,29d0 <plic_release>
    3420:	fc9ff06f          	j	33e8 <userInterrupt+0x10>
        } else crash();
    3424:	f9dff0ef          	jal	ra,33c0 <crash>
}
    3428:	00c12083          	lw	ra,12(sp)
    342c:	00812403          	lw	s0,8(sp)
    3430:	01010113          	addi	sp,sp,16
    3434:	00008067          	ret

00003438 <trap>:
void trap(void) {
    3438:	ff010113          	addi	sp,sp,-16
    343c:	00112623          	sw	ra,12(sp)
    int32_t mc=csr_read(mcause);
    3440:	342027f3          	csrr	a5,mcause
    if(mc<0&&(mc&0xF)==CAUSE_MACHINE_EXTERNAL) userInterrupt();
    3444:	0207d063          	bgez	a5,3464 <trap+0x2c>
    3448:	00f7f793          	andi	a5,a5,15
    344c:	00b00713          	li	a4,11
    3450:	00e79a63          	bne	a5,a4,3464 <trap+0x2c>
    3454:	f85ff0ef          	jal	ra,33d8 <userInterrupt>
}
    3458:	00c12083          	lw	ra,12(sp)
    345c:	01010113          	addi	sp,sp,16
    3460:	00008067          	ret
    else crash();
    3464:	f5dff0ef          	jal	ra,33c0 <crash>

00003468 <main>:

int main(void) {
    3468:	fd010113          	addi	sp,sp,-48
    346c:	02112623          	sw	ra,44(sp)
    3470:	02812423          	sw	s0,40(sp)
    3474:	02912223          	sw	s1,36(sp)
    int speed=Speed_1000Mhz, link_speed=0;
    MacRst(0,0);
    3478:	00000593          	li	a1,0
    347c:	00000513          	li	a0,0
    3480:	0a1000ef          	jal	ra,3d20 <MacRst>
    interrupt_init();
    3484:	ed1ff0ef          	jal	ra,3354 <interrupt_init>
    dmasg_priority(DMASG_BASE,DMASG_CHANNEL0,0,0);
    3488:	00000693          	li	a3,0
    348c:	00000613          	li	a2,0
    3490:	00000593          	li	a1,0
    3494:	f8110537          	lui	a0,0xf8110
    3498:	c90ff0ef          	jal	ra,2928 <dmasg_priority>
    dmasg_priority(DMASG_BASE,DMASG_CHANNEL1,0,0);
    349c:	00000693          	li	a3,0
    34a0:	00000613          	li	a2,0
    34a4:	00100593          	li	a1,1
    34a8:	f8110537          	lui	a0,0xf8110
    34ac:	c7cff0ef          	jal	ra,2928 <dmasg_priority>

    bsp_printf("Phy Init...\r\n");
    34b0:	0001c537          	lui	a0,0x1c
    34b4:	60c50513          	addi	a0,a0,1548 # 1c60c <packet_anomaly_detector_means+0xec>
    34b8:	d54ff0ef          	jal	ra,2a0c <bsp_printf>
    rtl8211_drv_init();
    34bc:	709000ef          	jal	ra,43c4 <rtl8211_drv_init>
    bsp_printf("Waiting Link Up...\r\n");
    34c0:	0001c537          	lui	a0,0x1c
    34c4:	61c50513          	addi	a0,a0,1564 # 1c61c <packet_anomaly_detector_means+0xfc>
    34c8:	d44ff0ef          	jal	ra,2a0c <bsp_printf>
    speed=rtl8211_drv_linkup();
    34cc:	5f5000ef          	jal	ra,42c0 <rtl8211_drv_linkup>
    34d0:	00050413          	mv	s0,a0
    if(speed==Speed_1000Mhz) link_speed=1000;
    34d4:	00400793          	li	a5,4
    34d8:	00f50e63          	beq	a0,a5,34f4 <main+0x8c>
    else if(speed==Speed_100Mhz) link_speed=100;
    34dc:	00200793          	li	a5,2
    34e0:	08f50c63          	beq	a0,a5,3578 <main+0x110>
    else if(speed==Speed_10Mhz) link_speed=10;
    34e4:	00100793          	li	a5,1
    34e8:	08f50c63          	beq	a0,a5,3580 <main+0x118>
    int speed=Speed_1000Mhz, link_speed=0;
    34ec:	00000493          	li	s1,0
    34f0:	0080006f          	j	34f8 <main+0x90>
    if(speed==Speed_1000Mhz) link_speed=1000;
    34f4:	3e800493          	li	s1,1000
    clock_sel(speed);
    34f8:	00040513          	mv	a0,s0
    34fc:	cf0ff0ef          	jal	ra,29ec <clock_sel>
    MacNormalInit(speed);
    3500:	00040513          	mv	a0,s0
    3504:	0a9000ef          	jal	ra,3dac <MacNormalInit>

    LwIP_Init();
    3508:	e3cff0ef          	jal	ra,2b44 <LwIP_Init>
    lwiperf_start_tcp_server(&ipaddr,IPERF_PORT,NULL,NULL);
    350c:	00000693          	li	a3,0
    3510:	00000613          	li	a2,0
    3514:	000015b7          	lui	a1,0x1
    3518:	38958593          	addi	a1,a1,905 # 1389 <_malloc_r+0x255>
    351c:	90018513          	addi	a0,gp,-1792 # 1fad0 <ipaddr>
    3520:	785010ef          	jal	ra,54a4 <lwiperf_start_tcp_server>

    bsp_printf("iperf up: IP=%d.%d.%d.%d MASK=%d.%d.%d.%d GW=%d.%d.%d.%d SPEED=%dMbps\r\n",
    3524:	00912a23          	sw	s1,20(sp)
    3528:	00100793          	li	a5,1
    352c:	00f12823          	sw	a5,16(sp)
    3530:	01f00793          	li	a5,31
    3534:	00f12623          	sw	a5,12(sp)
    3538:	0a800793          	li	a5,168
    353c:	00f12423          	sw	a5,8(sp)
    3540:	0c000793          	li	a5,192
    3544:	00f12223          	sw	a5,4(sp)
    3548:	00012023          	sw	zero,0(sp)
    354c:	0ff00893          	li	a7,255
    3550:	0ff00813          	li	a6,255
    3554:	0ff00793          	li	a5,255
    3558:	03700713          	li	a4,55
    355c:	01f00693          	li	a3,31
    3560:	0a800613          	li	a2,168
    3564:	0c000593          	li	a1,192
    3568:	0001c537          	lui	a0,0x1c
    356c:	63450513          	addi	a0,a0,1588 # 1c634 <packet_anomaly_detector_means+0x114>
    3570:	c9cff0ef          	jal	ra,2a0c <bsp_printf>
    3574:	03c0006f          	j	35b0 <main+0x148>
    else if(speed==Speed_100Mhz) link_speed=100;
    3578:	06400493          	li	s1,100
    357c:	f7dff06f          	j	34f8 <main+0x90>
    else if(speed==Speed_10Mhz) link_speed=10;
    3580:	00a00493          	li	s1,10
    3584:	f75ff06f          	j	34f8 <main+0x90>
    for(;;) {
        if(check_dma_status(cur_des)) {
            ethernetif_input(&gnetif);
            sys_check_timeouts();
        } else {
            int st=rtl8211_drv_rddata(26);
    3588:	01a00513          	li	a0,26
    358c:	4b9000ef          	jal	ra,4244 <rtl8211_drv_rddata>
            static int bLink=1;
            if(!(st&0x04)&&bLink) {
    3590:	00457513          	andi	a0,a0,4
    3594:	00051663          	bnez	a0,35a0 <main+0x138>
    3598:	8101a783          	lw	a5,-2032(gp) # 1f9e0 <bLink.5368>
    359c:	02079863          	bnez	a5,35cc <main+0x164>
                bLink=0; bsp_printf("Disconnected\r\n");
            } else if((st&0x04)&&!bLink) {
    35a0:	00050663          	beqz	a0,35ac <main+0x144>
    35a4:	8101a783          	lw	a5,-2032(gp) # 1f9e0 <bLink.5368>
    35a8:	02078c63          	beqz	a5,35e0 <main+0x178>
                speed=rtl8211_drv_linkup();
                clock_sel(speed);
                MacNormalInit(speed);
                bLink=1; bsp_printf("Connected\r\n");
            }
            sys_check_timeouts();
    35ac:	29c0e0ef          	jal	ra,11848 <sys_check_timeouts>
        if(check_dma_status(cur_des)) {
    35b0:	be41a503          	lw	a0,-1052(gp) # 1fdb4 <cur_des>
    35b4:	129020ef          	jal	ra,5edc <check_dma_status>
    35b8:	fc0508e3          	beqz	a0,3588 <main+0x120>
            ethernetif_input(&gnetif);
    35bc:	98018513          	addi	a0,gp,-1664 # 1fb50 <gnetif>
    35c0:	151020ef          	jal	ra,5f10 <ethernetif_input>
            sys_check_timeouts();
    35c4:	2840e0ef          	jal	ra,11848 <sys_check_timeouts>
    35c8:	fe9ff06f          	j	35b0 <main+0x148>
                bLink=0; bsp_printf("Disconnected\r\n");
    35cc:	8001a823          	sw	zero,-2032(gp) # 1f9e0 <bLink.5368>
    35d0:	0001c537          	lui	a0,0x1c
    35d4:	67c50513          	addi	a0,a0,1660 # 1c67c <packet_anomaly_detector_means+0x15c>
    35d8:	c34ff0ef          	jal	ra,2a0c <bsp_printf>
    35dc:	fd1ff06f          	j	35ac <main+0x144>
                speed=rtl8211_drv_linkup();
    35e0:	4e1000ef          	jal	ra,42c0 <rtl8211_drv_linkup>
    35e4:	00050413          	mv	s0,a0
                clock_sel(speed);
    35e8:	c04ff0ef          	jal	ra,29ec <clock_sel>
                MacNormalInit(speed);
    35ec:	00040513          	mv	a0,s0
    35f0:	7bc000ef          	jal	ra,3dac <MacNormalInit>
                bLink=1; bsp_printf("Connected\r\n");
    35f4:	00100713          	li	a4,1
    35f8:	80e1a823          	sw	a4,-2032(gp) # 1f9e0 <bLink.5368>
    35fc:	0001c537          	lui	a0,0x1c
    3600:	68c50513          	addi	a0,a0,1676 # 1c68c <packet_anomaly_detector_means+0x16c>
    3604:	c08ff0ef          	jal	ra,2a0c <bsp_printf>
    3608:	fa5ff06f          	j	35ac <main+0x144>

0000360c <uart_writeAvailability>:
        return *((volatile u32*) address);
    360c:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    3610:	01055513          	srli	a0,a0,0x10
    }
    3614:	0ff57513          	andi	a0,a0,255
    3618:	00008067          	ret

0000361c <uart_write>:
    static void uart_write(u32 reg, char data){
    361c:	ff010113          	addi	sp,sp,-16
    3620:	00112623          	sw	ra,12(sp)
    3624:	00812423          	sw	s0,8(sp)
    3628:	00912223          	sw	s1,4(sp)
    362c:	00050413          	mv	s0,a0
    3630:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    3634:	00040513          	mv	a0,s0
    3638:	fd5ff0ef          	jal	ra,360c <uart_writeAvailability>
    363c:	fe050ce3          	beqz	a0,3634 <uart_write+0x18>
        *((volatile u32*) address) = data;
    3640:	00942023          	sw	s1,0(s0)
    }
    3644:	00c12083          	lw	ra,12(sp)
    3648:	00812403          	lw	s0,8(sp)
    364c:	00412483          	lw	s1,4(sp)
    3650:	01010113          	addi	sp,sp,16
    3654:	00008067          	ret

00003658 <clint_uDelay>:
    
    static void clint_uDelay(u32 usec, u32 hz, u32 reg){
        u32 mTimePerUsec = hz/1000000;
    3658:	000f47b7          	lui	a5,0xf4
    365c:	24078793          	addi	a5,a5,576 # f4240 <__freertos_irq_stack_top+0xcf310>
    3660:	02f5d5b3          	divu	a1,a1,a5
    readReg_u32 (clint_getTimeLow , CLINT_TIME_ADDR)
    3664:	0000c7b7          	lui	a5,0xc
    3668:	ff878793          	addi	a5,a5,-8 # bff8 <netif_add+0xac>
    366c:	00f60633          	add	a2,a2,a5
        return *((volatile u32*) address);
    3670:	00062783          	lw	a5,0(a2)
        u32 limit = clint_getTimeLow(reg) + usec*mTimePerUsec;
    3674:	02a58533          	mul	a0,a1,a0
    3678:	00f50533          	add	a0,a0,a5
    367c:	00062783          	lw	a5,0(a2)
        while((int32_t)(limit-(clint_getTimeLow(reg))) >= 0);
    3680:	40f507b3          	sub	a5,a0,a5
    3684:	fe07dce3          	bgez	a5,367c <clint_uDelay+0x24>
    }
    3688:	00008067          	ret

0000368c <bsp_printHex>:
    {
    368c:	ff010113          	addi	sp,sp,-16
    3690:	00112623          	sw	ra,12(sp)
    3694:	00812423          	sw	s0,8(sp)
    3698:	00912223          	sw	s1,4(sp)
    369c:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    36a0:	01c00413          	li	s0,28
    36a4:	0280006f          	j	36cc <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    36a8:	0084d7b3          	srl	a5,s1,s0
    36ac:	00f7f713          	andi	a4,a5,15
    36b0:	0001c7b7          	lui	a5,0x1c
    36b4:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    36b8:	00e787b3          	add	a5,a5,a4
    36bc:	0007c583          	lbu	a1,0(a5)
    36c0:	f8010537          	lui	a0,0xf8010
    36c4:	f59ff0ef          	jal	ra,361c <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    36c8:	ffc40413          	addi	s0,s0,-4
    36cc:	fc045ee3          	bgez	s0,36a8 <bsp_printHex+0x1c>
    }
    36d0:	00c12083          	lw	ra,12(sp)
    36d4:	00812403          	lw	s0,8(sp)
    36d8:	00412483          	lw	s1,4(sp)
    36dc:	01010113          	addi	sp,sp,16
    36e0:	00008067          	ret

000036e4 <bsp_printHex_lower>:
        {
    36e4:	ff010113          	addi	sp,sp,-16
    36e8:	00112623          	sw	ra,12(sp)
    36ec:	00812423          	sw	s0,8(sp)
    36f0:	00912223          	sw	s1,4(sp)
    36f4:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    36f8:	01c00413          	li	s0,28
    36fc:	0280006f          	j	3724 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    3700:	0084d7b3          	srl	a5,s1,s0
    3704:	00f7f713          	andi	a4,a5,15
    3708:	0001c7b7          	lui	a5,0x1c
    370c:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    3710:	00e787b3          	add	a5,a5,a4
    3714:	0007c583          	lbu	a1,0(a5)
    3718:	f8010537          	lui	a0,0xf8010
    371c:	f01ff0ef          	jal	ra,361c <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    3720:	ffc40413          	addi	s0,s0,-4
    3724:	fc045ee3          	bgez	s0,3700 <bsp_printHex_lower+0x1c>
        }
    3728:	00c12083          	lw	ra,12(sp)
    372c:	00812403          	lw	s0,8(sp)
    3730:	00412483          	lw	s1,4(sp)
    3734:	01010113          	addi	sp,sp,16
    3738:	00008067          	ret

0000373c <bsp_printf_c>:
    {
    373c:	ff010113          	addi	sp,sp,-16
    3740:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    3744:	0ff57593          	andi	a1,a0,255
    3748:	f8010537          	lui	a0,0xf8010
    374c:	ed1ff0ef          	jal	ra,361c <uart_write>
    }
    3750:	00c12083          	lw	ra,12(sp)
    3754:	01010113          	addi	sp,sp,16
    3758:	00008067          	ret

0000375c <bsp_printf_s>:
    {
    375c:	ff010113          	addi	sp,sp,-16
    3760:	00112623          	sw	ra,12(sp)
    3764:	00812423          	sw	s0,8(sp)
    3768:	00050413          	mv	s0,a0
        while (*p)
    376c:	00044583          	lbu	a1,0(s0)
    3770:	00058a63          	beqz	a1,3784 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    3774:	00140413          	addi	s0,s0,1
    3778:	f8010537          	lui	a0,0xf8010
    377c:	ea1ff0ef          	jal	ra,361c <uart_write>
    3780:	fedff06f          	j	376c <bsp_printf_s+0x10>
    }
    3784:	00c12083          	lw	ra,12(sp)
    3788:	00812403          	lw	s0,8(sp)
    378c:	01010113          	addi	sp,sp,16
    3790:	00008067          	ret

00003794 <bsp_printf_d>:
    {
    3794:	fd010113          	addi	sp,sp,-48
    3798:	02112623          	sw	ra,44(sp)
    379c:	02812423          	sw	s0,40(sp)
    37a0:	02912223          	sw	s1,36(sp)
    37a4:	00050493          	mv	s1,a0
        if (val < 0) {
    37a8:	00054663          	bltz	a0,37b4 <bsp_printf_d+0x20>
    {
    37ac:	00010413          	mv	s0,sp
    37b0:	02c0006f          	j	37dc <bsp_printf_d+0x48>
            bsp_printf_c('-');
    37b4:	02d00513          	li	a0,45
    37b8:	f85ff0ef          	jal	ra,373c <bsp_printf_c>
            val = -val;
    37bc:	409004b3          	neg	s1,s1
    37c0:	fedff06f          	j	37ac <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
    37c4:	00a00713          	li	a4,10
    37c8:	02e4e7b3          	rem	a5,s1,a4
    37cc:	03078793          	addi	a5,a5,48
    37d0:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    37d4:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    37d8:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    37dc:	fe0494e3          	bnez	s1,37c4 <bsp_printf_d+0x30>
    37e0:	00010793          	mv	a5,sp
    37e4:	fef400e3          	beq	s0,a5,37c4 <bsp_printf_d+0x30>
    37e8:	0100006f          	j	37f8 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
    37ec:	fff40413          	addi	s0,s0,-1
    37f0:	00044503          	lbu	a0,0(s0)
    37f4:	f49ff0ef          	jal	ra,373c <bsp_printf_c>
        while (p != buffer)
    37f8:	00010793          	mv	a5,sp
    37fc:	fef418e3          	bne	s0,a5,37ec <bsp_printf_d+0x58>
    }
    3800:	02c12083          	lw	ra,44(sp)
    3804:	02812403          	lw	s0,40(sp)
    3808:	02412483          	lw	s1,36(sp)
    380c:	03010113          	addi	sp,sp,48
    3810:	00008067          	ret

00003814 <bsp_printf_x>:
    {
    3814:	ff010113          	addi	sp,sp,-16
    3818:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
    381c:	00000713          	li	a4,0
    3820:	00700793          	li	a5,7
    3824:	02e7c063          	blt	a5,a4,3844 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    3828:	00271693          	slli	a3,a4,0x2
    382c:	ff000793          	li	a5,-16
    3830:	00d797b3          	sll	a5,a5,a3
    3834:	00f577b3          	and	a5,a0,a5
    3838:	00078663          	beqz	a5,3844 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    383c:	00170713          	addi	a4,a4,1
    3840:	fe1ff06f          	j	3820 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
    3844:	ea1ff0ef          	jal	ra,36e4 <bsp_printHex_lower>
    }
    3848:	00c12083          	lw	ra,12(sp)
    384c:	01010113          	addi	sp,sp,16
    3850:	00008067          	ret

00003854 <bsp_printf_X>:
        {
    3854:	ff010113          	addi	sp,sp,-16
    3858:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
    385c:	00000713          	li	a4,0
    3860:	00700793          	li	a5,7
    3864:	02e7c063          	blt	a5,a4,3884 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    3868:	00271693          	slli	a3,a4,0x2
    386c:	ff000793          	li	a5,-16
    3870:	00d797b3          	sll	a5,a5,a3
    3874:	00f577b3          	and	a5,a0,a5
    3878:	00078663          	beqz	a5,3884 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    387c:	00170713          	addi	a4,a4,1
    3880:	fe1ff06f          	j	3860 <bsp_printf_X+0xc>
            bsp_printHex(val);
    3884:	e09ff0ef          	jal	ra,368c <bsp_printHex>
        }
    3888:	00c12083          	lw	ra,12(sp)
    388c:	01010113          	addi	sp,sp,16
    3890:	00008067          	ret

00003894 <bsp_printf>:
    {
    3894:	fc010113          	addi	sp,sp,-64
    3898:	00112e23          	sw	ra,28(sp)
    389c:	00812c23          	sw	s0,24(sp)
    38a0:	00912a23          	sw	s1,20(sp)
    38a4:	00050493          	mv	s1,a0
    38a8:	02b12223          	sw	a1,36(sp)
    38ac:	02c12423          	sw	a2,40(sp)
    38b0:	02d12623          	sw	a3,44(sp)
    38b4:	02e12823          	sw	a4,48(sp)
    38b8:	02f12a23          	sw	a5,52(sp)
    38bc:	03012c23          	sw	a6,56(sp)
    38c0:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
    38c4:	02410793          	addi	a5,sp,36
    38c8:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
    38cc:	00000413          	li	s0,0
    38d0:	01c0006f          	j	38ec <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
    38d4:	00c12783          	lw	a5,12(sp)
    38d8:	00478713          	addi	a4,a5,4
    38dc:	00e12623          	sw	a4,12(sp)
    38e0:	0007a503          	lw	a0,0(a5)
    38e4:	e59ff0ef          	jal	ra,373c <bsp_printf_c>
        for (i = 0; format[i]; i++)
    38e8:	00140413          	addi	s0,s0,1
    38ec:	008487b3          	add	a5,s1,s0
    38f0:	0007c503          	lbu	a0,0(a5)
    38f4:	0c050263          	beqz	a0,39b8 <bsp_printf+0x124>
            if (format[i] == '%') {
    38f8:	02500793          	li	a5,37
    38fc:	06f50663          	beq	a0,a5,3968 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
    3900:	e3dff0ef          	jal	ra,373c <bsp_printf_c>
    3904:	fe5ff06f          	j	38e8 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    3908:	00c12783          	lw	a5,12(sp)
    390c:	00478713          	addi	a4,a5,4
    3910:	00e12623          	sw	a4,12(sp)
    3914:	0007a503          	lw	a0,0(a5)
    3918:	e45ff0ef          	jal	ra,375c <bsp_printf_s>
                        break;
    391c:	fcdff06f          	j	38e8 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    3920:	00c12783          	lw	a5,12(sp)
    3924:	00478713          	addi	a4,a5,4
    3928:	00e12623          	sw	a4,12(sp)
    392c:	0007a503          	lw	a0,0(a5)
    3930:	e65ff0ef          	jal	ra,3794 <bsp_printf_d>
                        break;
    3934:	fb5ff06f          	j	38e8 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    3938:	00c12783          	lw	a5,12(sp)
    393c:	00478713          	addi	a4,a5,4
    3940:	00e12623          	sw	a4,12(sp)
    3944:	0007a503          	lw	a0,0(a5)
    3948:	f0dff0ef          	jal	ra,3854 <bsp_printf_X>
                        break;
    394c:	f9dff06f          	j	38e8 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    3950:	00c12783          	lw	a5,12(sp)
    3954:	00478713          	addi	a4,a5,4
    3958:	00e12623          	sw	a4,12(sp)
    395c:	0007a503          	lw	a0,0(a5)
    3960:	eb5ff0ef          	jal	ra,3814 <bsp_printf_x>
                        break;
    3964:	f85ff06f          	j	38e8 <bsp_printf+0x54>
                while (format[++i]) {
    3968:	00140413          	addi	s0,s0,1
    396c:	008487b3          	add	a5,s1,s0
    3970:	0007c783          	lbu	a5,0(a5)
    3974:	f6078ae3          	beqz	a5,38e8 <bsp_printf+0x54>
                    if (format[i] == 'c') {
    3978:	06300713          	li	a4,99
    397c:	f4e78ce3          	beq	a5,a4,38d4 <bsp_printf+0x40>
                    else if (format[i] == 's') {
    3980:	07300713          	li	a4,115
    3984:	f8e782e3          	beq	a5,a4,3908 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    3988:	06400713          	li	a4,100
    398c:	f8e78ae3          	beq	a5,a4,3920 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    3990:	05800713          	li	a4,88
    3994:	fae782e3          	beq	a5,a4,3938 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    3998:	07800713          	li	a4,120
    399c:	fae78ae3          	beq	a5,a4,3950 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    39a0:	06600713          	li	a4,102
    39a4:	fce792e3          	bne	a5,a4,3968 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    39a8:	0001c537          	lui	a0,0x1c
    39ac:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    39b0:	dadff0ef          	jal	ra,375c <bsp_printf_s>
                        break;
    39b4:	f35ff06f          	j	38e8 <bsp_printf+0x54>
    }
    39b8:	01c12083          	lw	ra,28(sp)
    39bc:	01812403          	lw	s0,24(sp)
    39c0:	01412483          	lw	s1,20(sp)
    39c4:	04010113          	addi	sp,sp,64
    39c8:	00008067          	ret

000039cc <control_reset>:
#include "compatibility.h"


void control_reset (struct cmn_reset *rst)
{
	write_u32(*(uint32_t *)rst, IO_APB_SLAVE_2_APB+0x08);
    39cc:	00052703          	lw	a4,0(a0)
        *((volatile u32*) address) = data;
    39d0:	f81207b7          	lui	a5,0xf8120
    39d4:	00e7a423          	sw	a4,8(a5) # f8120008 <__freertos_irq_stack_top+0xf80fb0d8>
}
    39d8:	00008067          	ret

000039dc <MacTxEn>:

/************************** Function File ***************************/
void MacTxEn(u32 tx_en)
{
    39dc:	ff010113          	addi	sp,sp,-16
    39e0:	00112623          	sw	ra,12(sp)
    39e4:	00812423          	sw	s0,8(sp)
    39e8:	00912223          	sw	s1,4(sp)
    39ec:	00050413          	mv	s0,a0
	u32 Value;
	//Set Mac TxEn
	Value = Reg_In32(XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG) & TX_ENA_MASK;
    39f0:	f81004b7          	lui	s1,0xf8100
    39f4:	00848513          	addi	a0,s1,8 # f8100008 <__freertos_irq_stack_top+0xf80db0d8>
    39f8:	535010ef          	jal	ra,572c <Reg_In32>
    39fc:	ffe57593          	andi	a1,a0,-2
	Value |= (tx_en&0x1)<<0;
    3a00:	00147413          	andi	s0,s0,1
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG), Value);//mac_reg command_config Reg
    3a04:	00b465b3          	or	a1,s0,a1
    3a08:	00848513          	addi	a0,s1,8
    3a0c:	519010ef          	jal	ra,5724 <Reg_Out32>
	if(PRINTF_EN == 1) {
		bsp_printf("Info : Set Mac TxEn.\r\n");
	}
}
    3a10:	00c12083          	lw	ra,12(sp)
    3a14:	00812403          	lw	s0,8(sp)
    3a18:	00412483          	lw	s1,4(sp)
    3a1c:	01010113          	addi	sp,sp,16
    3a20:	00008067          	ret

00003a24 <MacRxEn>:

/************************** Function File ***************************/
void MacRxEn(u32 rx_en)
{
    3a24:	ff010113          	addi	sp,sp,-16
    3a28:	00112623          	sw	ra,12(sp)
    3a2c:	00812423          	sw	s0,8(sp)
    3a30:	00912223          	sw	s1,4(sp)
    3a34:	00050413          	mv	s0,a0
	u32 Value;
	//Set Mac RxEn
	Value = Reg_In32(XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG) & RX_ENA_MASK;
    3a38:	f81004b7          	lui	s1,0xf8100
    3a3c:	00848513          	addi	a0,s1,8 # f8100008 <__freertos_irq_stack_top+0xf80db0d8>
    3a40:	4ed010ef          	jal	ra,572c <Reg_In32>
    3a44:	ffd57593          	andi	a1,a0,-3
	Value |= (rx_en&0x1)<<1;
    3a48:	00141413          	slli	s0,s0,0x1
    3a4c:	00247413          	andi	s0,s0,2
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG), Value);//mac_reg command_config Reg
    3a50:	00b465b3          	or	a1,s0,a1
    3a54:	00848513          	addi	a0,s1,8
    3a58:	4cd010ef          	jal	ra,5724 <Reg_Out32>
	if(PRINTF_EN == 1) {
		bsp_printf("Info : Set Mac RxEn.\r\n");
	}
}
    3a5c:	00c12083          	lw	ra,12(sp)
    3a60:	00812403          	lw	s0,8(sp)
    3a64:	00412483          	lw	s1,4(sp)
    3a68:	01010113          	addi	sp,sp,16
    3a6c:	00008067          	ret

00003a70 <MacSpeedSet>:

/************************** Function File ***************************/
void MacSpeedSet(u32 speed)
{
    3a70:	ff010113          	addi	sp,sp,-16
    3a74:	00112623          	sw	ra,12(sp)
    3a78:	00812423          	sw	s0,8(sp)
    3a7c:	00912223          	sw	s1,4(sp)
    3a80:	00050413          	mv	s0,a0
	u32 Value;
	//Set Mac Speed
	Value = Reg_In32(XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG) & ETH_SPEED_MASK;
    3a84:	f81004b7          	lui	s1,0xf8100
    3a88:	00848513          	addi	a0,s1,8 # f8100008 <__freertos_irq_stack_top+0xf80db0d8>
    3a8c:	4a1010ef          	jal	ra,572c <Reg_In32>
    3a90:	fff905b7          	lui	a1,0xfff90
    3a94:	fff58593          	addi	a1,a1,-1 # fff8ffff <__freertos_irq_stack_top+0xfff6b0cf>
    3a98:	00b575b3          	and	a1,a0,a1
	Value |= (speed&0x7)<<16;
    3a9c:	01041413          	slli	s0,s0,0x10
    3aa0:	000707b7          	lui	a5,0x70
    3aa4:	00f47433          	and	s0,s0,a5
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG), Value);//mac_reg command_config Reg
    3aa8:	00b465b3          	or	a1,s0,a1
    3aac:	00848513          	addi	a0,s1,8
    3ab0:	475010ef          	jal	ra,5724 <Reg_Out32>
	if(PRINTF_EN == 1) {
		bsp_printf("Info : Set Mac Speed.\r\n");
	}
}
    3ab4:	00c12083          	lw	ra,12(sp)
    3ab8:	00812403          	lw	s0,8(sp)
    3abc:	00412483          	lw	s1,4(sp)
    3ac0:	01010113          	addi	sp,sp,16
    3ac4:	00008067          	ret

00003ac8 <MacLoopbackSet>:

/************************** Function File ***************************/
void MacLoopbackSet(u32 loopback_en)
{
    3ac8:	ff010113          	addi	sp,sp,-16
    3acc:	00112623          	sw	ra,12(sp)
    3ad0:	00812423          	sw	s0,8(sp)
    3ad4:	00912223          	sw	s1,4(sp)
    3ad8:	00050413          	mv	s0,a0
	u32 Value;
	//Set Mac Loopback
	Value = Reg_In32(XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG) & LOOP_ENA_MASK;
    3adc:	f81004b7          	lui	s1,0xf8100
    3ae0:	00848513          	addi	a0,s1,8 # f8100008 <__freertos_irq_stack_top+0xf80db0d8>
    3ae4:	449010ef          	jal	ra,572c <Reg_In32>
    3ae8:	ffff85b7          	lui	a1,0xffff8
    3aec:	fff58593          	addi	a1,a1,-1 # ffff7fff <__freertos_irq_stack_top+0xfffd30cf>
    3af0:	00b575b3          	and	a1,a0,a1
	Value |= (loopback_en&0x1)<<15;
    3af4:	00f41413          	slli	s0,s0,0xf
    3af8:	000107b7          	lui	a5,0x10
    3afc:	fff78793          	addi	a5,a5,-1 # ffff <tcp_input+0x183>
    3b00:	00f47433          	and	s0,s0,a5
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG), Value);//command_config Reg
    3b04:	00b465b3          	or	a1,s0,a1
    3b08:	00848513          	addi	a0,s1,8
    3b0c:	419010ef          	jal	ra,5724 <Reg_Out32>
	if(PRINTF_EN == 1) {
		bsp_printf("Info : Set Mac Loopback.\r\n");
	}
}
    3b10:	00c12083          	lw	ra,12(sp)
    3b14:	00812403          	lw	s0,8(sp)
    3b18:	00412483          	lw	s1,4(sp)
    3b1c:	01010113          	addi	sp,sp,16
    3b20:	00008067          	ret

00003b24 <MacIpgSet>:

/************************** Function File ***************************/
void MacIpgSet(u32 ipg)
{
    3b24:	ff010113          	addi	sp,sp,-16
    3b28:	00112623          	sw	ra,12(sp)
	//Set Mac IPG
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+0x05c), ipg&0x3f);//mac_reg tx_ipg_length Reg
    3b2c:	03f57593          	andi	a1,a0,63
    3b30:	f8100537          	lui	a0,0xf8100
    3b34:	05c50513          	addi	a0,a0,92 # f810005c <__freertos_irq_stack_top+0xf80db12c>
    3b38:	3ed010ef          	jal	ra,5724 <Reg_Out32>
	if(PRINTF_EN == 1) {
		bsp_printf("Info : Set Mac IPG.\r\n");
	}
}
    3b3c:	00c12083          	lw	ra,12(sp)
    3b40:	01010113          	addi	sp,sp,16
    3b44:	00008067          	ret

00003b48 <MacAddrSet>:

/************************** Function File ***************************/
void MacAddrSet(u32 dst_addr_ins, u32 src_addr_ins)
{
    3b48:	ff010113          	addi	sp,sp,-16
    3b4c:	00112623          	sw	ra,12(sp)
    3b50:	00812423          	sw	s0,8(sp)
    3b54:	00912223          	sw	s1,4(sp)
    3b58:	01212023          	sw	s2,0(sp)
    3b5c:	00050913          	mv	s2,a0
    3b60:	00058493          	mv	s1,a1
	u32 Value;
	//dst mac addr set
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+DST_MAC_ADDR_HI), DST_MAC_H);//mac_reg mac_addr[47:32]
    3b64:	000105b7          	lui	a1,0x10
    3b68:	fff58593          	addi	a1,a1,-1 # ffff <tcp_input+0x183>
    3b6c:	f8100437          	lui	s0,0xf8100
    3b70:	18840513          	addi	a0,s0,392 # f8100188 <__freertos_irq_stack_top+0xf80db258>
    3b74:	3b1010ef          	jal	ra,5724 <Reg_Out32>
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+DST_MAC_ADDR_LO), DST_MAC_L);//mac_reg mac_addr[31:0]
    3b78:	fff00593          	li	a1,-1
    3b7c:	18440513          	addi	a0,s0,388
    3b80:	3a5010ef          	jal	ra,5724 <Reg_Out32>
	//dst mac addr ins set
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+TX_DST_ADDR_INS), dst_addr_ins);//mac_reg tx_dst_addr_ins
    3b84:	00090593          	mv	a1,s2
    3b88:	18040513          	addi	a0,s0,384
    3b8c:	399010ef          	jal	ra,5724 <Reg_Out32>
	//src mac addr set
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+MAC_ADDR_HI), SRC_MAC_H);//mac_addr[47:32]
    3b90:	000045b7          	lui	a1,0x4
    3b94:	14458593          	addi	a1,a1,324 # 4144 <bsp_printf+0xdc>
    3b98:	01040513          	addi	a0,s0,16
    3b9c:	389010ef          	jal	ra,5724 <Reg_Out32>
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+MAC_ADDR_LO), SRC_MAC_L);//mac_addr[31:0]
    3ba0:	332215b7          	lui	a1,0x33221
    3ba4:	10058593          	addi	a1,a1,256 # 33221100 <__freertos_irq_stack_top+0x331fc1d0>
    3ba8:	00c40513          	addi	a0,s0,12
    3bac:	379010ef          	jal	ra,5724 <Reg_Out32>
	//src mac addr ins set
	Value = Reg_In32(XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG) & TX_ADDR_INS_MASK;//mac_reg command_config Reg
    3bb0:	00840513          	addi	a0,s0,8
    3bb4:	379010ef          	jal	ra,572c <Reg_In32>
    3bb8:	bff57593          	andi	a1,a0,-1025
	Value |= (src_addr_ins&0x1)<<9;
    3bbc:	00949493          	slli	s1,s1,0x9
    3bc0:	2004f493          	andi	s1,s1,512
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG), Value);//command_config Reg
    3bc4:	00b4e5b3          	or	a1,s1,a1
    3bc8:	00840513          	addi	a0,s0,8
    3bcc:	359010ef          	jal	ra,5724 <Reg_Out32>
	if(PRINTF_EN == 1) {
		bsp_printf("Info : Set Mac Address.\r\n");
	}
}
    3bd0:	00c12083          	lw	ra,12(sp)
    3bd4:	00812403          	lw	s0,8(sp)
    3bd8:	00412483          	lw	s1,4(sp)
    3bdc:	00012903          	lw	s2,0(sp)
    3be0:	01010113          	addi	sp,sp,16
    3be4:	00008067          	ret

00003be8 <Pause_XOn>:

/********************************* Function **********************************/
void Pause_XOn()
{
    3be8:	ff010113          	addi	sp,sp,-16
    3bec:	00112623          	sw	ra,12(sp)
    3bf0:	00812423          	sw	s0,8(sp)
    3bf4:	00912223          	sw	s1,4(sp)
	u32 Value;
	//Set xon_gen 1
	Value = Reg_In32(XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG) & XON_GEN_MASK;
    3bf8:	f8100437          	lui	s0,0xf8100
    3bfc:	00840513          	addi	a0,s0,8 # f8100008 <__freertos_irq_stack_top+0xf80db0d8>
    3c00:	32d010ef          	jal	ra,572c <Reg_In32>
    3c04:	ffb57493          	andi	s1,a0,-5
	Value |= 0x1<<2;
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG), Value);//mac_reg command_config Reg
    3c08:	0044e593          	ori	a1,s1,4
    3c0c:	00840513          	addi	a0,s0,8
    3c10:	315010ef          	jal	ra,5724 <Reg_Out32>
	//Set xon_gen 0
	Value &= XON_GEN_MASK;
	Value |= 0x0<<2;
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG), Value);//mac_reg command_config Reg
    3c14:	00048593          	mv	a1,s1
    3c18:	00840513          	addi	a0,s0,8
    3c1c:	309010ef          	jal	ra,5724 <Reg_Out32>
}
    3c20:	00c12083          	lw	ra,12(sp)
    3c24:	00812403          	lw	s0,8(sp)
    3c28:	00412483          	lw	s1,4(sp)
    3c2c:	01010113          	addi	sp,sp,16
    3c30:	00008067          	ret

00003c34 <MacCntClean>:

/************************** Function File ***************************/
void MacCntClean()
{
    3c34:	ff010113          	addi	sp,sp,-16
    3c38:	00112623          	sw	ra,12(sp)
    3c3c:	00812423          	sw	s0,8(sp)
    3c40:	00912223          	sw	s1,4(sp)
	u32 Value;
	//Set cnt_reset 1
	Value = Reg_In32(XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG) & CNT_RST_MASK;
    3c44:	f81004b7          	lui	s1,0xf8100
    3c48:	00848513          	addi	a0,s1,8 # f8100008 <__freertos_irq_stack_top+0xf80db0d8>
    3c4c:	2e1010ef          	jal	ra,572c <Reg_In32>
    3c50:	800005b7          	lui	a1,0x80000
    3c54:	fff5c413          	not	s0,a1
    3c58:	00857433          	and	s0,a0,s0
	Value |= 0x80000000;
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG), Value);//mac_reg command_config Reg
    3c5c:	00b465b3          	or	a1,s0,a1
    3c60:	00848513          	addi	a0,s1,8
    3c64:	2c1010ef          	jal	ra,5724 <Reg_Out32>
	bsp_uDelay(1);
    3c68:	f8b00637          	lui	a2,0xf8b00
    3c6c:	0bebc5b7          	lui	a1,0xbebc
    3c70:	20058593          	addi	a1,a1,512 # bebc200 <__freertos_irq_stack_top+0xbe972d0>
    3c74:	00100513          	li	a0,1
    3c78:	9e1ff0ef          	jal	ra,3658 <clint_uDelay>
	//Set cnt_reset 0
	Value &= CNT_RST_MASK;
	Value |= 0x0;
	Reg_Out32((XPAR_SYS_AXI_BASEADDR+COMMAND_CONFIG), Value);//mac_reg command_config Reg
    3c7c:	00040593          	mv	a1,s0
    3c80:	00848513          	addi	a0,s1,8
    3c84:	2a1010ef          	jal	ra,5724 <Reg_Out32>
	if(PRINTF_EN == 1) {
		bsp_printf("Info : Mac Reset Statistics Counters.\r\n");
	}
}
    3c88:	00c12083          	lw	ra,12(sp)
    3c8c:	00812403          	lw	s0,8(sp)
    3c90:	00412483          	lw	s1,4(sp)
    3c94:	01010113          	addi	sp,sp,16
    3c98:	00008067          	ret

00003c9c <CntMonitor>:

/************************** Function File ***************************/
void CntMonitor()
{
    3c9c:	ff010113          	addi	sp,sp,-16
    3ca0:	00112623          	sw	ra,12(sp)
    3ca4:	00812423          	sw	s0,8(sp)
    3ca8:	00912223          	sw	s1,4(sp)
	bsp_printf("-------------------- \r\n");
    3cac:	0001c4b7          	lui	s1,0x1c
    3cb0:	69848513          	addi	a0,s1,1688 # 1c698 <packet_anomaly_detector_means+0x178>
    3cb4:	be1ff0ef          	jal	ra,3894 <bsp_printf>
	bsp_printf("aFramesTransmittedOK %d\r\n", Reg_In32(XPAR_SYS_AXI_BASEADDR+A_FRAME_TRANSMITTED_OK));
    3cb8:	f8100437          	lui	s0,0xf8100
    3cbc:	06840513          	addi	a0,s0,104 # f8100068 <__freertos_irq_stack_top+0xf80db138>
    3cc0:	26d010ef          	jal	ra,572c <Reg_In32>
    3cc4:	00050593          	mv	a1,a0
    3cc8:	0001c537          	lui	a0,0x1c
    3ccc:	6b050513          	addi	a0,a0,1712 # 1c6b0 <packet_anomaly_detector_means+0x190>
    3cd0:	bc5ff0ef          	jal	ra,3894 <bsp_printf>
	bsp_printf("aFramesReceivedOK %d\r\n", Reg_In32(XPAR_SYS_AXI_BASEADDR+A_FRAME_RECEIVED_OK));
    3cd4:	06c40513          	addi	a0,s0,108
    3cd8:	255010ef          	jal	ra,572c <Reg_In32>
    3cdc:	00050593          	mv	a1,a0
    3ce0:	0001c537          	lui	a0,0x1c
    3ce4:	6cc50513          	addi	a0,a0,1740 # 1c6cc <packet_anomaly_detector_means+0x1ac>
    3ce8:	badff0ef          	jal	ra,3894 <bsp_printf>
	bsp_printf("ifInErrors %d\r\n", Reg_In32(XPAR_SYS_AXI_BASEADDR+IF_INDICATES_ERROR));
    3cec:	08840513          	addi	a0,s0,136
    3cf0:	23d010ef          	jal	ra,572c <Reg_In32>
    3cf4:	00050593          	mv	a1,a0
    3cf8:	0001c537          	lui	a0,0x1c
    3cfc:	6e450513          	addi	a0,a0,1764 # 1c6e4 <packet_anomaly_detector_means+0x1c4>
    3d00:	b95ff0ef          	jal	ra,3894 <bsp_printf>
	bsp_printf("-------------------- \r\n");
    3d04:	69848513          	addi	a0,s1,1688
    3d08:	b8dff0ef          	jal	ra,3894 <bsp_printf>
}
    3d0c:	00c12083          	lw	ra,12(sp)
    3d10:	00812403          	lw	s0,8(sp)
    3d14:	00412483          	lw	s1,4(sp)
    3d18:	01010113          	addi	sp,sp,16
    3d1c:	00008067          	ret

00003d20 <MacRst>:
/************************** Function File ***************************/
void MacRst(u8 MacRst, u8 PhyRst)
{
    3d20:	fe010113          	addi	sp,sp,-32
    3d24:	00112e23          	sw	ra,28(sp)
    3d28:	00812c23          	sw	s0,24(sp)
    3d2c:	00912a23          	sw	s1,20(sp)
	struct cmn_reset 	rst;

	memset(&rst,0,sizeof(rst));
    3d30:	00012623          	sw	zero,12(sp)

	if(MacRst)	rst.mac_rst=1;
    3d34:	00050863          	beqz	a0,3d44 <MacRst+0x24>
    3d38:	00000793          	li	a5,0
    3d3c:	0017e793          	ori	a5,a5,1
    3d40:	00f12623          	sw	a5,12(sp)
	if(PhyRst)	rst.phy_rst=1;
    3d44:	00058863          	beqz	a1,3d54 <MacRst+0x34>
    3d48:	00c12783          	lw	a5,12(sp)
    3d4c:	0027e793          	ori	a5,a5,2
    3d50:	00f12623          	sw	a5,12(sp)

	control_reset(&rst);
    3d54:	00c10513          	addi	a0,sp,12
    3d58:	c75ff0ef          	jal	ra,39cc <control_reset>
	bsp_uDelay(100*1000);
    3d5c:	f8b00637          	lui	a2,0xf8b00
    3d60:	0bebc4b7          	lui	s1,0xbebc
    3d64:	20048593          	addi	a1,s1,512 # bebc200 <__freertos_irq_stack_top+0xbe972d0>
    3d68:	00018437          	lui	s0,0x18
    3d6c:	6a040513          	addi	a0,s0,1696 # 186a0 <ip4addr_aton+0x1d0>
    3d70:	8e9ff0ef          	jal	ra,3658 <clint_uDelay>
	rst.mac_rst=0;
    3d74:	00c12783          	lw	a5,12(sp)
	rst.phy_rst=0;
    3d78:	ffc7f793          	andi	a5,a5,-4
    3d7c:	00f12623          	sw	a5,12(sp)

	control_reset(&rst);
    3d80:	00c10513          	addi	a0,sp,12
    3d84:	c49ff0ef          	jal	ra,39cc <control_reset>
	bsp_uDelay(100*1000);
    3d88:	f8b00637          	lui	a2,0xf8b00
    3d8c:	20048593          	addi	a1,s1,512
    3d90:	6a040513          	addi	a0,s0,1696
    3d94:	8c5ff0ef          	jal	ra,3658 <clint_uDelay>
}
    3d98:	01c12083          	lw	ra,28(sp)
    3d9c:	01812403          	lw	s0,24(sp)
    3da0:	01412483          	lw	s1,20(sp)
    3da4:	02010113          	addi	sp,sp,32
    3da8:	00008067          	ret

00003dac <MacNormalInit>:


/************************** Function File ***************************/
void MacNormalInit(u32 speed)
{
    3dac:	ff010113          	addi	sp,sp,-16
    3db0:	00112623          	sw	ra,12(sp)
    3db4:	00812423          	sw	s0,8(sp)
    3db8:	00050413          	mv	s0,a0
	MacRst(1,0);
    3dbc:	00000593          	li	a1,0
    3dc0:	00100513          	li	a0,1
    3dc4:	f5dff0ef          	jal	ra,3d20 <MacRst>
	MacSpeedSet(speed);
    3dc8:	00040513          	mv	a0,s0
    3dcc:	ca5ff0ef          	jal	ra,3a70 <MacSpeedSet>
}
    3dd0:	00c12083          	lw	ra,12(sp)
    3dd4:	00812403          	lw	s0,8(sp)
    3dd8:	01010113          	addi	sp,sp,16
    3ddc:	00008067          	ret

00003de0 <uart_writeAvailability>:
        return *((volatile u32*) address);
    3de0:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    3de4:	01055513          	srli	a0,a0,0x10
    }
    3de8:	0ff57513          	andi	a0,a0,255
    3dec:	00008067          	ret

00003df0 <uart_write>:
    static void uart_write(u32 reg, char data){
    3df0:	ff010113          	addi	sp,sp,-16
    3df4:	00112623          	sw	ra,12(sp)
    3df8:	00812423          	sw	s0,8(sp)
    3dfc:	00912223          	sw	s1,4(sp)
    3e00:	00050413          	mv	s0,a0
    3e04:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    3e08:	00040513          	mv	a0,s0
    3e0c:	fd5ff0ef          	jal	ra,3de0 <uart_writeAvailability>
    3e10:	fe050ce3          	beqz	a0,3e08 <uart_write+0x18>
        *((volatile u32*) address) = data;
    3e14:	00942023          	sw	s1,0(s0)
    }
    3e18:	00c12083          	lw	ra,12(sp)
    3e1c:	00812403          	lw	s0,8(sp)
    3e20:	00412483          	lw	s1,4(sp)
    3e24:	01010113          	addi	sp,sp,16
    3e28:	00008067          	ret

00003e2c <clint_uDelay>:
        u32 mTimePerUsec = hz/1000000;
    3e2c:	000f47b7          	lui	a5,0xf4
    3e30:	24078793          	addi	a5,a5,576 # f4240 <__freertos_irq_stack_top+0xcf310>
    3e34:	02f5d5b3          	divu	a1,a1,a5
    readReg_u32 (clint_getTimeLow , CLINT_TIME_ADDR)
    3e38:	0000c7b7          	lui	a5,0xc
    3e3c:	ff878793          	addi	a5,a5,-8 # bff8 <netif_add+0xac>
    3e40:	00f60633          	add	a2,a2,a5
        return *((volatile u32*) address);
    3e44:	00062783          	lw	a5,0(a2) # f8b00000 <__freertos_irq_stack_top+0xf8adb0d0>
        u32 limit = clint_getTimeLow(reg) + usec*mTimePerUsec;
    3e48:	02a58533          	mul	a0,a1,a0
    3e4c:	00f50533          	add	a0,a0,a5
    3e50:	00062783          	lw	a5,0(a2)
        while((int32_t)(limit-(clint_getTimeLow(reg))) >= 0);
    3e54:	40f507b3          	sub	a5,a0,a5
    3e58:	fe07dce3          	bgez	a5,3e50 <clint_uDelay+0x24>
    }
    3e5c:	00008067          	ret

00003e60 <bsp_printHex>:
    {
    3e60:	ff010113          	addi	sp,sp,-16
    3e64:	00112623          	sw	ra,12(sp)
    3e68:	00812423          	sw	s0,8(sp)
    3e6c:	00912223          	sw	s1,4(sp)
    3e70:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    3e74:	01c00413          	li	s0,28
    3e78:	0280006f          	j	3ea0 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    3e7c:	0084d7b3          	srl	a5,s1,s0
    3e80:	00f7f713          	andi	a4,a5,15
    3e84:	0001c7b7          	lui	a5,0x1c
    3e88:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    3e8c:	00e787b3          	add	a5,a5,a4
    3e90:	0007c583          	lbu	a1,0(a5)
    3e94:	f8010537          	lui	a0,0xf8010
    3e98:	f59ff0ef          	jal	ra,3df0 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    3e9c:	ffc40413          	addi	s0,s0,-4
    3ea0:	fc045ee3          	bgez	s0,3e7c <bsp_printHex+0x1c>
    }
    3ea4:	00c12083          	lw	ra,12(sp)
    3ea8:	00812403          	lw	s0,8(sp)
    3eac:	00412483          	lw	s1,4(sp)
    3eb0:	01010113          	addi	sp,sp,16
    3eb4:	00008067          	ret

00003eb8 <bsp_printHex_lower>:
        {
    3eb8:	ff010113          	addi	sp,sp,-16
    3ebc:	00112623          	sw	ra,12(sp)
    3ec0:	00812423          	sw	s0,8(sp)
    3ec4:	00912223          	sw	s1,4(sp)
    3ec8:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    3ecc:	01c00413          	li	s0,28
    3ed0:	0280006f          	j	3ef8 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    3ed4:	0084d7b3          	srl	a5,s1,s0
    3ed8:	00f7f713          	andi	a4,a5,15
    3edc:	0001c7b7          	lui	a5,0x1c
    3ee0:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    3ee4:	00e787b3          	add	a5,a5,a4
    3ee8:	0007c583          	lbu	a1,0(a5)
    3eec:	f8010537          	lui	a0,0xf8010
    3ef0:	f01ff0ef          	jal	ra,3df0 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    3ef4:	ffc40413          	addi	s0,s0,-4
    3ef8:	fc045ee3          	bgez	s0,3ed4 <bsp_printHex_lower+0x1c>
        }
    3efc:	00c12083          	lw	ra,12(sp)
    3f00:	00812403          	lw	s0,8(sp)
    3f04:	00412483          	lw	s1,4(sp)
    3f08:	01010113          	addi	sp,sp,16
    3f0c:	00008067          	ret

00003f10 <bsp_printf_c>:
    {
    3f10:	ff010113          	addi	sp,sp,-16
    3f14:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    3f18:	0ff57593          	andi	a1,a0,255
    3f1c:	f8010537          	lui	a0,0xf8010
    3f20:	ed1ff0ef          	jal	ra,3df0 <uart_write>
    }
    3f24:	00c12083          	lw	ra,12(sp)
    3f28:	01010113          	addi	sp,sp,16
    3f2c:	00008067          	ret

00003f30 <bsp_printf_s>:
    {
    3f30:	ff010113          	addi	sp,sp,-16
    3f34:	00112623          	sw	ra,12(sp)
    3f38:	00812423          	sw	s0,8(sp)
    3f3c:	00050413          	mv	s0,a0
        while (*p)
    3f40:	00044583          	lbu	a1,0(s0)
    3f44:	00058a63          	beqz	a1,3f58 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    3f48:	00140413          	addi	s0,s0,1
    3f4c:	f8010537          	lui	a0,0xf8010
    3f50:	ea1ff0ef          	jal	ra,3df0 <uart_write>
    3f54:	fedff06f          	j	3f40 <bsp_printf_s+0x10>
    }
    3f58:	00c12083          	lw	ra,12(sp)
    3f5c:	00812403          	lw	s0,8(sp)
    3f60:	01010113          	addi	sp,sp,16
    3f64:	00008067          	ret

00003f68 <bsp_printf_d>:
    {
    3f68:	fd010113          	addi	sp,sp,-48
    3f6c:	02112623          	sw	ra,44(sp)
    3f70:	02812423          	sw	s0,40(sp)
    3f74:	02912223          	sw	s1,36(sp)
    3f78:	00050493          	mv	s1,a0
        if (val < 0) {
    3f7c:	00054663          	bltz	a0,3f88 <bsp_printf_d+0x20>
    {
    3f80:	00010413          	mv	s0,sp
    3f84:	02c0006f          	j	3fb0 <bsp_printf_d+0x48>
            bsp_printf_c('-');
    3f88:	02d00513          	li	a0,45
    3f8c:	f85ff0ef          	jal	ra,3f10 <bsp_printf_c>
            val = -val;
    3f90:	409004b3          	neg	s1,s1
    3f94:	fedff06f          	j	3f80 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
    3f98:	00a00713          	li	a4,10
    3f9c:	02e4e7b3          	rem	a5,s1,a4
    3fa0:	03078793          	addi	a5,a5,48
    3fa4:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    3fa8:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    3fac:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    3fb0:	fe0494e3          	bnez	s1,3f98 <bsp_printf_d+0x30>
    3fb4:	00010793          	mv	a5,sp
    3fb8:	fef400e3          	beq	s0,a5,3f98 <bsp_printf_d+0x30>
    3fbc:	0100006f          	j	3fcc <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
    3fc0:	fff40413          	addi	s0,s0,-1
    3fc4:	00044503          	lbu	a0,0(s0)
    3fc8:	f49ff0ef          	jal	ra,3f10 <bsp_printf_c>
        while (p != buffer)
    3fcc:	00010793          	mv	a5,sp
    3fd0:	fef418e3          	bne	s0,a5,3fc0 <bsp_printf_d+0x58>
    }
    3fd4:	02c12083          	lw	ra,44(sp)
    3fd8:	02812403          	lw	s0,40(sp)
    3fdc:	02412483          	lw	s1,36(sp)
    3fe0:	03010113          	addi	sp,sp,48
    3fe4:	00008067          	ret

00003fe8 <bsp_printf_x>:
    {
    3fe8:	ff010113          	addi	sp,sp,-16
    3fec:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
    3ff0:	00000713          	li	a4,0
    3ff4:	00700793          	li	a5,7
    3ff8:	02e7c063          	blt	a5,a4,4018 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    3ffc:	00271693          	slli	a3,a4,0x2
    4000:	ff000793          	li	a5,-16
    4004:	00d797b3          	sll	a5,a5,a3
    4008:	00f577b3          	and	a5,a0,a5
    400c:	00078663          	beqz	a5,4018 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    4010:	00170713          	addi	a4,a4,1
    4014:	fe1ff06f          	j	3ff4 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
    4018:	ea1ff0ef          	jal	ra,3eb8 <bsp_printHex_lower>
    }
    401c:	00c12083          	lw	ra,12(sp)
    4020:	01010113          	addi	sp,sp,16
    4024:	00008067          	ret

00004028 <bsp_printf_X>:
        {
    4028:	ff010113          	addi	sp,sp,-16
    402c:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
    4030:	00000713          	li	a4,0
    4034:	00700793          	li	a5,7
    4038:	02e7c063          	blt	a5,a4,4058 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    403c:	00271693          	slli	a3,a4,0x2
    4040:	ff000793          	li	a5,-16
    4044:	00d797b3          	sll	a5,a5,a3
    4048:	00f577b3          	and	a5,a0,a5
    404c:	00078663          	beqz	a5,4058 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    4050:	00170713          	addi	a4,a4,1
    4054:	fe1ff06f          	j	4034 <bsp_printf_X+0xc>
            bsp_printHex(val);
    4058:	e09ff0ef          	jal	ra,3e60 <bsp_printHex>
        }
    405c:	00c12083          	lw	ra,12(sp)
    4060:	01010113          	addi	sp,sp,16
    4064:	00008067          	ret

00004068 <bsp_printf>:
    {
    4068:	fc010113          	addi	sp,sp,-64
    406c:	00112e23          	sw	ra,28(sp)
    4070:	00812c23          	sw	s0,24(sp)
    4074:	00912a23          	sw	s1,20(sp)
    4078:	00050493          	mv	s1,a0
    407c:	02b12223          	sw	a1,36(sp)
    4080:	02c12423          	sw	a2,40(sp)
    4084:	02d12623          	sw	a3,44(sp)
    4088:	02e12823          	sw	a4,48(sp)
    408c:	02f12a23          	sw	a5,52(sp)
    4090:	03012c23          	sw	a6,56(sp)
    4094:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
    4098:	02410793          	addi	a5,sp,36
    409c:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
    40a0:	00000413          	li	s0,0
    40a4:	01c0006f          	j	40c0 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
    40a8:	00c12783          	lw	a5,12(sp)
    40ac:	00478713          	addi	a4,a5,4
    40b0:	00e12623          	sw	a4,12(sp)
    40b4:	0007a503          	lw	a0,0(a5)
    40b8:	e59ff0ef          	jal	ra,3f10 <bsp_printf_c>
        for (i = 0; format[i]; i++)
    40bc:	00140413          	addi	s0,s0,1
    40c0:	008487b3          	add	a5,s1,s0
    40c4:	0007c503          	lbu	a0,0(a5)
    40c8:	0c050263          	beqz	a0,418c <bsp_printf+0x124>
            if (format[i] == '%') {
    40cc:	02500793          	li	a5,37
    40d0:	06f50663          	beq	a0,a5,413c <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
    40d4:	e3dff0ef          	jal	ra,3f10 <bsp_printf_c>
    40d8:	fe5ff06f          	j	40bc <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    40dc:	00c12783          	lw	a5,12(sp)
    40e0:	00478713          	addi	a4,a5,4
    40e4:	00e12623          	sw	a4,12(sp)
    40e8:	0007a503          	lw	a0,0(a5)
    40ec:	e45ff0ef          	jal	ra,3f30 <bsp_printf_s>
                        break;
    40f0:	fcdff06f          	j	40bc <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    40f4:	00c12783          	lw	a5,12(sp)
    40f8:	00478713          	addi	a4,a5,4
    40fc:	00e12623          	sw	a4,12(sp)
    4100:	0007a503          	lw	a0,0(a5)
    4104:	e65ff0ef          	jal	ra,3f68 <bsp_printf_d>
                        break;
    4108:	fb5ff06f          	j	40bc <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    410c:	00c12783          	lw	a5,12(sp)
    4110:	00478713          	addi	a4,a5,4
    4114:	00e12623          	sw	a4,12(sp)
    4118:	0007a503          	lw	a0,0(a5)
    411c:	f0dff0ef          	jal	ra,4028 <bsp_printf_X>
                        break;
    4120:	f9dff06f          	j	40bc <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    4124:	00c12783          	lw	a5,12(sp)
    4128:	00478713          	addi	a4,a5,4
    412c:	00e12623          	sw	a4,12(sp)
    4130:	0007a503          	lw	a0,0(a5)
    4134:	eb5ff0ef          	jal	ra,3fe8 <bsp_printf_x>
                        break;
    4138:	f85ff06f          	j	40bc <bsp_printf+0x54>
                while (format[++i]) {
    413c:	00140413          	addi	s0,s0,1
    4140:	008487b3          	add	a5,s1,s0
    4144:	0007c783          	lbu	a5,0(a5)
    4148:	f6078ae3          	beqz	a5,40bc <bsp_printf+0x54>
                    if (format[i] == 'c') {
    414c:	06300713          	li	a4,99
    4150:	f4e78ce3          	beq	a5,a4,40a8 <bsp_printf+0x40>
                    else if (format[i] == 's') {
    4154:	07300713          	li	a4,115
    4158:	f8e782e3          	beq	a5,a4,40dc <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    415c:	06400713          	li	a4,100
    4160:	f8e78ae3          	beq	a5,a4,40f4 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    4164:	05800713          	li	a4,88
    4168:	fae782e3          	beq	a5,a4,410c <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    416c:	07800713          	li	a4,120
    4170:	fae78ae3          	beq	a5,a4,4124 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    4174:	06600713          	li	a4,102
    4178:	fce792e3          	bne	a5,a4,413c <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    417c:	0001c537          	lui	a0,0x1c
    4180:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    4184:	dadff0ef          	jal	ra,3f30 <bsp_printf_s>
                        break;
    4188:	f35ff06f          	j	40bc <bsp_printf+0x54>
    }
    418c:	01c12083          	lw	ra,28(sp)
    4190:	01812403          	lw	s0,24(sp)
    4194:	01412483          	lw	s1,20(sp)
    4198:	04010113          	addi	sp,sp,64
    419c:	00008067          	ret

000041a0 <Phy_Rd>:
#include "dmasg.h"
#include "mac.h"
#include "compatibility.h"

u32 Phy_Rd(u32 RegAddr)
{
    41a0:	ff010113          	addi	sp,sp,-16
    41a4:	00112623          	sw	ra,12(sp)
    41a8:	00812423          	sw	s0,8(sp)
    u32 Value;
    Reg_Out32((XPAR_SYS_AXI_BASEADDR+0x108), ((PHY_ADDR&0x1f)<<8)|(RegAddr&0x1f));
    41ac:	01f57593          	andi	a1,a0,31
    41b0:	f8100437          	lui	s0,0xf8100
    41b4:	10840513          	addi	a0,s0,264 # f8100108 <__freertos_irq_stack_top+0xf80db1d8>
    41b8:	56c010ef          	jal	ra,5724 <Reg_Out32>
    Reg_Out32((XPAR_SYS_AXI_BASEADDR+0x104), 0x1);
    41bc:	00100593          	li	a1,1
    41c0:	10440513          	addi	a0,s0,260
    41c4:	560010ef          	jal	ra,5724 <Reg_Out32>
    bsp_uDelay(1000);
    41c8:	f8b00637          	lui	a2,0xf8b00
    41cc:	0bebc5b7          	lui	a1,0xbebc
    41d0:	20058593          	addi	a1,a1,512 # bebc200 <__freertos_irq_stack_top+0xbe972d0>
    41d4:	3e800513          	li	a0,1000
    41d8:	c55ff0ef          	jal	ra,3e2c <clint_uDelay>
    Value = Reg_In32(XPAR_SYS_AXI_BASEADDR+0x110);
    41dc:	11040513          	addi	a0,s0,272
    41e0:	54c010ef          	jal	ra,572c <Reg_In32>

    return Value;
}
    41e4:	00c12083          	lw	ra,12(sp)
    41e8:	00812403          	lw	s0,8(sp)
    41ec:	01010113          	addi	sp,sp,16
    41f0:	00008067          	ret

000041f4 <Phy_Wr>:
void Phy_Wr(u32 RegAddr,u32 Data)
{
    41f4:	ff010113          	addi	sp,sp,-16
    41f8:	00112623          	sw	ra,12(sp)
    41fc:	00812423          	sw	s0,8(sp)
    4200:	00912223          	sw	s1,4(sp)
    4204:	00058493          	mv	s1,a1
    Reg_Out32((XPAR_SYS_AXI_BASEADDR+0x108), ((PHY_ADDR&0x1f)<<8)|(RegAddr&0x1f));
    4208:	01f57593          	andi	a1,a0,31
    420c:	f8100437          	lui	s0,0xf8100
    4210:	10840513          	addi	a0,s0,264 # f8100108 <__freertos_irq_stack_top+0xf80db1d8>
    4214:	510010ef          	jal	ra,5724 <Reg_Out32>
    Reg_Out32((XPAR_SYS_AXI_BASEADDR+0x10c), Data);
    4218:	00048593          	mv	a1,s1
    421c:	10c40513          	addi	a0,s0,268
    4220:	504010ef          	jal	ra,5724 <Reg_Out32>
    Reg_Out32((XPAR_SYS_AXI_BASEADDR+0x104), 0x2);
    4224:	00200593          	li	a1,2
    4228:	10440513          	addi	a0,s0,260
    422c:	4f8010ef          	jal	ra,5724 <Reg_Out32>
}
    4230:	00c12083          	lw	ra,12(sp)
    4234:	00812403          	lw	s0,8(sp)
    4238:	00412483          	lw	s1,4(sp)
    423c:	01010113          	addi	sp,sp,16
    4240:	00008067          	ret

00004244 <rtl8211_drv_rddata>:

int rtl8211_drv_rddata(int addr)
{
    4244:	ff010113          	addi	sp,sp,-16
    4248:	00112623          	sw	ra,12(sp)
	 return Phy_Rd(addr);
    424c:	f55ff0ef          	jal	ra,41a0 <Phy_Rd>
}
    4250:	00c12083          	lw	ra,12(sp)
    4254:	01010113          	addi	sp,sp,16
    4258:	00008067          	ret

0000425c <rtl8211_drv_wrdata>:

void rtl8211_drv_wrdata(int addr ,int data)
{
    425c:	ff010113          	addi	sp,sp,-16
    4260:	00112623          	sw	ra,12(sp)
	 Phy_Wr(addr,data);
    4264:	f91ff0ef          	jal	ra,41f4 <Phy_Wr>
	 bsp_uDelay(100);
    4268:	f8b00637          	lui	a2,0xf8b00
    426c:	0bebc5b7          	lui	a1,0xbebc
    4270:	20058593          	addi	a1,a1,512 # bebc200 <__freertos_irq_stack_top+0xbe972d0>
    4274:	06400513          	li	a0,100
    4278:	bb5ff0ef          	jal	ra,3e2c <clint_uDelay>
}
    427c:	00c12083          	lw	ra,12(sp)
    4280:	01010113          	addi	sp,sp,16
    4284:	00008067          	ret

00004288 <rtl8211_drv_setpage>:

void rtl8211_drv_setpage(int page)
{
    4288:	ff010113          	addi	sp,sp,-16
    428c:	00112623          	sw	ra,12(sp)
	 Phy_Wr(31,page & 0xFFFF);
    4290:	01051593          	slli	a1,a0,0x10
    4294:	0105d593          	srli	a1,a1,0x10
    4298:	01f00513          	li	a0,31
    429c:	f59ff0ef          	jal	ra,41f4 <Phy_Wr>
	 bsp_uDelay(100);
    42a0:	f8b00637          	lui	a2,0xf8b00
    42a4:	0bebc5b7          	lui	a1,0xbebc
    42a8:	20058593          	addi	a1,a1,512 # bebc200 <__freertos_irq_stack_top+0xbe972d0>
    42ac:	06400513          	li	a0,100
    42b0:	b7dff0ef          	jal	ra,3e2c <clint_uDelay>
}
    42b4:	00c12083          	lw	ra,12(sp)
    42b8:	01010113          	addi	sp,sp,16
    42bc:	00008067          	ret

000042c0 <rtl8211_drv_linkup>:

int rtl8211_drv_linkup(void)
{
    42c0:	ff010113          	addi	sp,sp,-16
    42c4:	00112623          	sw	ra,12(sp)
    42c8:	00812423          	sw	s0,8(sp)
	int phy_reg=0;
	int speed=Speed_1000Mhz;

	 while(1)
	{
		phy_reg=rtl8211_drv_rddata(26);
    42cc:	01a00513          	li	a0,26
    42d0:	f75ff0ef          	jal	ra,4244 <rtl8211_drv_rddata>

		if(phy_reg & 0x04)
    42d4:	00457793          	andi	a5,a0,4
    42d8:	02079063          	bnez	a5,42f8 <rtl8211_drv_linkup+0x38>
		{
			bsp_printf("Linked Up");
			break;
		}

		bsp_uDelay(10000);
    42dc:	f8b00637          	lui	a2,0xf8b00
    42e0:	0bebc5b7          	lui	a1,0xbebc
    42e4:	20058593          	addi	a1,a1,512 # bebc200 <__freertos_irq_stack_top+0xbe972d0>
    42e8:	00002537          	lui	a0,0x2
    42ec:	71050513          	addi	a0,a0,1808 # 2710 <clint_getTime+0x1c>
    42f0:	b3dff0ef          	jal	ra,3e2c <clint_uDelay>
		phy_reg=rtl8211_drv_rddata(26);
    42f4:	fd9ff06f          	j	42cc <rtl8211_drv_linkup+0xc>
    42f8:	00050413          	mv	s0,a0
			bsp_printf("Linked Up");
    42fc:	0001c537          	lui	a0,0x1c
    4300:	6f450513          	addi	a0,a0,1780 # 1c6f4 <packet_anomaly_detector_means+0x1d4>
    4304:	d65ff0ef          	jal	ra,4068 <bsp_printf>
	}

	if((phy_reg & 0x30) == 0x20)
    4308:	03047793          	andi	a5,s0,48
    430c:	02000713          	li	a4,32
    4310:	02e78663          	beq	a5,a4,433c <rtl8211_drv_linkup+0x7c>
			bsp_printf("Link Partner Full duplex 1000 Mbps\n\r");
		else
			bsp_printf("Link Partner half duplex 1000 Mbps\n\r");
		speed = Speed_1000Mhz;
	}
	else if((phy_reg & 0x30) == 0x10)
    4314:	01000713          	li	a4,16
    4318:	06e78063          	beq	a5,a4,4378 <rtl8211_drv_linkup+0xb8>
			bsp_printf("Link Partner Full duplex 100 Mbps\n\r");
		else
			bsp_printf("Link Partner half duplex 100 Mbps\n\r");
		speed = Speed_100Mhz;
	}
	else if((phy_reg & 0x30) == 0)
    431c:	0a079063          	bnez	a5,43bc <rtl8211_drv_linkup+0xfc>
	{
		if(phy_reg & 0x08)
    4320:	00847413          	andi	s0,s0,8
    4324:	08040263          	beqz	s0,43a8 <rtl8211_drv_linkup+0xe8>
			bsp_printf("Link Partner Full duplex 10 Mbps\n\r");
    4328:	0001c537          	lui	a0,0x1c
    432c:	79850513          	addi	a0,a0,1944 # 1c798 <packet_anomaly_detector_means+0x278>
    4330:	d39ff0ef          	jal	ra,4068 <bsp_printf>
		else
			bsp_printf("Link Partner half duplex 10 Mbps\n\r");
		speed = Speed_10Mhz;
    4334:	00100513          	li	a0,1
    4338:	01c0006f          	j	4354 <rtl8211_drv_linkup+0x94>
		if(phy_reg & 0x08)
    433c:	00847413          	andi	s0,s0,8
    4340:	02040263          	beqz	s0,4364 <rtl8211_drv_linkup+0xa4>
			bsp_printf("Link Partner Full duplex 1000 Mbps\n\r");
    4344:	0001c537          	lui	a0,0x1c
    4348:	70050513          	addi	a0,a0,1792 # 1c700 <packet_anomaly_detector_means+0x1e0>
    434c:	d1dff0ef          	jal	ra,4068 <bsp_printf>
		speed = Speed_1000Mhz;
    4350:	00400513          	li	a0,4
	}

	return speed;
}
    4354:	00c12083          	lw	ra,12(sp)
    4358:	00812403          	lw	s0,8(sp)
    435c:	01010113          	addi	sp,sp,16
    4360:	00008067          	ret
			bsp_printf("Link Partner half duplex 1000 Mbps\n\r");
    4364:	0001c537          	lui	a0,0x1c
    4368:	72850513          	addi	a0,a0,1832 # 1c728 <packet_anomaly_detector_means+0x208>
    436c:	cfdff0ef          	jal	ra,4068 <bsp_printf>
		speed = Speed_1000Mhz;
    4370:	00400513          	li	a0,4
    4374:	fe1ff06f          	j	4354 <rtl8211_drv_linkup+0x94>
		if(phy_reg & 0x08)
    4378:	00847413          	andi	s0,s0,8
    437c:	00040c63          	beqz	s0,4394 <rtl8211_drv_linkup+0xd4>
			bsp_printf("Link Partner Full duplex 100 Mbps\n\r");
    4380:	0001c537          	lui	a0,0x1c
    4384:	75050513          	addi	a0,a0,1872 # 1c750 <packet_anomaly_detector_means+0x230>
    4388:	ce1ff0ef          	jal	ra,4068 <bsp_printf>
		speed = Speed_100Mhz;
    438c:	00200513          	li	a0,2
    4390:	fc5ff06f          	j	4354 <rtl8211_drv_linkup+0x94>
			bsp_printf("Link Partner half duplex 100 Mbps\n\r");
    4394:	0001c537          	lui	a0,0x1c
    4398:	77450513          	addi	a0,a0,1908 # 1c774 <packet_anomaly_detector_means+0x254>
    439c:	ccdff0ef          	jal	ra,4068 <bsp_printf>
		speed = Speed_100Mhz;
    43a0:	00200513          	li	a0,2
    43a4:	fb1ff06f          	j	4354 <rtl8211_drv_linkup+0x94>
			bsp_printf("Link Partner half duplex 10 Mbps\n\r");
    43a8:	0001c537          	lui	a0,0x1c
    43ac:	7bc50513          	addi	a0,a0,1980 # 1c7bc <packet_anomaly_detector_means+0x29c>
    43b0:	cb9ff0ef          	jal	ra,4068 <bsp_printf>
		speed = Speed_10Mhz;
    43b4:	00100513          	li	a0,1
    43b8:	f9dff06f          	j	4354 <rtl8211_drv_linkup+0x94>
	int speed=Speed_1000Mhz;
    43bc:	00400513          	li	a0,4
	return speed;
    43c0:	f95ff06f          	j	4354 <rtl8211_drv_linkup+0x94>

000043c4 <rtl8211_drv_init>:

void rtl8211_drv_init(void)
{
    43c4:	ff010113          	addi	sp,sp,-16
    43c8:	00112623          	sw	ra,12(sp)
    43cc:	00812423          	sw	s0,8(sp)
    43d0:	00912223          	sw	s1,4(sp)
	rtl8211_drv_setpage(0);
    43d4:	00000513          	li	a0,0
    43d8:	eb1ff0ef          	jal	ra,4288 <rtl8211_drv_setpage>
	rtl8211_drv_wrdata(0,0x9000);
    43dc:	000095b7          	lui	a1,0x9
    43e0:	00000513          	li	a0,0
    43e4:	e79ff0ef          	jal	ra,425c <rtl8211_drv_wrdata>
	bsp_uDelay(1000*50);
    43e8:	f8b00637          	lui	a2,0xf8b00
    43ec:	0bebc4b7          	lui	s1,0xbebc
    43f0:	20048593          	addi	a1,s1,512 # bebc200 <__freertos_irq_stack_top+0xbe972d0>
    43f4:	0000c437          	lui	s0,0xc
    43f8:	35040513          	addi	a0,s0,848 # c350 <netif_init+0x14>
    43fc:	a31ff0ef          	jal	ra,3e2c <clint_uDelay>
	rtl8211_drv_wrdata(0,0x1000);
    4400:	000015b7          	lui	a1,0x1
    4404:	00000513          	li	a0,0
    4408:	e55ff0ef          	jal	ra,425c <rtl8211_drv_wrdata>
	bsp_uDelay(1000*50);
    440c:	f8b00637          	lui	a2,0xf8b00
    4410:	20048593          	addi	a1,s1,512
    4414:	35040513          	addi	a0,s0,848
    4418:	a15ff0ef          	jal	ra,3e2c <clint_uDelay>

	rtl8211_drv_setpage(0x0A43);
    441c:	000014b7          	lui	s1,0x1
    4420:	a4348513          	addi	a0,s1,-1469 # a43 <regnum_t6+0xa24>
    4424:	e65ff0ef          	jal	ra,4288 <rtl8211_drv_setpage>
	rtl8211_drv_wrdata(27,0x8011);
    4428:	00008437          	lui	s0,0x8
    442c:	01140593          	addi	a1,s0,17 # 8011 <tcp_write+0x5a5>
    4430:	01b00513          	li	a0,27
    4434:	e29ff0ef          	jal	ra,425c <rtl8211_drv_wrdata>
	rtl8211_drv_wrdata(28,0xD73F);
    4438:	0000d5b7          	lui	a1,0xd
    443c:	73f58593          	addi	a1,a1,1855 # d73f <pbuf_take_at+0xd3>
    4440:	01c00513          	li	a0,28
    4444:	e19ff0ef          	jal	ra,425c <rtl8211_drv_wrdata>

	rtl8211_drv_setpage(0xD04);
    4448:	d0448513          	addi	a0,s1,-764
    444c:	e3dff0ef          	jal	ra,4288 <rtl8211_drv_setpage>
	rtl8211_drv_wrdata(0x10,0x820B);
    4450:	20b40593          	addi	a1,s0,523
    4454:	01000513          	li	a0,16
    4458:	e05ff0ef          	jal	ra,425c <rtl8211_drv_wrdata>
}
    445c:	00c12083          	lw	ra,12(sp)
    4460:	00812403          	lw	s0,8(sp)
    4464:	00412483          	lw	s1,4(sp)
    4468:	01010113          	addi	sp,sp,16
    446c:	00008067          	ret

00004470 <uart_writeAvailability>:
    4470:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    4474:	01055513          	srli	a0,a0,0x10
    }
    4478:	0ff57513          	andi	a0,a0,255
    447c:	00008067          	ret

00004480 <uart_write>:
    static void uart_write(u32 reg, char data){
    4480:	ff010113          	addi	sp,sp,-16
    4484:	00112623          	sw	ra,12(sp)
    4488:	00812423          	sw	s0,8(sp)
    448c:	00912223          	sw	s1,4(sp)
    4490:	00050413          	mv	s0,a0
    4494:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    4498:	00040513          	mv	a0,s0
    449c:	fd5ff0ef          	jal	ra,4470 <uart_writeAvailability>
    44a0:	fe050ce3          	beqz	a0,4498 <uart_write+0x18>
        *((volatile u32*) address) = data;
    44a4:	00942023          	sw	s1,0(s0)
    }
    44a8:	00c12083          	lw	ra,12(sp)
    44ac:	00812403          	lw	s0,8(sp)
    44b0:	00412483          	lw	s1,4(sp)
    44b4:	01010113          	addi	sp,sp,16
    44b8:	00008067          	ret

000044bc <bsp_printHex>:
    {
    44bc:	ff010113          	addi	sp,sp,-16
    44c0:	00112623          	sw	ra,12(sp)
    44c4:	00812423          	sw	s0,8(sp)
    44c8:	00912223          	sw	s1,4(sp)
    44cc:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    44d0:	01c00413          	li	s0,28
    44d4:	0280006f          	j	44fc <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    44d8:	0084d7b3          	srl	a5,s1,s0
    44dc:	00f7f713          	andi	a4,a5,15
    44e0:	0001c7b7          	lui	a5,0x1c
    44e4:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    44e8:	00e787b3          	add	a5,a5,a4
    44ec:	0007c583          	lbu	a1,0(a5)
    44f0:	f8010537          	lui	a0,0xf8010
    44f4:	f8dff0ef          	jal	ra,4480 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    44f8:	ffc40413          	addi	s0,s0,-4
    44fc:	fc045ee3          	bgez	s0,44d8 <bsp_printHex+0x1c>
    }
    4500:	00c12083          	lw	ra,12(sp)
    4504:	00812403          	lw	s0,8(sp)
    4508:	00412483          	lw	s1,4(sp)
    450c:	01010113          	addi	sp,sp,16
    4510:	00008067          	ret

00004514 <bsp_printHex_lower>:
        {
    4514:	ff010113          	addi	sp,sp,-16
    4518:	00112623          	sw	ra,12(sp)
    451c:	00812423          	sw	s0,8(sp)
    4520:	00912223          	sw	s1,4(sp)
    4524:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    4528:	01c00413          	li	s0,28
    452c:	0280006f          	j	4554 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    4530:	0084d7b3          	srl	a5,s1,s0
    4534:	00f7f713          	andi	a4,a5,15
    4538:	0001c7b7          	lui	a5,0x1c
    453c:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    4540:	00e787b3          	add	a5,a5,a4
    4544:	0007c583          	lbu	a1,0(a5)
    4548:	f8010537          	lui	a0,0xf8010
    454c:	f35ff0ef          	jal	ra,4480 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    4550:	ffc40413          	addi	s0,s0,-4
    4554:	fc045ee3          	bgez	s0,4530 <bsp_printHex_lower+0x1c>
        }
    4558:	00c12083          	lw	ra,12(sp)
    455c:	00812403          	lw	s0,8(sp)
    4560:	00412483          	lw	s1,4(sp)
    4564:	01010113          	addi	sp,sp,16
    4568:	00008067          	ret

0000456c <bsp_printf_c>:
    {
    456c:	ff010113          	addi	sp,sp,-16
    4570:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    4574:	0ff57593          	andi	a1,a0,255
    4578:	f8010537          	lui	a0,0xf8010
    457c:	f05ff0ef          	jal	ra,4480 <uart_write>
    }
    4580:	00c12083          	lw	ra,12(sp)
    4584:	01010113          	addi	sp,sp,16
    4588:	00008067          	ret

0000458c <bsp_printf_s>:
    {
    458c:	ff010113          	addi	sp,sp,-16
    4590:	00112623          	sw	ra,12(sp)
    4594:	00812423          	sw	s0,8(sp)
    4598:	00050413          	mv	s0,a0
        while (*p)
    459c:	00044583          	lbu	a1,0(s0)
    45a0:	00058a63          	beqz	a1,45b4 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    45a4:	00140413          	addi	s0,s0,1
    45a8:	f8010537          	lui	a0,0xf8010
    45ac:	ed5ff0ef          	jal	ra,4480 <uart_write>
    45b0:	fedff06f          	j	459c <bsp_printf_s+0x10>
    }
    45b4:	00c12083          	lw	ra,12(sp)
    45b8:	00812403          	lw	s0,8(sp)
    45bc:	01010113          	addi	sp,sp,16
    45c0:	00008067          	ret

000045c4 <bsp_printf_d>:
    {
    45c4:	fd010113          	addi	sp,sp,-48
    45c8:	02112623          	sw	ra,44(sp)
    45cc:	02812423          	sw	s0,40(sp)
    45d0:	02912223          	sw	s1,36(sp)
    45d4:	00050493          	mv	s1,a0
        if (val < 0) {
    45d8:	00054663          	bltz	a0,45e4 <bsp_printf_d+0x20>
    {
    45dc:	00010413          	mv	s0,sp
    45e0:	02c0006f          	j	460c <bsp_printf_d+0x48>
            bsp_printf_c('-');
    45e4:	02d00513          	li	a0,45
    45e8:	f85ff0ef          	jal	ra,456c <bsp_printf_c>
            val = -val;
    45ec:	409004b3          	neg	s1,s1
    45f0:	fedff06f          	j	45dc <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
    45f4:	00a00713          	li	a4,10
    45f8:	02e4e7b3          	rem	a5,s1,a4
    45fc:	03078793          	addi	a5,a5,48
    4600:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    4604:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    4608:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    460c:	fe0494e3          	bnez	s1,45f4 <bsp_printf_d+0x30>
    4610:	00010793          	mv	a5,sp
    4614:	fef400e3          	beq	s0,a5,45f4 <bsp_printf_d+0x30>
    4618:	0100006f          	j	4628 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
    461c:	fff40413          	addi	s0,s0,-1
    4620:	00044503          	lbu	a0,0(s0)
    4624:	f49ff0ef          	jal	ra,456c <bsp_printf_c>
        while (p != buffer)
    4628:	00010793          	mv	a5,sp
    462c:	fef418e3          	bne	s0,a5,461c <bsp_printf_d+0x58>
    }
    4630:	02c12083          	lw	ra,44(sp)
    4634:	02812403          	lw	s0,40(sp)
    4638:	02412483          	lw	s1,36(sp)
    463c:	03010113          	addi	sp,sp,48
    4640:	00008067          	ret

00004644 <bsp_printf_x>:
    {
    4644:	ff010113          	addi	sp,sp,-16
    4648:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
    464c:	00000713          	li	a4,0
    4650:	00700793          	li	a5,7
    4654:	02e7c063          	blt	a5,a4,4674 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    4658:	00271693          	slli	a3,a4,0x2
    465c:	ff000793          	li	a5,-16
    4660:	00d797b3          	sll	a5,a5,a3
    4664:	00f577b3          	and	a5,a0,a5
    4668:	00078663          	beqz	a5,4674 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    466c:	00170713          	addi	a4,a4,1
    4670:	fe1ff06f          	j	4650 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
    4674:	ea1ff0ef          	jal	ra,4514 <bsp_printHex_lower>
    }
    4678:	00c12083          	lw	ra,12(sp)
    467c:	01010113          	addi	sp,sp,16
    4680:	00008067          	ret

00004684 <bsp_printf_X>:
        {
    4684:	ff010113          	addi	sp,sp,-16
    4688:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
    468c:	00000713          	li	a4,0
    4690:	00700793          	li	a5,7
    4694:	02e7c063          	blt	a5,a4,46b4 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    4698:	00271693          	slli	a3,a4,0x2
    469c:	ff000793          	li	a5,-16
    46a0:	00d797b3          	sll	a5,a5,a3
    46a4:	00f577b3          	and	a5,a0,a5
    46a8:	00078663          	beqz	a5,46b4 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    46ac:	00170713          	addi	a4,a4,1
    46b0:	fe1ff06f          	j	4690 <bsp_printf_X+0xc>
            bsp_printHex(val);
    46b4:	e09ff0ef          	jal	ra,44bc <bsp_printHex>
        }
    46b8:	00c12083          	lw	ra,12(sp)
    46bc:	01010113          	addi	sp,sp,16
    46c0:	00008067          	ret

000046c4 <lwiperf_list_add>:

/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
  item->next = lwiperf_all_connections;
    46c4:	9041a703          	lw	a4,-1788(gp) # 1fad4 <lwiperf_all_connections>
    46c8:	00e52023          	sw	a4,0(a0) # f8010000 <__freertos_irq_stack_top+0xf7feb0d0>
  lwiperf_all_connections = item;
    46cc:	90a1a223          	sw	a0,-1788(gp) # 1fad4 <lwiperf_all_connections>
}
    46d0:	00008067          	ret

000046d4 <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
    46d4:	9041a783          	lw	a5,-1788(gp) # 1fad4 <lwiperf_all_connections>
    46d8:	00078a63          	beqz	a5,46ec <lwiperf_list_find+0x18>
    if (iter == item) {
    46dc:	00a78663          	beq	a5,a0,46e8 <lwiperf_list_find+0x14>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
    46e0:	0007a783          	lw	a5,0(a5)
    46e4:	ff5ff06f          	j	46d8 <lwiperf_list_find+0x4>
      return item;
    46e8:	00050793          	mv	a5,a0
    }
  }
  return NULL;
}
    46ec:	00078513          	mv	a0,a5
    46f0:	00008067          	ret

000046f4 <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
  if ((conn != NULL) && (conn->report_fn != NULL)) {
    46f4:	08050263          	beqz	a0,4778 <lwip_tcp_conn_report+0x84>
    46f8:	01852783          	lw	a5,24(a0)
    46fc:	06078e63          	beqz	a5,4778 <lwip_tcp_conn_report+0x84>
{
    4700:	fe010113          	addi	sp,sp,-32
    4704:	00112e23          	sw	ra,28(sp)
    4708:	00812c23          	sw	s0,24(sp)
    470c:	00912a23          	sw	s1,20(sp)
    4710:	00058493          	mv	s1,a1
    4714:	00050413          	mv	s0,a0
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
    4718:	c25fe0ef          	jal	ra,333c <sys_now>
    duration_ms = now - conn->time_started;
    471c:	01442883          	lw	a7,20(s0)
    4720:	411508b3          	sub	a7,a0,a7
    if (duration_ms == 0) {
    4724:	00088a63          	beqz	a7,4738 <lwip_tcp_conn_report+0x44>
      bandwidth_kbitpsec = 0;
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
    4728:	02442703          	lw	a4,36(s0)
    472c:	03175733          	divu	a4,a4,a7
    4730:	00371713          	slli	a4,a4,0x3
    4734:	0080006f          	j	473c <lwip_tcp_conn_report+0x48>
      bandwidth_kbitpsec = 0;
    4738:	00088713          	mv	a4,a7
    }
    conn->report_fn(conn->report_arg, report_type,
    473c:	01842303          	lw	t1,24(s0)
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
    4740:	01042603          	lw	a2,16(s0)
    conn->report_fn(conn->report_arg, report_type,
    4744:	01c65783          	lhu	a5,28(a2) # f8b0001c <__freertos_irq_stack_top+0xf8adb0ec>
    4748:	01a65683          	lhu	a3,26(a2)
    474c:	00e12023          	sw	a4,0(sp)
    4750:	02442803          	lw	a6,36(s0)
    4754:	00460713          	addi	a4,a2,4
    4758:	00048593          	mv	a1,s1
    475c:	01c42503          	lw	a0,28(s0)
    4760:	000300e7          	jalr	t1
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
    4764:	01c12083          	lw	ra,28(sp)
    4768:	01812403          	lw	s0,24(sp)
    476c:	01412483          	lw	s1,20(sp)
    4770:	02010113          	addi	sp,sp,32
    4774:	00008067          	ret
    4778:	00008067          	ret

0000477c <bsp_printf>:
    {
    477c:	fc010113          	addi	sp,sp,-64
    4780:	00112e23          	sw	ra,28(sp)
    4784:	00812c23          	sw	s0,24(sp)
    4788:	00912a23          	sw	s1,20(sp)
    478c:	00050493          	mv	s1,a0
    4790:	02b12223          	sw	a1,36(sp)
    4794:	02c12423          	sw	a2,40(sp)
    4798:	02d12623          	sw	a3,44(sp)
    479c:	02e12823          	sw	a4,48(sp)
    47a0:	02f12a23          	sw	a5,52(sp)
    47a4:	03012c23          	sw	a6,56(sp)
    47a8:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
    47ac:	02410793          	addi	a5,sp,36
    47b0:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
    47b4:	00000413          	li	s0,0
    47b8:	01c0006f          	j	47d4 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
    47bc:	00c12783          	lw	a5,12(sp)
    47c0:	00478713          	addi	a4,a5,4
    47c4:	00e12623          	sw	a4,12(sp)
    47c8:	0007a503          	lw	a0,0(a5)
    47cc:	da1ff0ef          	jal	ra,456c <bsp_printf_c>
        for (i = 0; format[i]; i++)
    47d0:	00140413          	addi	s0,s0,1
    47d4:	008487b3          	add	a5,s1,s0
    47d8:	0007c503          	lbu	a0,0(a5)
    47dc:	0c050263          	beqz	a0,48a0 <bsp_printf+0x124>
            if (format[i] == '%') {
    47e0:	02500793          	li	a5,37
    47e4:	06f50663          	beq	a0,a5,4850 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
    47e8:	d85ff0ef          	jal	ra,456c <bsp_printf_c>
    47ec:	fe5ff06f          	j	47d0 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    47f0:	00c12783          	lw	a5,12(sp)
    47f4:	00478713          	addi	a4,a5,4
    47f8:	00e12623          	sw	a4,12(sp)
    47fc:	0007a503          	lw	a0,0(a5)
    4800:	d8dff0ef          	jal	ra,458c <bsp_printf_s>
                        break;
    4804:	fcdff06f          	j	47d0 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    4808:	00c12783          	lw	a5,12(sp)
    480c:	00478713          	addi	a4,a5,4
    4810:	00e12623          	sw	a4,12(sp)
    4814:	0007a503          	lw	a0,0(a5)
    4818:	dadff0ef          	jal	ra,45c4 <bsp_printf_d>
                        break;
    481c:	fb5ff06f          	j	47d0 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    4820:	00c12783          	lw	a5,12(sp)
    4824:	00478713          	addi	a4,a5,4
    4828:	00e12623          	sw	a4,12(sp)
    482c:	0007a503          	lw	a0,0(a5)
    4830:	e55ff0ef          	jal	ra,4684 <bsp_printf_X>
                        break;
    4834:	f9dff06f          	j	47d0 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    4838:	00c12783          	lw	a5,12(sp)
    483c:	00478713          	addi	a4,a5,4
    4840:	00e12623          	sw	a4,12(sp)
    4844:	0007a503          	lw	a0,0(a5)
    4848:	dfdff0ef          	jal	ra,4644 <bsp_printf_x>
                        break;
    484c:	f85ff06f          	j	47d0 <bsp_printf+0x54>
                while (format[++i]) {
    4850:	00140413          	addi	s0,s0,1
    4854:	008487b3          	add	a5,s1,s0
    4858:	0007c783          	lbu	a5,0(a5)
    485c:	f6078ae3          	beqz	a5,47d0 <bsp_printf+0x54>
                    if (format[i] == 'c') {
    4860:	06300713          	li	a4,99
    4864:	f4e78ce3          	beq	a5,a4,47bc <bsp_printf+0x40>
                    else if (format[i] == 's') {
    4868:	07300713          	li	a4,115
    486c:	f8e782e3          	beq	a5,a4,47f0 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    4870:	06400713          	li	a4,100
    4874:	f8e78ae3          	beq	a5,a4,4808 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    4878:	05800713          	li	a4,88
    487c:	fae782e3          	beq	a5,a4,4820 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    4880:	07800713          	li	a4,120
    4884:	fae78ae3          	beq	a5,a4,4838 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    4888:	06600713          	li	a4,102
    488c:	fce792e3          	bne	a5,a4,4850 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    4890:	0001c537          	lui	a0,0x1c
    4894:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    4898:	cf5ff0ef          	jal	ra,458c <bsp_printf_s>
                        break;
    489c:	f35ff06f          	j	47d0 <bsp_printf+0x54>
    }
    48a0:	01c12083          	lw	ra,28(sp)
    48a4:	01812403          	lw	s0,24(sp)
    48a8:	01412483          	lw	s1,20(sp)
    48ac:	04010113          	addi	sp,sp,64
    48b0:	00008067          	ret

000048b4 <lwiperf_start_tcp_server_impl>:
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
    48b4:	fe010113          	addi	sp,sp,-32
    48b8:	00112e23          	sw	ra,28(sp)
    48bc:	00812c23          	sw	s0,24(sp)
    48c0:	00912a23          	sw	s1,20(sp)
    48c4:	01212823          	sw	s2,16(sp)
    48c8:	01312623          	sw	s3,12(sp)
    48cc:	01412423          	sw	s4,8(sp)
    48d0:	01512223          	sw	s5,4(sp)
    48d4:	01612023          	sw	s6,0(sp)
    48d8:	00050913          	mv	s2,a0
    48dc:	00058b13          	mv	s6,a1
    48e0:	00060a13          	mv	s4,a2
    48e4:	00068493          	mv	s1,a3
    48e8:	00070a93          	mv	s5,a4
    48ec:	00078993          	mv	s3,a5
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);
    48f0:	08078663          	beqz	a5,497c <lwiperf_start_tcp_server_impl+0xc8>

  if (local_addr == NULL) {
    48f4:	0e090663          	beqz	s2,49e0 <lwiperf_start_tcp_server_impl+0x12c>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
    48f8:	04800513          	li	a0,72
    48fc:	679100ef          	jal	ra,15774 <mem_malloc>
    4900:	00050413          	mv	s0,a0
  if (s == NULL) {
    4904:	0e050263          	beqz	a0,49e8 <lwiperf_start_tcp_server_impl+0x134>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
    4908:	04800613          	li	a2,72
    490c:	00000593          	li	a1,0
    4910:	af0fd0ef          	jal	ra,1c00 <memset>
  s->base.tcp = 1;
    4914:	00100793          	li	a5,1
    4918:	00f40223          	sb	a5,4(s0)
  s->base.server = 1;
    491c:	00f402a3          	sb	a5,5(s0)
  s->base.related_master_state = related_master_state;
    4920:	01542423          	sw	s5,8(s0)
  s->report_fn = report_fn;
    4924:	01442c23          	sw	s4,24(s0)
  s->report_arg = report_arg;
    4928:	00942e23          	sw	s1,28(s0)

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
    492c:	02e00513          	li	a0,46
    4930:	2310e0ef          	jal	ra,13360 <tcp_new_ip_type>
    4934:	00050493          	mv	s1,a0
  if (pcb == NULL) {
    4938:	0a050c63          	beqz	a0,49f0 <lwiperf_start_tcp_server_impl+0x13c>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
    493c:	000b0613          	mv	a2,s6
    4940:	00090593          	mv	a1,s2
    4944:	0490d0ef          	jal	ra,1218c <tcp_bind>
    4948:	00050913          	mv	s2,a0
  if (err != ERR_OK) {
    494c:	04050063          	beqz	a0,498c <lwiperf_start_tcp_server_impl+0xd8>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
    4950:	00090513          	mv	a0,s2
    4954:	01c12083          	lw	ra,28(sp)
    4958:	01812403          	lw	s0,24(sp)
    495c:	01412483          	lw	s1,20(sp)
    4960:	01012903          	lw	s2,16(sp)
    4964:	00c12983          	lw	s3,12(sp)
    4968:	00812a03          	lw	s4,8(sp)
    496c:	00412a83          	lw	s5,4(sp)
    4970:	00012b03          	lw	s6,0(sp)
    4974:	02010113          	addi	sp,sp,32
    4978:	00008067          	ret
  LWIP_ASSERT("state != NULL", state != NULL);
    497c:	0001d537          	lui	a0,0x1d
    4980:	e2050513          	addi	a0,a0,-480 # 1ce20 <lwiperf_txbuf_const+0x640>
    4984:	df9ff0ef          	jal	ra,477c <bsp_printf>
    4988:	f6dff06f          	j	48f4 <lwiperf_start_tcp_server_impl+0x40>
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
    498c:	00100593          	li	a1,1
    4990:	00048513          	mv	a0,s1
    4994:	2b10d0ef          	jal	ra,12444 <tcp_listen_with_backlog>
    4998:	00a42623          	sw	a0,12(s0)
  if (s->server_pcb == NULL) {
    499c:	02050663          	beqz	a0,49c8 <lwiperf_start_tcp_server_impl+0x114>
  tcp_arg(s->server_pcb, s);
    49a0:	00040593          	mv	a1,s0
    49a4:	5550d0ef          	jal	ra,126f8 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
    49a8:	000055b7          	lui	a1,0x5
    49ac:	b5458593          	addi	a1,a1,-1196 # 4b54 <lwiperf_tcp_accept>
    49b0:	00c42503          	lw	a0,12(s0)
    49b4:	64d0d0ef          	jal	ra,12800 <tcp_accept>
  lwiperf_list_add(&s->base);
    49b8:	00040513          	mv	a0,s0
    49bc:	d09ff0ef          	jal	ra,46c4 <lwiperf_list_add>
  *state = s;
    49c0:	0089a023          	sw	s0,0(s3)
  return ERR_OK;
    49c4:	f8dff06f          	j	4950 <lwiperf_start_tcp_server_impl+0x9c>
      tcp_close(pcb);
    49c8:	00048513          	mv	a0,s1
    49cc:	39d0e0ef          	jal	ra,13568 <tcp_close>
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
    49d0:	00040513          	mv	a0,s0
    49d4:	1d9100ef          	jal	ra,153ac <mem_free>
    return ERR_MEM;
    49d8:	fff00913          	li	s2,-1
    49dc:	f75ff06f          	j	4950 <lwiperf_start_tcp_server_impl+0x9c>
    return ERR_ARG;
    49e0:	ff000913          	li	s2,-16
    49e4:	f6dff06f          	j	4950 <lwiperf_start_tcp_server_impl+0x9c>
    return ERR_MEM;
    49e8:	fff00913          	li	s2,-1
    49ec:	f65ff06f          	j	4950 <lwiperf_start_tcp_server_impl+0x9c>
    return ERR_MEM;
    49f0:	fff00913          	li	s2,-1
    49f4:	f5dff06f          	j	4950 <lwiperf_start_tcp_server_impl+0x9c>

000049f8 <lwiperf_list_remove>:
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
    49f8:	9041a783          	lw	a5,-1788(gp) # 1fad4 <lwiperf_all_connections>
  lwiperf_state_base_t *prev = NULL;
    49fc:	00000713          	li	a4,0
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
    4a00:	06078263          	beqz	a5,4a64 <lwiperf_list_remove+0x6c>
    if (iter == item) {
    4a04:	00a78863          	beq	a5,a0,4a14 <lwiperf_list_remove+0x1c>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
    4a08:	00078713          	mv	a4,a5
    4a0c:	0007a783          	lw	a5,0(a5)
    4a10:	ff1ff06f          	j	4a00 <lwiperf_list_remove+0x8>
{
    4a14:	ff010113          	addi	sp,sp,-16
    4a18:	00112623          	sw	ra,12(sp)
    4a1c:	00812423          	sw	s0,8(sp)
    4a20:	00912223          	sw	s1,4(sp)
      if (prev == NULL) {
    4a24:	00070c63          	beqz	a4,4a3c <lwiperf_list_remove+0x44>
        prev->next = iter->next;
    4a28:	0007a683          	lw	a3,0(a5)
    4a2c:	00d72023          	sw	a3,0(a4)
    4a30:	00050493          	mv	s1,a0
      for (iter = iter->next; iter != NULL; iter = iter->next) {
    4a34:	0007a403          	lw	s0,0(a5)
    4a38:	0140006f          	j	4a4c <lwiperf_list_remove+0x54>
        lwiperf_all_connections = iter->next;
    4a3c:	0007a683          	lw	a3,0(a5)
    4a40:	90d1a223          	sw	a3,-1788(gp) # 1fad4 <lwiperf_all_connections>
    4a44:	fedff06f          	j	4a30 <lwiperf_list_remove+0x38>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
    4a48:	00042403          	lw	s0,0(s0)
    4a4c:	00040e63          	beqz	s0,4a68 <lwiperf_list_remove+0x70>
        LWIP_ASSERT("duplicate entry", iter != item);
    4a50:	fe941ce3          	bne	s0,s1,4a48 <lwiperf_list_remove+0x50>
    4a54:	0001d537          	lui	a0,0x1d
    4a58:	e3050513          	addi	a0,a0,-464 # 1ce30 <lwiperf_txbuf_const+0x650>
    4a5c:	d21ff0ef          	jal	ra,477c <bsp_printf>
    4a60:	fe9ff06f          	j	4a48 <lwiperf_list_remove+0x50>
    4a64:	00008067          	ret
}
    4a68:	00c12083          	lw	ra,12(sp)
    4a6c:	00812403          	lw	s0,8(sp)
    4a70:	00412483          	lw	s1,4(sp)
    4a74:	01010113          	addi	sp,sp,16
    4a78:	00008067          	ret

00004a7c <lwiperf_tcp_close>:
{
    4a7c:	ff010113          	addi	sp,sp,-16
    4a80:	00112623          	sw	ra,12(sp)
    4a84:	00812423          	sw	s0,8(sp)
    4a88:	00912223          	sw	s1,4(sp)
    4a8c:	00050413          	mv	s0,a0
    4a90:	00058493          	mv	s1,a1
  lwiperf_list_remove(&conn->base);
    4a94:	f65ff0ef          	jal	ra,49f8 <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
    4a98:	00048593          	mv	a1,s1
    4a9c:	00040513          	mv	a0,s0
    4aa0:	c55ff0ef          	jal	ra,46f4 <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
    4aa4:	01042503          	lw	a0,16(s0)
    4aa8:	06050a63          	beqz	a0,4b1c <lwiperf_tcp_close+0xa0>
    tcp_arg(conn->conn_pcb, NULL);
    4aac:	00000593          	li	a1,0
    4ab0:	4490d0ef          	jal	ra,126f8 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
    4ab4:	00000613          	li	a2,0
    4ab8:	00000593          	li	a1,0
    4abc:	01042503          	lw	a0,16(s0)
    4ac0:	55d0d0ef          	jal	ra,1281c <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
    4ac4:	00000593          	li	a1,0
    4ac8:	01042503          	lw	a0,16(s0)
    4acc:	48d0d0ef          	jal	ra,12758 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
    4ad0:	00000593          	li	a1,0
    4ad4:	01042503          	lw	a0,16(s0)
    4ad8:	42d0d0ef          	jal	ra,12704 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
    4adc:	00000593          	li	a1,0
    4ae0:	01042503          	lw	a0,16(s0)
    4ae4:	4c90d0ef          	jal	ra,127ac <tcp_err>
    err = tcp_close(conn->conn_pcb);
    4ae8:	01042503          	lw	a0,16(s0)
    4aec:	27d0e0ef          	jal	ra,13568 <tcp_close>
    if (err != ERR_OK) {
    4af0:	02051063          	bnez	a0,4b10 <lwiperf_tcp_close+0x94>
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
    4af4:	00040513          	mv	a0,s0
    4af8:	0b5100ef          	jal	ra,153ac <mem_free>
}
    4afc:	00c12083          	lw	ra,12(sp)
    4b00:	00812403          	lw	s0,8(sp)
    4b04:	00412483          	lw	s1,4(sp)
    4b08:	01010113          	addi	sp,sp,16
    4b0c:	00008067          	ret
      tcp_abort(conn->conn_pcb);
    4b10:	01042503          	lw	a0,16(s0)
    4b14:	3b80e0ef          	jal	ra,12ecc <tcp_abort>
    4b18:	fddff06f          	j	4af4 <lwiperf_tcp_close+0x78>
    err = tcp_close(conn->server_pcb);
    4b1c:	00c42503          	lw	a0,12(s0)
    4b20:	2490e0ef          	jal	ra,13568 <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
    4b24:	fc0508e3          	beqz	a0,4af4 <lwiperf_tcp_close+0x78>
    4b28:	0001d537          	lui	a0,0x1d
    4b2c:	e4050513          	addi	a0,a0,-448 # 1ce40 <lwiperf_txbuf_const+0x660>
    4b30:	c4dff0ef          	jal	ra,477c <bsp_printf>
    4b34:	fc1ff06f          	j	4af4 <lwiperf_tcp_close+0x78>

00004b38 <lwiperf_tcp_err>:
{
    4b38:	ff010113          	addi	sp,sp,-16
    4b3c:	00112623          	sw	ra,12(sp)
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
    4b40:	00500593          	li	a1,5
    4b44:	f39ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
}
    4b48:	00c12083          	lw	ra,12(sp)
    4b4c:	01010113          	addi	sp,sp,16
    4b50:	00008067          	ret

00004b54 <lwiperf_tcp_accept>:
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
    4b54:	18061c63          	bnez	a2,4cec <lwiperf_tcp_accept+0x198>
    4b58:	18058e63          	beqz	a1,4cf4 <lwiperf_tcp_accept+0x1a0>
    4b5c:	1a050063          	beqz	a0,4cfc <lwiperf_tcp_accept+0x1a8>
{
    4b60:	fe010113          	addi	sp,sp,-32
    4b64:	00112e23          	sw	ra,28(sp)
    4b68:	00812c23          	sw	s0,24(sp)
    4b6c:	00912a23          	sw	s1,20(sp)
    4b70:	01212823          	sw	s2,16(sp)
    4b74:	01312623          	sw	s3,12(sp)
    4b78:	00060993          	mv	s3,a2
    4b7c:	00058913          	mv	s2,a1
    4b80:	00050413          	mv	s0,a0
  LWIP_ASSERT("invalid session", s->base.server);
    4b84:	00554783          	lbu	a5,5(a0)
    4b88:	10078e63          	beqz	a5,4ca4 <lwiperf_tcp_accept+0x150>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
    4b8c:	00c42783          	lw	a5,12(s0)
    4b90:	12078263          	beqz	a5,4cb4 <lwiperf_tcp_accept+0x160>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
    4b94:	01042783          	lw	a5,16(s0)
    4b98:	00078863          	beqz	a5,4ba8 <lwiperf_tcp_accept+0x54>
    4b9c:	0001d537          	lui	a0,0x1d
    4ba0:	e6c50513          	addi	a0,a0,-404 # 1ce6c <lwiperf_txbuf_const+0x68c>
    4ba4:	bd9ff0ef          	jal	ra,477c <bsp_printf>
  if (s->specific_remote) {
    4ba8:	04144783          	lbu	a5,65(s0)
    4bac:	12078463          	beqz	a5,4cd4 <lwiperf_tcp_accept+0x180>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
    4bb0:	00842783          	lw	a5,8(s0)
    4bb4:	10078863          	beqz	a5,4cc4 <lwiperf_tcp_accept+0x170>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
    4bb8:	00492703          	lw	a4,4(s2)
    4bbc:	04442783          	lw	a5,68(s0)
    4bc0:	14f71263          	bne	a4,a5,4d04 <lwiperf_tcp_accept+0x1b0>
  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
    4bc4:	04800513          	li	a0,72
    4bc8:	3ad100ef          	jal	ra,15774 <mem_malloc>
    4bcc:	00050493          	mv	s1,a0
  if (conn == NULL) {
    4bd0:	12050e63          	beqz	a0,4d0c <lwiperf_tcp_accept+0x1b8>
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
    4bd4:	04800613          	li	a2,72
    4bd8:	00000593          	li	a1,0
    4bdc:	824fd0ef          	jal	ra,1c00 <memset>
  conn->base.tcp = 1;
    4be0:	00100793          	li	a5,1
    4be4:	00f48223          	sb	a5,4(s1)
  conn->base.server = 1;
    4be8:	00f482a3          	sb	a5,5(s1)
  conn->base.related_master_state = &s->base;
    4bec:	0084a423          	sw	s0,8(s1)
  conn->conn_pcb = newpcb;
    4bf0:	0124a823          	sw	s2,16(s1)
  conn->time_started = sys_now();
    4bf4:	f48fe0ef          	jal	ra,333c <sys_now>
    4bf8:	00a4aa23          	sw	a0,20(s1)
  conn->report_fn = s->report_fn;
    4bfc:	01842783          	lw	a5,24(s0)
    4c00:	00f4ac23          	sw	a5,24(s1)
  conn->report_arg = s->report_arg;
    4c04:	01c42783          	lw	a5,28(s0)
    4c08:	00f4ae23          	sw	a5,28(s1)
  tcp_arg(newpcb, conn);
    4c0c:	00048593          	mv	a1,s1
    4c10:	00090513          	mv	a0,s2
    4c14:	2e50d0ef          	jal	ra,126f8 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
    4c18:	000055b7          	lui	a1,0x5
    4c1c:	1dc58593          	addi	a1,a1,476 # 51dc <lwiperf_tcp_recv>
    4c20:	00090513          	mv	a0,s2
    4c24:	2e10d0ef          	jal	ra,12704 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
    4c28:	00200613          	li	a2,2
    4c2c:	000055b7          	lui	a1,0x5
    4c30:	ed858593          	addi	a1,a1,-296 # 4ed8 <lwiperf_tcp_poll>
    4c34:	00090513          	mv	a0,s2
    4c38:	3e50d0ef          	jal	ra,1281c <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
    4c3c:	000055b7          	lui	a1,0x5
    4c40:	b3858593          	addi	a1,a1,-1224 # 4b38 <lwiperf_tcp_err>
    4c44:	0104a503          	lw	a0,16(s1)
    4c48:	3650d0ef          	jal	ra,127ac <tcp_err>
  if (s->specific_remote) {
    4c4c:	04144783          	lbu	a5,65(s0)
    4c50:	02078663          	beqz	a5,4c7c <lwiperf_tcp_accept+0x128>
    conn->base.related_master_state = s->base.related_master_state;
    4c54:	00842503          	lw	a0,8(s0)
    4c58:	00a4a423          	sw	a0,8(s1)
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
    4c5c:	02244783          	lbu	a5,34(s0)
    4c60:	00078663          	beqz	a5,4c6c <lwiperf_tcp_accept+0x118>
    4c64:	a71ff0ef          	jal	ra,46d4 <lwiperf_list_find>
    4c68:	00051a63          	bnez	a0,4c7c <lwiperf_tcp_accept+0x128>
      s->report_fn = NULL;
    4c6c:	00042c23          	sw	zero,24(s0)
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
    4c70:	00200593          	li	a1,2
    4c74:	00040513          	mv	a0,s0
    4c78:	e05ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
  lwiperf_list_add(&conn->base);
    4c7c:	00048513          	mv	a0,s1
    4c80:	a45ff0ef          	jal	ra,46c4 <lwiperf_list_add>
  return ERR_OK;
    4c84:	00098513          	mv	a0,s3
}
    4c88:	01c12083          	lw	ra,28(sp)
    4c8c:	01812403          	lw	s0,24(sp)
    4c90:	01412483          	lw	s1,20(sp)
    4c94:	01012903          	lw	s2,16(sp)
    4c98:	00c12983          	lw	s3,12(sp)
    4c9c:	02010113          	addi	sp,sp,32
    4ca0:	00008067          	ret
  LWIP_ASSERT("invalid session", s->base.server);
    4ca4:	0001d537          	lui	a0,0x1d
    4ca8:	e4850513          	addi	a0,a0,-440 # 1ce48 <lwiperf_txbuf_const+0x668>
    4cac:	ad1ff0ef          	jal	ra,477c <bsp_printf>
    4cb0:	eddff06f          	j	4b8c <lwiperf_tcp_accept+0x38>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
    4cb4:	0001d537          	lui	a0,0x1d
    4cb8:	e5850513          	addi	a0,a0,-424 # 1ce58 <lwiperf_txbuf_const+0x678>
    4cbc:	ac1ff0ef          	jal	ra,477c <bsp_printf>
    4cc0:	ed5ff06f          	j	4b94 <lwiperf_tcp_accept+0x40>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
    4cc4:	0001d537          	lui	a0,0x1d
    4cc8:	e8050513          	addi	a0,a0,-384 # 1ce80 <lwiperf_txbuf_const+0x6a0>
    4ccc:	ab1ff0ef          	jal	ra,477c <bsp_printf>
    4cd0:	ee9ff06f          	j	4bb8 <lwiperf_tcp_accept+0x64>
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
    4cd4:	00842783          	lw	a5,8(s0)
    4cd8:	ee0786e3          	beqz	a5,4bc4 <lwiperf_tcp_accept+0x70>
    4cdc:	0001d537          	lui	a0,0x1d
    4ce0:	ea850513          	addi	a0,a0,-344 # 1cea8 <lwiperf_txbuf_const+0x6c8>
    4ce4:	a99ff0ef          	jal	ra,477c <bsp_printf>
    4ce8:	eddff06f          	j	4bc4 <lwiperf_tcp_accept+0x70>
    return ERR_VAL;
    4cec:	ffa00513          	li	a0,-6
    4cf0:	00008067          	ret
    4cf4:	ffa00513          	li	a0,-6
    4cf8:	00008067          	ret
    4cfc:	ffa00513          	li	a0,-6
}
    4d00:	00008067          	ret
      return ERR_VAL;
    4d04:	ffa00513          	li	a0,-6
    4d08:	f81ff06f          	j	4c88 <lwiperf_tcp_accept+0x134>
    return ERR_MEM;
    4d0c:	fff00513          	li	a0,-1
    4d10:	f79ff06f          	j	4c88 <lwiperf_tcp_accept+0x134>

00004d14 <lwiperf_tcp_client_send_more>:
{
    4d14:	fe010113          	addi	sp,sp,-32
    4d18:	00112e23          	sw	ra,28(sp)
    4d1c:	00812c23          	sw	s0,24(sp)
    4d20:	00912a23          	sw	s1,20(sp)
    4d24:	01212823          	sw	s2,16(sp)
    4d28:	01312623          	sw	s3,12(sp)
    4d2c:	01412423          	sw	s4,8(sp)
    4d30:	00050493          	mv	s1,a0
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
    4d34:	00050a63          	beqz	a0,4d48 <lwiperf_tcp_client_send_more+0x34>
    4d38:	00454783          	lbu	a5,4(a0)
    4d3c:	00078663          	beqz	a5,4d48 <lwiperf_tcp_client_send_more+0x34>
    4d40:	00554783          	lbu	a5,5(a0)
    4d44:	0e078863          	beqz	a5,4e34 <lwiperf_tcp_client_send_more+0x120>
    4d48:	0001d537          	lui	a0,0x1d
    4d4c:	ed050513          	addi	a0,a0,-304 # 1ced0 <lwiperf_txbuf_const+0x6f0>
    4d50:	a2dff0ef          	jal	ra,477c <bsp_printf>
    4d54:	0e00006f          	j	4e34 <lwiperf_tcp_client_send_more+0x120>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
    4d58:	00100593          	li	a1,1
    4d5c:	00048513          	mv	a0,s1
    4d60:	d1dff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
        return ERR_OK;
    4d64:	1500006f          	j	4eb4 <lwiperf_tcp_client_send_more+0x1a0>
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
    4d68:	728050ef          	jal	ra,a490 <lwip_htonl>
      if (amount_bytes >= conn->bytes_transferred) {
    4d6c:	0244a783          	lw	a5,36(s1)
    4d70:	0ef56c63          	bltu	a0,a5,4e68 <lwiperf_tcp_client_send_more+0x154>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
    4d74:	00100593          	li	a1,1
    4d78:	00048513          	mv	a0,s1
    4d7c:	d01ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
        return ERR_OK;
    4d80:	1340006f          	j	4eb4 <lwiperf_tcp_client_send_more+0x1a0>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
    4d84:	02848913          	addi	s2,s1,40
    4d88:	00890933          	add	s2,s2,s0
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
    4d8c:	01041793          	slli	a5,s0,0x10
    4d90:	0107d793          	srli	a5,a5,0x10
    4d94:	01800413          	li	s0,24
    4d98:	40f40433          	sub	s0,s0,a5
    4d9c:	01041413          	slli	s0,s0,0x10
    4da0:	01045413          	srli	s0,s0,0x10
      apiflags = TCP_WRITE_FLAG_COPY;
    4da4:	00100993          	li	s3,1
    send_more = 0;
    4da8:	00000a13          	li	s4,0
    4dac:	0500006f          	j	4dfc <lwiperf_tcp_client_send_more+0xe8>
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
    4db0:	00a00913          	li	s2,10
    4db4:	032477b3          	remu	a5,s0,s2
    4db8:	0001c937          	lui	s2,0x1c
    4dbc:	7e090913          	addi	s2,s2,2016 # 1c7e0 <lwiperf_txbuf_const>
    4dc0:	00f90933          	add	s2,s2,a5
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
    4dc4:	03000793          	li	a5,48
    4dc8:	00f40a63          	beq	s0,a5,4ddc <lwiperf_tcp_client_send_more+0xc8>
      apiflags = 0; /* no copying needed */
    4dcc:	00000993          	li	s3,0
      txlen_max = TCP_MSS;
    4dd0:	5b400413          	li	s0,1460
      send_more = 1;
    4dd4:	00100a13          	li	s4,1
    4dd8:	0240006f          	j	4dfc <lwiperf_tcp_client_send_more+0xe8>
      apiflags = 0; /* no copying needed */
    4ddc:	00000993          	li	s3,0
        txlen_max = TCP_MSS - 24;
    4de0:	59c00413          	li	s0,1436
      send_more = 1;
    4de4:	00100a13          	li	s4,1
    txlen = txlen_max;
    4de8:	0140006f          	j	4dfc <lwiperf_tcp_client_send_more+0xe8>
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
    4dec:	fff00793          	li	a5,-1
    4df0:	02f51863          	bne	a0,a5,4e20 <lwiperf_tcp_client_send_more+0x10c>
    4df4:	2d900793          	li	a5,729
    4df8:	0287f463          	bgeu	a5,s0,4e20 <lwiperf_tcp_client_send_more+0x10c>
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
    4dfc:	00098693          	mv	a3,s3
    4e00:	00040613          	mv	a2,s0
    4e04:	00090593          	mv	a1,s2
    4e08:	0104a503          	lw	a0,16(s1)
    4e0c:	461020ef          	jal	ra,7a6c <tcp_write>
      if (err ==  ERR_MEM) {
    4e10:	fff00793          	li	a5,-1
    4e14:	fcf51ce3          	bne	a0,a5,4dec <lwiperf_tcp_client_send_more+0xd8>
        txlen /= 2;
    4e18:	00145413          	srli	s0,s0,0x1
    4e1c:	fd1ff06f          	j	4dec <lwiperf_tcp_client_send_more+0xd8>
    if (err == ERR_OK) {
    4e20:	08051663          	bnez	a0,4eac <lwiperf_tcp_client_send_more+0x198>
      conn->bytes_transferred += txlen;
    4e24:	0244a783          	lw	a5,36(s1)
    4e28:	00878433          	add	s0,a5,s0
    4e2c:	0284a223          	sw	s0,36(s1)
  } while (send_more);
    4e30:	060a0e63          	beqz	s4,4eac <lwiperf_tcp_client_send_more+0x198>
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
    4e34:	03c4a503          	lw	a0,60(s1)
    4e38:	08057793          	andi	a5,a0,128
    4e3c:	f20786e3          	beqz	a5,4d68 <lwiperf_tcp_client_send_more+0x54>
      u32_t now = sys_now();
    4e40:	cfcfe0ef          	jal	ra,333c <sys_now>
      u32_t diff_ms = now - conn->time_started;
    4e44:	0144a403          	lw	s0,20(s1)
    4e48:	40850433          	sub	s0,a0,s0
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
    4e4c:	03c4a503          	lw	a0,60(s1)
    4e50:	640050ef          	jal	ra,a490 <lwip_htonl>
      u32_t time_ms = time * 10;
    4e54:	00251793          	slli	a5,a0,0x2
    4e58:	00a78533          	add	a0,a5,a0
    4e5c:	00151793          	slli	a5,a0,0x1
    4e60:	40f007b3          	neg	a5,a5
      if (diff_ms >= time_ms) {
    4e64:	eef47ae3          	bgeu	s0,a5,4d58 <lwiperf_tcp_client_send_more+0x44>
    if (conn->bytes_transferred < 24) {
    4e68:	0244a403          	lw	s0,36(s1)
    4e6c:	01700793          	li	a5,23
    4e70:	f087fae3          	bgeu	a5,s0,4d84 <lwiperf_tcp_client_send_more+0x70>
    } else if (conn->bytes_transferred < 48) {
    4e74:	02f00793          	li	a5,47
    4e78:	f287ece3          	bltu	a5,s0,4db0 <lwiperf_tcp_client_send_more+0x9c>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
    4e7c:	02848913          	addi	s2,s1,40
    4e80:	fe840793          	addi	a5,s0,-24
    4e84:	00f90933          	add	s2,s2,a5
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
    4e88:	01041793          	slli	a5,s0,0x10
    4e8c:	0107d793          	srli	a5,a5,0x10
    4e90:	03000413          	li	s0,48
    4e94:	40f40433          	sub	s0,s0,a5
    4e98:	01041413          	slli	s0,s0,0x10
    4e9c:	01045413          	srli	s0,s0,0x10
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
    4ea0:	00300993          	li	s3,3
      send_more = 1;
    4ea4:	00100a13          	li	s4,1
    4ea8:	f55ff06f          	j	4dfc <lwiperf_tcp_client_send_more+0xe8>
  tcp_output(conn->conn_pcb);
    4eac:	0104a503          	lw	a0,16(s1)
    4eb0:	599030ef          	jal	ra,8c48 <tcp_output>
}
    4eb4:	00000513          	li	a0,0
    4eb8:	01c12083          	lw	ra,28(sp)
    4ebc:	01812403          	lw	s0,24(sp)
    4ec0:	01412483          	lw	s1,20(sp)
    4ec4:	01012903          	lw	s2,16(sp)
    4ec8:	00c12983          	lw	s3,12(sp)
    4ecc:	00812a03          	lw	s4,8(sp)
    4ed0:	02010113          	addi	sp,sp,32
    4ed4:	00008067          	ret

00004ed8 <lwiperf_tcp_poll>:
{
    4ed8:	ff010113          	addi	sp,sp,-16
    4edc:	00112623          	sw	ra,12(sp)
    4ee0:	00812423          	sw	s0,8(sp)
    4ee4:	00050413          	mv	s0,a0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
    4ee8:	01052783          	lw	a5,16(a0)
    4eec:	00b78863          	beq	a5,a1,4efc <lwiperf_tcp_poll+0x24>
    4ef0:	0001d537          	lui	a0,0x1d
    4ef4:	ee050513          	addi	a0,a0,-288 # 1cee0 <lwiperf_txbuf_const+0x700>
    4ef8:	885ff0ef          	jal	ra,477c <bsp_printf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
    4efc:	02044783          	lbu	a5,32(s0)
    4f00:	00178793          	addi	a5,a5,1
    4f04:	0ff7f793          	andi	a5,a5,255
    4f08:	02f40023          	sb	a5,32(s0)
    4f0c:	00900713          	li	a4,9
    4f10:	02f76063          	bltu	a4,a5,4f30 <lwiperf_tcp_poll+0x58>
  if (!conn->base.server) {
    4f14:	00544783          	lbu	a5,5(s0)
    4f18:	02078463          	beqz	a5,4f40 <lwiperf_tcp_poll+0x68>
}
    4f1c:	00000513          	li	a0,0
    4f20:	00c12083          	lw	ra,12(sp)
    4f24:	00812403          	lw	s0,8(sp)
    4f28:	01010113          	addi	sp,sp,16
    4f2c:	00008067          	ret
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
    4f30:	00200593          	li	a1,2
    4f34:	00040513          	mv	a0,s0
    4f38:	b45ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
    4f3c:	fe1ff06f          	j	4f1c <lwiperf_tcp_poll+0x44>
    lwiperf_tcp_client_send_more(conn);
    4f40:	00040513          	mv	a0,s0
    4f44:	dd1ff0ef          	jal	ra,4d14 <lwiperf_tcp_client_send_more>
    4f48:	fd5ff06f          	j	4f1c <lwiperf_tcp_poll+0x44>

00004f4c <lwiperf_tcp_client_sent>:
{
    4f4c:	ff010113          	addi	sp,sp,-16
    4f50:	00112623          	sw	ra,12(sp)
    4f54:	00812423          	sw	s0,8(sp)
    4f58:	00050413          	mv	s0,a0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
    4f5c:	01052783          	lw	a5,16(a0)
    4f60:	00b78863          	beq	a5,a1,4f70 <lwiperf_tcp_client_sent+0x24>
    4f64:	0001d537          	lui	a0,0x1d
    4f68:	ef050513          	addi	a0,a0,-272 # 1cef0 <lwiperf_txbuf_const+0x710>
    4f6c:	811ff0ef          	jal	ra,477c <bsp_printf>
  conn->poll_count = 0;
    4f70:	02040023          	sb	zero,32(s0)
  return lwiperf_tcp_client_send_more(conn);
    4f74:	00040513          	mv	a0,s0
    4f78:	d9dff0ef          	jal	ra,4d14 <lwiperf_tcp_client_send_more>
}
    4f7c:	00c12083          	lw	ra,12(sp)
    4f80:	00812403          	lw	s0,8(sp)
    4f84:	01010113          	addi	sp,sp,16
    4f88:	00008067          	ret

00004f8c <lwiperf_tx_start_impl>:
{
    4f8c:	fc010113          	addi	sp,sp,-64
    4f90:	02112e23          	sw	ra,60(sp)
    4f94:	02812c23          	sw	s0,56(sp)
    4f98:	02912a23          	sw	s1,52(sp)
    4f9c:	03212823          	sw	s2,48(sp)
    4fa0:	03312623          	sw	s3,44(sp)
    4fa4:	03412423          	sw	s4,40(sp)
    4fa8:	03512223          	sw	s5,36(sp)
    4fac:	03612023          	sw	s6,32(sp)
    4fb0:	01712e23          	sw	s7,28(sp)
    4fb4:	01812c23          	sw	s8,24(sp)
    4fb8:	01912a23          	sw	s9,20(sp)
    4fbc:	00050993          	mv	s3,a0
    4fc0:	00058b13          	mv	s6,a1
    4fc4:	00060a13          	mv	s4,a2
    4fc8:	00068c13          	mv	s8,a3
    4fcc:	00070b93          	mv	s7,a4
    4fd0:	00078c93          	mv	s9,a5
    4fd4:	00080913          	mv	s2,a6
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
    4fd8:	12050663          	beqz	a0,5104 <lwiperf_tx_start_impl+0x178>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
    4fdc:	120a0c63          	beqz	s4,5114 <lwiperf_tx_start_impl+0x188>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
    4fe0:	14090263          	beqz	s2,5124 <lwiperf_tx_start_impl+0x198>
  *new_conn = NULL;
    4fe4:	00092023          	sw	zero,0(s2)
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
    4fe8:	04800513          	li	a0,72
    4fec:	788100ef          	jal	ra,15774 <mem_malloc>
    4ff0:	00050413          	mv	s0,a0
  if (client_conn == NULL) {
    4ff4:	16050063          	beqz	a0,5154 <lwiperf_tx_start_impl+0x1c8>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
    4ff8:	00000513          	li	a0,0
    4ffc:	3640e0ef          	jal	ra,13360 <tcp_new_ip_type>
    5000:	00050493          	mv	s1,a0
  if (newpcb == NULL) {
    5004:	12050863          	beqz	a0,5134 <lwiperf_tx_start_impl+0x1a8>
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
    5008:	04800613          	li	a2,72
    500c:	00000593          	li	a1,0
    5010:	00040513          	mv	a0,s0
    5014:	bedfc0ef          	jal	ra,1c00 <memset>
  client_conn->base.tcp = 1;
    5018:	00100a93          	li	s5,1
    501c:	01540223          	sb	s5,4(s0)
  client_conn->base.related_master_state = related_master_state;
    5020:	01942423          	sw	s9,8(s0)
  client_conn->conn_pcb = newpcb;
    5024:	00942823          	sw	s1,16(s0)
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
    5028:	b14fe0ef          	jal	ra,333c <sys_now>
    502c:	00a42a23          	sw	a0,20(s0)
  client_conn->report_fn = report_fn;
    5030:	01842c23          	sw	s8,24(s0)
  client_conn->report_arg = report_arg;
    5034:	01742e23          	sw	s7,28(s0)
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
    5038:	00400793          	li	a5,4
    503c:	02f400a3          	sb	a5,33(s0)
  client_conn->bytes_transferred = 0;
    5040:	02042223          	sw	zero,36(s0)
  memcpy(&client_conn->settings, settings, sizeof(*settings));
    5044:	01800613          	li	a2,24
    5048:	000a0593          	mv	a1,s4
    504c:	02840513          	addi	a0,s0,40
    5050:	975fc0ef          	jal	ra,19c4 <memcpy>
  client_conn->have_settings_buf = 1;
    5054:	05540023          	sb	s5,64(s0)
  tcp_arg(newpcb, client_conn);
    5058:	00040593          	mv	a1,s0
    505c:	00048513          	mv	a0,s1
    5060:	6980d0ef          	jal	ra,126f8 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
    5064:	000055b7          	lui	a1,0x5
    5068:	f4c58593          	addi	a1,a1,-180 # 4f4c <lwiperf_tcp_client_sent>
    506c:	00048513          	mv	a0,s1
    5070:	6e80d0ef          	jal	ra,12758 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
    5074:	00200613          	li	a2,2
    5078:	000055b7          	lui	a1,0x5
    507c:	ed858593          	addi	a1,a1,-296 # 4ed8 <lwiperf_tcp_poll>
    5080:	00048513          	mv	a0,s1
    5084:	7980d0ef          	jal	ra,1281c <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
    5088:	000055b7          	lui	a1,0x5
    508c:	b3858593          	addi	a1,a1,-1224 # 4b38 <lwiperf_tcp_err>
    5090:	00048513          	mv	a0,s1
    5094:	7180d0ef          	jal	ra,127ac <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
    5098:	0009a783          	lw	a5,0(s3)
    509c:	00f12623          	sw	a5,12(sp)
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
    50a0:	000056b7          	lui	a3,0x5
    50a4:	43868693          	addi	a3,a3,1080 # 5438 <lwiperf_tcp_client_connected>
    50a8:	000b0613          	mv	a2,s6
    50ac:	00c10593          	addi	a1,sp,12
    50b0:	00048513          	mv	a0,s1
    50b4:	0890d0ef          	jal	ra,1293c <tcp_connect>
    50b8:	00050493          	mv	s1,a0
  if (err != ERR_OK) {
    50bc:	08051463          	bnez	a0,5144 <lwiperf_tx_start_impl+0x1b8>
  lwiperf_list_add(&client_conn->base);
    50c0:	00040513          	mv	a0,s0
    50c4:	e00ff0ef          	jal	ra,46c4 <lwiperf_list_add>
  *new_conn = client_conn;
    50c8:	00892023          	sw	s0,0(s2)
}
    50cc:	00048513          	mv	a0,s1
    50d0:	03c12083          	lw	ra,60(sp)
    50d4:	03812403          	lw	s0,56(sp)
    50d8:	03412483          	lw	s1,52(sp)
    50dc:	03012903          	lw	s2,48(sp)
    50e0:	02c12983          	lw	s3,44(sp)
    50e4:	02812a03          	lw	s4,40(sp)
    50e8:	02412a83          	lw	s5,36(sp)
    50ec:	02012b03          	lw	s6,32(sp)
    50f0:	01c12b83          	lw	s7,28(sp)
    50f4:	01812c03          	lw	s8,24(sp)
    50f8:	01412c83          	lw	s9,20(sp)
    50fc:	04010113          	addi	sp,sp,64
    5100:	00008067          	ret
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
    5104:	0001d537          	lui	a0,0x1d
    5108:	f0050513          	addi	a0,a0,-256 # 1cf00 <lwiperf_txbuf_const+0x720>
    510c:	e70ff0ef          	jal	ra,477c <bsp_printf>
    5110:	ecdff06f          	j	4fdc <lwiperf_tx_start_impl+0x50>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
    5114:	0001d537          	lui	a0,0x1d
    5118:	f0050513          	addi	a0,a0,-256 # 1cf00 <lwiperf_txbuf_const+0x720>
    511c:	e60ff0ef          	jal	ra,477c <bsp_printf>
    5120:	ec1ff06f          	j	4fe0 <lwiperf_tx_start_impl+0x54>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
    5124:	0001d537          	lui	a0,0x1d
    5128:	f1450513          	addi	a0,a0,-236 # 1cf14 <lwiperf_txbuf_const+0x734>
    512c:	e50ff0ef          	jal	ra,477c <bsp_printf>
    5130:	eb5ff06f          	j	4fe4 <lwiperf_tx_start_impl+0x58>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
    5134:	00040513          	mv	a0,s0
    5138:	274100ef          	jal	ra,153ac <mem_free>
    return ERR_MEM;
    513c:	fff00493          	li	s1,-1
    5140:	f8dff06f          	j	50cc <lwiperf_tx_start_impl+0x140>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
    5144:	00200593          	li	a1,2
    5148:	00040513          	mv	a0,s0
    514c:	931ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
    return err;
    5150:	f7dff06f          	j	50cc <lwiperf_tx_start_impl+0x140>
    return ERR_MEM;
    5154:	fff00493          	li	s1,-1
    5158:	f75ff06f          	j	50cc <lwiperf_tx_start_impl+0x140>

0000515c <lwiperf_tx_start_passive>:
{
    515c:	fe010113          	addi	sp,sp,-32
    5160:	00112e23          	sw	ra,28(sp)
    5164:	00812c23          	sw	s0,24(sp)
    5168:	00050413          	mv	s0,a0
  lwiperf_state_tcp_t *new_conn = NULL;
    516c:	00012623          	sw	zero,12(sp)
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
    5170:	03052503          	lw	a0,48(a0)
    5174:	31c050ef          	jal	ra,a490 <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
    5178:	01042883          	lw	a7,16(s0)
    517c:	00c10813          	addi	a6,sp,12
    5180:	00842783          	lw	a5,8(s0)
    5184:	01c42703          	lw	a4,28(s0)
    5188:	01842683          	lw	a3,24(s0)
    518c:	02840613          	addi	a2,s0,40
    5190:	01051593          	slli	a1,a0,0x10
    5194:	0105d593          	srli	a1,a1,0x10
    5198:	00488513          	addi	a0,a7,4
    519c:	df1ff0ef          	jal	ra,4f8c <lwiperf_tx_start_impl>
    51a0:	00050413          	mv	s0,a0
  if (ret == ERR_OK) {
    51a4:	00051a63          	bnez	a0,51b8 <lwiperf_tx_start_passive+0x5c>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
    51a8:	00c12783          	lw	a5,12(sp)
    51ac:	02078063          	beqz	a5,51cc <lwiperf_tx_start_passive+0x70>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
    51b0:	00c12783          	lw	a5,12(sp)
    51b4:	0207a423          	sw	zero,40(a5)
}
    51b8:	00040513          	mv	a0,s0
    51bc:	01c12083          	lw	ra,28(sp)
    51c0:	01812403          	lw	s0,24(sp)
    51c4:	02010113          	addi	sp,sp,32
    51c8:	00008067          	ret
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
    51cc:	0001d537          	lui	a0,0x1d
    51d0:	f1450513          	addi	a0,a0,-236 # 1cf14 <lwiperf_txbuf_const+0x734>
    51d4:	da8ff0ef          	jal	ra,477c <bsp_printf>
    51d8:	fd9ff06f          	j	51b0 <lwiperf_tx_start_passive+0x54>

000051dc <lwiperf_tcp_recv>:
{
    51dc:	fe010113          	addi	sp,sp,-32
    51e0:	00112e23          	sw	ra,28(sp)
    51e4:	00812c23          	sw	s0,24(sp)
    51e8:	00912a23          	sw	s1,20(sp)
    51ec:	01212823          	sw	s2,16(sp)
    51f0:	01312623          	sw	s3,12(sp)
    51f4:	01412423          	sw	s4,8(sp)
    51f8:	00050493          	mv	s1,a0
    51fc:	00058993          	mv	s3,a1
    5200:	00060913          	mv	s2,a2
    5204:	00068413          	mv	s0,a3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
    5208:	01052783          	lw	a5,16(a0)
    520c:	00b78863          	beq	a5,a1,521c <lwiperf_tcp_recv+0x40>
    5210:	0001d537          	lui	a0,0x1d
    5214:	ee050513          	addi	a0,a0,-288 # 1cee0 <lwiperf_txbuf_const+0x700>
    5218:	d64ff0ef          	jal	ra,477c <bsp_printf>
  if (err != ERR_OK) {
    521c:	08041a63          	bnez	s0,52b0 <lwiperf_tcp_recv+0xd4>
  if (p == NULL) {
    5220:	0a090063          	beqz	s2,52c0 <lwiperf_tcp_recv+0xe4>
  tot_len = p->tot_len;
    5224:	00895a03          	lhu	s4,8(s2)
  conn->poll_count = 0;
    5228:	02048023          	sb	zero,32(s1)
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
    522c:	0404c703          	lbu	a4,64(s1)
    5230:	00070e63          	beqz	a4,524c <lwiperf_tcp_recv+0x70>
    5234:	0244a783          	lw	a5,36(s1)
    5238:	fe878793          	addi	a5,a5,-24
    523c:	000206b7          	lui	a3,0x20
    5240:	fff68693          	addi	a3,a3,-1 # 1ffff <descriptors0+0x23f>
    5244:	00d7f7b3          	and	a5,a5,a3
    5248:	04079663          	bnez	a5,5294 <lwiperf_tcp_recv+0xb8>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
    524c:	00895683          	lhu	a3,8(s2)
    5250:	01700793          	li	a5,23
    5254:	08d7fe63          	bgeu	a5,a3,52f0 <lwiperf_tcp_recv+0x114>
    if (!conn->have_settings_buf) {
    5258:	0a070863          	beqz	a4,5308 <lwiperf_tcp_recv+0x12c>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
    525c:	0284a783          	lw	a5,40(s1)
    5260:	0807f793          	andi	a5,a5,128
    5264:	10079c63          	bnez	a5,537c <lwiperf_tcp_recv+0x1a0>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
    5268:	0244a783          	lw	a5,36(s1)
    526c:	01878793          	addi	a5,a5,24
    5270:	02f4a223          	sw	a5,36(s1)
    if (conn->bytes_transferred <= 24) {
    5274:	01800713          	li	a4,24
    5278:	12f77a63          	bgeu	a4,a5,53ac <lwiperf_tcp_recv+0x1d0>
    conn->next_num = 4; /* 24 bytes received... */
    527c:	00400793          	li	a5,4
    5280:	02f480a3          	sb	a5,33(s1)
    tmp = pbuf_remove_header(p, 24);
    5284:	01800593          	li	a1,24
    5288:	00090513          	mv	a0,s2
    528c:	7c0070ef          	jal	ra,ca4c <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
    5290:	12051e63          	bnez	a0,53cc <lwiperf_tcp_recv+0x1f0>
  for (q = p; q != NULL; q = q->next) {
    5294:	00090793          	mv	a5,s2
  packet_idx = 0;
    5298:	00000413          	li	s0,0
  for (q = p; q != NULL; q = q->next) {
    529c:	14078063          	beqz	a5,53dc <lwiperf_tcp_recv+0x200>
    packet_idx += q->len;
    52a0:	00a7d703          	lhu	a4,10(a5)
    52a4:	00e40433          	add	s0,s0,a4
  for (q = p; q != NULL; q = q->next) {
    52a8:	0007a783          	lw	a5,0(a5)
    52ac:	ff1ff06f          	j	529c <lwiperf_tcp_recv+0xc0>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
    52b0:	00500593          	li	a1,5
    52b4:	00048513          	mv	a0,s1
    52b8:	fc4ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
    return ERR_OK;
    52bc:	1480006f          	j	5404 <lwiperf_tcp_recv+0x228>
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
    52c0:	0284a783          	lw	a5,40(s1)
    52c4:	0807f713          	andi	a4,a5,128
    52c8:	00070663          	beqz	a4,52d4 <lwiperf_tcp_recv+0xf8>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
    52cc:	00779713          	slli	a4,a5,0x7
    52d0:	00075a63          	bgez	a4,52e4 <lwiperf_tcp_recv+0x108>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
    52d4:	00000593          	li	a1,0
    52d8:	00048513          	mv	a0,s1
    52dc:	fa0ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
    return ERR_OK;
    52e0:	1240006f          	j	5404 <lwiperf_tcp_recv+0x228>
        lwiperf_tx_start_passive(conn);
    52e4:	00048513          	mv	a0,s1
    52e8:	e75ff0ef          	jal	ra,515c <lwiperf_tx_start_passive>
    52ec:	fe9ff06f          	j	52d4 <lwiperf_tcp_recv+0xf8>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
    52f0:	00300593          	li	a1,3
    52f4:	00048513          	mv	a0,s1
    52f8:	f84ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
      pbuf_free(p);
    52fc:	00090513          	mv	a0,s2
    5300:	051070ef          	jal	ra,cb50 <pbuf_free>
      return ERR_OK;
    5304:	1000006f          	j	5404 <lwiperf_tcp_recv+0x228>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
    5308:	00000693          	li	a3,0
    530c:	01800613          	li	a2,24
    5310:	02848593          	addi	a1,s1,40
    5314:	00090513          	mv	a0,s2
    5318:	0ec080ef          	jal	ra,d404 <pbuf_copy_partial>
    531c:	01800793          	li	a5,24
    5320:	04f51263          	bne	a0,a5,5364 <lwiperf_tcp_recv+0x188>
      conn->have_settings_buf = 1;
    5324:	00100793          	li	a5,1
    5328:	04f48023          	sb	a5,64(s1)
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
    532c:	0284a783          	lw	a5,40(s1)
    5330:	0807f713          	andi	a4,a5,128
    5334:	f2070ae3          	beqz	a4,5268 <lwiperf_tcp_recv+0x8c>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
    5338:	00779713          	slli	a4,a5,0x7
    533c:	f20756e3          	bgez	a4,5268 <lwiperf_tcp_recv+0x8c>
          err_t err2 = lwiperf_tx_start_passive(conn);
    5340:	00048513          	mv	a0,s1
    5344:	e19ff0ef          	jal	ra,515c <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
    5348:	f20500e3          	beqz	a0,5268 <lwiperf_tcp_recv+0x8c>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
    534c:	00400593          	li	a1,4
    5350:	00048513          	mv	a0,s1
    5354:	f28ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
            pbuf_free(p);
    5358:	00090513          	mv	a0,s2
    535c:	7f4070ef          	jal	ra,cb50 <pbuf_free>
            return ERR_OK;
    5360:	0a40006f          	j	5404 <lwiperf_tcp_recv+0x228>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
    5364:	00200593          	li	a1,2
    5368:	00048513          	mv	a0,s1
    536c:	f10ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
        pbuf_free(p);
    5370:	00090513          	mv	a0,s2
    5374:	7dc070ef          	jal	ra,cb50 <pbuf_free>
        return ERR_OK;
    5378:	08c0006f          	j	5404 <lwiperf_tcp_recv+0x228>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
    537c:	01800693          	li	a3,24
    5380:	02848613          	addi	a2,s1,40
    5384:	00000593          	li	a1,0
    5388:	00090513          	mv	a0,s2
    538c:	52c080ef          	jal	ra,d8b8 <pbuf_memcmp>
    5390:	ec050ce3          	beqz	a0,5268 <lwiperf_tcp_recv+0x8c>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
    5394:	00300593          	li	a1,3
    5398:	00048513          	mv	a0,s1
    539c:	ee0ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
          pbuf_free(p);
    53a0:	00090513          	mv	a0,s2
    53a4:	7ac070ef          	jal	ra,cb50 <pbuf_free>
          return ERR_OK;
    53a8:	05c0006f          	j	5404 <lwiperf_tcp_recv+0x228>
      conn->time_started = sys_now();
    53ac:	f91fd0ef          	jal	ra,333c <sys_now>
    53b0:	00a4aa23          	sw	a0,20(s1)
      tcp_recved(tpcb, p->tot_len);
    53b4:	00895583          	lhu	a1,8(s2)
    53b8:	00098513          	mv	a0,s3
    53bc:	1600d0ef          	jal	ra,1251c <tcp_recved>
      pbuf_free(p);
    53c0:	00090513          	mv	a0,s2
    53c4:	78c070ef          	jal	ra,cb50 <pbuf_free>
      return ERR_OK;
    53c8:	03c0006f          	j	5404 <lwiperf_tcp_recv+0x228>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
    53cc:	0001d537          	lui	a0,0x1d
    53d0:	f2850513          	addi	a0,a0,-216 # 1cf28 <lwiperf_txbuf_const+0x748>
    53d4:	ba8ff0ef          	jal	ra,477c <bsp_printf>
    53d8:	ebdff06f          	j	5294 <lwiperf_tcp_recv+0xb8>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
    53dc:	00895783          	lhu	a5,8(s2)
    53e0:	04879463          	bne	a5,s0,5428 <lwiperf_tcp_recv+0x24c>
  conn->bytes_transferred += packet_idx;
    53e4:	0244a783          	lw	a5,36(s1)
    53e8:	00878433          	add	s0,a5,s0
    53ec:	0284a223          	sw	s0,36(s1)
  tcp_recved(tpcb, tot_len);
    53f0:	000a0593          	mv	a1,s4
    53f4:	00098513          	mv	a0,s3
    53f8:	1240d0ef          	jal	ra,1251c <tcp_recved>
  pbuf_free(p);
    53fc:	00090513          	mv	a0,s2
    5400:	750070ef          	jal	ra,cb50 <pbuf_free>
}
    5404:	00000513          	li	a0,0
    5408:	01c12083          	lw	ra,28(sp)
    540c:	01812403          	lw	s0,24(sp)
    5410:	01412483          	lw	s1,20(sp)
    5414:	01012903          	lw	s2,16(sp)
    5418:	00c12983          	lw	s3,12(sp)
    541c:	00812a03          	lw	s4,8(sp)
    5420:	02010113          	addi	sp,sp,32
    5424:	00008067          	ret
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
    5428:	0001d537          	lui	a0,0x1d
    542c:	f4450513          	addi	a0,a0,-188 # 1cf44 <lwiperf_txbuf_const+0x764>
    5430:	b4cff0ef          	jal	ra,477c <bsp_printf>
    5434:	fb1ff06f          	j	53e4 <lwiperf_tcp_recv+0x208>

00005438 <lwiperf_tcp_client_connected>:
{
    5438:	ff010113          	addi	sp,sp,-16
    543c:	00112623          	sw	ra,12(sp)
    5440:	00812423          	sw	s0,8(sp)
    5444:	00912223          	sw	s1,4(sp)
    5448:	00050413          	mv	s0,a0
    544c:	00060493          	mv	s1,a2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
    5450:	01052783          	lw	a5,16(a0)
    5454:	00b78863          	beq	a5,a1,5464 <lwiperf_tcp_client_connected+0x2c>
    5458:	0001d537          	lui	a0,0x1d
    545c:	ef050513          	addi	a0,a0,-272 # 1cef0 <lwiperf_txbuf_const+0x710>
    5460:	b1cff0ef          	jal	ra,477c <bsp_printf>
  if (err != ERR_OK) {
    5464:	02049663          	bnez	s1,5490 <lwiperf_tcp_client_connected+0x58>
  conn->poll_count = 0;
    5468:	02040023          	sb	zero,32(s0)
  conn->time_started = sys_now();
    546c:	ed1fd0ef          	jal	ra,333c <sys_now>
    5470:	00a42a23          	sw	a0,20(s0)
  return lwiperf_tcp_client_send_more(conn);
    5474:	00040513          	mv	a0,s0
    5478:	89dff0ef          	jal	ra,4d14 <lwiperf_tcp_client_send_more>
}
    547c:	00c12083          	lw	ra,12(sp)
    5480:	00812403          	lw	s0,8(sp)
    5484:	00412483          	lw	s1,4(sp)
    5488:	01010113          	addi	sp,sp,16
    548c:	00008067          	ret
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
    5490:	00500593          	li	a1,5
    5494:	00040513          	mv	a0,s0
    5498:	de4ff0ef          	jal	ra,4a7c <lwiperf_tcp_close>
    return ERR_OK;
    549c:	00000513          	li	a0,0
    54a0:	fddff06f          	j	547c <lwiperf_tcp_client_connected+0x44>

000054a4 <lwiperf_start_tcp_server>:
{
    54a4:	fe010113          	addi	sp,sp,-32
    54a8:	00112e23          	sw	ra,28(sp)
  lwiperf_state_tcp_t *state = NULL;
    54ac:	00012623          	sw	zero,12(sp)
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
    54b0:	00c10793          	addi	a5,sp,12
    54b4:	00000713          	li	a4,0
    54b8:	bfcff0ef          	jal	ra,48b4 <lwiperf_start_tcp_server_impl>
  if (err == ERR_OK) {
    54bc:	00051a63          	bnez	a0,54d0 <lwiperf_start_tcp_server+0x2c>
    return state;
    54c0:	00c12503          	lw	a0,12(sp)
}
    54c4:	01c12083          	lw	ra,28(sp)
    54c8:	02010113          	addi	sp,sp,32
    54cc:	00008067          	ret
  return NULL;
    54d0:	00000513          	li	a0,0
    54d4:	ff1ff06f          	j	54c4 <lwiperf_start_tcp_server+0x20>

000054d8 <lwiperf_start_tcp_server_default>:
{
    54d8:	ff010113          	addi	sp,sp,-16
    54dc:	00112623          	sw	ra,12(sp)
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
    54e0:	00058693          	mv	a3,a1
    54e4:	00050613          	mv	a2,a0
    54e8:	000015b7          	lui	a1,0x1
    54ec:	38958593          	addi	a1,a1,905 # 1389 <_malloc_r+0x255>
    54f0:	8ac18513          	addi	a0,gp,-1876 # 1fa7c <ip_addr_any>
    54f4:	fb1ff0ef          	jal	ra,54a4 <lwiperf_start_tcp_server>
}
    54f8:	00c12083          	lw	ra,12(sp)
    54fc:	01010113          	addi	sp,sp,16
    5500:	00008067          	ret

00005504 <lwiperf_abort>:
 * @ingroup iperf
 * Abort an iperf session (handle returned by lwiperf_start_tcp_server*())
 */
void
lwiperf_abort(void *lwiperf_session)
{
    5504:	ff010113          	addi	sp,sp,-16
    5508:	00112623          	sw	ra,12(sp)
    550c:	00812423          	sw	s0,8(sp)
    5510:	00912223          	sw	s1,4(sp)
    5514:	01212023          	sw	s2,0(sp)
    5518:	00050413          	mv	s0,a0
  lwiperf_state_base_t *i, *dealloc, *last = NULL;

  LWIP_ASSERT_CORE_LOCKED();

  for (i = lwiperf_all_connections; i != NULL; ) {
    551c:	9041a503          	lw	a0,-1788(gp) # 1fad4 <lwiperf_all_connections>
  lwiperf_state_base_t *i, *dealloc, *last = NULL;
    5520:	00000493          	li	s1,0
  for (i = lwiperf_all_connections; i != NULL; ) {
    5524:	0180006f          	j	553c <lwiperf_abort+0x38>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
      dealloc = i;
      i = i->next;
    5528:	00052903          	lw	s2,0(a0)
      if (last != NULL) {
    552c:	00048463          	beqz	s1,5534 <lwiperf_abort+0x30>
        last->next = i;
    5530:	0124a023          	sw	s2,0(s1)
      }
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
    5534:	6790f0ef          	jal	ra,153ac <mem_free>
      i = i->next;
    5538:	00090513          	mv	a0,s2
  for (i = lwiperf_all_connections; i != NULL; ) {
    553c:	00050e63          	beqz	a0,5558 <lwiperf_abort+0x54>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
    5540:	fe8504e3          	beq	a0,s0,5528 <lwiperf_abort+0x24>
    5544:	00852783          	lw	a5,8(a0)
    5548:	fe8780e3          	beq	a5,s0,5528 <lwiperf_abort+0x24>
    } else {
      last = i;
    554c:	00050493          	mv	s1,a0
      i = i->next;
    5550:	00052503          	lw	a0,0(a0)
    5554:	fe9ff06f          	j	553c <lwiperf_abort+0x38>
    }
  }
}
    5558:	00c12083          	lw	ra,12(sp)
    555c:	00812403          	lw	s0,8(sp)
    5560:	00412483          	lw	s1,4(sp)
    5564:	00012903          	lw	s2,0(sp)
    5568:	01010113          	addi	sp,sp,16
    556c:	00008067          	ret

00005570 <lwiperf_start_tcp_client>:
{
    5570:	fc010113          	addi	sp,sp,-64
    5574:	02112e23          	sw	ra,60(sp)
    5578:	02812c23          	sw	s0,56(sp)
    557c:	02912a23          	sw	s1,52(sp)
    5580:	03212823          	sw	s2,48(sp)
    5584:	03312623          	sw	s3,44(sp)
    5588:	03412423          	sw	s4,40(sp)
    558c:	00050993          	mv	s3,a0
    5590:	00058a13          	mv	s4,a1
    5594:	00060413          	mv	s0,a2
    5598:	00068493          	mv	s1,a3
    559c:	00070913          	mv	s2,a4
  lwiperf_state_tcp_t *state = NULL;
    55a0:	00012223          	sw	zero,4(sp)
  memset(&settings, 0, sizeof(settings));
    55a4:	00012423          	sw	zero,8(sp)
    55a8:	00012623          	sw	zero,12(sp)
    55ac:	00012823          	sw	zero,16(sp)
    55b0:	00012a23          	sw	zero,20(sp)
    55b4:	00012c23          	sw	zero,24(sp)
    55b8:	00012e23          	sw	zero,28(sp)
  switch (type) {
    55bc:	00100793          	li	a5,1
    55c0:	02f60a63          	beq	a2,a5,55f4 <lwiperf_start_tcp_client+0x84>
    55c4:	04060063          	beqz	a2,5604 <lwiperf_start_tcp_client+0x94>
    55c8:	00200793          	li	a5,2
    55cc:	08f60c63          	beq	a2,a5,5664 <lwiperf_start_tcp_client+0xf4>
    return NULL;
    55d0:	00000513          	li	a0,0
}
    55d4:	03c12083          	lw	ra,60(sp)
    55d8:	03812403          	lw	s0,56(sp)
    55dc:	03412483          	lw	s1,52(sp)
    55e0:	03012903          	lw	s2,48(sp)
    55e4:	02c12983          	lw	s3,44(sp)
    55e8:	02812a03          	lw	s4,40(sp)
    55ec:	04010113          	addi	sp,sp,64
    55f0:	00008067          	ret
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST | LWIPERF_FLAGS_ANSWER_NOW);
    55f4:	80000537          	lui	a0,0x80000
    55f8:	00150513          	addi	a0,a0,1 # 80000001 <__freertos_irq_stack_top+0x7ffdb0d1>
    55fc:	695040ef          	jal	ra,a490 <lwip_htonl>
    5600:	00a12423          	sw	a0,8(sp)
  settings.num_threads = htonl(1);
    5604:	00100513          	li	a0,1
    5608:	689040ef          	jal	ra,a490 <lwip_htonl>
    560c:	00a12623          	sw	a0,12(sp)
  settings.remote_port = htonl(LWIPERF_TCP_PORT_DEFAULT);
    5610:	00001537          	lui	a0,0x1
    5614:	38950513          	addi	a0,a0,905 # 1389 <_malloc_r+0x255>
    5618:	679040ef          	jal	ra,a490 <lwip_htonl>
    561c:	00a12823          	sw	a0,16(sp)
  settings.amount = htonl((u32_t)-1000);
    5620:	c1800513          	li	a0,-1000
    5624:	66d040ef          	jal	ra,a490 <lwip_htonl>
    5628:	00a12e23          	sw	a0,28(sp)
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
    562c:	00410813          	addi	a6,sp,4
    5630:	00000793          	li	a5,0
    5634:	00090713          	mv	a4,s2
    5638:	00048693          	mv	a3,s1
    563c:	00810613          	addi	a2,sp,8
    5640:	000a0593          	mv	a1,s4
    5644:	00098513          	mv	a0,s3
    5648:	945ff0ef          	jal	ra,4f8c <lwiperf_tx_start_impl>
  if (ret == ERR_OK) {
    564c:	0a051263          	bnez	a0,56f0 <lwiperf_start_tcp_client+0x180>
    LWIP_ASSERT("state != NULL", state != NULL);
    5650:	00412783          	lw	a5,4(sp)
    5654:	02078063          	beqz	a5,5674 <lwiperf_start_tcp_client+0x104>
    if (type != LWIPERF_CLIENT) {
    5658:	02041663          	bnez	s0,5684 <lwiperf_start_tcp_client+0x114>
    return state;
    565c:	00412503          	lw	a0,4(sp)
    5660:	f75ff06f          	j	55d4 <lwiperf_start_tcp_client+0x64>
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
    5664:	80000537          	lui	a0,0x80000
    5668:	629040ef          	jal	ra,a490 <lwip_htonl>
    566c:	00a12423          	sw	a0,8(sp)
    break;
    5670:	f95ff06f          	j	5604 <lwiperf_start_tcp_client+0x94>
    LWIP_ASSERT("state != NULL", state != NULL);
    5674:	0001d537          	lui	a0,0x1d
    5678:	e2050513          	addi	a0,a0,-480 # 1ce20 <lwiperf_txbuf_const+0x640>
    567c:	900ff0ef          	jal	ra,477c <bsp_printf>
    5680:	fd9ff06f          	j	5658 <lwiperf_start_tcp_client+0xe8>
      lwiperf_state_tcp_t *server = NULL;
    5684:	00012023          	sw	zero,0(sp)
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
    5688:	00412503          	lw	a0,4(sp)
    568c:	00010793          	mv	a5,sp
    5690:	00050713          	mv	a4,a0
    5694:	00090693          	mv	a3,s2
    5698:	00048613          	mv	a2,s1
    569c:	000015b7          	lui	a1,0x1
    56a0:	38958593          	addi	a1,a1,905 # 1389 <_malloc_r+0x255>
    56a4:	01052503          	lw	a0,16(a0)
    56a8:	a0cff0ef          	jal	ra,48b4 <lwiperf_start_tcp_server_impl>
      if (ret != ERR_OK) {
    56ac:	02051a63          	bnez	a0,56e0 <lwiperf_start_tcp_client+0x170>
      server->specific_remote = 1;
    56b0:	00012783          	lw	a5,0(sp)
    56b4:	00100713          	li	a4,1
    56b8:	04e780a3          	sb	a4,65(a5)
      server->remote_addr = state->conn_pcb->remote_ip;
    56bc:	00412703          	lw	a4,4(sp)
    56c0:	01072703          	lw	a4,16(a4)
    56c4:	00472703          	lw	a4,4(a4)
    56c8:	04e7a223          	sw	a4,68(a5)
      if (type == LWIPERF_TRADEOFF) {
    56cc:	00200713          	li	a4,2
    56d0:	f8e416e3          	bne	s0,a4,565c <lwiperf_start_tcp_client+0xec>
        server->client_tradeoff_mode = 1;
    56d4:	00100713          	li	a4,1
    56d8:	02e78123          	sb	a4,34(a5)
    56dc:	f81ff06f          	j	565c <lwiperf_start_tcp_client+0xec>
        lwiperf_abort(state);
    56e0:	00412503          	lw	a0,4(sp)
    56e4:	e21ff0ef          	jal	ra,5504 <lwiperf_abort>
        return NULL;
    56e8:	00000513          	li	a0,0
    56ec:	ee9ff06f          	j	55d4 <lwiperf_start_tcp_client+0x64>
  return NULL;
    56f0:	00000513          	li	a0,0
    56f4:	ee1ff06f          	j	55d4 <lwiperf_start_tcp_client+0x64>

000056f8 <lwiperf_start_tcp_client_default>:
{
    56f8:	ff010113          	addi	sp,sp,-16
    56fc:	00112623          	sw	ra,12(sp)
  return lwiperf_start_tcp_client(remote_addr, LWIPERF_TCP_PORT_DEFAULT, LWIPERF_CLIENT,
    5700:	00060713          	mv	a4,a2
    5704:	00058693          	mv	a3,a1
    5708:	00000613          	li	a2,0
    570c:	000015b7          	lui	a1,0x1
    5710:	38958593          	addi	a1,a1,905 # 1389 <_malloc_r+0x255>
    5714:	e5dff0ef          	jal	ra,5570 <lwiperf_start_tcp_client>
}
    5718:	00c12083          	lw	ra,12(sp)
    571c:	01010113          	addi	sp,sp,16
    5720:	00008067          	ret

00005724 <Reg_Out32>:
    5724:	00b52023          	sw	a1,0(a0)

/************************** Function File ***************************/
void Reg_Out32(u32 addr,u32 data)
{
    write_u32(data,addr);
}
    5728:	00008067          	ret

0000572c <Reg_In32>:
        return *((volatile u32*) address);
    572c:	00052503          	lw	a0,0(a0)

u32 Reg_In32(u32 addr)
{
    return read_u32(addr);
}
    5730:	00008067          	ret

00005734 <uart_writeAvailability>:
    5734:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    5738:	01055513          	srli	a0,a0,0x10
    }
    573c:	0ff57513          	andi	a0,a0,255
    5740:	00008067          	ret

00005744 <uart_write>:
    static void uart_write(u32 reg, char data){
    5744:	ff010113          	addi	sp,sp,-16
    5748:	00112623          	sw	ra,12(sp)
    574c:	00812423          	sw	s0,8(sp)
    5750:	00912223          	sw	s1,4(sp)
    5754:	00050413          	mv	s0,a0
    5758:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    575c:	00040513          	mv	a0,s0
    5760:	fd5ff0ef          	jal	ra,5734 <uart_writeAvailability>
    5764:	fe050ce3          	beqz	a0,575c <uart_write+0x18>
        *((volatile u32*) address) = data;
    5768:	00942023          	sw	s1,0(s0)
    }
    576c:	00c12083          	lw	ra,12(sp)
    5770:	00812403          	lw	s0,8(sp)
    5774:	00412483          	lw	s1,4(sp)
    5778:	01010113          	addi	sp,sp,16
    577c:	00008067          	ret

00005780 <bsp_printHex>:
    {
    5780:	ff010113          	addi	sp,sp,-16
    5784:	00112623          	sw	ra,12(sp)
    5788:	00812423          	sw	s0,8(sp)
    578c:	00912223          	sw	s1,4(sp)
    5790:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    5794:	01c00413          	li	s0,28
    5798:	0280006f          	j	57c0 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    579c:	0084d7b3          	srl	a5,s1,s0
    57a0:	00f7f713          	andi	a4,a5,15
    57a4:	0001c7b7          	lui	a5,0x1c
    57a8:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    57ac:	00e787b3          	add	a5,a5,a4
    57b0:	0007c583          	lbu	a1,0(a5)
    57b4:	f8010537          	lui	a0,0xf8010
    57b8:	f8dff0ef          	jal	ra,5744 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    57bc:	ffc40413          	addi	s0,s0,-4
    57c0:	fc045ee3          	bgez	s0,579c <bsp_printHex+0x1c>
    }
    57c4:	00c12083          	lw	ra,12(sp)
    57c8:	00812403          	lw	s0,8(sp)
    57cc:	00412483          	lw	s1,4(sp)
    57d0:	01010113          	addi	sp,sp,16
    57d4:	00008067          	ret

000057d8 <bsp_printHex_lower>:
        {
    57d8:	ff010113          	addi	sp,sp,-16
    57dc:	00112623          	sw	ra,12(sp)
    57e0:	00812423          	sw	s0,8(sp)
    57e4:	00912223          	sw	s1,4(sp)
    57e8:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    57ec:	01c00413          	li	s0,28
    57f0:	0280006f          	j	5818 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    57f4:	0084d7b3          	srl	a5,s1,s0
    57f8:	00f7f713          	andi	a4,a5,15
    57fc:	0001c7b7          	lui	a5,0x1c
    5800:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    5804:	00e787b3          	add	a5,a5,a4
    5808:	0007c583          	lbu	a1,0(a5)
    580c:	f8010537          	lui	a0,0xf8010
    5810:	f35ff0ef          	jal	ra,5744 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    5814:	ffc40413          	addi	s0,s0,-4
    5818:	fc045ee3          	bgez	s0,57f4 <bsp_printHex_lower+0x1c>
        }
    581c:	00c12083          	lw	ra,12(sp)
    5820:	00812403          	lw	s0,8(sp)
    5824:	00412483          	lw	s1,4(sp)
    5828:	01010113          	addi	sp,sp,16
    582c:	00008067          	ret

00005830 <bsp_printf_c>:
    {
    5830:	ff010113          	addi	sp,sp,-16
    5834:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    5838:	0ff57593          	andi	a1,a0,255
    583c:	f8010537          	lui	a0,0xf8010
    5840:	f05ff0ef          	jal	ra,5744 <uart_write>
    }
    5844:	00c12083          	lw	ra,12(sp)
    5848:	01010113          	addi	sp,sp,16
    584c:	00008067          	ret

00005850 <bsp_printf_s>:
    {
    5850:	ff010113          	addi	sp,sp,-16
    5854:	00112623          	sw	ra,12(sp)
    5858:	00812423          	sw	s0,8(sp)
    585c:	00050413          	mv	s0,a0
        while (*p)
    5860:	00044583          	lbu	a1,0(s0)
    5864:	00058a63          	beqz	a1,5878 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    5868:	00140413          	addi	s0,s0,1
    586c:	f8010537          	lui	a0,0xf8010
    5870:	ed5ff0ef          	jal	ra,5744 <uart_write>
    5874:	fedff06f          	j	5860 <bsp_printf_s+0x10>
    }
    5878:	00c12083          	lw	ra,12(sp)
    587c:	00812403          	lw	s0,8(sp)
    5880:	01010113          	addi	sp,sp,16
    5884:	00008067          	ret

00005888 <bsp_printf_d>:
    {
    5888:	fd010113          	addi	sp,sp,-48
    588c:	02112623          	sw	ra,44(sp)
    5890:	02812423          	sw	s0,40(sp)
    5894:	02912223          	sw	s1,36(sp)
    5898:	00050493          	mv	s1,a0
        if (val < 0) {
    589c:	00054663          	bltz	a0,58a8 <bsp_printf_d+0x20>
    {
    58a0:	00010413          	mv	s0,sp
    58a4:	02c0006f          	j	58d0 <bsp_printf_d+0x48>
            bsp_printf_c('-');
    58a8:	02d00513          	li	a0,45
    58ac:	f85ff0ef          	jal	ra,5830 <bsp_printf_c>
            val = -val;
    58b0:	409004b3          	neg	s1,s1
    58b4:	fedff06f          	j	58a0 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
    58b8:	00a00713          	li	a4,10
    58bc:	02e4e7b3          	rem	a5,s1,a4
    58c0:	03078793          	addi	a5,a5,48
    58c4:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    58c8:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    58cc:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    58d0:	fe0494e3          	bnez	s1,58b8 <bsp_printf_d+0x30>
    58d4:	00010793          	mv	a5,sp
    58d8:	fef400e3          	beq	s0,a5,58b8 <bsp_printf_d+0x30>
    58dc:	0100006f          	j	58ec <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
    58e0:	fff40413          	addi	s0,s0,-1
    58e4:	00044503          	lbu	a0,0(s0)
    58e8:	f49ff0ef          	jal	ra,5830 <bsp_printf_c>
        while (p != buffer)
    58ec:	00010793          	mv	a5,sp
    58f0:	fef418e3          	bne	s0,a5,58e0 <bsp_printf_d+0x58>
    }
    58f4:	02c12083          	lw	ra,44(sp)
    58f8:	02812403          	lw	s0,40(sp)
    58fc:	02412483          	lw	s1,36(sp)
    5900:	03010113          	addi	sp,sp,48
    5904:	00008067          	ret

00005908 <bsp_printf_x>:
    {
    5908:	ff010113          	addi	sp,sp,-16
    590c:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
    5910:	00000713          	li	a4,0
    5914:	00700793          	li	a5,7
    5918:	02e7c063          	blt	a5,a4,5938 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    591c:	00271693          	slli	a3,a4,0x2
    5920:	ff000793          	li	a5,-16
    5924:	00d797b3          	sll	a5,a5,a3
    5928:	00f577b3          	and	a5,a0,a5
    592c:	00078663          	beqz	a5,5938 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    5930:	00170713          	addi	a4,a4,1
    5934:	fe1ff06f          	j	5914 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
    5938:	ea1ff0ef          	jal	ra,57d8 <bsp_printHex_lower>
    }
    593c:	00c12083          	lw	ra,12(sp)
    5940:	01010113          	addi	sp,sp,16
    5944:	00008067          	ret

00005948 <bsp_printf_X>:
        {
    5948:	ff010113          	addi	sp,sp,-16
    594c:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
    5950:	00000713          	li	a4,0
    5954:	00700793          	li	a5,7
    5958:	02e7c063          	blt	a5,a4,5978 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    595c:	00271693          	slli	a3,a4,0x2
    5960:	ff000793          	li	a5,-16
    5964:	00d797b3          	sll	a5,a5,a3
    5968:	00f577b3          	and	a5,a0,a5
    596c:	00078663          	beqz	a5,5978 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    5970:	00170713          	addi	a4,a4,1
    5974:	fe1ff06f          	j	5954 <bsp_printf_X+0xc>
            bsp_printHex(val);
    5978:	e09ff0ef          	jal	ra,5780 <bsp_printHex>
        }
    597c:	00c12083          	lw	ra,12(sp)
    5980:	01010113          	addi	sp,sp,16
    5984:	00008067          	ret

00005988 <dmasg_input_memory>:
        u32 ca = dmasg_ca(base, channel);
    5988:	00759593          	slli	a1,a1,0x7
    598c:	00a58533          	add	a0,a1,a0
    5990:	00c52023          	sw	a2,0(a0) # f8010000 <__freertos_irq_stack_top+0xf7feb0d0>
        write_u32(DMASG_CHANNEL_INPUT_CONFIG_MEMORY | (byte_per_burst-1 & 0xFFF), ca + DMASG_CHANNEL_INPUT_CONFIG);
    5994:	fff68693          	addi	a3,a3,-1
    5998:	000017b7          	lui	a5,0x1
    599c:	fff78713          	addi	a4,a5,-1 # fff <regnum_t6+0xfe0>
    59a0:	00e6f6b3          	and	a3,a3,a4
    59a4:	00f6e6b3          	or	a3,a3,a5
    59a8:	00d52623          	sw	a3,12(a0)
    }
    59ac:	00008067          	ret

000059b0 <dmasg_output_memory>:
        u32 ca = dmasg_ca(base, channel);
    59b0:	00759593          	slli	a1,a1,0x7
    59b4:	00a58533          	add	a0,a1,a0
    59b8:	00c52823          	sw	a2,16(a0)
        write_u32(DMASG_CHANNEL_OUTPUT_CONFIG_MEMORY | (byte_per_burst-1 & 0xFFF), ca + DMASG_CHANNEL_OUTPUT_CONFIG);
    59bc:	fff68693          	addi	a3,a3,-1
    59c0:	000017b7          	lui	a5,0x1
    59c4:	fff78713          	addi	a4,a5,-1 # fff <regnum_t6+0xfe0>
    59c8:	00e6f6b3          	and	a3,a3,a4
    59cc:	00f6e6b3          	or	a3,a3,a5
    59d0:	00d52e23          	sw	a3,28(a0)
    }
    59d4:	00008067          	ret

000059d8 <dmasg_input_stream>:
        u32 ca = dmasg_ca(base, channel);
    59d8:	00759593          	slli	a1,a1,0x7
    59dc:	00a58533          	add	a0,a1,a0
    59e0:	00c52423          	sw	a2,8(a0)
        write_u32(DMASG_CHANNEL_INPUT_CONFIG_STREAM | (completion_on_packet ? DMASG_CHANNEL_INPUT_CONFIG_COMPLETION_ON_PACKET : 0) | 
    59e4:	00070e63          	beqz	a4,5a00 <dmasg_input_stream+0x28>
    59e8:	000027b7          	lui	a5,0x2
            (wait_on_packet ? DMASG_CHANNEL_INPUT_CONFIG_WAIT_ON_PACKET : 0), ca + DMASG_CHANNEL_INPUT_CONFIG);
    59ec:	00068e63          	beqz	a3,5a08 <dmasg_input_stream+0x30>
    59f0:	00004737          	lui	a4,0x4
        write_u32(DMASG_CHANNEL_INPUT_CONFIG_STREAM | (completion_on_packet ? DMASG_CHANNEL_INPUT_CONFIG_COMPLETION_ON_PACKET : 0) | 
    59f4:	00e7e7b3          	or	a5,a5,a4
    59f8:	00f52623          	sw	a5,12(a0)
    }
    59fc:	00008067          	ret
        write_u32(DMASG_CHANNEL_INPUT_CONFIG_STREAM | (completion_on_packet ? DMASG_CHANNEL_INPUT_CONFIG_COMPLETION_ON_PACKET : 0) | 
    5a00:	00000793          	li	a5,0
    5a04:	fe9ff06f          	j	59ec <dmasg_input_stream+0x14>
            (wait_on_packet ? DMASG_CHANNEL_INPUT_CONFIG_WAIT_ON_PACKET : 0), ca + DMASG_CHANNEL_INPUT_CONFIG);
    5a08:	00000713          	li	a4,0
    5a0c:	fe9ff06f          	j	59f4 <dmasg_input_stream+0x1c>

00005a10 <dmasg_output_stream>:
        u32 ca = dmasg_ca(base, channel);
    5a10:	00759593          	slli	a1,a1,0x7
    5a14:	00a58533          	add	a0,a1,a0
        write_u32(port << 0 | source << 8 | sink << 16, ca + DMASG_CHANNEL_OUTPUT_STREAM);
    5a18:	00869693          	slli	a3,a3,0x8
    5a1c:	00c6e6b3          	or	a3,a3,a2
    5a20:	01071713          	slli	a4,a4,0x10
    5a24:	00e6e6b3          	or	a3,a3,a4
    5a28:	00d52c23          	sw	a3,24(a0)
        write_u32(DMASG_CHANNEL_OUTPUT_CONFIG_STREAM | (last ? DMASG_CHANNEL_OUTPUT_CONFIG_LAST : 0), ca + DMASG_CHANNEL_OUTPUT_CONFIG);
    5a2c:	00078463          	beqz	a5,5a34 <dmasg_output_stream+0x24>
    5a30:	000027b7          	lui	a5,0x2
    5a34:	00f52e23          	sw	a5,28(a0)
    }
    5a38:	00008067          	ret

00005a3c <dmasg_direct_start>:
        u32 ca = dmasg_ca(base, channel);
    5a3c:	00759593          	slli	a1,a1,0x7
    5a40:	00a58533          	add	a0,a1,a0
        write_u32(bytes-1, ca + DMASG_CHANNEL_DIRECT_BYTES);
    5a44:	fff60613          	addi	a2,a2,-1
    5a48:	02c52023          	sw	a2,32(a0)
        write_u32(DMASG_CHANNEL_STATUS_DIRECT_START | (self_restart ? DMASG_CHANNEL_STATUS_SELF_RESTART : 0), ca + DMASG_CHANNEL_STATUS);
    5a4c:	00068863          	beqz	a3,5a5c <dmasg_direct_start+0x20>
    5a50:	00300793          	li	a5,3
    5a54:	02f52623          	sw	a5,44(a0)
    }
    5a58:	00008067          	ret
        write_u32(DMASG_CHANNEL_STATUS_DIRECT_START | (self_restart ? DMASG_CHANNEL_STATUS_SELF_RESTART : 0), ca + DMASG_CHANNEL_STATUS);
    5a5c:	00100793          	li	a5,1
    5a60:	ff5ff06f          	j	5a54 <dmasg_direct_start+0x18>

00005a64 <dmasg_linked_list_start>:
        u32 ca = dmasg_ca(base, channel);
    5a64:	00759593          	slli	a1,a1,0x7
    5a68:	00a58533          	add	a0,a1,a0
    5a6c:	06c52823          	sw	a2,112(a0)
    5a70:	01000793          	li	a5,16
    5a74:	02f52623          	sw	a5,44(a0)
    }
    5a78:	00008067          	ret

00005a7c <dmasg_interrupt_pending_clear>:
        u32 ca = dmasg_ca(base, channel);
    5a7c:	00759593          	slli	a1,a1,0x7
    5a80:	00a585b3          	add	a1,a1,a0
    5a84:	04c5aa23          	sw	a2,84(a1)
    }
    5a88:	00008067          	ret

00005a8c <dmasg_busy>:
        u32 ca = dmasg_ca(base, channel);
    5a8c:	00759593          	slli	a1,a1,0x7
    5a90:	00a585b3          	add	a1,a1,a0
        return *((volatile u32*) address);
    5a94:	02c5a503          	lw	a0,44(a1)
    }
    5a98:	00157513          	andi	a0,a0,1
    5a9c:	00008067          	ret

00005aa0 <SendData>:
 *       strange results. You might consider waiting for space in the DMA queue
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static void SendData(uint32_t *pucEthernetBuffer,size_t xDataLength){
    5aa0:	ff010113          	addi	sp,sp,-16
    5aa4:	00112623          	sw	ra,12(sp)
    5aa8:	00812423          	sw	s0,8(sp)
    5aac:	00058413          	mv	s0,a1
        *((volatile u32*) address) = data;
    5ab0:	f81207b7          	lui	a5,0xf8120
    5ab4:	00b7a223          	sw	a1,4(a5) # f8120004 <__freertos_irq_stack_top+0xf80fb0d4>

	int n;

  write_u32(xDataLength,IO_APB_SLAVE_2_APB+4);	//workaround for tkeep tlast handle with module tkeep_ctrl with abp3
  dmasg_input_memory(DMASG_BASE, 1, ((u32)pucEthernetBuffer), 64);
    5ab8:	04000693          	li	a3,64
    5abc:	00050613          	mv	a2,a0
    5ac0:	00100593          	li	a1,1
    5ac4:	f8110537          	lui	a0,0xf8110
    5ac8:	ec1ff0ef          	jal	ra,5988 <dmasg_input_memory>
  dmasg_output_stream(DMASG_BASE, DMASG_CHANNEL1, 0, 0, 0, 1);
    5acc:	00100793          	li	a5,1
    5ad0:	00000713          	li	a4,0
    5ad4:	00000693          	li	a3,0
    5ad8:	00000613          	li	a2,0
    5adc:	00100593          	li	a1,1
    5ae0:	f8110537          	lui	a0,0xf8110
    5ae4:	f2dff0ef          	jal	ra,5a10 <dmasg_output_stream>
  dmasg_direct_start(DMASG_BASE, DMASG_CHANNEL1, xDataLength, 0);
    5ae8:	00000693          	li	a3,0
    5aec:	00040613          	mv	a2,s0
    5af0:	00100593          	li	a1,1
    5af4:	f8110537          	lui	a0,0xf8110
    5af8:	f45ff0ef          	jal	ra,5a3c <dmasg_direct_start>

  while(dmasg_busy(DMASG_BASE, DMASG_CHANNEL1));
    5afc:	00100593          	li	a1,1
    5b00:	f8110537          	lui	a0,0xf8110
    5b04:	f89ff0ef          	jal	ra,5a8c <dmasg_busy>
    5b08:	fe051ae3          	bnez	a0,5afc <SendData+0x5c>
}
    5b0c:	00c12083          	lw	ra,12(sp)
    5b10:	00812403          	lw	s0,8(sp)
    5b14:	01010113          	addi	sp,sp,16
    5b18:	00008067          	ret

00005b1c <low_level_output>:

static err_t
low_level_output(struct netif *netif, struct pbuf *p)
{
    5b1c:	ff010113          	addi	sp,sp,-16
    5b20:	00112623          	sw	ra,12(sp)
    5b24:	00812423          	sw	s0,8(sp)
    5b28:	00058413          	mv	s0,a1

#if ETH_PAD_SIZE
  pbuf_remove_header(p, ETH_PAD_SIZE); /* drop the padding word */
#endif

  for (q = p; q != NULL; q = q->next) {
    5b2c:	00040c63          	beqz	s0,5b44 <low_level_output+0x28>
    /* Send the data from the pbuf to the interface, one pbuf at a
       time. The size of the data in each pbuf is kept in the ->len
       variable. */
//    send data from(q->payload, q->len);

      SendData(q->payload, q->len);
    5b30:	00a45583          	lhu	a1,10(s0)
    5b34:	00442503          	lw	a0,4(s0)
    5b38:	f69ff0ef          	jal	ra,5aa0 <SendData>
  for (q = p; q != NULL; q = q->next) {
    5b3c:	00042403          	lw	s0,0(s0)
    5b40:	fedff06f          	j	5b2c <low_level_output+0x10>

#if ETH_PAD_SIZE
  pbuf_add_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
#endif

  LINK_STATS_INC(link.xmit);
    5b44:	000227b7          	lui	a5,0x22
    5b48:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    5b4c:	0007d703          	lhu	a4,0(a5)
    5b50:	00170713          	addi	a4,a4,1 # 4001 <bsp_printf_x+0x19>
    5b54:	00e79023          	sh	a4,0(a5)

  return ERR_OK;
}
    5b58:	00000513          	li	a0,0
    5b5c:	00c12083          	lw	ra,12(sp)
    5b60:	00812403          	lw	s0,8(sp)
    5b64:	01010113          	addi	sp,sp,16
    5b68:	00008067          	ret

00005b6c <low_level_input>:
		 return 0;
 }

static struct pbuf *
low_level_input(struct netif *netif)
{
    5b6c:	ff010113          	addi	sp,sp,-16
    5b70:	00112623          	sw	ra,12(sp)
    5b74:	00812423          	sw	s0,8(sp)
    5b78:	00912223          	sw	s1,4(sp)
  struct pbuf *p, *q;
  u16_t len;

  /* Obtain the size of the packet and put it into the "len"
     variable. */
  len =descriptors0[cur_des].status & DMASG_DESCRIPTOR_STATUS_BYTES;
    5b7c:	be41a783          	lw	a5,-1052(gp) # 1fdb4 <cur_des>
    5b80:	00020437          	lui	s0,0x20
    5b84:	dc040413          	addi	s0,s0,-576 # 1fdc0 <descriptors0>
    5b88:	00579793          	slli	a5,a5,0x5
    5b8c:	00f407b3          	add	a5,s0,a5
    5b90:	0007a583          	lw	a1,0(a5)
#if ETH_PAD_SIZE
  len += ETH_PAD_SIZE; /* allow room for Ethernet padding */
#endif

  /* We allocate a pbuf chain of pbufs from the pool. */
  p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
    5b94:	18200613          	li	a2,386
    5b98:	01059593          	slli	a1,a1,0x10
    5b9c:	0105d593          	srli	a1,a1,0x10
    5ba0:	00000513          	li	a0,0
    5ba4:	0c4070ef          	jal	ra,cc68 <pbuf_alloc>
  //p = pbuf_alloc_reference((mem+(cur_des*BUFFER_SIZE)), len, PBUF_REF);

  //bsp_printf("p addr = 0x%x pointer addr = 0x%x len = %d cur_des = %d\n\r",(u32)p,(u32)(mem+(cur_des*BUFFER_SIZE)),descriptors0[cur_des].status&DMASG_DESCRIPTOR_STATUS_BYTES,cur_des);

  descriptors0[cur_des].status = 0;
    5ba8:	be41a603          	lw	a2,-1052(gp) # 1fdb4 <cur_des>
    5bac:	00561793          	slli	a5,a2,0x5
    5bb0:	00f40433          	add	s0,s0,a5
    5bb4:	00042023          	sw	zero,0(s0)

  if (p != NULL) {
    5bb8:	06050063          	beqz	a0,5c18 <low_level_input+0xac>
    pbuf_remove_header(p, ETH_PAD_SIZE); /* drop the padding word */
#endif

    /* We iterate over the pbuf chain until we have read the entire
     * packet into the pbuf. */
    for (q = p; q != NULL; q = q->next) {
    5bbc:	00050693          	mv	a3,a0
    5bc0:	02068263          	beqz	a3,5be4 <low_level_input+0x78>
       * pbufs for a DMA-enabled MAC and after receiving truncate it to the
       * actually received size. In this case, ensure the tot_len member of the
       * pbuf is the sum of the chained pbuf len members.
       */
      //read data into(q->payload, q->len);
    	p->payload=(mem+(cur_des*BUFFER_SIZE));
    5bc4:	000017b7          	lui	a5,0x1
    5bc8:	7a878793          	addi	a5,a5,1960 # 17a8 <_malloc_r+0x674>
    5bcc:	02f607b3          	mul	a5,a2,a5
    5bd0:	00080737          	lui	a4,0x80
    5bd4:	00f707b3          	add	a5,a4,a5
    5bd8:	00f52223          	sw	a5,4(a0) # f8110004 <__freertos_irq_stack_top+0xf80eb0d4>
    for (q = p; q != NULL; q = q->next) {
    5bdc:	0006a683          	lw	a3,0(a3)
    5be0:	fe1ff06f          	j	5bc0 <low_level_input+0x54>
    }
#if ETH_PAD_SIZE
    pbuf_add_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
#endif

    LINK_STATS_INC(link.recv);
    5be4:	000227b7          	lui	a5,0x22
    5be8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    5bec:	0027d703          	lhu	a4,2(a5)
    5bf0:	00170713          	addi	a4,a4,1 # 80001 <__freertos_irq_stack_top+0x5b0d1>
    5bf4:	00e79123          	sh	a4,2(a5)
   // drop packet();
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(netif, ifindiscards);
  }
  cur_des=(cur_des+1) & ((unsigned int)FRAME_PACKET-1);
    5bf8:	00160613          	addi	a2,a2,1
    5bfc:	0ff67613          	andi	a2,a2,255
    5c00:	bec1a223          	sw	a2,-1052(gp) # 1fdb4 <cur_des>

  return p;
}
    5c04:	00c12083          	lw	ra,12(sp)
    5c08:	00812403          	lw	s0,8(sp)
    5c0c:	00412483          	lw	s1,4(sp)
    5c10:	01010113          	addi	sp,sp,16
    5c14:	00008067          	ret
    LINK_STATS_INC(link.memerr);
    5c18:	000227b7          	lui	a5,0x22
    5c1c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    5c20:	00c7d703          	lhu	a4,12(a5)
    5c24:	00170713          	addi	a4,a4,1
    5c28:	00e79623          	sh	a4,12(a5)
    LINK_STATS_INC(link.drop);
    5c2c:	0067d703          	lhu	a4,6(a5)
    5c30:	00170713          	addi	a4,a4,1
    5c34:	00e79323          	sh	a4,6(a5)
    5c38:	fc1ff06f          	j	5bf8 <low_level_input+0x8c>

00005c3c <bsp_printf>:
    {
    5c3c:	fc010113          	addi	sp,sp,-64
    5c40:	00112e23          	sw	ra,28(sp)
    5c44:	00812c23          	sw	s0,24(sp)
    5c48:	00912a23          	sw	s1,20(sp)
    5c4c:	00050493          	mv	s1,a0
    5c50:	02b12223          	sw	a1,36(sp)
    5c54:	02c12423          	sw	a2,40(sp)
    5c58:	02d12623          	sw	a3,44(sp)
    5c5c:	02e12823          	sw	a4,48(sp)
    5c60:	02f12a23          	sw	a5,52(sp)
    5c64:	03012c23          	sw	a6,56(sp)
    5c68:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
    5c6c:	02410793          	addi	a5,sp,36
    5c70:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
    5c74:	00000413          	li	s0,0
    5c78:	01c0006f          	j	5c94 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
    5c7c:	00c12783          	lw	a5,12(sp)
    5c80:	00478713          	addi	a4,a5,4
    5c84:	00e12623          	sw	a4,12(sp)
    5c88:	0007a503          	lw	a0,0(a5)
    5c8c:	ba5ff0ef          	jal	ra,5830 <bsp_printf_c>
        for (i = 0; format[i]; i++)
    5c90:	00140413          	addi	s0,s0,1
    5c94:	008487b3          	add	a5,s1,s0
    5c98:	0007c503          	lbu	a0,0(a5)
    5c9c:	0c050263          	beqz	a0,5d60 <bsp_printf+0x124>
            if (format[i] == '%') {
    5ca0:	02500793          	li	a5,37
    5ca4:	06f50663          	beq	a0,a5,5d10 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
    5ca8:	b89ff0ef          	jal	ra,5830 <bsp_printf_c>
    5cac:	fe5ff06f          	j	5c90 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    5cb0:	00c12783          	lw	a5,12(sp)
    5cb4:	00478713          	addi	a4,a5,4
    5cb8:	00e12623          	sw	a4,12(sp)
    5cbc:	0007a503          	lw	a0,0(a5)
    5cc0:	b91ff0ef          	jal	ra,5850 <bsp_printf_s>
                        break;
    5cc4:	fcdff06f          	j	5c90 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    5cc8:	00c12783          	lw	a5,12(sp)
    5ccc:	00478713          	addi	a4,a5,4
    5cd0:	00e12623          	sw	a4,12(sp)
    5cd4:	0007a503          	lw	a0,0(a5)
    5cd8:	bb1ff0ef          	jal	ra,5888 <bsp_printf_d>
                        break;
    5cdc:	fb5ff06f          	j	5c90 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    5ce0:	00c12783          	lw	a5,12(sp)
    5ce4:	00478713          	addi	a4,a5,4
    5ce8:	00e12623          	sw	a4,12(sp)
    5cec:	0007a503          	lw	a0,0(a5)
    5cf0:	c59ff0ef          	jal	ra,5948 <bsp_printf_X>
                        break;
    5cf4:	f9dff06f          	j	5c90 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    5cf8:	00c12783          	lw	a5,12(sp)
    5cfc:	00478713          	addi	a4,a5,4
    5d00:	00e12623          	sw	a4,12(sp)
    5d04:	0007a503          	lw	a0,0(a5)
    5d08:	c01ff0ef          	jal	ra,5908 <bsp_printf_x>
                        break;
    5d0c:	f85ff06f          	j	5c90 <bsp_printf+0x54>
                while (format[++i]) {
    5d10:	00140413          	addi	s0,s0,1
    5d14:	008487b3          	add	a5,s1,s0
    5d18:	0007c783          	lbu	a5,0(a5)
    5d1c:	f6078ae3          	beqz	a5,5c90 <bsp_printf+0x54>
                    if (format[i] == 'c') {
    5d20:	06300713          	li	a4,99
    5d24:	f4e78ce3          	beq	a5,a4,5c7c <bsp_printf+0x40>
                    else if (format[i] == 's') {
    5d28:	07300713          	li	a4,115
    5d2c:	f8e782e3          	beq	a5,a4,5cb0 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    5d30:	06400713          	li	a4,100
    5d34:	f8e78ae3          	beq	a5,a4,5cc8 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    5d38:	05800713          	li	a4,88
    5d3c:	fae782e3          	beq	a5,a4,5ce0 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    5d40:	07800713          	li	a4,120
    5d44:	fae78ae3          	beq	a5,a4,5cf8 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    5d48:	06600713          	li	a4,102
    5d4c:	fce792e3          	bne	a5,a4,5d10 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    5d50:	0001c537          	lui	a0,0x1c
    5d54:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    5d58:	af9ff0ef          	jal	ra,5850 <bsp_printf_s>
                        break;
    5d5c:	f35ff06f          	j	5c90 <bsp_printf+0x54>
    }
    5d60:	01c12083          	lw	ra,28(sp)
    5d64:	01812403          	lw	s0,24(sp)
    5d68:	01412483          	lw	s1,20(sp)
    5d6c:	04010113          	addi	sp,sp,64
    5d70:	00008067          	ret

00005d74 <flush_data_cache>:
void flush_data_cache(){
    5d74:	0000500f          	0x500f
}
    5d78:	00008067          	ret

00005d7c <program_descriptor>:
{
    5d7c:	ff010113          	addi	sp,sp,-16
    5d80:	00112623          	sw	ra,12(sp)
    5d84:	00812423          	sw	s0,8(sp)
	for (int j=0; j<FRAME_PACKET; j++)
    5d88:	00000793          	li	a5,0
    5d8c:	0ff00713          	li	a4,255
    5d90:	06f74863          	blt	a4,a5,5e00 <program_descriptor+0x84>
		descriptors0[j].control = (u32)((BUFFER_SIZE)-1)  | 1 << 30;;
    5d94:	00020637          	lui	a2,0x20
    5d98:	dc060613          	addi	a2,a2,-576 # 1fdc0 <descriptors0>
    5d9c:	00579713          	slli	a4,a5,0x5
    5da0:	00e60733          	add	a4,a2,a4
    5da4:	400006b7          	lui	a3,0x40000
    5da8:	5e968693          	addi	a3,a3,1513 # 400005e9 <__freertos_irq_stack_top+0x3ffdb6b9>
    5dac:	00d72223          	sw	a3,4(a4)
		descriptors0[j].from    = 0;
    5db0:	00000313          	li	t1,0
    5db4:	00000393          	li	t2,0
    5db8:	00672423          	sw	t1,8(a4)
    5dbc:	00772623          	sw	t2,12(a4)
		descriptors0[j].to      = (u32)(mem + (j *(BUFFER_SIZE)) );
    5dc0:	000016b7          	lui	a3,0x1
    5dc4:	7a868693          	addi	a3,a3,1960 # 17a8 <_malloc_r+0x674>
    5dc8:	02d786b3          	mul	a3,a5,a3
    5dcc:	00080337          	lui	t1,0x80
    5dd0:	00d30533          	add	a0,t1,a3
    5dd4:	00000593          	li	a1,0
    5dd8:	00a72823          	sw	a0,16(a4)
    5ddc:	00b72a23          	sw	a1,20(a4)
		descriptors0[j].next    = (u32) (descriptors0 + (j+1));
    5de0:	00178793          	addi	a5,a5,1
    5de4:	00579693          	slli	a3,a5,0x5
    5de8:	00d60833          	add	a6,a2,a3
    5dec:	00000893          	li	a7,0
    5df0:	01072c23          	sw	a6,24(a4)
    5df4:	01172e23          	sw	a7,28(a4)
		descriptors0[j].status  = 0;
    5df8:	00072023          	sw	zero,0(a4)
    5dfc:	f91ff06f          	j	5d8c <program_descriptor+0x10>
	descriptors0[FRAME_PACKET-1].next = (u32) (descriptors0);	//last descriptors point to first descriptors
    5e00:	00020437          	lui	s0,0x20
    5e04:	dc040793          	addi	a5,s0,-576 # 1fdc0 <descriptors0>
    5e08:	dc040613          	addi	a2,s0,-576
    5e0c:	00000693          	li	a3,0
    5e10:	00002737          	lui	a4,0x2
    5e14:	00e787b3          	add	a5,a5,a4
    5e18:	fec7ac23          	sw	a2,-8(a5)
    5e1c:	fed7ae23          	sw	a3,-4(a5)
	dmasg_interrupt_pending_clear(DMASG_BASE,0,0xFFFFFFFF);
    5e20:	fff00613          	li	a2,-1
    5e24:	00000593          	li	a1,0
    5e28:	f8110537          	lui	a0,0xf8110
    5e2c:	c51ff0ef          	jal	ra,5a7c <dmasg_interrupt_pending_clear>
	dmasg_output_memory (DMASG_BASE, 0,  (u32)mem, 64);
    5e30:	04000693          	li	a3,64
    5e34:	00080637          	lui	a2,0x80
    5e38:	00000593          	li	a1,0
    5e3c:	f8110537          	lui	a0,0xf8110
    5e40:	b71ff0ef          	jal	ra,59b0 <dmasg_output_memory>
	dmasg_input_stream(DMASG_BASE, 0, 0, 1, 1);
    5e44:	00100713          	li	a4,1
    5e48:	00100693          	li	a3,1
    5e4c:	00000613          	li	a2,0
    5e50:	00000593          	li	a1,0
    5e54:	f8110537          	lui	a0,0xf8110
    5e58:	b81ff0ef          	jal	ra,59d8 <dmasg_input_stream>
	dmasg_linked_list_start(DMASG_BASE, 0, (u32) descriptors0);
    5e5c:	dc040613          	addi	a2,s0,-576
    5e60:	00000593          	li	a1,0
    5e64:	f8110537          	lui	a0,0xf8110
    5e68:	bfdff0ef          	jal	ra,5a64 <dmasg_linked_list_start>
	cur_des=0;
    5e6c:	be01a223          	sw	zero,-1052(gp) # 1fdb4 <cur_des>
}
    5e70:	00c12083          	lw	ra,12(sp)
    5e74:	00812403          	lw	s0,8(sp)
    5e78:	01010113          	addi	sp,sp,16
    5e7c:	00008067          	ret

00005e80 <low_level_init>:
{
    5e80:	ff010113          	addi	sp,sp,-16
    5e84:	00112623          	sw	ra,12(sp)
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
    5e88:	00600793          	li	a5,6
    5e8c:	02f50a23          	sb	a5,52(a0) # f8110034 <__freertos_irq_stack_top+0xf80eb104>
  netif->hwaddr[0] = 0x00;
    5e90:	02050723          	sb	zero,46(a0)
  netif->hwaddr[1] = 0x11;
    5e94:	01100793          	li	a5,17
    5e98:	02f507a3          	sb	a5,47(a0)
  netif->hwaddr[2] = 0x22;
    5e9c:	02200793          	li	a5,34
    5ea0:	02f50823          	sb	a5,48(a0)
  netif->hwaddr[3] = 0x33;  
    5ea4:	03300793          	li	a5,51
    5ea8:	02f508a3          	sb	a5,49(a0)
  netif->hwaddr[4] = 0x44;  
    5eac:	04400793          	li	a5,68
    5eb0:	02f50923          	sb	a5,50(a0)
  netif->hwaddr[5] = 0x41;
    5eb4:	04100793          	li	a5,65
    5eb8:	02f509a3          	sb	a5,51(a0)
  netif->mtu = 1500;
    5ebc:	5dc00793          	li	a5,1500
    5ec0:	02f51623          	sh	a5,44(a0)
  netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;
    5ec4:	00e00793          	li	a5,14
    5ec8:	02f50aa3          	sb	a5,53(a0)
  program_descriptor();
    5ecc:	eb1ff0ef          	jal	ra,5d7c <program_descriptor>
}
    5ed0:	00c12083          	lw	ra,12(sp)
    5ed4:	01010113          	addi	sp,sp,16
    5ed8:	00008067          	ret

00005edc <check_dma_status>:
	 if(descriptors0[num_descriptor].status & 0x3FFFFFFF)
    5edc:	000207b7          	lui	a5,0x20
    5ee0:	00551513          	slli	a0,a0,0x5
    5ee4:	dc078793          	addi	a5,a5,-576 # 1fdc0 <descriptors0>
    5ee8:	00a787b3          	add	a5,a5,a0
    5eec:	0007a783          	lw	a5,0(a5)
    5ef0:	40000737          	lui	a4,0x40000
    5ef4:	fff70713          	addi	a4,a4,-1 # 3fffffff <__freertos_irq_stack_top+0x3ffdb0cf>
    5ef8:	00e7f7b3          	and	a5,a5,a4
    5efc:	00078663          	beqz	a5,5f08 <check_dma_status+0x2c>
		 return 1;
    5f00:	00100513          	li	a0,1
    5f04:	00008067          	ret
		 return 0;
    5f08:	00000513          	li	a0,0
 }
    5f0c:	00008067          	ret

00005f10 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
    5f10:	ff010113          	addi	sp,sp,-16
    5f14:	00112623          	sw	ra,12(sp)
    5f18:	00812423          	sw	s0,8(sp)
    5f1c:	00912223          	sw	s1,4(sp)
    5f20:	00050493          	mv	s1,a0
  struct pbuf *p;

  ethernetif = netif->state;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    5f24:	c49ff0ef          	jal	ra,5b6c <low_level_input>
  /* if no packet could be read, silently ignore this */
  if (p != NULL) {
    5f28:	00050c63          	beqz	a0,5f40 <ethernetif_input+0x30>
    5f2c:	00050413          	mv	s0,a0
    /* pass all packets to ethernet_input, which decides what packets it supports */
    if (netif->input(p, netif) != ERR_OK) {
    5f30:	0104a783          	lw	a5,16(s1)
    5f34:	00048593          	mv	a1,s1
    5f38:	000780e7          	jalr	a5
    5f3c:	00051c63          	bnez	a0,5f54 <ethernetif_input+0x44>
      LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
      pbuf_free(p);
      p = NULL;
    }
  }
}
    5f40:	00c12083          	lw	ra,12(sp)
    5f44:	00812403          	lw	s0,8(sp)
    5f48:	00412483          	lw	s1,4(sp)
    5f4c:	01010113          	addi	sp,sp,16
    5f50:	00008067          	ret
      pbuf_free(p);
    5f54:	00040513          	mv	a0,s0
    5f58:	3f9060ef          	jal	ra,cb50 <pbuf_free>
}
    5f5c:	fe5ff06f          	j	5f40 <ethernetif_input+0x30>

00005f60 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
    5f60:	ff010113          	addi	sp,sp,-16
    5f64:	00112623          	sw	ra,12(sp)
    5f68:	00812423          	sw	s0,8(sp)
    5f6c:	00050413          	mv	s0,a0
  struct ethernetif *ethernetif;

  LWIP_ASSERT("netif != NULL", (netif != NULL));
    5f70:	06050063          	beqz	a0,5fd0 <ethernetif_init+0x70>

  ethernetif = mem_malloc(sizeof(struct ethernetif));
    5f74:	00400513          	li	a0,4
    5f78:	7fc0f0ef          	jal	ra,15774 <mem_malloc>
  if (ethernetif == NULL) {
    5f7c:	06050263          	beqz	a0,5fe0 <ethernetif_init+0x80>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->state = ethernetif;
    5f80:	02a42223          	sw	a0,36(s0)
  netif->name[0] = IFNAME0;
    5f84:	06500793          	li	a5,101
    5f88:	02f40b23          	sb	a5,54(s0)
  netif->name[1] = IFNAME1;
    5f8c:	06e00793          	li	a5,110
    5f90:	02f40ba3          	sb	a5,55(s0)
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
#if LWIP_IPV4
  netif->output = etharp_output;
    5f94:	0001a7b7          	lui	a5,0x1a
    5f98:	d7478793          	addi	a5,a5,-652 # 19d74 <etharp_output>
    5f9c:	00f42a23          	sw	a5,20(s0)
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */
  netif->linkoutput = low_level_output;
    5fa0:	000067b7          	lui	a5,0x6
    5fa4:	b1c78793          	addi	a5,a5,-1252 # 5b1c <low_level_output>
    5fa8:	00f42c23          	sw	a5,24(s0)

  ethernetif->ethaddr = (struct eth_addr *) & (netif->hwaddr[0]);
    5fac:	02e40793          	addi	a5,s0,46
    5fb0:	00f52023          	sw	a5,0(a0)

  /* initialize the hardware */
  low_level_init(netif);
    5fb4:	00040513          	mv	a0,s0
    5fb8:	ec9ff0ef          	jal	ra,5e80 <low_level_init>

  return ERR_OK;
    5fbc:	00000513          	li	a0,0
}
    5fc0:	00c12083          	lw	ra,12(sp)
    5fc4:	00812403          	lw	s0,8(sp)
    5fc8:	01010113          	addi	sp,sp,16
    5fcc:	00008067          	ret
  LWIP_ASSERT("netif != NULL", (netif != NULL));
    5fd0:	0001d537          	lui	a0,0x1d
    5fd4:	f5450513          	addi	a0,a0,-172 # 1cf54 <lwiperf_txbuf_const+0x774>
    5fd8:	c65ff0ef          	jal	ra,5c3c <bsp_printf>
    5fdc:	f99ff06f          	j	5f74 <ethernetif_init+0x14>
    return ERR_MEM;
    5fe0:	fff00513          	li	a0,-1
    5fe4:	fddff06f          	j	5fc0 <ethernetif_init+0x60>

00005fe8 <uart_writeAvailability>:
        return *((volatile u32*) address);
    5fe8:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    5fec:	01055513          	srli	a0,a0,0x10
    }
    5ff0:	0ff57513          	andi	a0,a0,255
    5ff4:	00008067          	ret

00005ff8 <uart_write>:
    static void uart_write(u32 reg, char data){
    5ff8:	ff010113          	addi	sp,sp,-16
    5ffc:	00112623          	sw	ra,12(sp)
    6000:	00812423          	sw	s0,8(sp)
    6004:	00912223          	sw	s1,4(sp)
    6008:	00050413          	mv	s0,a0
    600c:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    6010:	00040513          	mv	a0,s0
    6014:	fd5ff0ef          	jal	ra,5fe8 <uart_writeAvailability>
    6018:	fe050ce3          	beqz	a0,6010 <uart_write+0x18>
        *((volatile u32*) address) = data;
    601c:	00942023          	sw	s1,0(s0)
    }
    6020:	00c12083          	lw	ra,12(sp)
    6024:	00812403          	lw	s0,8(sp)
    6028:	00412483          	lw	s1,4(sp)
    602c:	01010113          	addi	sp,sp,16
    6030:	00008067          	ret

00006034 <bsp_printHex>:
    {
    6034:	ff010113          	addi	sp,sp,-16
    6038:	00112623          	sw	ra,12(sp)
    603c:	00812423          	sw	s0,8(sp)
    6040:	00912223          	sw	s1,4(sp)
    6044:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    6048:	01c00413          	li	s0,28
    604c:	0280006f          	j	6074 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    6050:	0084d7b3          	srl	a5,s1,s0
    6054:	00f7f713          	andi	a4,a5,15
    6058:	0001c7b7          	lui	a5,0x1c
    605c:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    6060:	00e787b3          	add	a5,a5,a4
    6064:	0007c583          	lbu	a1,0(a5)
    6068:	f8010537          	lui	a0,0xf8010
    606c:	f8dff0ef          	jal	ra,5ff8 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    6070:	ffc40413          	addi	s0,s0,-4
    6074:	fc045ee3          	bgez	s0,6050 <bsp_printHex+0x1c>
    }
    6078:	00c12083          	lw	ra,12(sp)
    607c:	00812403          	lw	s0,8(sp)
    6080:	00412483          	lw	s1,4(sp)
    6084:	01010113          	addi	sp,sp,16
    6088:	00008067          	ret

0000608c <bsp_printHex_lower>:
        {
    608c:	ff010113          	addi	sp,sp,-16
    6090:	00112623          	sw	ra,12(sp)
    6094:	00812423          	sw	s0,8(sp)
    6098:	00912223          	sw	s1,4(sp)
    609c:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    60a0:	01c00413          	li	s0,28
    60a4:	0280006f          	j	60cc <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    60a8:	0084d7b3          	srl	a5,s1,s0
    60ac:	00f7f713          	andi	a4,a5,15
    60b0:	0001c7b7          	lui	a5,0x1c
    60b4:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    60b8:	00e787b3          	add	a5,a5,a4
    60bc:	0007c583          	lbu	a1,0(a5)
    60c0:	f8010537          	lui	a0,0xf8010
    60c4:	f35ff0ef          	jal	ra,5ff8 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    60c8:	ffc40413          	addi	s0,s0,-4
    60cc:	fc045ee3          	bgez	s0,60a8 <bsp_printHex_lower+0x1c>
        }
    60d0:	00c12083          	lw	ra,12(sp)
    60d4:	00812403          	lw	s0,8(sp)
    60d8:	00412483          	lw	s1,4(sp)
    60dc:	01010113          	addi	sp,sp,16
    60e0:	00008067          	ret

000060e4 <bsp_printf_c>:
    {
    60e4:	ff010113          	addi	sp,sp,-16
    60e8:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    60ec:	0ff57593          	andi	a1,a0,255
    60f0:	f8010537          	lui	a0,0xf8010
    60f4:	f05ff0ef          	jal	ra,5ff8 <uart_write>
    }
    60f8:	00c12083          	lw	ra,12(sp)
    60fc:	01010113          	addi	sp,sp,16
    6100:	00008067          	ret

00006104 <bsp_printf_s>:
    {
    6104:	ff010113          	addi	sp,sp,-16
    6108:	00112623          	sw	ra,12(sp)
    610c:	00812423          	sw	s0,8(sp)
    6110:	00050413          	mv	s0,a0
        while (*p)
    6114:	00044583          	lbu	a1,0(s0)
    6118:	00058a63          	beqz	a1,612c <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    611c:	00140413          	addi	s0,s0,1
    6120:	f8010537          	lui	a0,0xf8010
    6124:	ed5ff0ef          	jal	ra,5ff8 <uart_write>
    6128:	fedff06f          	j	6114 <bsp_printf_s+0x10>
    }
    612c:	00c12083          	lw	ra,12(sp)
    6130:	00812403          	lw	s0,8(sp)
    6134:	01010113          	addi	sp,sp,16
    6138:	00008067          	ret

0000613c <bsp_printf_d>:
    {
    613c:	fd010113          	addi	sp,sp,-48
    6140:	02112623          	sw	ra,44(sp)
    6144:	02812423          	sw	s0,40(sp)
    6148:	02912223          	sw	s1,36(sp)
    614c:	00050493          	mv	s1,a0
        if (val < 0) {
    6150:	00054663          	bltz	a0,615c <bsp_printf_d+0x20>
    {
    6154:	00010413          	mv	s0,sp
    6158:	02c0006f          	j	6184 <bsp_printf_d+0x48>
            bsp_printf_c('-');
    615c:	02d00513          	li	a0,45
    6160:	f85ff0ef          	jal	ra,60e4 <bsp_printf_c>
            val = -val;
    6164:	409004b3          	neg	s1,s1
    6168:	fedff06f          	j	6154 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
    616c:	00a00713          	li	a4,10
    6170:	02e4e7b3          	rem	a5,s1,a4
    6174:	03078793          	addi	a5,a5,48
    6178:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    617c:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    6180:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    6184:	fe0494e3          	bnez	s1,616c <bsp_printf_d+0x30>
    6188:	00010793          	mv	a5,sp
    618c:	fef400e3          	beq	s0,a5,616c <bsp_printf_d+0x30>
    6190:	0100006f          	j	61a0 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
    6194:	fff40413          	addi	s0,s0,-1
    6198:	00044503          	lbu	a0,0(s0)
    619c:	f49ff0ef          	jal	ra,60e4 <bsp_printf_c>
        while (p != buffer)
    61a0:	00010793          	mv	a5,sp
    61a4:	fef418e3          	bne	s0,a5,6194 <bsp_printf_d+0x58>
    }
    61a8:	02c12083          	lw	ra,44(sp)
    61ac:	02812403          	lw	s0,40(sp)
    61b0:	02412483          	lw	s1,36(sp)
    61b4:	03010113          	addi	sp,sp,48
    61b8:	00008067          	ret

000061bc <bsp_printf_x>:
    {
    61bc:	ff010113          	addi	sp,sp,-16
    61c0:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
    61c4:	00000713          	li	a4,0
    61c8:	00700793          	li	a5,7
    61cc:	02e7c063          	blt	a5,a4,61ec <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    61d0:	00271693          	slli	a3,a4,0x2
    61d4:	ff000793          	li	a5,-16
    61d8:	00d797b3          	sll	a5,a5,a3
    61dc:	00f577b3          	and	a5,a0,a5
    61e0:	00078663          	beqz	a5,61ec <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    61e4:	00170713          	addi	a4,a4,1
    61e8:	fe1ff06f          	j	61c8 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
    61ec:	ea1ff0ef          	jal	ra,608c <bsp_printHex_lower>
    }
    61f0:	00c12083          	lw	ra,12(sp)
    61f4:	01010113          	addi	sp,sp,16
    61f8:	00008067          	ret

000061fc <bsp_printf_X>:
        {
    61fc:	ff010113          	addi	sp,sp,-16
    6200:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
    6204:	00000713          	li	a4,0
    6208:	00700793          	li	a5,7
    620c:	02e7c063          	blt	a5,a4,622c <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    6210:	00271693          	slli	a3,a4,0x2
    6214:	ff000793          	li	a5,-16
    6218:	00d797b3          	sll	a5,a5,a3
    621c:	00f577b3          	and	a5,a0,a5
    6220:	00078663          	beqz	a5,622c <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    6224:	00170713          	addi	a4,a4,1
    6228:	fe1ff06f          	j	6208 <bsp_printf_X+0xc>
            bsp_printHex(val);
    622c:	e09ff0ef          	jal	ra,6034 <bsp_printHex>
        }
    6230:	00c12083          	lw	ra,12(sp)
    6234:	01010113          	addi	sp,sp,16
    6238:	00008067          	ret

0000623c <bridgeif_fdb_age_one_second>:
  BRIDGEIF_DECL_PROTECT(lev);

  fdb = (bridgeif_dfdb_t *)fdb_ptr;
  BRIDGEIF_READ_PROTECT(lev);

  for (i = 0; i < fdb->max_fdb_entries; i++) {
    623c:	00000713          	li	a4,0
    6240:	0080006f          	j	6248 <bridgeif_fdb_age_one_second+0xc>
    6244:	00170713          	addi	a4,a4,1
    6248:	00055783          	lhu	a5,0(a0) # f8010000 <__freertos_irq_stack_top+0xf7feb0d0>
    624c:	02f75a63          	bge	a4,a5,6280 <bridgeif_fdb_age_one_second+0x44>
    bridgeif_dfdb_entry_t *e = &fdb->fdb[i];
    6250:	00452783          	lw	a5,4(a0)
    6254:	00471693          	slli	a3,a4,0x4
    6258:	00d787b3          	add	a5,a5,a3
    if (e->used && e->ts) {
    625c:	0007c683          	lbu	a3,0(a5)
    6260:	fe0682e3          	beqz	a3,6244 <bridgeif_fdb_age_one_second+0x8>
    6264:	0047a683          	lw	a3,4(a5)
    6268:	fc068ee3          	beqz	a3,6244 <bridgeif_fdb_age_one_second+0x8>
      BRIDGEIF_WRITE_PROTECT(lev);
      /* check again when protected */
      if (e->used && e->ts) {
        if (--e->ts == 0) {
    626c:	fff68693          	addi	a3,a3,-1
    6270:	00d7a223          	sw	a3,4(a5)
    6274:	fc0698e3          	bnez	a3,6244 <bridgeif_fdb_age_one_second+0x8>
          e->used = 0;
    6278:	00078023          	sb	zero,0(a5)
    627c:	fc9ff06f          	j	6244 <bridgeif_fdb_age_one_second+0x8>
      }
      BRIDGEIF_WRITE_UNPROTECT(lev);
    }
  }
  BRIDGEIF_READ_UNPROTECT(lev);
}
    6280:	00008067          	ret

00006284 <bsp_printf>:
    {
    6284:	fc010113          	addi	sp,sp,-64
    6288:	00112e23          	sw	ra,28(sp)
    628c:	00812c23          	sw	s0,24(sp)
    6290:	00912a23          	sw	s1,20(sp)
    6294:	00050493          	mv	s1,a0
    6298:	02b12223          	sw	a1,36(sp)
    629c:	02c12423          	sw	a2,40(sp)
    62a0:	02d12623          	sw	a3,44(sp)
    62a4:	02e12823          	sw	a4,48(sp)
    62a8:	02f12a23          	sw	a5,52(sp)
    62ac:	03012c23          	sw	a6,56(sp)
    62b0:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
    62b4:	02410793          	addi	a5,sp,36
    62b8:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
    62bc:	00000413          	li	s0,0
    62c0:	01c0006f          	j	62dc <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
    62c4:	00c12783          	lw	a5,12(sp)
    62c8:	00478713          	addi	a4,a5,4
    62cc:	00e12623          	sw	a4,12(sp)
    62d0:	0007a503          	lw	a0,0(a5)
    62d4:	e11ff0ef          	jal	ra,60e4 <bsp_printf_c>
        for (i = 0; format[i]; i++)
    62d8:	00140413          	addi	s0,s0,1
    62dc:	008487b3          	add	a5,s1,s0
    62e0:	0007c503          	lbu	a0,0(a5)
    62e4:	0c050263          	beqz	a0,63a8 <bsp_printf+0x124>
            if (format[i] == '%') {
    62e8:	02500793          	li	a5,37
    62ec:	06f50663          	beq	a0,a5,6358 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
    62f0:	df5ff0ef          	jal	ra,60e4 <bsp_printf_c>
    62f4:	fe5ff06f          	j	62d8 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    62f8:	00c12783          	lw	a5,12(sp)
    62fc:	00478713          	addi	a4,a5,4
    6300:	00e12623          	sw	a4,12(sp)
    6304:	0007a503          	lw	a0,0(a5)
    6308:	dfdff0ef          	jal	ra,6104 <bsp_printf_s>
                        break;
    630c:	fcdff06f          	j	62d8 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    6310:	00c12783          	lw	a5,12(sp)
    6314:	00478713          	addi	a4,a5,4
    6318:	00e12623          	sw	a4,12(sp)
    631c:	0007a503          	lw	a0,0(a5)
    6320:	e1dff0ef          	jal	ra,613c <bsp_printf_d>
                        break;
    6324:	fb5ff06f          	j	62d8 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    6328:	00c12783          	lw	a5,12(sp)
    632c:	00478713          	addi	a4,a5,4
    6330:	00e12623          	sw	a4,12(sp)
    6334:	0007a503          	lw	a0,0(a5)
    6338:	ec5ff0ef          	jal	ra,61fc <bsp_printf_X>
                        break;
    633c:	f9dff06f          	j	62d8 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    6340:	00c12783          	lw	a5,12(sp)
    6344:	00478713          	addi	a4,a5,4
    6348:	00e12623          	sw	a4,12(sp)
    634c:	0007a503          	lw	a0,0(a5)
    6350:	e6dff0ef          	jal	ra,61bc <bsp_printf_x>
                        break;
    6354:	f85ff06f          	j	62d8 <bsp_printf+0x54>
                while (format[++i]) {
    6358:	00140413          	addi	s0,s0,1
    635c:	008487b3          	add	a5,s1,s0
    6360:	0007c783          	lbu	a5,0(a5)
    6364:	f6078ae3          	beqz	a5,62d8 <bsp_printf+0x54>
                    if (format[i] == 'c') {
    6368:	06300713          	li	a4,99
    636c:	f4e78ce3          	beq	a5,a4,62c4 <bsp_printf+0x40>
                    else if (format[i] == 's') {
    6370:	07300713          	li	a4,115
    6374:	f8e782e3          	beq	a5,a4,62f8 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    6378:	06400713          	li	a4,100
    637c:	f8e78ae3          	beq	a5,a4,6310 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    6380:	05800713          	li	a4,88
    6384:	fae782e3          	beq	a5,a4,6328 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    6388:	07800713          	li	a4,120
    638c:	fae78ae3          	beq	a5,a4,6340 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    6390:	06600713          	li	a4,102
    6394:	fce792e3          	bne	a5,a4,6358 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    6398:	0001c537          	lui	a0,0x1c
    639c:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    63a0:	d65ff0ef          	jal	ra,6104 <bsp_printf_s>
                        break;
    63a4:	f35ff06f          	j	62d8 <bsp_printf+0x54>
    }
    63a8:	01c12083          	lw	ra,28(sp)
    63ac:	01812403          	lw	s0,24(sp)
    63b0:	01412483          	lw	s1,20(sp)
    63b4:	04010113          	addi	sp,sp,64
    63b8:	00008067          	ret

000063bc <bridgeif_age_tmr>:

/** Timer callback for fdb aging, called once per second */
static void
bridgeif_age_tmr(void *arg)
{
    63bc:	ff010113          	addi	sp,sp,-16
    63c0:	00112623          	sw	ra,12(sp)
    63c4:	00812423          	sw	s0,8(sp)
    63c8:	00050413          	mv	s0,a0
  bridgeif_dfdb_t *fdb = (bridgeif_dfdb_t *)arg;

  LWIP_ASSERT("invalid arg", arg != NULL);
    63cc:	02050863          	beqz	a0,63fc <bridgeif_age_tmr+0x40>

  bridgeif_fdb_age_one_second(fdb);
    63d0:	00040513          	mv	a0,s0
    63d4:	e69ff0ef          	jal	ra,623c <bridgeif_fdb_age_one_second>
  sys_timeout(BRIDGEIF_AGE_TIMER_MS, bridgeif_age_tmr, arg);
    63d8:	00040613          	mv	a2,s0
    63dc:	000065b7          	lui	a1,0x6
    63e0:	3bc58593          	addi	a1,a1,956 # 63bc <bridgeif_age_tmr>
    63e4:	3e800513          	li	a0,1000
    63e8:	29c0b0ef          	jal	ra,11684 <sys_timeout>
}
    63ec:	00c12083          	lw	ra,12(sp)
    63f0:	00812403          	lw	s0,8(sp)
    63f4:	01010113          	addi	sp,sp,16
    63f8:	00008067          	ret
  LWIP_ASSERT("invalid arg", arg != NULL);
    63fc:	0001d537          	lui	a0,0x1d
    6400:	f6450513          	addi	a0,a0,-156 # 1cf64 <lwiperf_txbuf_const+0x784>
    6404:	e81ff0ef          	jal	ra,6284 <bsp_printf>
    6408:	fc9ff06f          	j	63d0 <bridgeif_age_tmr+0x14>

0000640c <bridgeif_fdb_update_src>:
{
    640c:	fe010113          	addi	sp,sp,-32
    6410:	00112e23          	sw	ra,28(sp)
    6414:	00812c23          	sw	s0,24(sp)
    6418:	00912a23          	sw	s1,20(sp)
    641c:	01212823          	sw	s2,16(sp)
    6420:	01312623          	sw	s3,12(sp)
    6424:	01412423          	sw	s4,8(sp)
    6428:	00050913          	mv	s2,a0
    642c:	00058993          	mv	s3,a1
    6430:	00060a13          	mv	s4,a2
  for (i = 0; i < fdb->max_fdb_entries; i++) {
    6434:	00000493          	li	s1,0
    6438:	0080006f          	j	6440 <bridgeif_fdb_update_src+0x34>
    643c:	00148493          	addi	s1,s1,1
    6440:	00095703          	lhu	a4,0(s2)
    6444:	04e4d263          	bge	s1,a4,6488 <bridgeif_fdb_update_src+0x7c>
    bridgeif_dfdb_entry_t *e = &fdb->fdb[i];
    6448:	00492403          	lw	s0,4(s2)
    644c:	00449793          	slli	a5,s1,0x4
    6450:	00f40433          	add	s0,s0,a5
    if (e->used && e->ts) {
    6454:	00044783          	lbu	a5,0(s0)
    6458:	fe0782e3          	beqz	a5,643c <bridgeif_fdb_update_src+0x30>
    645c:	00442783          	lw	a5,4(s0)
    6460:	fc078ee3          	beqz	a5,643c <bridgeif_fdb_update_src+0x30>
      if (!memcmp(&e->addr, src_addr, sizeof(struct eth_addr))) {
    6464:	00600613          	li	a2,6
    6468:	00098593          	mv	a1,s3
    646c:	00840513          	addi	a0,s0,8
    6470:	cccfb0ef          	jal	ra,193c <memcmp>
    6474:	fc0514e3          	bnez	a0,643c <bridgeif_fdb_update_src+0x30>
        e->ts = BR_FDB_TIMEOUT_SEC;
    6478:	12c00793          	li	a5,300
    647c:	00f42223          	sw	a5,4(s0)
        e->port = port_idx;
    6480:	014400a3          	sb	s4,1(s0)
        return;
    6484:	0840006f          	j	6508 <bridgeif_fdb_update_src+0xfc>
  for (i = 0; i < fdb->max_fdb_entries; i++) {
    6488:	00000693          	li	a3,0
    648c:	0140006f          	j	64a0 <bridgeif_fdb_update_src+0x94>
      if (!e->used || !e->ts) {
    6490:	02060a63          	beqz	a2,64c4 <bridgeif_fdb_update_src+0xb8>
    6494:	0047a603          	lw	a2,4(a5)
    6498:	02060663          	beqz	a2,64c4 <bridgeif_fdb_update_src+0xb8>
  for (i = 0; i < fdb->max_fdb_entries; i++) {
    649c:	00168693          	addi	a3,a3,1
    64a0:	06e6d463          	bge	a3,a4,6508 <bridgeif_fdb_update_src+0xfc>
    bridgeif_dfdb_entry_t *e = &fdb->fdb[i];
    64a4:	00492783          	lw	a5,4(s2)
    64a8:	00469613          	slli	a2,a3,0x4
    64ac:	00c787b3          	add	a5,a5,a2
    if (!e->used || !e->ts) {
    64b0:	0007c603          	lbu	a2,0(a5)
    64b4:	fc060ee3          	beqz	a2,6490 <bridgeif_fdb_update_src+0x84>
    64b8:	0047a583          	lw	a1,4(a5)
    64bc:	fe0590e3          	bnez	a1,649c <bridgeif_fdb_update_src+0x90>
    64c0:	fd1ff06f          	j	6490 <bridgeif_fdb_update_src+0x84>
        memcpy(&e->addr, src_addr, sizeof(struct eth_addr));
    64c4:	0009c883          	lbu	a7,0(s3)
    64c8:	0019c803          	lbu	a6,1(s3)
    64cc:	0029c503          	lbu	a0,2(s3)
    64d0:	0039c583          	lbu	a1,3(s3)
    64d4:	0049c603          	lbu	a2,4(s3)
    64d8:	0059c683          	lbu	a3,5(s3)
    64dc:	01178423          	sb	a7,8(a5)
    64e0:	010784a3          	sb	a6,9(a5)
    64e4:	00a78523          	sb	a0,10(a5)
    64e8:	00b785a3          	sb	a1,11(a5)
    64ec:	00c78623          	sb	a2,12(a5)
    64f0:	00d786a3          	sb	a3,13(a5)
        e->ts = BR_FDB_TIMEOUT_SEC;
    64f4:	12c00713          	li	a4,300
    64f8:	00e7a223          	sw	a4,4(a5)
        e->port = port_idx;
    64fc:	014780a3          	sb	s4,1(a5)
        e->used = 1;
    6500:	00100713          	li	a4,1
    6504:	00e78023          	sb	a4,0(a5)
}
    6508:	01c12083          	lw	ra,28(sp)
    650c:	01812403          	lw	s0,24(sp)
    6510:	01412483          	lw	s1,20(sp)
    6514:	01012903          	lw	s2,16(sp)
    6518:	00c12983          	lw	s3,12(sp)
    651c:	00812a03          	lw	s4,8(sp)
    6520:	02010113          	addi	sp,sp,32
    6524:	00008067          	ret

00006528 <bridgeif_fdb_get_dst_ports>:
{
    6528:	fe010113          	addi	sp,sp,-32
    652c:	00112e23          	sw	ra,28(sp)
    6530:	00812c23          	sw	s0,24(sp)
    6534:	00912a23          	sw	s1,20(sp)
    6538:	01212823          	sw	s2,16(sp)
    653c:	01312623          	sw	s3,12(sp)
    6540:	00050913          	mv	s2,a0
    6544:	00058993          	mv	s3,a1
  for (i = 0; i < fdb->max_fdb_entries; i++) {
    6548:	00000493          	li	s1,0
    654c:	0080006f          	j	6554 <bridgeif_fdb_get_dst_ports+0x2c>
    6550:	00148493          	addi	s1,s1,1
    6554:	00095783          	lhu	a5,0(s2)
    6558:	04f4d463          	bge	s1,a5,65a0 <bridgeif_fdb_get_dst_ports+0x78>
    bridgeif_dfdb_entry_t *e = &fdb->fdb[i];
    655c:	00492403          	lw	s0,4(s2)
    6560:	00449793          	slli	a5,s1,0x4
    6564:	00f40433          	add	s0,s0,a5
    if (e->used && e->ts) {
    6568:	00044783          	lbu	a5,0(s0)
    656c:	fe0782e3          	beqz	a5,6550 <bridgeif_fdb_get_dst_ports+0x28>
    6570:	00442783          	lw	a5,4(s0)
    6574:	fc078ee3          	beqz	a5,6550 <bridgeif_fdb_get_dst_ports+0x28>
      if (!memcmp(&e->addr, dst_addr, sizeof(struct eth_addr))) {
    6578:	00600613          	li	a2,6
    657c:	00098593          	mv	a1,s3
    6580:	00840513          	addi	a0,s0,8
    6584:	bb8fb0ef          	jal	ra,193c <memcmp>
    6588:	fc0514e3          	bnez	a0,6550 <bridgeif_fdb_get_dst_ports+0x28>
        bridgeif_portmask_t ret = (bridgeif_portmask_t)(1 << e->port);
    658c:	00144783          	lbu	a5,1(s0)
    6590:	00100513          	li	a0,1
    6594:	00f51533          	sll	a0,a0,a5
    6598:	0ff57513          	andi	a0,a0,255
        return ret;
    659c:	0080006f          	j	65a4 <bridgeif_fdb_get_dst_ports+0x7c>
  return BR_FLOOD;
    65a0:	0ff00513          	li	a0,255
}
    65a4:	01c12083          	lw	ra,28(sp)
    65a8:	01812403          	lw	s0,24(sp)
    65ac:	01412483          	lw	s1,20(sp)
    65b0:	01012903          	lw	s2,16(sp)
    65b4:	00c12983          	lw	s3,12(sp)
    65b8:	02010113          	addi	sp,sp,32
    65bc:	00008067          	ret

000065c0 <bridgeif_fdb_init>:
 * @ingroup bridgeif_fdb
 * Init our simple fdb list
 */
void *
bridgeif_fdb_init(u16_t max_fdb_entries)
{
    65c0:	ff010113          	addi	sp,sp,-16
    65c4:	00112623          	sw	ra,12(sp)
    65c8:	00812423          	sw	s0,8(sp)
    65cc:	00912223          	sw	s1,4(sp)
    65d0:	00050493          	mv	s1,a0
  bridgeif_dfdb_t *fdb;
  size_t alloc_len_sizet = sizeof(bridgeif_dfdb_t) + (max_fdb_entries * sizeof(bridgeif_dfdb_entry_t));
    65d4:	00451713          	slli	a4,a0,0x4
    65d8:	00870713          	addi	a4,a4,8
  mem_size_t alloc_len = (mem_size_t)alloc_len_sizet;
    65dc:	01071413          	slli	s0,a4,0x10
    65e0:	01045413          	srli	s0,s0,0x10
  LWIP_ASSERT("alloc_len == alloc_len_sizet", alloc_len == alloc_len_sizet);
    65e4:	000107b7          	lui	a5,0x10
    65e8:	fff78793          	addi	a5,a5,-1 # ffff <tcp_input+0x183>
    65ec:	00f777b3          	and	a5,a4,a5
    65f0:	04f71863          	bne	a4,a5,6640 <bridgeif_fdb_init+0x80>
  LWIP_DEBUGF(BRIDGEIF_DEBUG, ("bridgeif_fdb_init: allocating %d bytes for private FDB data\n", (int)alloc_len));
  fdb = (bridgeif_dfdb_t *)mem_calloc(1, alloc_len);
    65f4:	00040593          	mv	a1,s0
    65f8:	00100513          	li	a0,1
    65fc:	3f00f0ef          	jal	ra,159ec <mem_calloc>
    6600:	00050413          	mv	s0,a0
  if (fdb == NULL) {
    6604:	02050263          	beqz	a0,6628 <bridgeif_fdb_init+0x68>
    return NULL;
  }
  fdb->max_fdb_entries = max_fdb_entries;
    6608:	00951023          	sh	s1,0(a0)
  fdb->fdb = (bridgeif_dfdb_entry_t *)(fdb + 1);
    660c:	00850793          	addi	a5,a0,8
    6610:	00f52223          	sw	a5,4(a0)

  sys_timeout(BRIDGEIF_AGE_TIMER_MS, bridgeif_age_tmr, fdb);
    6614:	00050613          	mv	a2,a0
    6618:	000065b7          	lui	a1,0x6
    661c:	3bc58593          	addi	a1,a1,956 # 63bc <bridgeif_age_tmr>
    6620:	3e800513          	li	a0,1000
    6624:	0600b0ef          	jal	ra,11684 <sys_timeout>

  return fdb;
}
    6628:	00040513          	mv	a0,s0
    662c:	00c12083          	lw	ra,12(sp)
    6630:	00812403          	lw	s0,8(sp)
    6634:	00412483          	lw	s1,4(sp)
    6638:	01010113          	addi	sp,sp,16
    663c:	00008067          	ret
  LWIP_ASSERT("alloc_len == alloc_len_sizet", alloc_len == alloc_len_sizet);
    6640:	0001d537          	lui	a0,0x1d
    6644:	f7050513          	addi	a0,a0,-144 # 1cf70 <lwiperf_txbuf_const+0x790>
    6648:	c3dff0ef          	jal	ra,6284 <bsp_printf>
    664c:	fa9ff06f          	j	65f4 <bridgeif_fdb_init+0x34>

00006650 <uart_writeAvailability>:
        return *((volatile u32*) address);
    6650:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    6654:	01055513          	srli	a0,a0,0x10
    }
    6658:	0ff57513          	andi	a0,a0,255
    665c:	00008067          	ret

00006660 <uart_write>:
    static void uart_write(u32 reg, char data){
    6660:	ff010113          	addi	sp,sp,-16
    6664:	00112623          	sw	ra,12(sp)
    6668:	00812423          	sw	s0,8(sp)
    666c:	00912223          	sw	s1,4(sp)
    6670:	00050413          	mv	s0,a0
    6674:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    6678:	00040513          	mv	a0,s0
    667c:	fd5ff0ef          	jal	ra,6650 <uart_writeAvailability>
    6680:	fe050ce3          	beqz	a0,6678 <uart_write+0x18>
        *((volatile u32*) address) = data;
    6684:	00942023          	sw	s1,0(s0)
    }
    6688:	00c12083          	lw	ra,12(sp)
    668c:	00812403          	lw	s0,8(sp)
    6690:	00412483          	lw	s1,4(sp)
    6694:	01010113          	addi	sp,sp,16
    6698:	00008067          	ret

0000669c <bsp_printHex>:
    {
    669c:	ff010113          	addi	sp,sp,-16
    66a0:	00112623          	sw	ra,12(sp)
    66a4:	00812423          	sw	s0,8(sp)
    66a8:	00912223          	sw	s1,4(sp)
    66ac:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    66b0:	01c00413          	li	s0,28
    66b4:	0280006f          	j	66dc <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    66b8:	0084d7b3          	srl	a5,s1,s0
    66bc:	00f7f713          	andi	a4,a5,15
    66c0:	0001c7b7          	lui	a5,0x1c
    66c4:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    66c8:	00e787b3          	add	a5,a5,a4
    66cc:	0007c583          	lbu	a1,0(a5)
    66d0:	f8010537          	lui	a0,0xf8010
    66d4:	f8dff0ef          	jal	ra,6660 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    66d8:	ffc40413          	addi	s0,s0,-4
    66dc:	fc045ee3          	bgez	s0,66b8 <bsp_printHex+0x1c>
    }
    66e0:	00c12083          	lw	ra,12(sp)
    66e4:	00812403          	lw	s0,8(sp)
    66e8:	00412483          	lw	s1,4(sp)
    66ec:	01010113          	addi	sp,sp,16
    66f0:	00008067          	ret

000066f4 <bsp_printHex_lower>:
        {
    66f4:	ff010113          	addi	sp,sp,-16
    66f8:	00112623          	sw	ra,12(sp)
    66fc:	00812423          	sw	s0,8(sp)
    6700:	00912223          	sw	s1,4(sp)
    6704:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    6708:	01c00413          	li	s0,28
    670c:	0280006f          	j	6734 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    6710:	0084d7b3          	srl	a5,s1,s0
    6714:	00f7f713          	andi	a4,a5,15
    6718:	0001c7b7          	lui	a5,0x1c
    671c:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    6720:	00e787b3          	add	a5,a5,a4
    6724:	0007c583          	lbu	a1,0(a5)
    6728:	f8010537          	lui	a0,0xf8010
    672c:	f35ff0ef          	jal	ra,6660 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    6730:	ffc40413          	addi	s0,s0,-4
    6734:	fc045ee3          	bgez	s0,6710 <bsp_printHex_lower+0x1c>
        }
    6738:	00c12083          	lw	ra,12(sp)
    673c:	00812403          	lw	s0,8(sp)
    6740:	00412483          	lw	s1,4(sp)
    6744:	01010113          	addi	sp,sp,16
    6748:	00008067          	ret

0000674c <bsp_printf_c>:
    {
    674c:	ff010113          	addi	sp,sp,-16
    6750:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    6754:	0ff57593          	andi	a1,a0,255
    6758:	f8010537          	lui	a0,0xf8010
    675c:	f05ff0ef          	jal	ra,6660 <uart_write>
    }
    6760:	00c12083          	lw	ra,12(sp)
    6764:	01010113          	addi	sp,sp,16
    6768:	00008067          	ret

0000676c <bsp_printf_s>:
    {
    676c:	ff010113          	addi	sp,sp,-16
    6770:	00112623          	sw	ra,12(sp)
    6774:	00812423          	sw	s0,8(sp)
    6778:	00050413          	mv	s0,a0
        while (*p)
    677c:	00044583          	lbu	a1,0(s0)
    6780:	00058a63          	beqz	a1,6794 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    6784:	00140413          	addi	s0,s0,1
    6788:	f8010537          	lui	a0,0xf8010
    678c:	ed5ff0ef          	jal	ra,6660 <uart_write>
    6790:	fedff06f          	j	677c <bsp_printf_s+0x10>
    }
    6794:	00c12083          	lw	ra,12(sp)
    6798:	00812403          	lw	s0,8(sp)
    679c:	01010113          	addi	sp,sp,16
    67a0:	00008067          	ret

000067a4 <bsp_printf_d>:
    {
    67a4:	fd010113          	addi	sp,sp,-48
    67a8:	02112623          	sw	ra,44(sp)
    67ac:	02812423          	sw	s0,40(sp)
    67b0:	02912223          	sw	s1,36(sp)
    67b4:	00050493          	mv	s1,a0
        if (val < 0) {
    67b8:	00054663          	bltz	a0,67c4 <bsp_printf_d+0x20>
    {
    67bc:	00010413          	mv	s0,sp
    67c0:	02c0006f          	j	67ec <bsp_printf_d+0x48>
            bsp_printf_c('-');
    67c4:	02d00513          	li	a0,45
    67c8:	f85ff0ef          	jal	ra,674c <bsp_printf_c>
            val = -val;
    67cc:	409004b3          	neg	s1,s1
    67d0:	fedff06f          	j	67bc <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
    67d4:	00a00713          	li	a4,10
    67d8:	02e4e7b3          	rem	a5,s1,a4
    67dc:	03078793          	addi	a5,a5,48
    67e0:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    67e4:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    67e8:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    67ec:	fe0494e3          	bnez	s1,67d4 <bsp_printf_d+0x30>
    67f0:	00010793          	mv	a5,sp
    67f4:	fef400e3          	beq	s0,a5,67d4 <bsp_printf_d+0x30>
    67f8:	0100006f          	j	6808 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
    67fc:	fff40413          	addi	s0,s0,-1
    6800:	00044503          	lbu	a0,0(s0)
    6804:	f49ff0ef          	jal	ra,674c <bsp_printf_c>
        while (p != buffer)
    6808:	00010793          	mv	a5,sp
    680c:	fef418e3          	bne	s0,a5,67fc <bsp_printf_d+0x58>
    }
    6810:	02c12083          	lw	ra,44(sp)
    6814:	02812403          	lw	s0,40(sp)
    6818:	02412483          	lw	s1,36(sp)
    681c:	03010113          	addi	sp,sp,48
    6820:	00008067          	ret

00006824 <bsp_printf_x>:
    {
    6824:	ff010113          	addi	sp,sp,-16
    6828:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
    682c:	00000713          	li	a4,0
    6830:	00700793          	li	a5,7
    6834:	02e7c063          	blt	a5,a4,6854 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    6838:	00271693          	slli	a3,a4,0x2
    683c:	ff000793          	li	a5,-16
    6840:	00d797b3          	sll	a5,a5,a3
    6844:	00f577b3          	and	a5,a0,a5
    6848:	00078663          	beqz	a5,6854 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    684c:	00170713          	addi	a4,a4,1
    6850:	fe1ff06f          	j	6830 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
    6854:	ea1ff0ef          	jal	ra,66f4 <bsp_printHex_lower>
    }
    6858:	00c12083          	lw	ra,12(sp)
    685c:	01010113          	addi	sp,sp,16
    6860:	00008067          	ret

00006864 <bsp_printf_X>:
        {
    6864:	ff010113          	addi	sp,sp,-16
    6868:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
    686c:	00000713          	li	a4,0
    6870:	00700793          	li	a5,7
    6874:	02e7c063          	blt	a5,a4,6894 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    6878:	00271693          	slli	a3,a4,0x2
    687c:	ff000793          	li	a5,-16
    6880:	00d797b3          	sll	a5,a5,a3
    6884:	00f577b3          	and	a5,a0,a5
    6888:	00078663          	beqz	a5,6894 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    688c:	00170713          	addi	a4,a4,1
    6890:	fe1ff06f          	j	6870 <bsp_printf_X+0xc>
            bsp_printHex(val);
    6894:	e09ff0ef          	jal	ra,669c <bsp_printHex>
        }
    6898:	00c12083          	lw	ra,12(sp)
    689c:	01010113          	addi	sp,sp,16
    68a0:	00008067          	ret

000068a4 <bsp_printf>:
    {
    68a4:	fc010113          	addi	sp,sp,-64
    68a8:	00112e23          	sw	ra,28(sp)
    68ac:	00812c23          	sw	s0,24(sp)
    68b0:	00912a23          	sw	s1,20(sp)
    68b4:	00050493          	mv	s1,a0
    68b8:	02b12223          	sw	a1,36(sp)
    68bc:	02c12423          	sw	a2,40(sp)
    68c0:	02d12623          	sw	a3,44(sp)
    68c4:	02e12823          	sw	a4,48(sp)
    68c8:	02f12a23          	sw	a5,52(sp)
    68cc:	03012c23          	sw	a6,56(sp)
    68d0:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
    68d4:	02410793          	addi	a5,sp,36
    68d8:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
    68dc:	00000413          	li	s0,0
    68e0:	01c0006f          	j	68fc <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
    68e4:	00c12783          	lw	a5,12(sp)
    68e8:	00478713          	addi	a4,a5,4
    68ec:	00e12623          	sw	a4,12(sp)
    68f0:	0007a503          	lw	a0,0(a5)
    68f4:	e59ff0ef          	jal	ra,674c <bsp_printf_c>
        for (i = 0; format[i]; i++)
    68f8:	00140413          	addi	s0,s0,1
    68fc:	008487b3          	add	a5,s1,s0
    6900:	0007c503          	lbu	a0,0(a5)
    6904:	0c050263          	beqz	a0,69c8 <bsp_printf+0x124>
            if (format[i] == '%') {
    6908:	02500793          	li	a5,37
    690c:	06f50663          	beq	a0,a5,6978 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
    6910:	e3dff0ef          	jal	ra,674c <bsp_printf_c>
    6914:	fe5ff06f          	j	68f8 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    6918:	00c12783          	lw	a5,12(sp)
    691c:	00478713          	addi	a4,a5,4
    6920:	00e12623          	sw	a4,12(sp)
    6924:	0007a503          	lw	a0,0(a5)
    6928:	e45ff0ef          	jal	ra,676c <bsp_printf_s>
                        break;
    692c:	fcdff06f          	j	68f8 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    6930:	00c12783          	lw	a5,12(sp)
    6934:	00478713          	addi	a4,a5,4
    6938:	00e12623          	sw	a4,12(sp)
    693c:	0007a503          	lw	a0,0(a5)
    6940:	e65ff0ef          	jal	ra,67a4 <bsp_printf_d>
                        break;
    6944:	fb5ff06f          	j	68f8 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    6948:	00c12783          	lw	a5,12(sp)
    694c:	00478713          	addi	a4,a5,4
    6950:	00e12623          	sw	a4,12(sp)
    6954:	0007a503          	lw	a0,0(a5)
    6958:	f0dff0ef          	jal	ra,6864 <bsp_printf_X>
                        break;
    695c:	f9dff06f          	j	68f8 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    6960:	00c12783          	lw	a5,12(sp)
    6964:	00478713          	addi	a4,a5,4
    6968:	00e12623          	sw	a4,12(sp)
    696c:	0007a503          	lw	a0,0(a5)
    6970:	eb5ff0ef          	jal	ra,6824 <bsp_printf_x>
                        break;
    6974:	f85ff06f          	j	68f8 <bsp_printf+0x54>
                while (format[++i]) {
    6978:	00140413          	addi	s0,s0,1
    697c:	008487b3          	add	a5,s1,s0
    6980:	0007c783          	lbu	a5,0(a5)
    6984:	f6078ae3          	beqz	a5,68f8 <bsp_printf+0x54>
                    if (format[i] == 'c') {
    6988:	06300713          	li	a4,99
    698c:	f4e78ce3          	beq	a5,a4,68e4 <bsp_printf+0x40>
                    else if (format[i] == 's') {
    6990:	07300713          	li	a4,115
    6994:	f8e782e3          	beq	a5,a4,6918 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    6998:	06400713          	li	a4,100
    699c:	f8e78ae3          	beq	a5,a4,6930 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    69a0:	05800713          	li	a4,88
    69a4:	fae782e3          	beq	a5,a4,6948 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    69a8:	07800713          	li	a4,120
    69ac:	fae78ae3          	beq	a5,a4,6960 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    69b0:	06600713          	li	a4,102
    69b4:	fce792e3          	bne	a5,a4,6978 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    69b8:	0001c537          	lui	a0,0x1c
    69bc:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    69c0:	dadff0ef          	jal	ra,676c <bsp_printf_s>
                        break;
    69c4:	f35ff06f          	j	68f8 <bsp_printf+0x54>
    }
    69c8:	01c12083          	lw	ra,28(sp)
    69cc:	01812403          	lw	s0,24(sp)
    69d0:	01412483          	lw	s1,20(sp)
    69d4:	04010113          	addi	sp,sp,64
    69d8:	00008067          	ret

000069dc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
    69dc:	ff010113          	addi	sp,sp,-16
    69e0:	00112623          	sw	ra,12(sp)
    69e4:	00812423          	sw	s0,8(sp)
    69e8:	00912223          	sw	s1,4(sp)
    69ec:	01212023          	sw	s2,0(sp)
    69f0:	00050413          	mv	s0,a0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
    69f4:	00a55703          	lhu	a4,10(a0)
    69f8:	00e00793          	li	a5,14
    69fc:	08e7fa63          	bgeu	a5,a4,6a90 <ethernet_input+0xb4>
    6a00:	00058913          	mv	s2,a1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
    6a04:	00f54783          	lbu	a5,15(a0)
    6a08:	00079863          	bnez	a5,6a18 <ethernet_input+0x3c>
    p->if_idx = netif_get_index(netif);
    6a0c:	0385c783          	lbu	a5,56(a1)
    6a10:	00178793          	addi	a5,a5,1
    6a14:	00f507a3          	sb	a5,15(a0)
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
    6a18:	00442503          	lw	a0,4(s0)
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
    6a1c:	00c54783          	lbu	a5,12(a0)
    6a20:	00d54483          	lbu	s1,13(a0)
    6a24:	00849493          	slli	s1,s1,0x8
    6a28:	00f4e4b3          	or	s1,s1,a5

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
    6a2c:	00054783          	lbu	a5,0(a0)
    6a30:	0017f713          	andi	a4,a5,1
    6a34:	02070463          	beqz	a4,6a5c <ethernet_input+0x80>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
    6a38:	00100713          	li	a4,1
    6a3c:	08e78c63          	beq	a5,a4,6ad4 <ethernet_input+0xf8>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
    6a40:	00600613          	li	a2,6
    6a44:	83418593          	addi	a1,gp,-1996 # 1fa04 <ethbroadcast>
    6a48:	ef5fa0ef          	jal	ra,193c <memcmp>
    6a4c:	00051863          	bnez	a0,6a5c <ethernet_input+0x80>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
    6a50:	00d44783          	lbu	a5,13(s0)
    6a54:	0087e793          	ori	a5,a5,8
    6a58:	00f406a3          	sb	a5,13(s0)
    }
  }

  switch (type) {
    6a5c:	00800793          	li	a5,8
    6a60:	08f48c63          	beq	s1,a5,6af8 <ethernet_input+0x11c>
    6a64:	60800793          	li	a5,1544
    6a68:	0af48e63          	beq	s1,a5,6b24 <ethernet_input+0x148>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
    6a6c:	000227b7          	lui	a5,0x22
    6a70:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    6a74:	0287d703          	lhu	a4,40(a5)
    6a78:	00170713          	addi	a4,a4,1
    6a7c:	02e79423          	sh	a4,40(a5)
      ETHARP_STATS_INC(etharp.drop);
    6a80:	01e7d703          	lhu	a4,30(a5)
    6a84:	00170713          	addi	a4,a4,1
    6a88:	00e79f23          	sh	a4,30(a5)
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
    6a8c:	0240006f          	j	6ab0 <ethernet_input+0xd4>
    ETHARP_STATS_INC(etharp.proterr);
    6a90:	000227b7          	lui	a5,0x22
    6a94:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    6a98:	0287d703          	lhu	a4,40(a5)
    6a9c:	00170713          	addi	a4,a4,1
    6aa0:	02e79423          	sh	a4,40(a5)
    ETHARP_STATS_INC(etharp.drop);
    6aa4:	01e7d703          	lhu	a4,30(a5)
    6aa8:	00170713          	addi	a4,a4,1
    6aac:	00e79f23          	sh	a4,30(a5)
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
    6ab0:	00040513          	mv	a0,s0
    6ab4:	09c060ef          	jal	ra,cb50 <pbuf_free>
  return ERR_OK;
}
    6ab8:	00000513          	li	a0,0
    6abc:	00c12083          	lw	ra,12(sp)
    6ac0:	00812403          	lw	s0,8(sp)
    6ac4:	00412483          	lw	s1,4(sp)
    6ac8:	00012903          	lw	s2,0(sp)
    6acc:	01010113          	addi	sp,sp,16
    6ad0:	00008067          	ret
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
    6ad4:	00154783          	lbu	a5,1(a0)
    6ad8:	f80792e3          	bnez	a5,6a5c <ethernet_input+0x80>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
    6adc:	00254703          	lbu	a4,2(a0)
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
    6ae0:	05e00793          	li	a5,94
    6ae4:	f6f71ce3          	bne	a4,a5,6a5c <ethernet_input+0x80>
        p->flags |= PBUF_FLAG_LLMCAST;
    6ae8:	00d44783          	lbu	a5,13(s0)
    6aec:	0107e793          	ori	a5,a5,16
    6af0:	00f406a3          	sb	a5,13(s0)
    6af4:	f69ff06f          	j	6a5c <ethernet_input+0x80>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
    6af8:	03594783          	lbu	a5,53(s2)
    6afc:	0087f793          	andi	a5,a5,8
    6b00:	fa0788e3          	beqz	a5,6ab0 <ethernet_input+0xd4>
      if (pbuf_remove_header(p, next_hdr_offset)) {
    6b04:	00e00593          	li	a1,14
    6b08:	00040513          	mv	a0,s0
    6b0c:	741050ef          	jal	ra,ca4c <pbuf_remove_header>
    6b10:	fa0510e3          	bnez	a0,6ab0 <ethernet_input+0xd4>
        ip4_input(p, netif);
    6b14:	00090593          	mv	a1,s2
    6b18:	00040513          	mv	a0,s0
    6b1c:	4950f0ef          	jal	ra,167b0 <ip4_input>
      break;
    6b20:	f99ff06f          	j	6ab8 <ethernet_input+0xdc>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
    6b24:	03594783          	lbu	a5,53(s2)
    6b28:	0087f793          	andi	a5,a5,8
    6b2c:	f80782e3          	beqz	a5,6ab0 <ethernet_input+0xd4>
      if (pbuf_remove_header(p, next_hdr_offset)) {
    6b30:	00e00593          	li	a1,14
    6b34:	00040513          	mv	a0,s0
    6b38:	715050ef          	jal	ra,ca4c <pbuf_remove_header>
    6b3c:	02050463          	beqz	a0,6b64 <ethernet_input+0x188>
        ETHARP_STATS_INC(etharp.lenerr);
    6b40:	000227b7          	lui	a5,0x22
    6b44:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    6b48:	0227d703          	lhu	a4,34(a5)
    6b4c:	00170713          	addi	a4,a4,1
    6b50:	02e79123          	sh	a4,34(a5)
        ETHARP_STATS_INC(etharp.drop);
    6b54:	01e7d703          	lhu	a4,30(a5)
    6b58:	00170713          	addi	a4,a4,1
    6b5c:	00e79f23          	sh	a4,30(a5)
        goto free_and_return;
    6b60:	f51ff06f          	j	6ab0 <ethernet_input+0xd4>
        etharp_input(p, netif);
    6b64:	00090593          	mv	a1,s2
    6b68:	00040513          	mv	a0,s0
    6b6c:	235120ef          	jal	ra,195a0 <etharp_input>
      break;
    6b70:	f49ff06f          	j	6ab8 <ethernet_input+0xdc>

00006b74 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
    6b74:	fe010113          	addi	sp,sp,-32
    6b78:	00112e23          	sw	ra,28(sp)
    6b7c:	00812c23          	sw	s0,24(sp)
    6b80:	00912a23          	sw	s1,20(sp)
    6b84:	01212823          	sw	s2,16(sp)
    6b88:	01312623          	sw	s3,12(sp)
    6b8c:	01412423          	sw	s4,8(sp)
    6b90:	00050a13          	mv	s4,a0
    6b94:	00058993          	mv	s3,a1
    6b98:	00060413          	mv	s0,a2
    6b9c:	00068493          	mv	s1,a3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
    6ba0:	00070513          	mv	a0,a4
    6ba4:	0d5030ef          	jal	ra,a478 <lwip_htons>
    6ba8:	00050913          	mv	s2,a0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
    6bac:	00e00593          	li	a1,14
    6bb0:	00098513          	mv	a0,s3
    6bb4:	661050ef          	jal	ra,ca14 <pbuf_add_header>
    6bb8:	0a051863          	bnez	a0,6c68 <ethernet_output+0xf4>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
    6bbc:	0049a783          	lw	a5,4(s3)
  ethhdr->type = eth_type_be;
    6bc0:	01278623          	sb	s2,12(a5)
    6bc4:	00895913          	srli	s2,s2,0x8
    6bc8:	012786a3          	sb	s2,13(a5)
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
    6bcc:	0004c803          	lbu	a6,0(s1)
    6bd0:	0014c503          	lbu	a0,1(s1)
    6bd4:	0024c583          	lbu	a1,2(s1)
    6bd8:	0034c603          	lbu	a2,3(s1)
    6bdc:	0044c683          	lbu	a3,4(s1)
    6be0:	0054c703          	lbu	a4,5(s1)
    6be4:	01078023          	sb	a6,0(a5)
    6be8:	00a780a3          	sb	a0,1(a5)
    6bec:	00b78123          	sb	a1,2(a5)
    6bf0:	00c781a3          	sb	a2,3(a5)
    6bf4:	00d78223          	sb	a3,4(a5)
    6bf8:	00e782a3          	sb	a4,5(a5)
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
    6bfc:	00044883          	lbu	a7,0(s0)
    6c00:	00144803          	lbu	a6,1(s0)
    6c04:	00244503          	lbu	a0,2(s0)
    6c08:	00344583          	lbu	a1,3(s0)
    6c0c:	00444603          	lbu	a2,4(s0)
    6c10:	00544683          	lbu	a3,5(s0)
    6c14:	01178323          	sb	a7,6(a5)
    6c18:	010783a3          	sb	a6,7(a5)
    6c1c:	00a78423          	sb	a0,8(a5)
    6c20:	00b784a3          	sb	a1,9(a5)
    6c24:	00c78523          	sb	a2,10(a5)
    6c28:	00d785a3          	sb	a3,11(a5)

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
    6c2c:	034a4703          	lbu	a4,52(s4)
    6c30:	00600793          	li	a5,6
    6c34:	04f71863          	bne	a4,a5,6c84 <ethernet_output+0x110>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
    6c38:	018a2783          	lw	a5,24(s4)
    6c3c:	00098593          	mv	a1,s3
    6c40:	000a0513          	mv	a0,s4
    6c44:	000780e7          	jalr	a5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
    6c48:	01c12083          	lw	ra,28(sp)
    6c4c:	01812403          	lw	s0,24(sp)
    6c50:	01412483          	lw	s1,20(sp)
    6c54:	01012903          	lw	s2,16(sp)
    6c58:	00c12983          	lw	s3,12(sp)
    6c5c:	00812a03          	lw	s4,8(sp)
    6c60:	02010113          	addi	sp,sp,32
    6c64:	00008067          	ret
  LINK_STATS_INC(link.lenerr);
    6c68:	000227b7          	lui	a5,0x22
    6c6c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    6c70:	00a7d703          	lhu	a4,10(a5)
    6c74:	00170713          	addi	a4,a4,1
    6c78:	00e79523          	sh	a4,10(a5)
  return ERR_BUF;
    6c7c:	ffe00513          	li	a0,-2
    6c80:	fc9ff06f          	j	6c48 <ethernet_output+0xd4>
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
    6c84:	0001d537          	lui	a0,0x1d
    6c88:	f9050513          	addi	a0,a0,-112 # 1cf90 <lwiperf_txbuf_const+0x7b0>
    6c8c:	c19ff0ef          	jal	ra,68a4 <bsp_printf>
    6c90:	fa9ff06f          	j	6c38 <ethernet_output+0xc4>

00006c94 <uart_writeAvailability>:
        return *((volatile u32*) address);
    6c94:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    6c98:	01055513          	srli	a0,a0,0x10
    }
    6c9c:	0ff57513          	andi	a0,a0,255
    6ca0:	00008067          	ret

00006ca4 <uart_write>:
    static void uart_write(u32 reg, char data){
    6ca4:	ff010113          	addi	sp,sp,-16
    6ca8:	00112623          	sw	ra,12(sp)
    6cac:	00812423          	sw	s0,8(sp)
    6cb0:	00912223          	sw	s1,4(sp)
    6cb4:	00050413          	mv	s0,a0
    6cb8:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    6cbc:	00040513          	mv	a0,s0
    6cc0:	fd5ff0ef          	jal	ra,6c94 <uart_writeAvailability>
    6cc4:	fe050ce3          	beqz	a0,6cbc <uart_write+0x18>
        *((volatile u32*) address) = data;
    6cc8:	00942023          	sw	s1,0(s0)
    }
    6ccc:	00c12083          	lw	ra,12(sp)
    6cd0:	00812403          	lw	s0,8(sp)
    6cd4:	00412483          	lw	s1,4(sp)
    6cd8:	01010113          	addi	sp,sp,16
    6cdc:	00008067          	ret

00006ce0 <bsp_printHex>:
    {
    6ce0:	ff010113          	addi	sp,sp,-16
    6ce4:	00112623          	sw	ra,12(sp)
    6ce8:	00812423          	sw	s0,8(sp)
    6cec:	00912223          	sw	s1,4(sp)
    6cf0:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    6cf4:	01c00413          	li	s0,28
    6cf8:	0280006f          	j	6d20 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    6cfc:	0084d7b3          	srl	a5,s1,s0
    6d00:	00f7f713          	andi	a4,a5,15
    6d04:	0001c7b7          	lui	a5,0x1c
    6d08:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    6d0c:	00e787b3          	add	a5,a5,a4
    6d10:	0007c583          	lbu	a1,0(a5)
    6d14:	f8010537          	lui	a0,0xf8010
    6d18:	f8dff0ef          	jal	ra,6ca4 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    6d1c:	ffc40413          	addi	s0,s0,-4
    6d20:	fc045ee3          	bgez	s0,6cfc <bsp_printHex+0x1c>
    }
    6d24:	00c12083          	lw	ra,12(sp)
    6d28:	00812403          	lw	s0,8(sp)
    6d2c:	00412483          	lw	s1,4(sp)
    6d30:	01010113          	addi	sp,sp,16
    6d34:	00008067          	ret

00006d38 <bsp_printHex_lower>:
        {
    6d38:	ff010113          	addi	sp,sp,-16
    6d3c:	00112623          	sw	ra,12(sp)
    6d40:	00812423          	sw	s0,8(sp)
    6d44:	00912223          	sw	s1,4(sp)
    6d48:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    6d4c:	01c00413          	li	s0,28
    6d50:	0280006f          	j	6d78 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    6d54:	0084d7b3          	srl	a5,s1,s0
    6d58:	00f7f713          	andi	a4,a5,15
    6d5c:	0001c7b7          	lui	a5,0x1c
    6d60:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    6d64:	00e787b3          	add	a5,a5,a4
    6d68:	0007c583          	lbu	a1,0(a5)
    6d6c:	f8010537          	lui	a0,0xf8010
    6d70:	f35ff0ef          	jal	ra,6ca4 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    6d74:	ffc40413          	addi	s0,s0,-4
    6d78:	fc045ee3          	bgez	s0,6d54 <bsp_printHex_lower+0x1c>
        }
    6d7c:	00c12083          	lw	ra,12(sp)
    6d80:	00812403          	lw	s0,8(sp)
    6d84:	00412483          	lw	s1,4(sp)
    6d88:	01010113          	addi	sp,sp,16
    6d8c:	00008067          	ret

00006d90 <bsp_printf_c>:
    {
    6d90:	ff010113          	addi	sp,sp,-16
    6d94:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    6d98:	0ff57593          	andi	a1,a0,255
    6d9c:	f8010537          	lui	a0,0xf8010
    6da0:	f05ff0ef          	jal	ra,6ca4 <uart_write>
    }
    6da4:	00c12083          	lw	ra,12(sp)
    6da8:	01010113          	addi	sp,sp,16
    6dac:	00008067          	ret

00006db0 <bsp_printf_s>:
    {
    6db0:	ff010113          	addi	sp,sp,-16
    6db4:	00112623          	sw	ra,12(sp)
    6db8:	00812423          	sw	s0,8(sp)
    6dbc:	00050413          	mv	s0,a0
        while (*p)
    6dc0:	00044583          	lbu	a1,0(s0)
    6dc4:	00058a63          	beqz	a1,6dd8 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    6dc8:	00140413          	addi	s0,s0,1
    6dcc:	f8010537          	lui	a0,0xf8010
    6dd0:	ed5ff0ef          	jal	ra,6ca4 <uart_write>
    6dd4:	fedff06f          	j	6dc0 <bsp_printf_s+0x10>
    }
    6dd8:	00c12083          	lw	ra,12(sp)
    6ddc:	00812403          	lw	s0,8(sp)
    6de0:	01010113          	addi	sp,sp,16
    6de4:	00008067          	ret

00006de8 <bsp_printf_d>:
    {
    6de8:	fd010113          	addi	sp,sp,-48
    6dec:	02112623          	sw	ra,44(sp)
    6df0:	02812423          	sw	s0,40(sp)
    6df4:	02912223          	sw	s1,36(sp)
    6df8:	00050493          	mv	s1,a0
        if (val < 0) {
    6dfc:	00054663          	bltz	a0,6e08 <bsp_printf_d+0x20>
    {
    6e00:	00010413          	mv	s0,sp
    6e04:	02c0006f          	j	6e30 <bsp_printf_d+0x48>
            bsp_printf_c('-');
    6e08:	02d00513          	li	a0,45
    6e0c:	f85ff0ef          	jal	ra,6d90 <bsp_printf_c>
            val = -val;
    6e10:	409004b3          	neg	s1,s1
    6e14:	fedff06f          	j	6e00 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
    6e18:	00a00713          	li	a4,10
    6e1c:	02e4e7b3          	rem	a5,s1,a4
    6e20:	03078793          	addi	a5,a5,48
    6e24:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    6e28:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    6e2c:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    6e30:	fe0494e3          	bnez	s1,6e18 <bsp_printf_d+0x30>
    6e34:	00010793          	mv	a5,sp
    6e38:	fef400e3          	beq	s0,a5,6e18 <bsp_printf_d+0x30>
    6e3c:	0100006f          	j	6e4c <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
    6e40:	fff40413          	addi	s0,s0,-1
    6e44:	00044503          	lbu	a0,0(s0)
    6e48:	f49ff0ef          	jal	ra,6d90 <bsp_printf_c>
        while (p != buffer)
    6e4c:	00010793          	mv	a5,sp
    6e50:	fef418e3          	bne	s0,a5,6e40 <bsp_printf_d+0x58>
    }
    6e54:	02c12083          	lw	ra,44(sp)
    6e58:	02812403          	lw	s0,40(sp)
    6e5c:	02412483          	lw	s1,36(sp)
    6e60:	03010113          	addi	sp,sp,48
    6e64:	00008067          	ret

00006e68 <bsp_printf_x>:
    {
    6e68:	ff010113          	addi	sp,sp,-16
    6e6c:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
    6e70:	00000713          	li	a4,0
    6e74:	00700793          	li	a5,7
    6e78:	02e7c063          	blt	a5,a4,6e98 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    6e7c:	00271693          	slli	a3,a4,0x2
    6e80:	ff000793          	li	a5,-16
    6e84:	00d797b3          	sll	a5,a5,a3
    6e88:	00f577b3          	and	a5,a0,a5
    6e8c:	00078663          	beqz	a5,6e98 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    6e90:	00170713          	addi	a4,a4,1
    6e94:	fe1ff06f          	j	6e74 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
    6e98:	ea1ff0ef          	jal	ra,6d38 <bsp_printHex_lower>
    }
    6e9c:	00c12083          	lw	ra,12(sp)
    6ea0:	01010113          	addi	sp,sp,16
    6ea4:	00008067          	ret

00006ea8 <bsp_printf_X>:
        {
    6ea8:	ff010113          	addi	sp,sp,-16
    6eac:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
    6eb0:	00000713          	li	a4,0
    6eb4:	00700793          	li	a5,7
    6eb8:	02e7c063          	blt	a5,a4,6ed8 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    6ebc:	00271693          	slli	a3,a4,0x2
    6ec0:	ff000793          	li	a5,-16
    6ec4:	00d797b3          	sll	a5,a5,a3
    6ec8:	00f577b3          	and	a5,a0,a5
    6ecc:	00078663          	beqz	a5,6ed8 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    6ed0:	00170713          	addi	a4,a4,1
    6ed4:	fe1ff06f          	j	6eb4 <bsp_printf_X+0xc>
            bsp_printHex(val);
    6ed8:	e09ff0ef          	jal	ra,6ce0 <bsp_printHex>
        }
    6edc:	00c12083          	lw	ra,12(sp)
    6ee0:	01010113          	addi	sp,sp,16
    6ee4:	00008067          	ret

00006ee8 <bsp_printf>:
    {
    6ee8:	fc010113          	addi	sp,sp,-64
    6eec:	00112e23          	sw	ra,28(sp)
    6ef0:	00812c23          	sw	s0,24(sp)
    6ef4:	00912a23          	sw	s1,20(sp)
    6ef8:	00050493          	mv	s1,a0
    6efc:	02b12223          	sw	a1,36(sp)
    6f00:	02c12423          	sw	a2,40(sp)
    6f04:	02d12623          	sw	a3,44(sp)
    6f08:	02e12823          	sw	a4,48(sp)
    6f0c:	02f12a23          	sw	a5,52(sp)
    6f10:	03012c23          	sw	a6,56(sp)
    6f14:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
    6f18:	02410793          	addi	a5,sp,36
    6f1c:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
    6f20:	00000413          	li	s0,0
    6f24:	01c0006f          	j	6f40 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
    6f28:	00c12783          	lw	a5,12(sp)
    6f2c:	00478713          	addi	a4,a5,4
    6f30:	00e12623          	sw	a4,12(sp)
    6f34:	0007a503          	lw	a0,0(a5)
    6f38:	e59ff0ef          	jal	ra,6d90 <bsp_printf_c>
        for (i = 0; format[i]; i++)
    6f3c:	00140413          	addi	s0,s0,1
    6f40:	008487b3          	add	a5,s1,s0
    6f44:	0007c503          	lbu	a0,0(a5)
    6f48:	0c050263          	beqz	a0,700c <bsp_printf+0x124>
            if (format[i] == '%') {
    6f4c:	02500793          	li	a5,37
    6f50:	06f50663          	beq	a0,a5,6fbc <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
    6f54:	e3dff0ef          	jal	ra,6d90 <bsp_printf_c>
    6f58:	fe5ff06f          	j	6f3c <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    6f5c:	00c12783          	lw	a5,12(sp)
    6f60:	00478713          	addi	a4,a5,4
    6f64:	00e12623          	sw	a4,12(sp)
    6f68:	0007a503          	lw	a0,0(a5)
    6f6c:	e45ff0ef          	jal	ra,6db0 <bsp_printf_s>
                        break;
    6f70:	fcdff06f          	j	6f3c <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    6f74:	00c12783          	lw	a5,12(sp)
    6f78:	00478713          	addi	a4,a5,4
    6f7c:	00e12623          	sw	a4,12(sp)
    6f80:	0007a503          	lw	a0,0(a5)
    6f84:	e65ff0ef          	jal	ra,6de8 <bsp_printf_d>
                        break;
    6f88:	fb5ff06f          	j	6f3c <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    6f8c:	00c12783          	lw	a5,12(sp)
    6f90:	00478713          	addi	a4,a5,4
    6f94:	00e12623          	sw	a4,12(sp)
    6f98:	0007a503          	lw	a0,0(a5)
    6f9c:	f0dff0ef          	jal	ra,6ea8 <bsp_printf_X>
                        break;
    6fa0:	f9dff06f          	j	6f3c <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    6fa4:	00c12783          	lw	a5,12(sp)
    6fa8:	00478713          	addi	a4,a5,4
    6fac:	00e12623          	sw	a4,12(sp)
    6fb0:	0007a503          	lw	a0,0(a5)
    6fb4:	eb5ff0ef          	jal	ra,6e68 <bsp_printf_x>
                        break;
    6fb8:	f85ff06f          	j	6f3c <bsp_printf+0x54>
                while (format[++i]) {
    6fbc:	00140413          	addi	s0,s0,1
    6fc0:	008487b3          	add	a5,s1,s0
    6fc4:	0007c783          	lbu	a5,0(a5)
    6fc8:	f6078ae3          	beqz	a5,6f3c <bsp_printf+0x54>
                    if (format[i] == 'c') {
    6fcc:	06300713          	li	a4,99
    6fd0:	f4e78ce3          	beq	a5,a4,6f28 <bsp_printf+0x40>
                    else if (format[i] == 's') {
    6fd4:	07300713          	li	a4,115
    6fd8:	f8e782e3          	beq	a5,a4,6f5c <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    6fdc:	06400713          	li	a4,100
    6fe0:	f8e78ae3          	beq	a5,a4,6f74 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    6fe4:	05800713          	li	a4,88
    6fe8:	fae782e3          	beq	a5,a4,6f8c <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    6fec:	07800713          	li	a4,120
    6ff0:	fae78ae3          	beq	a5,a4,6fa4 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    6ff4:	06600713          	li	a4,102
    6ff8:	fce792e3          	bne	a5,a4,6fbc <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    6ffc:	0001c537          	lui	a0,0x1c
    7000:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    7004:	dadff0ef          	jal	ra,6db0 <bsp_printf_s>
                        break;
    7008:	f35ff06f          	j	6f3c <bsp_printf+0x54>
    }
    700c:	01c12083          	lw	ra,28(sp)
    7010:	01812403          	lw	s0,24(sp)
    7014:	01412483          	lw	s1,20(sp)
    7018:	04010113          	addi	sp,sp,64
    701c:	00008067          	ret

00007020 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
    7020:	ff010113          	addi	sp,sp,-16
    7024:	00112623          	sw	ra,12(sp)
    7028:	00812423          	sw	s0,8(sp)
    702c:	00912223          	sw	s1,4(sp)
    7030:	00050413          	mv	s0,a0
    7034:	00058493          	mv	s1,a1
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
    7038:	04050a63          	beqz	a0,708c <tcp_write_checks+0x6c>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
    703c:	01442783          	lw	a5,20(s0)
    7040:	00400713          	li	a4,4
    7044:	00e78e63          	beq	a5,a4,7060 <tcp_write_checks+0x40>
    7048:	00700713          	li	a4,7
    704c:	00e78a63          	beq	a5,a4,7060 <tcp_write_checks+0x40>
      (pcb->state != CLOSE_WAIT) &&
    7050:	00200713          	li	a4,2
    7054:	00e78663          	beq	a5,a4,7060 <tcp_write_checks+0x40>
      (pcb->state != SYN_SENT) &&
    7058:	00300713          	li	a4,3
    705c:	0ce79663          	bne	a5,a4,7128 <tcp_write_checks+0x108>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
    7060:	0c048863          	beqz	s1,7130 <tcp_write_checks+0x110>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
    7064:	06845783          	lhu	a5,104(s0)
    7068:	0297ea63          	bltu	a5,s1,709c <tcp_write_checks+0x7c>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
    706c:	06a45783          	lhu	a5,106(s0)
    7070:	03f00713          	li	a4,63
    7074:	02f76e63          	bltu	a4,a5,70b0 <tcp_write_checks+0x90>
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
    7078:	08078263          	beqz	a5,70fc <tcp_write_checks+0xdc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
    707c:	07442783          	lw	a5,116(s0)
    7080:	04078c63          	beqz	a5,70d8 <tcp_write_checks+0xb8>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
    7084:	00000513          	li	a0,0
    7088:	0ac0006f          	j	7134 <tcp_write_checks+0x114>
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
    708c:	0001d537          	lui	a0,0x1d
    7090:	fc450513          	addi	a0,a0,-60 # 1cfc4 <lwiperf_txbuf_const+0x7e4>
    7094:	e55ff0ef          	jal	ra,6ee8 <bsp_printf>
    7098:	fa5ff06f          	j	703c <tcp_write_checks+0x1c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
    709c:	01e45783          	lhu	a5,30(s0)
    70a0:	0807e793          	ori	a5,a5,128
    70a4:	00f41f23          	sh	a5,30(s0)
    return ERR_MEM;
    70a8:	fff00513          	li	a0,-1
    70ac:	0880006f          	j	7134 <tcp_write_checks+0x114>
    TCP_STATS_INC(tcp.memerr);
    70b0:	000227b7          	lui	a5,0x22
    70b4:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    70b8:	0b87d703          	lhu	a4,184(a5)
    70bc:	00170713          	addi	a4,a4,1
    70c0:	0ae79c23          	sh	a4,184(a5)
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
    70c4:	01e45783          	lhu	a5,30(s0)
    70c8:	0807e793          	ori	a5,a5,128
    70cc:	00f41f23          	sh	a5,30(s0)
    return ERR_MEM;
    70d0:	fff00513          	li	a0,-1
    70d4:	0600006f          	j	7134 <tcp_write_checks+0x114>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
    70d8:	07042783          	lw	a5,112(s0)
    70dc:	00078663          	beqz	a5,70e8 <tcp_write_checks+0xc8>
  return ERR_OK;
    70e0:	00000513          	li	a0,0
    70e4:	0500006f          	j	7134 <tcp_write_checks+0x114>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
    70e8:	0001d537          	lui	a0,0x1d
    70ec:	fe450513          	addi	a0,a0,-28 # 1cfe4 <lwiperf_txbuf_const+0x804>
    70f0:	df9ff0ef          	jal	ra,6ee8 <bsp_printf>
  return ERR_OK;
    70f4:	00000513          	li	a0,0
    70f8:	03c0006f          	j	7134 <tcp_write_checks+0x114>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
    70fc:	07442783          	lw	a5,116(s0)
    7100:	00078c63          	beqz	a5,7118 <tcp_write_checks+0xf8>
    7104:	0001d537          	lui	a0,0x1d
    7108:	02050513          	addi	a0,a0,32 # 1d020 <lwiperf_txbuf_const+0x840>
    710c:	dddff0ef          	jal	ra,6ee8 <bsp_printf>
  return ERR_OK;
    7110:	00000513          	li	a0,0
    7114:	0200006f          	j	7134 <tcp_write_checks+0x114>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
    7118:	07042783          	lw	a5,112(s0)
    711c:	fe0794e3          	bnez	a5,7104 <tcp_write_checks+0xe4>
  return ERR_OK;
    7120:	00000513          	li	a0,0
    7124:	0100006f          	j	7134 <tcp_write_checks+0x114>
    return ERR_CONN;
    7128:	ff500513          	li	a0,-11
    712c:	0080006f          	j	7134 <tcp_write_checks+0x114>
    return ERR_OK;
    7130:	00000513          	li	a0,0
}
    7134:	00c12083          	lw	ra,12(sp)
    7138:	00812403          	lw	s0,8(sp)
    713c:	00412483          	lw	s1,4(sp)
    7140:	01010113          	addi	sp,sp,16
    7144:	00008067          	ret

00007148 <tcp_pbuf_prealloc>:
{
    7148:	fe010113          	addi	sp,sp,-32
    714c:	00112e23          	sw	ra,28(sp)
    7150:	00812c23          	sw	s0,24(sp)
    7154:	00912a23          	sw	s1,20(sp)
    7158:	01212823          	sw	s2,16(sp)
    715c:	01312623          	sw	s3,12(sp)
    7160:	01412423          	sw	s4,8(sp)
    7164:	01512223          	sw	s5,4(sp)
    7168:	01612023          	sw	s6,0(sp)
    716c:	00050a93          	mv	s5,a0
    7170:	00058493          	mv	s1,a1
    7174:	00060413          	mv	s0,a2
    7178:	00068913          	mv	s2,a3
    717c:	00070a13          	mv	s4,a4
    7180:	00078993          	mv	s3,a5
    7184:	00080b13          	mv	s6,a6
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
    7188:	04068463          	beqz	a3,71d0 <tcp_pbuf_prealloc+0x88>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
    718c:	040a0a63          	beqz	s4,71e0 <tcp_pbuf_prealloc+0x98>
  if (length < max_length) {
    7190:	0684f863          	bgeu	s1,s0,7200 <tcp_pbuf_prealloc+0xb8>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
    7194:	0029f993          	andi	s3,s3,2
    7198:	00099e63          	bnez	s3,71b4 <tcp_pbuf_prealloc+0x6c>
        (!(pcb->flags & TF_NODELAY) &&
    719c:	01ea5783          	lhu	a5,30(s4)
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
    71a0:	0407f793          	andi	a5,a5,64
    71a4:	0c079463          	bnez	a5,726c <tcp_pbuf_prealloc+0x124>
        (!(pcb->flags & TF_NODELAY) &&
    71a8:	000b0663          	beqz	s6,71b4 <tcp_pbuf_prealloc+0x6c>
          pcb->unsent != NULL ||
    71ac:	070a2783          	lw	a5,112(s4)
         (!first_seg ||
    71b0:	04078063          	beqz	a5,71f0 <tcp_pbuf_prealloc+0xa8>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
    71b4:	5b748793          	addi	a5,s1,1463
    71b8:	ffc7f793          	andi	a5,a5,-4
    71bc:	0087f463          	bgeu	a5,s0,71c4 <tcp_pbuf_prealloc+0x7c>
    71c0:	00078413          	mv	s0,a5
    71c4:	01041593          	slli	a1,s0,0x10
    71c8:	0105d593          	srli	a1,a1,0x10
    71cc:	0380006f          	j	7204 <tcp_pbuf_prealloc+0xbc>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
    71d0:	0001d537          	lui	a0,0x1d
    71d4:	05450513          	addi	a0,a0,84 # 1d054 <lwiperf_txbuf_const+0x874>
    71d8:	d11ff0ef          	jal	ra,6ee8 <bsp_printf>
    71dc:	fb1ff06f          	j	718c <tcp_pbuf_prealloc+0x44>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
    71e0:	0001d537          	lui	a0,0x1d
    71e4:	07850513          	addi	a0,a0,120 # 1d078 <lwiperf_txbuf_const+0x898>
    71e8:	d01ff0ef          	jal	ra,6ee8 <bsp_printf>
    71ec:	fa5ff06f          	j	7190 <tcp_pbuf_prealloc+0x48>
          pcb->unacked != NULL))) {
    71f0:	074a2783          	lw	a5,116(s4)
          pcb->unsent != NULL ||
    71f4:	fc0790e3          	bnez	a5,71b4 <tcp_pbuf_prealloc+0x6c>
  u16_t alloc = length;
    71f8:	00048593          	mv	a1,s1
    71fc:	0080006f          	j	7204 <tcp_pbuf_prealloc+0xbc>
    7200:	00048593          	mv	a1,s1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
    7204:	28000613          	li	a2,640
    7208:	000a8513          	mv	a0,s5
    720c:	25d050ef          	jal	ra,cc68 <pbuf_alloc>
    7210:	00050413          	mv	s0,a0
  if (p == NULL) {
    7214:	02050663          	beqz	a0,7240 <tcp_pbuf_prealloc+0xf8>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
    7218:	00052783          	lw	a5,0(a0)
    721c:	00078863          	beqz	a5,722c <tcp_pbuf_prealloc+0xe4>
    7220:	0001d537          	lui	a0,0x1d
    7224:	09850513          	addi	a0,a0,152 # 1d098 <lwiperf_txbuf_const+0x8b8>
    7228:	cc1ff0ef          	jal	ra,6ee8 <bsp_printf>
  *oversize = p->len - length;
    722c:	00a45783          	lhu	a5,10(s0)
    7230:	409787b3          	sub	a5,a5,s1
    7234:	00f91023          	sh	a5,0(s2)
  p->len = p->tot_len = length;
    7238:	00941423          	sh	s1,8(s0)
    723c:	00941523          	sh	s1,10(s0)
}
    7240:	00040513          	mv	a0,s0
    7244:	01c12083          	lw	ra,28(sp)
    7248:	01812403          	lw	s0,24(sp)
    724c:	01412483          	lw	s1,20(sp)
    7250:	01012903          	lw	s2,16(sp)
    7254:	00c12983          	lw	s3,12(sp)
    7258:	00812a03          	lw	s4,8(sp)
    725c:	00412a83          	lw	s5,4(sp)
    7260:	00012b03          	lw	s6,0(sp)
    7264:	02010113          	addi	sp,sp,32
    7268:	00008067          	ret
  u16_t alloc = length;
    726c:	00048593          	mv	a1,s1
    7270:	f95ff06f          	j	7204 <tcp_pbuf_prealloc+0xbc>

00007274 <tcp_create_segment>:
{
    7274:	fe010113          	addi	sp,sp,-32
    7278:	00112e23          	sw	ra,28(sp)
    727c:	00812c23          	sw	s0,24(sp)
    7280:	00912a23          	sw	s1,20(sp)
    7284:	01212823          	sw	s2,16(sp)
    7288:	01312623          	sw	s3,12(sp)
    728c:	01412423          	sw	s4,8(sp)
    7290:	01512223          	sw	s5,4(sp)
    7294:	01612023          	sw	s6,0(sp)
    7298:	00050a93          	mv	s5,a0
    729c:	00058913          	mv	s2,a1
    72a0:	00060993          	mv	s3,a2
    72a4:	00068a13          	mv	s4,a3
    72a8:	00070b13          	mv	s6,a4
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
    72ac:	10050c63          	beqz	a0,73c4 <tcp_create_segment+0x150>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
    72b0:	12090263          	beqz	s2,73d4 <tcp_create_segment+0x160>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
    72b4:	002b1493          	slli	s1,s6,0x2
    72b8:	0044f493          	andi	s1,s1,4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
    72bc:	00300513          	li	a0,3
    72c0:	18c0d0ef          	jal	ra,1444c <memp_malloc>
    72c4:	00050413          	mv	s0,a0
    72c8:	10050e63          	beqz	a0,73e4 <tcp_create_segment+0x170>
  seg->flags = optflags;
    72cc:	01650523          	sb	s6,10(a0)
  seg->next = NULL;
    72d0:	00052023          	sw	zero,0(a0)
  seg->p = p;
    72d4:	01252223          	sw	s2,4(a0)
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
    72d8:	00895783          	lhu	a5,8(s2)
    72dc:	01049b13          	slli	s6,s1,0x10
    72e0:	010b5b13          	srli	s6,s6,0x10
    72e4:	1167e663          	bltu	a5,s6,73f0 <tcp_create_segment+0x17c>
  seg->len = p->tot_len - optlen;
    72e8:	00895783          	lhu	a5,8(s2)
    72ec:	416787b3          	sub	a5,a5,s6
    72f0:	00f41423          	sh	a5,8(s0)
  if (pbuf_add_header(p, TCP_HLEN)) {
    72f4:	01400593          	li	a1,20
    72f8:	00090513          	mv	a0,s2
    72fc:	718050ef          	jal	ra,ca14 <pbuf_add_header>
    7300:	10051063          	bnez	a0,7400 <tcp_create_segment+0x18c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
    7304:	00442783          	lw	a5,4(s0)
    7308:	0047a903          	lw	s2,4(a5)
    730c:	01242623          	sw	s2,12(s0)
  seg->tcphdr->src = lwip_htons(pcb->local_port);
    7310:	01aad503          	lhu	a0,26(s5)
    7314:	164030ef          	jal	ra,a478 <lwip_htons>
    7318:	00a90023          	sb	a0,0(s2)
    731c:	00855513          	srli	a0,a0,0x8
    7320:	00a900a3          	sb	a0,1(s2)
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
    7324:	00c42903          	lw	s2,12(s0)
    7328:	01cad503          	lhu	a0,28(s5)
    732c:	14c030ef          	jal	ra,a478 <lwip_htons>
    7330:	00a90123          	sb	a0,2(s2)
    7334:	00855513          	srli	a0,a0,0x8
    7338:	00a901a3          	sb	a0,3(s2)
  seg->tcphdr->seqno = lwip_htonl(seqno);
    733c:	00c42903          	lw	s2,12(s0)
    7340:	000a0513          	mv	a0,s4
    7344:	14c030ef          	jal	ra,a490 <lwip_htonl>
    7348:	00a90223          	sb	a0,4(s2)
    734c:	00855793          	srli	a5,a0,0x8
    7350:	00f902a3          	sb	a5,5(s2)
    7354:	01055793          	srli	a5,a0,0x10
    7358:	00f90323          	sb	a5,6(s2)
    735c:	01855513          	srli	a0,a0,0x18
    7360:	00a903a3          	sb	a0,7(s2)
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
    7364:	0024d513          	srli	a0,s1,0x2
    7368:	0ff57513          	andi	a0,a0,255
    736c:	00550513          	addi	a0,a0,5
    7370:	00c51513          	slli	a0,a0,0xc
    7374:	00c42483          	lw	s1,12(s0)
    7378:	01356533          	or	a0,a0,s3
    737c:	0fc030ef          	jal	ra,a478 <lwip_htons>
    7380:	00a48623          	sb	a0,12(s1)
    7384:	00855513          	srli	a0,a0,0x8
    7388:	00a486a3          	sb	a0,13(s1)
  seg->tcphdr->urgp = 0;
    738c:	00c42783          	lw	a5,12(s0)
    7390:	00078923          	sb	zero,18(a5)
    7394:	000789a3          	sb	zero,19(a5)
}
    7398:	00040513          	mv	a0,s0
    739c:	01c12083          	lw	ra,28(sp)
    73a0:	01812403          	lw	s0,24(sp)
    73a4:	01412483          	lw	s1,20(sp)
    73a8:	01012903          	lw	s2,16(sp)
    73ac:	00c12983          	lw	s3,12(sp)
    73b0:	00812a03          	lw	s4,8(sp)
    73b4:	00412a83          	lw	s5,4(sp)
    73b8:	00012b03          	lw	s6,0(sp)
    73bc:	02010113          	addi	sp,sp,32
    73c0:	00008067          	ret
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
    73c4:	0001d537          	lui	a0,0x1d
    73c8:	0ac50513          	addi	a0,a0,172 # 1d0ac <lwiperf_txbuf_const+0x8cc>
    73cc:	b1dff0ef          	jal	ra,6ee8 <bsp_printf>
    73d0:	ee1ff06f          	j	72b0 <tcp_create_segment+0x3c>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
    73d4:	0001d537          	lui	a0,0x1d
    73d8:	0cc50513          	addi	a0,a0,204 # 1d0cc <lwiperf_txbuf_const+0x8ec>
    73dc:	b0dff0ef          	jal	ra,6ee8 <bsp_printf>
    73e0:	ed5ff06f          	j	72b4 <tcp_create_segment+0x40>
    pbuf_free(p);
    73e4:	00090513          	mv	a0,s2
    73e8:	768050ef          	jal	ra,cb50 <pbuf_free>
    return NULL;
    73ec:	fadff06f          	j	7398 <tcp_create_segment+0x124>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
    73f0:	0001d537          	lui	a0,0x1d
    73f4:	0f050513          	addi	a0,a0,240 # 1d0f0 <lwiperf_txbuf_const+0x910>
    73f8:	af1ff0ef          	jal	ra,6ee8 <bsp_printf>
    73fc:	eedff06f          	j	72e8 <tcp_create_segment+0x74>
    TCP_STATS_INC(tcp.err);
    7400:	000227b7          	lui	a5,0x22
    7404:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    7408:	0c07d703          	lhu	a4,192(a5)
    740c:	00170713          	addi	a4,a4,1
    7410:	0ce79023          	sh	a4,192(a5)
    tcp_seg_free(seg);
    7414:	00040513          	mv	a0,s0
    7418:	1fc0b0ef          	jal	ra,12614 <tcp_seg_free>
    return NULL;
    741c:	00000413          	li	s0,0
    7420:	f79ff06f          	j	7398 <tcp_create_segment+0x124>

00007424 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
    7424:	ff010113          	addi	sp,sp,-16
    7428:	00112623          	sw	ra,12(sp)
    742c:	00812423          	sw	s0,8(sp)
    7430:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
    7434:	02050463          	beqz	a0,745c <tcp_output_segment_busy+0x38>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
    7438:	00442783          	lw	a5,4(s0)
    743c:	00e7c703          	lbu	a4,14(a5)
    7440:	00100793          	li	a5,1
    7444:	02f71463          	bne	a4,a5,746c <tcp_output_segment_busy+0x48>
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
    7448:	00000513          	li	a0,0
}
    744c:	00c12083          	lw	ra,12(sp)
    7450:	00812403          	lw	s0,8(sp)
    7454:	01010113          	addi	sp,sp,16
    7458:	00008067          	ret
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
    745c:	0001d537          	lui	a0,0x1d
    7460:	10850513          	addi	a0,a0,264 # 1d108 <lwiperf_txbuf_const+0x928>
    7464:	a85ff0ef          	jal	ra,6ee8 <bsp_printf>
    7468:	fd1ff06f          	j	7438 <tcp_output_segment_busy+0x14>
    return 1;
    746c:	00100513          	li	a0,1
    7470:	fddff06f          	j	744c <tcp_output_segment_busy+0x28>

00007474 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
    7474:	fd010113          	addi	sp,sp,-48
    7478:	02112623          	sw	ra,44(sp)
    747c:	02812423          	sw	s0,40(sp)
    7480:	02912223          	sw	s1,36(sp)
    7484:	03212023          	sw	s2,32(sp)
    7488:	01312e23          	sw	s3,28(sp)
    748c:	01412c23          	sw	s4,24(sp)
    7490:	01512a23          	sw	s5,20(sp)
    7494:	01612823          	sw	s6,16(sp)
    7498:	01712623          	sw	s7,12(sp)
    749c:	01812423          	sw	s8,8(sp)
    74a0:	00050b13          	mv	s6,a0
    74a4:	00058493          	mv	s1,a1
    74a8:	00068913          	mv	s2,a3
    74ac:	00070c13          	mv	s8,a4
    74b0:	00078b93          	mv	s7,a5
    74b4:	00080a13          	mv	s4,a6
    74b8:	00088993          	mv	s3,a7
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
    74bc:	00c585b3          	add	a1,a1,a2
    74c0:	01059593          	slli	a1,a1,0x10
    74c4:	0105d593          	srli	a1,a1,0x10
    74c8:	01458593          	addi	a1,a1,20
    74cc:	28000613          	li	a2,640
    74d0:	01059593          	slli	a1,a1,0x10
    74d4:	0105d593          	srli	a1,a1,0x10
    74d8:	02200513          	li	a0,34
    74dc:	78c050ef          	jal	ra,cc68 <pbuf_alloc>
    74e0:	00050a93          	mv	s5,a0
  if (p != NULL) {
    74e4:	0c050463          	beqz	a0,75ac <tcp_output_alloc_header_common+0x138>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
    74e8:	01348793          	addi	a5,s1,19
    74ec:	00a55703          	lhu	a4,10(a0)
    74f0:	0ee7d863          	bge	a5,a4,75e0 <tcp_output_alloc_header_common+0x16c>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    74f4:	004aa403          	lw	s0,4(s5)
    tcphdr->src = lwip_htons(src_port);
    74f8:	000c0513          	mv	a0,s8
    74fc:	77d020ef          	jal	ra,a478 <lwip_htons>
    7500:	00a40023          	sb	a0,0(s0)
    7504:	00855513          	srli	a0,a0,0x8
    7508:	00a400a3          	sb	a0,1(s0)
    tcphdr->dest = lwip_htons(dst_port);
    750c:	000b8513          	mv	a0,s7
    7510:	769020ef          	jal	ra,a478 <lwip_htons>
    7514:	00a40123          	sb	a0,2(s0)
    7518:	00855513          	srli	a0,a0,0x8
    751c:	00a401a3          	sb	a0,3(s0)
    tcphdr->seqno = seqno_be;
    7520:	01240223          	sb	s2,4(s0)
    7524:	00895793          	srli	a5,s2,0x8
    7528:	00f402a3          	sb	a5,5(s0)
    752c:	01095793          	srli	a5,s2,0x10
    7530:	00f40323          	sb	a5,6(s0)
    7534:	01895913          	srli	s2,s2,0x18
    7538:	012403a3          	sb	s2,7(s0)
    tcphdr->ackno = lwip_htonl(ackno);
    753c:	000b0513          	mv	a0,s6
    7540:	751020ef          	jal	ra,a490 <lwip_htonl>
    7544:	00a40423          	sb	a0,8(s0)
    7548:	00855793          	srli	a5,a0,0x8
    754c:	00f404a3          	sb	a5,9(s0)
    7550:	01055793          	srli	a5,a0,0x10
    7554:	00f40523          	sb	a5,10(s0)
    7558:	01855513          	srli	a0,a0,0x18
    755c:	00a405a3          	sb	a0,11(s0)
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
    7560:	0024d513          	srli	a0,s1,0x2
    7564:	00550513          	addi	a0,a0,5
    7568:	00c51513          	slli	a0,a0,0xc
    756c:	01051513          	slli	a0,a0,0x10
    7570:	01055513          	srli	a0,a0,0x10
    7574:	01456533          	or	a0,a0,s4
    7578:	701020ef          	jal	ra,a478 <lwip_htons>
    757c:	00a40623          	sb	a0,12(s0)
    7580:	00855513          	srli	a0,a0,0x8
    7584:	00a406a3          	sb	a0,13(s0)
    tcphdr->wnd = lwip_htons(wnd);
    7588:	00098513          	mv	a0,s3
    758c:	6ed020ef          	jal	ra,a478 <lwip_htons>
    7590:	00a40723          	sb	a0,14(s0)
    7594:	00855513          	srli	a0,a0,0x8
    7598:	00a407a3          	sb	a0,15(s0)
    tcphdr->chksum = 0;
    759c:	00040823          	sb	zero,16(s0)
    75a0:	000408a3          	sb	zero,17(s0)
    tcphdr->urgp = 0;
    75a4:	00040923          	sb	zero,18(s0)
    75a8:	000409a3          	sb	zero,19(s0)
  }
  return p;
}
    75ac:	000a8513          	mv	a0,s5
    75b0:	02c12083          	lw	ra,44(sp)
    75b4:	02812403          	lw	s0,40(sp)
    75b8:	02412483          	lw	s1,36(sp)
    75bc:	02012903          	lw	s2,32(sp)
    75c0:	01c12983          	lw	s3,28(sp)
    75c4:	01812a03          	lw	s4,24(sp)
    75c8:	01412a83          	lw	s5,20(sp)
    75cc:	01012b03          	lw	s6,16(sp)
    75d0:	00c12b83          	lw	s7,12(sp)
    75d4:	00812c03          	lw	s8,8(sp)
    75d8:	03010113          	addi	sp,sp,48
    75dc:	00008067          	ret
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
    75e0:	0001d537          	lui	a0,0x1d
    75e4:	13050513          	addi	a0,a0,304 # 1d130 <lwiperf_txbuf_const+0x950>
    75e8:	901ff0ef          	jal	ra,6ee8 <bsp_printf>
    75ec:	f09ff06f          	j	74f4 <tcp_output_alloc_header_common+0x80>

000075f0 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
    75f0:	ff010113          	addi	sp,sp,-16
    75f4:	00112623          	sw	ra,12(sp)
    75f8:	00812423          	sw	s0,8(sp)
    75fc:	00912223          	sw	s1,4(sp)
    7600:	00058493          	mv	s1,a1
    7604:	00060413          	mv	s0,a2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
    7608:	04058063          	beqz	a1,7648 <tcp_output_fill_options+0x58>

  tcphdr = (struct tcp_hdr *)p->payload;
    760c:	0044a783          	lw	a5,4(s1)
  opts = (u32_t *)(void *)(tcphdr + 1);
    7610:	01478713          	addi	a4,a5,20
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
    7614:	00241413          	slli	s0,s0,0x2
    7618:	00447413          	andi	s0,s0,4
    761c:	01440413          	addi	s0,s0,20
    7620:	00878433          	add	s0,a5,s0
    7624:	00e40863          	beq	s0,a4,7634 <tcp_output_fill_options+0x44>
    7628:	0001d537          	lui	a0,0x1d
    762c:	18850513          	addi	a0,a0,392 # 1d188 <lwiperf_txbuf_const+0x9a8>
    7630:	8b9ff0ef          	jal	ra,6ee8 <bsp_printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
    7634:	00c12083          	lw	ra,12(sp)
    7638:	00812403          	lw	s0,8(sp)
    763c:	00412483          	lw	s1,4(sp)
    7640:	01010113          	addi	sp,sp,16
    7644:	00008067          	ret
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
    7648:	0001d537          	lui	a0,0x1d
    764c:	16050513          	addi	a0,a0,352 # 1d160 <lwiperf_txbuf_const+0x980>
    7650:	899ff0ef          	jal	ra,6ee8 <bsp_printf>
    7654:	fb9ff06f          	j	760c <tcp_output_fill_options+0x1c>

00007658 <tcp_output_alloc_header>:
{
    7658:	fe010113          	addi	sp,sp,-32
    765c:	00112e23          	sw	ra,28(sp)
    7660:	00812c23          	sw	s0,24(sp)
    7664:	00912a23          	sw	s1,20(sp)
    7668:	01212823          	sw	s2,16(sp)
    766c:	01312623          	sw	s3,12(sp)
    7670:	00050413          	mv	s0,a0
    7674:	00058493          	mv	s1,a1
    7678:	00060913          	mv	s2,a2
    767c:	00068993          	mv	s3,a3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
    7680:	04050c63          	beqz	a0,76d8 <tcp_output_alloc_header+0x80>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
    7684:	02e45883          	lhu	a7,46(s0)
    7688:	01000813          	li	a6,16
    768c:	01c45783          	lhu	a5,28(s0)
    7690:	01a45703          	lhu	a4,26(s0)
    7694:	00098693          	mv	a3,s3
    7698:	00090613          	mv	a2,s2
    769c:	00048593          	mv	a1,s1
    76a0:	02842503          	lw	a0,40(s0)
    76a4:	dd1ff0ef          	jal	ra,7474 <tcp_output_alloc_header_common>
  if (p != NULL) {
    76a8:	00050a63          	beqz	a0,76bc <tcp_output_alloc_header+0x64>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
    76ac:	02842783          	lw	a5,40(s0)
    76b0:	02e45703          	lhu	a4,46(s0)
    76b4:	00e787b3          	add	a5,a5,a4
    76b8:	02f42823          	sw	a5,48(s0)
}
    76bc:	01c12083          	lw	ra,28(sp)
    76c0:	01812403          	lw	s0,24(sp)
    76c4:	01412483          	lw	s1,20(sp)
    76c8:	01012903          	lw	s2,16(sp)
    76cc:	00c12983          	lw	s3,12(sp)
    76d0:	02010113          	addi	sp,sp,32
    76d4:	00008067          	ret
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
    76d8:	0001d537          	lui	a0,0x1d
    76dc:	19c50513          	addi	a0,a0,412 # 1d19c <lwiperf_txbuf_const+0x9bc>
    76e0:	809ff0ef          	jal	ra,6ee8 <bsp_printf>
    76e4:	fa1ff06f          	j	7684 <tcp_output_alloc_header+0x2c>

000076e8 <tcp_route>:
{
    76e8:	ff010113          	addi	sp,sp,-16
    76ec:	00112623          	sw	ra,12(sp)
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
    76f0:	00050663          	beqz	a0,76fc <tcp_route+0x14>
    76f4:	00854503          	lbu	a0,8(a0)
    76f8:	00051c63          	bnez	a0,7710 <tcp_route+0x28>
    return ip_route(src, dst);
    76fc:	00060513          	mv	a0,a2
    7700:	7e10e0ef          	jal	ra,166e0 <ip4_route>
}
    7704:	00c12083          	lw	ra,12(sp)
    7708:	01010113          	addi	sp,sp,16
    770c:	00008067          	ret
    return netif_get_by_index(pcb->netif_idx);
    7710:	338040ef          	jal	ra,ba48 <netif_get_by_index>
    7714:	ff1ff06f          	j	7704 <tcp_route+0x1c>

00007718 <tcp_output_segment>:
{
    7718:	fe010113          	addi	sp,sp,-32
    771c:	00112e23          	sw	ra,28(sp)
    7720:	00812c23          	sw	s0,24(sp)
    7724:	00912a23          	sw	s1,20(sp)
    7728:	01212823          	sw	s2,16(sp)
    772c:	01312623          	sw	s3,12(sp)
    7730:	01412423          	sw	s4,8(sp)
    7734:	00050413          	mv	s0,a0
    7738:	00058493          	mv	s1,a1
    773c:	00060913          	mv	s2,a2
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
    7740:	02050e63          	beqz	a0,777c <tcp_output_segment+0x64>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
    7744:	04048463          	beqz	s1,778c <tcp_output_segment+0x74>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
    7748:	04090a63          	beqz	s2,779c <tcp_output_segment+0x84>
  if (tcp_output_segment_busy(seg)) {
    774c:	00040513          	mv	a0,s0
    7750:	cd5ff0ef          	jal	ra,7424 <tcp_output_segment_busy>
    7754:	04050c63          	beqz	a0,77ac <tcp_output_segment+0x94>
    return ERR_OK;
    7758:	00000513          	li	a0,0
}
    775c:	01c12083          	lw	ra,28(sp)
    7760:	01812403          	lw	s0,24(sp)
    7764:	01412483          	lw	s1,20(sp)
    7768:	01012903          	lw	s2,16(sp)
    776c:	00c12983          	lw	s3,12(sp)
    7770:	00812a03          	lw	s4,8(sp)
    7774:	02010113          	addi	sp,sp,32
    7778:	00008067          	ret
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
    777c:	0001d537          	lui	a0,0x1d
    7780:	1c450513          	addi	a0,a0,452 # 1d1c4 <lwiperf_txbuf_const+0x9e4>
    7784:	f64ff0ef          	jal	ra,6ee8 <bsp_printf>
    7788:	fbdff06f          	j	7744 <tcp_output_segment+0x2c>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
    778c:	0001d537          	lui	a0,0x1d
    7790:	1e450513          	addi	a0,a0,484 # 1d1e4 <lwiperf_txbuf_const+0xa04>
    7794:	f54ff0ef          	jal	ra,6ee8 <bsp_printf>
    7798:	fb1ff06f          	j	7748 <tcp_output_segment+0x30>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
    779c:	0001d537          	lui	a0,0x1d
    77a0:	20450513          	addi	a0,a0,516 # 1d204 <lwiperf_txbuf_const+0xa24>
    77a4:	f44ff0ef          	jal	ra,6ee8 <bsp_printf>
    77a8:	fa5ff06f          	j	774c <tcp_output_segment+0x34>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
    77ac:	00c42983          	lw	s3,12(s0)
    77b0:	0284a503          	lw	a0,40(s1)
    77b4:	4dd020ef          	jal	ra,a490 <lwip_htonl>
    77b8:	00a98423          	sb	a0,8(s3)
    77bc:	00855793          	srli	a5,a0,0x8
    77c0:	00f984a3          	sb	a5,9(s3)
    77c4:	01055793          	srli	a5,a0,0x10
    77c8:	00f98523          	sb	a5,10(s3)
    77cc:	01855513          	srli	a0,a0,0x18
    77d0:	00a985a3          	sb	a0,11(s3)
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
    77d4:	00c42983          	lw	s3,12(s0)
    77d8:	02e4d503          	lhu	a0,46(s1)
    77dc:	49d020ef          	jal	ra,a478 <lwip_htons>
    77e0:	00a98723          	sb	a0,14(s3)
    77e4:	00855513          	srli	a0,a0,0x8
    77e8:	00a987a3          	sb	a0,15(s3)
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
    77ec:	0284a783          	lw	a5,40(s1)
    77f0:	02e4d703          	lhu	a4,46(s1)
    77f4:	00e787b3          	add	a5,a5,a4
    77f8:	02f4a823          	sw	a5,48(s1)
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
    77fc:	00c42a03          	lw	s4,12(s0)
    7800:	014a0993          	addi	s3,s4,20
  if (seg->flags & TF_SEG_OPTS_MSS) {
    7804:	00a44783          	lbu	a5,10(s0)
    7808:	0017f793          	andi	a5,a5,1
    780c:	0e079463          	bnez	a5,78f4 <tcp_output_segment+0x1dc>
  if (pcb->rtime < 0) {
    7810:	03449783          	lh	a5,52(s1)
    7814:	1007c463          	bltz	a5,791c <tcp_output_segment+0x204>
  if (pcb->rttest == 0) {
    7818:	0384a783          	lw	a5,56(s1)
    781c:	10078463          	beqz	a5,7924 <tcp_output_segment+0x20c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
    7820:	00c42783          	lw	a5,12(s0)
    7824:	00442703          	lw	a4,4(s0)
    7828:	00472683          	lw	a3,4(a4)
    782c:	40d787b3          	sub	a5,a5,a3
    7830:	01079793          	slli	a5,a5,0x10
    7834:	0107d793          	srli	a5,a5,0x10
  seg->p->len -= len;
    7838:	00a75683          	lhu	a3,10(a4)
    783c:	40f686b3          	sub	a3,a3,a5
    7840:	00d71523          	sh	a3,10(a4)
  seg->p->tot_len -= len;
    7844:	00442683          	lw	a3,4(s0)
    7848:	0086d703          	lhu	a4,8(a3)
    784c:	40f707b3          	sub	a5,a4,a5
    7850:	00f69423          	sh	a5,8(a3)
  seg->p->payload = seg->tcphdr;
    7854:	00442703          	lw	a4,4(s0)
    7858:	00c42783          	lw	a5,12(s0)
    785c:	00f72223          	sw	a5,4(a4)
  seg->tcphdr->chksum = 0;
    7860:	00078823          	sb	zero,16(a5)
    7864:	000788a3          	sb	zero,17(a5)
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
    7868:	00c42703          	lw	a4,12(s0)
    786c:	00a44783          	lbu	a5,10(s0)
    7870:	00279793          	slli	a5,a5,0x2
    7874:	0047f793          	andi	a5,a5,4
    7878:	01478793          	addi	a5,a5,20
    787c:	00f707b3          	add	a5,a4,a5
    7880:	01378863          	beq	a5,s3,7890 <tcp_output_segment+0x178>
    7884:	0001d537          	lui	a0,0x1d
    7888:	18850513          	addi	a0,a0,392 # 1d188 <lwiperf_txbuf_const+0x9a8>
    788c:	e5cff0ef          	jal	ra,6ee8 <bsp_printf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
    7890:	00442503          	lw	a0,4(s0)
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
    7894:	00448993          	addi	s3,s1,4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
    7898:	00c42a03          	lw	s4,12(s0)
    789c:	00098713          	mv	a4,s3
    78a0:	00048693          	mv	a3,s1
    78a4:	00855603          	lhu	a2,8(a0)
    78a8:	00600593          	li	a1,6
    78ac:	3900d0ef          	jal	ra,14c3c <ip_chksum_pseudo>
    78b0:	00aa0823          	sb	a0,16(s4)
    78b4:	00855513          	srli	a0,a0,0x8
    78b8:	00aa08a3          	sb	a0,17(s4)
  TCP_STATS_INC(tcp.xmit);
    78bc:	000227b7          	lui	a5,0x22
    78c0:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    78c4:	0ac7d703          	lhu	a4,172(a5)
    78c8:	00170713          	addi	a4,a4,1
    78cc:	0ae79623          	sh	a4,172(a5)
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
    78d0:	00090813          	mv	a6,s2
    78d4:	00600793          	li	a5,6
    78d8:	00a4c703          	lbu	a4,10(s1)
    78dc:	00b4c683          	lbu	a3,11(s1)
    78e0:	00098613          	mv	a2,s3
    78e4:	00048593          	mv	a1,s1
    78e8:	00442503          	lw	a0,4(s0)
    78ec:	7a80f0ef          	jal	ra,17094 <ip4_output_if>
  return err;
    78f0:	e6dff06f          	j	775c <tcp_output_segment+0x44>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
    78f4:	00448613          	addi	a2,s1,4
    78f8:	00090593          	mv	a1,s2
    78fc:	5b400513          	li	a0,1460
    7900:	7bd0a0ef          	jal	ra,128bc <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
    7904:	020407b7          	lui	a5,0x2040
    7908:	00f56533          	or	a0,a0,a5
    790c:	385020ef          	jal	ra,a490 <lwip_htonl>
    7910:	00aa2a23          	sw	a0,20(s4)
    opts += 1;
    7914:	018a0993          	addi	s3,s4,24
    7918:	ef9ff06f          	j	7810 <tcp_output_segment+0xf8>
    pcb->rtime = 0;
    791c:	02049a23          	sh	zero,52(s1)
    7920:	ef9ff06f          	j	7818 <tcp_output_segment+0x100>
    pcb->rttest = tcp_ticks;
    7924:	000227b7          	lui	a5,0x22
    7928:	f047a783          	lw	a5,-252(a5) # 21f04 <tcp_ticks>
    792c:	02f4ac23          	sw	a5,56(s1)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
    7930:	00c42703          	lw	a4,12(s0)
    7934:	00474783          	lbu	a5,4(a4)
    7938:	00574503          	lbu	a0,5(a4)
    793c:	00851513          	slli	a0,a0,0x8
    7940:	00f56533          	or	a0,a0,a5
    7944:	00674783          	lbu	a5,6(a4)
    7948:	01079793          	slli	a5,a5,0x10
    794c:	00a7e7b3          	or	a5,a5,a0
    7950:	00774503          	lbu	a0,7(a4)
    7954:	01851513          	slli	a0,a0,0x18
    7958:	00f56533          	or	a0,a0,a5
    795c:	335020ef          	jal	ra,a490 <lwip_htonl>
    7960:	02a4ae23          	sw	a0,60(s1)
    7964:	ebdff06f          	j	7820 <tcp_output_segment+0x108>

00007968 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
    7968:	fe010113          	addi	sp,sp,-32
    796c:	00112e23          	sw	ra,28(sp)
    7970:	00812c23          	sw	s0,24(sp)
    7974:	00912a23          	sw	s1,20(sp)
    7978:	01212823          	sw	s2,16(sp)
    797c:	01312623          	sw	s3,12(sp)
    7980:	01412423          	sw	s4,8(sp)
    7984:	01512223          	sw	s5,4(sp)
    7988:	00050493          	mv	s1,a0
    798c:	00058413          	mv	s0,a1
    7990:	00060913          	mv	s2,a2
    7994:	00068993          	mv	s3,a3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
    7998:	0a058863          	beqz	a1,7a48 <tcp_output_control_segment+0xe0>

  netif = tcp_route(pcb, src, dst);
    799c:	00098613          	mv	a2,s3
    79a0:	00090593          	mv	a1,s2
    79a4:	00048513          	mv	a0,s1
    79a8:	d41ff0ef          	jal	ra,76e8 <tcp_route>
    79ac:	00050a13          	mv	s4,a0
  if (netif == NULL) {
    79b0:	0a050a63          	beqz	a0,7a64 <tcp_output_control_segment+0xfc>
    err = ERR_RTE;
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
    79b4:	00442a83          	lw	s5,4(s0)
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
    79b8:	00098713          	mv	a4,s3
    79bc:	00090693          	mv	a3,s2
    79c0:	00845603          	lhu	a2,8(s0)
    79c4:	00600593          	li	a1,6
    79c8:	00040513          	mv	a0,s0
    79cc:	2700d0ef          	jal	ra,14c3c <ip_chksum_pseudo>
    79d0:	00aa8823          	sb	a0,16(s5)
    79d4:	00855513          	srli	a0,a0,0x8
    79d8:	00aa88a3          	sb	a0,17(s5)
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
    79dc:	06048e63          	beqz	s1,7a58 <tcp_output_control_segment+0xf0>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
    79e0:	00b4c683          	lbu	a3,11(s1)
      tos = pcb->tos;
    79e4:	00a4c703          	lbu	a4,10(s1)
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    79e8:	000227b7          	lui	a5,0x22
    79ec:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    79f0:	0ac7d603          	lhu	a2,172(a5)
    79f4:	00160613          	addi	a2,a2,1 # 80001 <__freertos_irq_stack_top+0x5b0d1>
    79f8:	0ac79623          	sh	a2,172(a5)
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    79fc:	000a0813          	mv	a6,s4
    7a00:	00600793          	li	a5,6
    7a04:	00098613          	mv	a2,s3
    7a08:	00090593          	mv	a1,s2
    7a0c:	00040513          	mv	a0,s0
    7a10:	6840f0ef          	jal	ra,17094 <ip4_output_if>
    7a14:	00050493          	mv	s1,a0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
    7a18:	00040513          	mv	a0,s0
    7a1c:	134050ef          	jal	ra,cb50 <pbuf_free>
  return err;
}
    7a20:	00048513          	mv	a0,s1
    7a24:	01c12083          	lw	ra,28(sp)
    7a28:	01812403          	lw	s0,24(sp)
    7a2c:	01412483          	lw	s1,20(sp)
    7a30:	01012903          	lw	s2,16(sp)
    7a34:	00c12983          	lw	s3,12(sp)
    7a38:	00812a03          	lw	s4,8(sp)
    7a3c:	00412a83          	lw	s5,4(sp)
    7a40:	02010113          	addi	sp,sp,32
    7a44:	00008067          	ret
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
    7a48:	0001d537          	lui	a0,0x1d
    7a4c:	22850513          	addi	a0,a0,552 # 1d228 <lwiperf_txbuf_const+0xa48>
    7a50:	c98ff0ef          	jal	ra,6ee8 <bsp_printf>
    7a54:	f49ff06f          	j	799c <tcp_output_control_segment+0x34>
      tos = 0;
    7a58:	00000713          	li	a4,0
      ttl = TCP_TTL;
    7a5c:	0ff00693          	li	a3,255
    7a60:	f89ff06f          	j	79e8 <tcp_output_control_segment+0x80>
    err = ERR_RTE;
    7a64:	ffc00493          	li	s1,-4
    7a68:	fb1ff06f          	j	7a18 <tcp_output_control_segment+0xb0>

00007a6c <tcp_write>:
{
    7a6c:	f9010113          	addi	sp,sp,-112
    7a70:	06112623          	sw	ra,108(sp)
    7a74:	06812423          	sw	s0,104(sp)
    7a78:	06912223          	sw	s1,100(sp)
    7a7c:	07212023          	sw	s2,96(sp)
    7a80:	05312e23          	sw	s3,92(sp)
    7a84:	05412c23          	sw	s4,88(sp)
    7a88:	05512a23          	sw	s5,84(sp)
    7a8c:	05612823          	sw	s6,80(sp)
    7a90:	05712623          	sw	s7,76(sp)
    7a94:	05812423          	sw	s8,72(sp)
    7a98:	05912223          	sw	s9,68(sp)
    7a9c:	05a12023          	sw	s10,64(sp)
    7aa0:	03b12e23          	sw	s11,60(sp)
  u16_t oversize = 0;
    7aa4:	02011723          	sh	zero,46(sp)
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
    7aa8:	6e050263          	beqz	a0,818c <tcp_write+0x720>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
    7aac:	06655703          	lhu	a4,102(a0)
    7ab0:	00175713          	srli	a4,a4,0x1
    7ab4:	03655a83          	lhu	s5,54(a0)
    7ab8:	00070793          	mv	a5,a4
    7abc:	00eaf463          	bgeu	s5,a4,7ac4 <tcp_write+0x58>
    7ac0:	000a8793          	mv	a5,s5
    7ac4:	01079793          	slli	a5,a5,0x10
    7ac8:	0107d793          	srli	a5,a5,0x10
  mss_local = mss_local ? mss_local : pcb->mss;
    7acc:	00078463          	beqz	a5,7ad4 <tcp_write+0x68>
    7ad0:	00078a93          	mv	s5,a5
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
    7ad4:	6c058263          	beqz	a1,8198 <tcp_write+0x72c>
    7ad8:	00d12623          	sw	a3,12(sp)
    7adc:	00060b13          	mv	s6,a2
    7ae0:	00b12823          	sw	a1,16(sp)
    7ae4:	00050a13          	mv	s4,a0
  err = tcp_write_checks(pcb, len);
    7ae8:	00060593          	mv	a1,a2
    7aec:	d34ff0ef          	jal	ra,7020 <tcp_write_checks>
    7af0:	00a12c23          	sw	a0,24(sp)
  if (err != ERR_OK) {
    7af4:	42051a63          	bnez	a0,7f28 <tcp_write+0x4bc>
  queuelen = pcb->snd_queuelen;
    7af8:	06aa5983          	lhu	s3,106(s4)
  if (pcb->unsent != NULL) {
    7afc:	070a2d03          	lw	s10,112(s4)
    7b00:	020d1263          	bnez	s10,7b24 <tcp_write+0xb8>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
    7b04:	06ca5483          	lhu	s1,108(s4)
    7b08:	24049863          	bnez	s1,7d58 <tcp_write+0x2ec>
  u16_t extendlen = 0;
    7b0c:	00912e23          	sw	s1,28(sp)
  u16_t oversize_used = 0;
    7b10:	00912a23          	sw	s1,20(sp)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
    7b14:	000d0913          	mv	s2,s10
  struct pbuf *concat_p = NULL;
    7b18:	000d0c93          	mv	s9,s10
    7b1c:	46c0006f          	j	7f88 <tcp_write+0x51c>
         last_unsent = last_unsent->next);
    7b20:	000c8d13          	mv	s10,s9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
    7b24:	000d2c83          	lw	s9,0(s10)
    7b28:	fe0c9ce3          	bnez	s9,7b20 <tcp_write+0xb4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
    7b2c:	00ad4783          	lbu	a5,10(s10)
    7b30:	00279793          	slli	a5,a5,0x2
    7b34:	0047f413          	andi	s0,a5,4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    7b38:	008d5783          	lhu	a5,8(s10)
    7b3c:	00f407b3          	add	a5,s0,a5
    7b40:	0efac063          	blt	s5,a5,7c20 <tcp_write+0x1b4>
    space = mss_local - (last_unsent->len + unsent_optlen);
    7b44:	008d5783          	lhu	a5,8(s10)
    7b48:	008787b3          	add	a5,a5,s0
    7b4c:	01079793          	slli	a5,a5,0x10
    7b50:	0107d793          	srli	a5,a5,0x10
    7b54:	40fa87b3          	sub	a5,s5,a5
    7b58:	01079713          	slli	a4,a5,0x10
    7b5c:	01075713          	srli	a4,a4,0x10
    7b60:	00e12e23          	sw	a4,28(sp)
    oversize = pcb->unsent_oversize;
    7b64:	06ca5783          	lhu	a5,108(s4)
    7b68:	00f12a23          	sw	a5,20(sp)
    7b6c:	02f11723          	sh	a5,46(sp)
    if (oversize > 0) {
    7b70:	0c078863          	beqz	a5,7c40 <tcp_write+0x1d4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
    7b74:	0af76e63          	bltu	a4,a5,7c30 <tcp_write+0x1c4>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
    7b78:	02e15783          	lhu	a5,46(sp)
    7b7c:	00078713          	mv	a4,a5
    7b80:	00fb7463          	bgeu	s6,a5,7b88 <tcp_write+0x11c>
    7b84:	000b0713          	mv	a4,s6
    7b88:	00070693          	mv	a3,a4
    7b8c:	01071713          	slli	a4,a4,0x10
    7b90:	01075713          	srli	a4,a4,0x10
    7b94:	01c12603          	lw	a2,28(sp)
    7b98:	00e67463          	bgeu	a2,a4,7ba0 <tcp_write+0x134>
    7b9c:	00060693          	mv	a3,a2
    7ba0:	01069713          	slli	a4,a3,0x10
    7ba4:	01075713          	srli	a4,a4,0x10
    7ba8:	00e12a23          	sw	a4,20(sp)
      oversize -= oversize_used;
    7bac:	40e787b3          	sub	a5,a5,a4
    7bb0:	02f11723          	sh	a5,46(sp)
      space -= oversize_used;
    7bb4:	01c12783          	lw	a5,28(sp)
    7bb8:	40e787b3          	sub	a5,a5,a4
    7bbc:	01079793          	slli	a5,a5,0x10
    7bc0:	0107d793          	srli	a5,a5,0x10
    7bc4:	00f12e23          	sw	a5,28(sp)
      seg = last_unsent;
    7bc8:	000d0913          	mv	s2,s10
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
    7bcc:	02e15783          	lhu	a5,46(sp)
    7bd0:	00078663          	beqz	a5,7bdc <tcp_write+0x170>
    7bd4:	01412783          	lw	a5,20(sp)
    7bd8:	07679863          	bne	a5,s6,7c48 <tcp_write+0x1dc>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
    7bdc:	01412703          	lw	a4,20(sp)
    7be0:	3b677063          	bgeu	a4,s6,7f80 <tcp_write+0x514>
    7be4:	01c12683          	lw	a3,28(sp)
    7be8:	3a068663          	beqz	a3,7f94 <tcp_write+0x528>
    7bec:	008d5783          	lhu	a5,8(s10)
    7bf0:	3a078663          	beqz	a5,7f9c <tcp_write+0x530>
      u16_t seglen = LWIP_MIN(space, len - pos);
    7bf4:	40eb07b3          	sub	a5,s6,a4
    7bf8:	00068493          	mv	s1,a3
    7bfc:	00d7d463          	bge	a5,a3,7c04 <tcp_write+0x198>
    7c00:	00078493          	mv	s1,a5
    7c04:	01049413          	slli	s0,s1,0x10
    7c08:	01045413          	srli	s0,s0,0x10
      if (apiflags & TCP_WRITE_FLAG_COPY) {
    7c0c:	00c12783          	lw	a5,12(sp)
    7c10:	0017f793          	andi	a5,a5,1
    7c14:	04079263          	bnez	a5,7c58 <tcp_write+0x1ec>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
    7c18:	004d2783          	lw	a5,4(s10)
    7c1c:	09c0006f          	j	7cb8 <tcp_write+0x24c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    7c20:	0001d537          	lui	a0,0x1d
    7c24:	25450513          	addi	a0,a0,596 # 1d254 <lwiperf_txbuf_const+0xa74>
    7c28:	ac0ff0ef          	jal	ra,6ee8 <bsp_printf>
    7c2c:	f19ff06f          	j	7b44 <tcp_write+0xd8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
    7c30:	0001d537          	lui	a0,0x1d
    7c34:	26c50513          	addi	a0,a0,620 # 1d26c <lwiperf_txbuf_const+0xa8c>
    7c38:	ab0ff0ef          	jal	ra,6ee8 <bsp_printf>
    7c3c:	f3dff06f          	j	7b78 <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
    7c40:	000c8913          	mv	s2,s9
    7c44:	f89ff06f          	j	7bcc <tcp_write+0x160>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
    7c48:	0001d537          	lui	a0,0x1d
    7c4c:	28c50513          	addi	a0,a0,652 # 1d28c <lwiperf_txbuf_const+0xaac>
    7c50:	a98ff0ef          	jal	ra,6ee8 <bsp_printf>
    7c54:	f89ff06f          	j	7bdc <tcp_write+0x170>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
    7c58:	00100813          	li	a6,1
    7c5c:	00c12783          	lw	a5,12(sp)
    7c60:	000a0713          	mv	a4,s4
    7c64:	02e10693          	addi	a3,sp,46
    7c68:	01c12603          	lw	a2,28(sp)
    7c6c:	00040593          	mv	a1,s0
    7c70:	00000513          	li	a0,0
    7c74:	cd4ff0ef          	jal	ra,7148 <tcp_pbuf_prealloc>
    7c78:	00050c93          	mv	s9,a0
    7c7c:	4e050463          	beqz	a0,8164 <tcp_write+0x6f8>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
    7c80:	00040613          	mv	a2,s0
    7c84:	01012783          	lw	a5,16(sp)
    7c88:	01412703          	lw	a4,20(sp)
    7c8c:	00e785b3          	add	a1,a5,a4
    7c90:	00452503          	lw	a0,4(a0)
    7c94:	d31f90ef          	jal	ra,19c4 <memcpy>
        queuelen += pbuf_clen(concat_p);
    7c98:	000c8513          	mv	a0,s9
    7c9c:	3a0050ef          	jal	ra,d03c <pbuf_clen>
    7ca0:	00a989b3          	add	s3,s3,a0
    7ca4:	01099993          	slli	s3,s3,0x10
    7ca8:	0109d993          	srli	s3,s3,0x10
  u16_t extendlen = 0;
    7cac:	00012e23          	sw	zero,28(sp)
    7cb0:	06c0006f          	j	7d1c <tcp_write+0x2b0>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
    7cb4:	000c8793          	mv	a5,s9
    7cb8:	0007ac83          	lw	s9,0(a5)
    7cbc:	fe0c9ce3          	bnez	s9,7cb4 <tcp_write+0x248>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
    7cc0:	00c7c703          	lbu	a4,12(a5)
    7cc4:	0c077713          	andi	a4,a4,192
    7cc8:	00071c63          	bnez	a4,7ce0 <tcp_write+0x274>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
    7ccc:	0047a703          	lw	a4,4(a5)
    7cd0:	00a7d783          	lhu	a5,10(a5)
    7cd4:	00f707b3          	add	a5,a4,a5
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
    7cd8:	01012703          	lw	a4,16(sp)
    7cdc:	04e78c63          	beq	a5,a4,7d34 <tcp_write+0x2c8>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
    7ce0:	00100613          	li	a2,1
    7ce4:	00040593          	mv	a1,s0
    7ce8:	00000513          	li	a0,0
    7cec:	77d040ef          	jal	ra,cc68 <pbuf_alloc>
    7cf0:	00050c93          	mv	s9,a0
    7cf4:	46050c63          	beqz	a0,816c <tcp_write+0x700>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
    7cf8:	01012783          	lw	a5,16(sp)
    7cfc:	01412703          	lw	a4,20(sp)
    7d00:	00e787b3          	add	a5,a5,a4
    7d04:	00f52223          	sw	a5,4(a0)
          queuelen += pbuf_clen(concat_p);
    7d08:	334050ef          	jal	ra,d03c <pbuf_clen>
    7d0c:	00a989b3          	add	s3,s3,a0
    7d10:	01099993          	slli	s3,s3,0x10
    7d14:	0109d993          	srli	s3,s3,0x10
  u16_t extendlen = 0;
    7d18:	00012e23          	sw	zero,28(sp)
      pos += seglen;
    7d1c:	01412783          	lw	a5,20(sp)
    7d20:	00878433          	add	s0,a5,s0
    7d24:	01041493          	slli	s1,s0,0x10
    7d28:	0104d493          	srli	s1,s1,0x10
      seg = last_unsent;
    7d2c:	000d0913          	mv	s2,s10
    7d30:	2580006f          	j	7f88 <tcp_write+0x51c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
    7d34:	01412783          	lw	a5,20(sp)
    7d38:	00079663          	bnez	a5,7d44 <tcp_write+0x2d8>
          extendlen = seglen;
    7d3c:	00812e23          	sw	s0,28(sp)
    7d40:	fddff06f          	j	7d1c <tcp_write+0x2b0>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
    7d44:	0001d537          	lui	a0,0x1d
    7d48:	2ac50513          	addi	a0,a0,684 # 1d2ac <lwiperf_txbuf_const+0xacc>
    7d4c:	99cff0ef          	jal	ra,6ee8 <bsp_printf>
          extendlen = seglen;
    7d50:	00812e23          	sw	s0,28(sp)
    7d54:	fc9ff06f          	j	7d1c <tcp_write+0x2b0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
    7d58:	0001d537          	lui	a0,0x1d
    7d5c:	2d850513          	addi	a0,a0,728 # 1d2d8 <lwiperf_txbuf_const+0xaf8>
    7d60:	988ff0ef          	jal	ra,6ee8 <bsp_printf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
    7d64:	000d0913          	mv	s2,s10
  struct pbuf *concat_p = NULL;
    7d68:	000d0c93          	mv	s9,s10
  u16_t extendlen = 0;
    7d6c:	00012e23          	sw	zero,28(sp)
  u16_t oversize_used = 0;
    7d70:	00012a23          	sw	zero,20(sp)
  u16_t pos = 0; /* position in 'arg' data */
    7d74:	00000493          	li	s1,0
    7d78:	2100006f          	j	7f88 <tcp_write+0x51c>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
    7d7c:	001db813          	seqz	a6,s11
    7d80:	00c12783          	lw	a5,12(sp)
    7d84:	000a0713          	mv	a4,s4
    7d88:	02e10693          	addi	a3,sp,46
    7d8c:	000a8613          	mv	a2,s5
    7d90:	00040593          	mv	a1,s0
    7d94:	03600513          	li	a0,54
    7d98:	bb0ff0ef          	jal	ra,7148 <tcp_pbuf_prealloc>
    7d9c:	00050913          	mv	s2,a0
    7da0:	12050863          	beqz	a0,7ed0 <tcp_write+0x464>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
    7da4:	00a55783          	lhu	a5,10(a0)
    7da8:	0087ee63          	bltu	a5,s0,7dc4 <tcp_write+0x358>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
    7dac:	00040613          	mv	a2,s0
    7db0:	01012783          	lw	a5,16(sp)
    7db4:	009785b3          	add	a1,a5,s1
    7db8:	00492503          	lw	a0,4(s2)
    7dbc:	c09f90ef          	jal	ra,19c4 <memcpy>
    7dc0:	0640006f          	j	7e24 <tcp_write+0x3b8>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
    7dc4:	0001d537          	lui	a0,0x1d
    7dc8:	30850513          	addi	a0,a0,776 # 1d308 <lwiperf_txbuf_const+0xb28>
    7dcc:	91cff0ef          	jal	ra,6ee8 <bsp_printf>
    7dd0:	fddff06f          	j	7dac <tcp_write+0x340>
      LWIP_ASSERT("oversize == 0", oversize == 0);
    7dd4:	0001d537          	lui	a0,0x1d
    7dd8:	34850513          	addi	a0,a0,840 # 1d348 <lwiperf_txbuf_const+0xb68>
    7ddc:	90cff0ef          	jal	ra,6ee8 <bsp_printf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
    7de0:	00100613          	li	a2,1
    7de4:	00040593          	mv	a1,s0
    7de8:	03600513          	li	a0,54
    7dec:	67d040ef          	jal	ra,cc68 <pbuf_alloc>
    7df0:	00050b93          	mv	s7,a0
    7df4:	0c050e63          	beqz	a0,7ed0 <tcp_write+0x464>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
    7df8:	01012783          	lw	a5,16(sp)
    7dfc:	009787b3          	add	a5,a5,s1
    7e00:	00f52223          	sw	a5,4(a0)
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
    7e04:	28000613          	li	a2,640
    7e08:	00000593          	li	a1,0
    7e0c:	03600513          	li	a0,54
    7e10:	659040ef          	jal	ra,cc68 <pbuf_alloc>
    7e14:	00050913          	mv	s2,a0
    7e18:	0a050263          	beqz	a0,7ebc <tcp_write+0x450>
      pbuf_cat(p/*header*/, p2/*data*/);
    7e1c:	000b8593          	mv	a1,s7
    7e20:	27c050ef          	jal	ra,d09c <pbuf_cat>
    queuelen += pbuf_clen(p);
    7e24:	00090513          	mv	a0,s2
    7e28:	214050ef          	jal	ra,d03c <pbuf_clen>
    7e2c:	00a989b3          	add	s3,s3,a0
    7e30:	01099993          	slli	s3,s3,0x10
    7e34:	0109d993          	srli	s3,s3,0x10
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
    7e38:	04000793          	li	a5,64
    7e3c:	0937e663          	bltu	a5,s3,7ec8 <tcp_write+0x45c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
    7e40:	060a2683          	lw	a3,96(s4)
    7e44:	00000713          	li	a4,0
    7e48:	00d486b3          	add	a3,s1,a3
    7e4c:	00000613          	li	a2,0
    7e50:	00090593          	mv	a1,s2
    7e54:	000a0513          	mv	a0,s4
    7e58:	c1cff0ef          	jal	ra,7274 <tcp_create_segment>
    7e5c:	00050913          	mv	s2,a0
    7e60:	06050863          	beqz	a0,7ed0 <tcp_write+0x464>
    if (queue == NULL) {
    7e64:	100d8a63          	beqz	s11,7f78 <tcp_write+0x50c>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
    7e68:	100c0063          	beqz	s8,7f68 <tcp_write+0x4fc>
      prev_seg->next = seg;
    7e6c:	012c2023          	sw	s2,0(s8)
    pos += seglen;
    7e70:	008484b3          	add	s1,s1,s0
    7e74:	01049493          	slli	s1,s1,0x10
    7e78:	0104d493          	srli	s1,s1,0x10
    prev_seg = seg;
    7e7c:	00090c13          	mv	s8,s2
  while (pos < len) {
    7e80:	1364f463          	bgeu	s1,s6,7fa8 <tcp_write+0x53c>
    u16_t left = len - pos;
    7e84:	409b07b3          	sub	a5,s6,s1
    7e88:	01079793          	slli	a5,a5,0x10
    7e8c:	0107d793          	srli	a5,a5,0x10
    u16_t seglen = LWIP_MIN(left, max_len);
    7e90:	000a8413          	mv	s0,s5
    7e94:	0157f463          	bgeu	a5,s5,7e9c <tcp_write+0x430>
    7e98:	00078413          	mv	s0,a5
    7e9c:	01041413          	slli	s0,s0,0x10
    7ea0:	01045413          	srli	s0,s0,0x10
    if (apiflags & TCP_WRITE_FLAG_COPY) {
    7ea4:	00c12783          	lw	a5,12(sp)
    7ea8:	0017f793          	andi	a5,a5,1
    7eac:	ec0798e3          	bnez	a5,7d7c <tcp_write+0x310>
      LWIP_ASSERT("oversize == 0", oversize == 0);
    7eb0:	02e15783          	lhu	a5,46(sp)
    7eb4:	f20786e3          	beqz	a5,7de0 <tcp_write+0x374>
    7eb8:	f1dff06f          	j	7dd4 <tcp_write+0x368>
        pbuf_free(p2);
    7ebc:	000b8513          	mv	a0,s7
    7ec0:	491040ef          	jal	ra,cb50 <pbuf_free>
        goto memerr;
    7ec4:	00c0006f          	j	7ed0 <tcp_write+0x464>
      pbuf_free(p);
    7ec8:	00090513          	mv	a0,s2
    7ecc:	485040ef          	jal	ra,cb50 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
    7ed0:	01ea5783          	lhu	a5,30(s4)
    7ed4:	0807e793          	ori	a5,a5,128
    7ed8:	00fa1f23          	sh	a5,30(s4)
  TCP_STATS_INC(tcp.memerr);
    7edc:	000227b7          	lui	a5,0x22
    7ee0:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    7ee4:	0b87d703          	lhu	a4,184(a5)
    7ee8:	00170713          	addi	a4,a4,1
    7eec:	0ae79c23          	sh	a4,184(a5)
  if (concat_p != NULL) {
    7ef0:	000c8663          	beqz	s9,7efc <tcp_write+0x490>
    pbuf_free(concat_p);
    7ef4:	000c8513          	mv	a0,s9
    7ef8:	459040ef          	jal	ra,cb50 <pbuf_free>
  if (queue != NULL) {
    7efc:	000d8663          	beqz	s11,7f08 <tcp_write+0x49c>
    tcp_segs_free(queue);
    7f00:	000d8513          	mv	a0,s11
    7f04:	7500a0ef          	jal	ra,12654 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
    7f08:	06aa5783          	lhu	a5,106(s4)
    7f0c:	28078c63          	beqz	a5,81a4 <tcp_write+0x738>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
    7f10:	074a2783          	lw	a5,116(s4)
    7f14:	28079e63          	bnez	a5,81b0 <tcp_write+0x744>
    7f18:	070a2783          	lw	a5,112(s4)
    7f1c:	24078c63          	beqz	a5,8174 <tcp_write+0x708>
  return ERR_MEM;
    7f20:	fff00793          	li	a5,-1
    7f24:	00f12c23          	sw	a5,24(sp)
}
    7f28:	01812503          	lw	a0,24(sp)
    7f2c:	06c12083          	lw	ra,108(sp)
    7f30:	06812403          	lw	s0,104(sp)
    7f34:	06412483          	lw	s1,100(sp)
    7f38:	06012903          	lw	s2,96(sp)
    7f3c:	05c12983          	lw	s3,92(sp)
    7f40:	05812a03          	lw	s4,88(sp)
    7f44:	05412a83          	lw	s5,84(sp)
    7f48:	05012b03          	lw	s6,80(sp)
    7f4c:	04c12b83          	lw	s7,76(sp)
    7f50:	04812c03          	lw	s8,72(sp)
    7f54:	04412c83          	lw	s9,68(sp)
    7f58:	04012d03          	lw	s10,64(sp)
    7f5c:	03c12d83          	lw	s11,60(sp)
    7f60:	07010113          	addi	sp,sp,112
    7f64:	00008067          	ret
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
    7f68:	0001d537          	lui	a0,0x1d
    7f6c:	35850513          	addi	a0,a0,856 # 1d358 <lwiperf_txbuf_const+0xb78>
    7f70:	f79fe0ef          	jal	ra,6ee8 <bsp_printf>
    7f74:	ef9ff06f          	j	7e6c <tcp_write+0x400>
      queue = seg;
    7f78:	00050d93          	mv	s11,a0
    7f7c:	ef5ff06f          	j	7e70 <tcp_write+0x404>
    7f80:	01412483          	lw	s1,20(sp)
  u16_t extendlen = 0;
    7f84:	00012e23          	sw	zero,28(sp)
  struct pbuf *concat_p = NULL;
    7f88:	00000d93          	li	s11,0
    7f8c:	00000c13          	li	s8,0
    7f90:	ef1ff06f          	j	7e80 <tcp_write+0x414>
    7f94:	01412483          	lw	s1,20(sp)
    7f98:	ff1ff06f          	j	7f88 <tcp_write+0x51c>
  u16_t extendlen = 0;
    7f9c:	00f12e23          	sw	a5,28(sp)
    7fa0:	01412483          	lw	s1,20(sp)
    7fa4:	fe5ff06f          	j	7f88 <tcp_write+0x51c>
  if (oversize_used > 0) {
    7fa8:	01412783          	lw	a5,20(sp)
    7fac:	06078463          	beqz	a5,8014 <tcp_write+0x5a8>
    for (p = last_unsent->p; p; p = p->next) {
    7fb0:	004d2403          	lw	s0,4(s10)
    7fb4:	0080006f          	j	7fbc <tcp_write+0x550>
    7fb8:	00042403          	lw	s0,0(s0)
    7fbc:	04040463          	beqz	s0,8004 <tcp_write+0x598>
      p->tot_len += oversize_used;
    7fc0:	00845783          	lhu	a5,8(s0)
    7fc4:	01412703          	lw	a4,20(sp)
    7fc8:	00f707b3          	add	a5,a4,a5
    7fcc:	00f41423          	sh	a5,8(s0)
      if (p->next == NULL) {
    7fd0:	00042783          	lw	a5,0(s0)
    7fd4:	fe0792e3          	bnez	a5,7fb8 <tcp_write+0x54c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
    7fd8:	00442503          	lw	a0,4(s0)
    7fdc:	00a45783          	lhu	a5,10(s0)
    7fe0:	00070493          	mv	s1,a4
    7fe4:	00070613          	mv	a2,a4
    7fe8:	01012583          	lw	a1,16(sp)
    7fec:	00f50533          	add	a0,a0,a5
    7ff0:	9d5f90ef          	jal	ra,19c4 <memcpy>
        p->len += oversize_used;
    7ff4:	00a45783          	lhu	a5,10(s0)
    7ff8:	00f487b3          	add	a5,s1,a5
    7ffc:	00f41523          	sh	a5,10(s0)
    8000:	fb9ff06f          	j	7fb8 <tcp_write+0x54c>
    last_unsent->len += oversize_used;
    8004:	008d5783          	lhu	a5,8(s10)
    8008:	01412703          	lw	a4,20(sp)
    800c:	00f707b3          	add	a5,a4,a5
    8010:	00fd1423          	sh	a5,8(s10)
  pcb->unsent_oversize = oversize;
    8014:	02e15783          	lhu	a5,46(sp)
    8018:	06fa1623          	sh	a5,108(s4)
  if (concat_p != NULL) {
    801c:	0a0c8a63          	beqz	s9,80d0 <tcp_write+0x664>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
    8020:	0a0d0063          	beqz	s10,80c0 <tcp_write+0x654>
    pbuf_cat(last_unsent->p, concat_p);
    8024:	000c8593          	mv	a1,s9
    8028:	004d2503          	lw	a0,4(s10)
    802c:	070050ef          	jal	ra,d09c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
    8030:	008cd783          	lhu	a5,8(s9)
    8034:	008d5703          	lhu	a4,8(s10)
    8038:	00e787b3          	add	a5,a5,a4
    803c:	00fd1423          	sh	a5,8(s10)
  if (last_unsent == NULL) {
    8040:	100d0263          	beqz	s10,8144 <tcp_write+0x6d8>
    last_unsent->next = queue;
    8044:	01bd2023          	sw	s11,0(s10)
  pcb->snd_lbb += len;
    8048:	060a2783          	lw	a5,96(s4)
    804c:	016787b3          	add	a5,a5,s6
    8050:	06fa2023          	sw	a5,96(s4)
  pcb->snd_buf -= len;
    8054:	068a5783          	lhu	a5,104(s4)
    8058:	41678b33          	sub	s6,a5,s6
    805c:	076a1423          	sh	s6,104(s4)
  pcb->snd_queuelen = queuelen;
    8060:	073a1523          	sh	s3,106(s4)
  if (pcb->snd_queuelen != 0) {
    8064:	00098663          	beqz	s3,8070 <tcp_write+0x604>
    LWIP_ASSERT("tcp_write: valid queue length",
    8068:	074a2783          	lw	a5,116(s4)
    806c:	0e078063          	beqz	a5,814c <tcp_write+0x6e0>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
    8070:	ea090ce3          	beqz	s2,7f28 <tcp_write+0x4bc>
    8074:	00c92703          	lw	a4,12(s2)
    8078:	ea0708e3          	beqz	a4,7f28 <tcp_write+0x4bc>
    807c:	00c12783          	lw	a5,12(sp)
    8080:	0027f793          	andi	a5,a5,2
    8084:	ea0792e3          	bnez	a5,7f28 <tcp_write+0x4bc>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
    8088:	00c74783          	lbu	a5,12(a4)
    808c:	00d74403          	lbu	s0,13(a4)
    8090:	00841413          	slli	s0,s0,0x8
    8094:	00f46433          	or	s0,s0,a5
    8098:	00800513          	li	a0,8
    809c:	3dc020ef          	jal	ra,a478 <lwip_htons>
    80a0:	00c92703          	lw	a4,12(s2)
    80a4:	00a467b3          	or	a5,s0,a0
    80a8:	01079793          	slli	a5,a5,0x10
    80ac:	0107d793          	srli	a5,a5,0x10
    80b0:	00f70623          	sb	a5,12(a4)
    80b4:	0087d793          	srli	a5,a5,0x8
    80b8:	00f706a3          	sb	a5,13(a4)
    80bc:	e6dff06f          	j	7f28 <tcp_write+0x4bc>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
    80c0:	0001d537          	lui	a0,0x1d
    80c4:	36c50513          	addi	a0,a0,876 # 1d36c <lwiperf_txbuf_const+0xb8c>
    80c8:	e21fe0ef          	jal	ra,6ee8 <bsp_printf>
    80cc:	f59ff06f          	j	8024 <tcp_write+0x5b8>
  } else if (extendlen > 0) {
    80d0:	01c12783          	lw	a5,28(sp)
    80d4:	f60786e3          	beqz	a5,8040 <tcp_write+0x5d4>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
    80d8:	020d0863          	beqz	s10,8108 <tcp_write+0x69c>
    80dc:	004d2783          	lw	a5,4(s10)
    80e0:	02078463          	beqz	a5,8108 <tcp_write+0x69c>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
    80e4:	004d2783          	lw	a5,4(s10)
    80e8:	0007a683          	lw	a3,0(a5)
    80ec:	02068663          	beqz	a3,8118 <tcp_write+0x6ac>
      p->tot_len += extendlen;
    80f0:	0087d703          	lhu	a4,8(a5)
    80f4:	01c12603          	lw	a2,28(sp)
    80f8:	00e60733          	add	a4,a2,a4
    80fc:	00e79423          	sh	a4,8(a5)
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
    8100:	00068793          	mv	a5,a3
    8104:	fe5ff06f          	j	80e8 <tcp_write+0x67c>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
    8108:	0001d537          	lui	a0,0x1d
    810c:	3a450513          	addi	a0,a0,932 # 1d3a4 <lwiperf_txbuf_const+0xbc4>
    8110:	dd9fe0ef          	jal	ra,6ee8 <bsp_printf>
    8114:	fd1ff06f          	j	80e4 <tcp_write+0x678>
    p->tot_len += extendlen;
    8118:	0087d703          	lhu	a4,8(a5)
    811c:	01c12683          	lw	a3,28(sp)
    8120:	00e68733          	add	a4,a3,a4
    8124:	00e79423          	sh	a4,8(a5)
    p->len += extendlen;
    8128:	00a7d703          	lhu	a4,10(a5)
    812c:	00e68733          	add	a4,a3,a4
    8130:	00e79523          	sh	a4,10(a5)
    last_unsent->len += extendlen;
    8134:	008d5783          	lhu	a5,8(s10)
    8138:	00f687b3          	add	a5,a3,a5
    813c:	00fd1423          	sh	a5,8(s10)
    8140:	f01ff06f          	j	8040 <tcp_write+0x5d4>
    pcb->unsent = queue;
    8144:	07ba2823          	sw	s11,112(s4)
    8148:	f01ff06f          	j	8048 <tcp_write+0x5dc>
    LWIP_ASSERT("tcp_write: valid queue length",
    814c:	070a2783          	lw	a5,112(s4)
    8150:	f20790e3          	bnez	a5,8070 <tcp_write+0x604>
    8154:	0001d537          	lui	a0,0x1d
    8158:	3dc50513          	addi	a0,a0,988 # 1d3dc <lwiperf_txbuf_const+0xbfc>
    815c:	d8dfe0ef          	jal	ra,6ee8 <bsp_printf>
    8160:	f11ff06f          	j	8070 <tcp_write+0x604>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
    8164:	00050d93          	mv	s11,a0
    8168:	d69ff06f          	j	7ed0 <tcp_write+0x464>
    816c:	00050d93          	mv	s11,a0
    8170:	d61ff06f          	j	7ed0 <tcp_write+0x464>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
    8174:	0001d537          	lui	a0,0x1d
    8178:	3dc50513          	addi	a0,a0,988 # 1d3dc <lwiperf_txbuf_const+0xbfc>
    817c:	d6dfe0ef          	jal	ra,6ee8 <bsp_printf>
  return ERR_MEM;
    8180:	fff00793          	li	a5,-1
    8184:	00f12c23          	sw	a5,24(sp)
    8188:	da1ff06f          	j	7f28 <tcp_write+0x4bc>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
    818c:	ff000793          	li	a5,-16
    8190:	00f12c23          	sw	a5,24(sp)
    8194:	d95ff06f          	j	7f28 <tcp_write+0x4bc>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
    8198:	ff000793          	li	a5,-16
    819c:	00f12c23          	sw	a5,24(sp)
    81a0:	d89ff06f          	j	7f28 <tcp_write+0x4bc>
  return ERR_MEM;
    81a4:	fff00793          	li	a5,-1
    81a8:	00f12c23          	sw	a5,24(sp)
    81ac:	d7dff06f          	j	7f28 <tcp_write+0x4bc>
    81b0:	fff00793          	li	a5,-1
    81b4:	00f12c23          	sw	a5,24(sp)
    81b8:	d71ff06f          	j	7f28 <tcp_write+0x4bc>

000081bc <tcp_split_unsent_seg>:
{
    81bc:	fd010113          	addi	sp,sp,-48
    81c0:	02112623          	sw	ra,44(sp)
    81c4:	02812423          	sw	s0,40(sp)
    81c8:	02912223          	sw	s1,36(sp)
    81cc:	03212023          	sw	s2,32(sp)
    81d0:	01312e23          	sw	s3,28(sp)
    81d4:	01412c23          	sw	s4,24(sp)
    81d8:	01512a23          	sw	s5,20(sp)
    81dc:	01612823          	sw	s6,16(sp)
    81e0:	01712623          	sw	s7,12(sp)
    81e4:	00050913          	mv	s2,a0
    81e8:	00058493          	mv	s1,a1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
    81ec:	0c050c63          	beqz	a0,82c4 <tcp_split_unsent_seg+0x108>
  useg = pcb->unsent;
    81f0:	07092403          	lw	s0,112(s2)
  if (useg == NULL) {
    81f4:	28040063          	beqz	s0,8474 <tcp_split_unsent_seg+0x2b8>
  if (split == 0) {
    81f8:	0c048e63          	beqz	s1,82d4 <tcp_split_unsent_seg+0x118>
  if (useg->len <= split) {
    81fc:	00845783          	lhu	a5,8(s0)
    8200:	26f4fe63          	bgeu	s1,a5,847c <tcp_split_unsent_seg+0x2c0>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
    8204:	03695783          	lhu	a5,54(s2)
    8208:	0e97e063          	bltu	a5,s1,82e8 <tcp_split_unsent_seg+0x12c>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
    820c:	00845783          	lhu	a5,8(s0)
    8210:	0e078463          	beqz	a5,82f8 <tcp_split_unsent_seg+0x13c>
  optflags = useg->flags;
    8214:	00a44b83          	lbu	s7,10(s0)
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
    8218:	002b9a13          	slli	s4,s7,0x2
    821c:	004a7a13          	andi	s4,s4,4
  remainder = useg->len - split;
    8220:	00845b03          	lhu	s6,8(s0)
    8224:	409b09b3          	sub	s3,s6,s1
    8228:	01099993          	slli	s3,s3,0x10
    822c:	0109d993          	srli	s3,s3,0x10
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
    8230:	014985b3          	add	a1,s3,s4
    8234:	28000613          	li	a2,640
    8238:	01059593          	slli	a1,a1,0x10
    823c:	0105d593          	srli	a1,a1,0x10
    8240:	03600513          	li	a0,54
    8244:	225040ef          	jal	ra,cc68 <pbuf_alloc>
    8248:	00050a93          	mv	s5,a0
  if (p == NULL) {
    824c:	20050c63          	beqz	a0,8464 <tcp_split_unsent_seg+0x2a8>
  offset = useg->p->tot_len - useg->len + split;
    8250:	00442503          	lw	a0,4(s0)
    8254:	00855683          	lhu	a3,8(a0)
    8258:	00845783          	lhu	a5,8(s0)
    825c:	40f686b3          	sub	a3,a3,a5
    8260:	01069693          	slli	a3,a3,0x10
    8264:	0106d693          	srli	a3,a3,0x10
    8268:	009686b3          	add	a3,a3,s1
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
    826c:	004aa583          	lw	a1,4(s5)
    8270:	01069693          	slli	a3,a3,0x10
    8274:	0106d693          	srli	a3,a3,0x10
    8278:	00098613          	mv	a2,s3
    827c:	014585b3          	add	a1,a1,s4
    8280:	184050ef          	jal	ra,d404 <pbuf_copy_partial>
    8284:	09350263          	beq	a0,s3,8308 <tcp_split_unsent_seg+0x14c>
  struct tcp_seg *seg = NULL, *useg = NULL;
    8288:	00000993          	li	s3,0
  TCP_STATS_INC(tcp.memerr);
    828c:	000227b7          	lui	a5,0x22
    8290:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    8294:	0b87d703          	lhu	a4,184(a5)
    8298:	00170713          	addi	a4,a4,1
    829c:	0ae79c23          	sh	a4,184(a5)
  LWIP_ASSERT("seg == NULL", seg == NULL);
    82a0:	00098863          	beqz	s3,82b0 <tcp_split_unsent_seg+0xf4>
    82a4:	0001d537          	lui	a0,0x1d
    82a8:	46450513          	addi	a0,a0,1124 # 1d464 <lwiperf_txbuf_const+0xc84>
    82ac:	c3dfe0ef          	jal	ra,6ee8 <bsp_printf>
  if (p != NULL) {
    82b0:	1e0a8e63          	beqz	s5,84ac <tcp_split_unsent_seg+0x2f0>
    pbuf_free(p);
    82b4:	000a8513          	mv	a0,s5
    82b8:	099040ef          	jal	ra,cb50 <pbuf_free>
  return ERR_MEM;
    82bc:	fff00513          	li	a0,-1
    82c0:	1c00006f          	j	8480 <tcp_split_unsent_seg+0x2c4>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
    82c4:	0001d537          	lui	a0,0x1d
    82c8:	3fc50513          	addi	a0,a0,1020 # 1d3fc <lwiperf_txbuf_const+0xc1c>
    82cc:	c1dfe0ef          	jal	ra,6ee8 <bsp_printf>
    82d0:	f21ff06f          	j	81f0 <tcp_split_unsent_seg+0x34>
    LWIP_ASSERT("Can't split segment into length 0", 0);
    82d4:	0001d537          	lui	a0,0x1d
    82d8:	42050513          	addi	a0,a0,1056 # 1d420 <lwiperf_txbuf_const+0xc40>
    82dc:	c0dfe0ef          	jal	ra,6ee8 <bsp_printf>
    return ERR_VAL;
    82e0:	ffa00513          	li	a0,-6
    82e4:	19c0006f          	j	8480 <tcp_split_unsent_seg+0x2c4>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
    82e8:	0001d537          	lui	a0,0x1d
    82ec:	44450513          	addi	a0,a0,1092 # 1d444 <lwiperf_txbuf_const+0xc64>
    82f0:	bf9fe0ef          	jal	ra,6ee8 <bsp_printf>
    82f4:	f19ff06f          	j	820c <tcp_split_unsent_seg+0x50>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
    82f8:	0001d537          	lui	a0,0x1d
    82fc:	45450513          	addi	a0,a0,1108 # 1d454 <lwiperf_txbuf_const+0xc74>
    8300:	be9fe0ef          	jal	ra,6ee8 <bsp_printf>
    8304:	f11ff06f          	j	8214 <tcp_split_unsent_seg+0x58>
  split_flags = TCPH_FLAGS(useg->tcphdr);
    8308:	00c42783          	lw	a5,12(s0)
    830c:	00c7c503          	lbu	a0,12(a5)
    8310:	00d7c783          	lbu	a5,13(a5)
    8314:	00879793          	slli	a5,a5,0x8
    8318:	00a7e533          	or	a0,a5,a0
    831c:	15c020ef          	jal	ra,a478 <lwip_htons>
    8320:	0ff57513          	andi	a0,a0,255
    8324:	03f57a13          	andi	s4,a0,63
  if (split_flags & TCP_PSH) {
    8328:	00857993          	andi	s3,a0,8
    832c:	00098663          	beqz	s3,8338 <tcp_split_unsent_seg+0x17c>
    split_flags &= ~TCP_PSH;
    8330:	03757a13          	andi	s4,a0,55
    remainder_flags |= TCP_PSH;
    8334:	00800993          	li	s3,8
  if (split_flags & TCP_FIN) {
    8338:	001a7793          	andi	a5,s4,1
    833c:	00078663          	beqz	a5,8348 <tcp_split_unsent_seg+0x18c>
    split_flags &= ~TCP_FIN;
    8340:	0fea7a13          	andi	s4,s4,254
    remainder_flags |= TCP_FIN;
    8344:	0019e993          	ori	s3,s3,1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
    8348:	00c42703          	lw	a4,12(s0)
    834c:	00474783          	lbu	a5,4(a4)
    8350:	00574503          	lbu	a0,5(a4)
    8354:	00851513          	slli	a0,a0,0x8
    8358:	00f56533          	or	a0,a0,a5
    835c:	00674783          	lbu	a5,6(a4)
    8360:	01079793          	slli	a5,a5,0x10
    8364:	00a7e7b3          	or	a5,a5,a0
    8368:	00774503          	lbu	a0,7(a4)
    836c:	01851513          	slli	a0,a0,0x18
    8370:	00f56533          	or	a0,a0,a5
    8374:	11c020ef          	jal	ra,a490 <lwip_htonl>
    8378:	000b8713          	mv	a4,s7
    837c:	00a486b3          	add	a3,s1,a0
    8380:	00098613          	mv	a2,s3
    8384:	000a8593          	mv	a1,s5
    8388:	00090513          	mv	a0,s2
    838c:	ee9fe0ef          	jal	ra,7274 <tcp_create_segment>
    8390:	00050993          	mv	s3,a0
  if (seg == NULL) {
    8394:	0c050c63          	beqz	a0,846c <tcp_split_unsent_seg+0x2b0>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
    8398:	00442503          	lw	a0,4(s0)
    839c:	4a1040ef          	jal	ra,d03c <pbuf_clen>
    83a0:	06a95783          	lhu	a5,106(s2)
    83a4:	40a78533          	sub	a0,a5,a0
    83a8:	06a91523          	sh	a0,106(s2)
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
    83ac:	00442503          	lw	a0,4(s0)
    83b0:	00855583          	lhu	a1,8(a0)
    83b4:	416484b3          	sub	s1,s1,s6
    83b8:	01049493          	slli	s1,s1,0x10
    83bc:	0104d493          	srli	s1,s1,0x10
    83c0:	009585b3          	add	a1,a1,s1
    83c4:	01059593          	slli	a1,a1,0x10
    83c8:	0105d593          	srli	a1,a1,0x10
    83cc:	2f9040ef          	jal	ra,cec4 <pbuf_realloc>
  useg->len -= remainder;
    83d0:	00845783          	lhu	a5,8(s0)
    83d4:	00f484b3          	add	s1,s1,a5
    83d8:	00941423          	sh	s1,8(s0)
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
    83dc:	00c42783          	lw	a5,12(s0)
    83e0:	00c7c503          	lbu	a0,12(a5)
    83e4:	00d7c483          	lbu	s1,13(a5)
    83e8:	00849493          	slli	s1,s1,0x8
    83ec:	00a4e4b3          	or	s1,s1,a0
    83f0:	000a0513          	mv	a0,s4
    83f4:	084020ef          	jal	ra,a478 <lwip_htons>
    83f8:	00c42783          	lw	a5,12(s0)
    83fc:	00a4e533          	or	a0,s1,a0
    8400:	01051513          	slli	a0,a0,0x10
    8404:	01055513          	srli	a0,a0,0x10
    8408:	00a78623          	sb	a0,12(a5)
    840c:	00855513          	srli	a0,a0,0x8
    8410:	00a786a3          	sb	a0,13(a5)
  pcb->snd_queuelen += pbuf_clen(useg->p);
    8414:	00442503          	lw	a0,4(s0)
    8418:	425040ef          	jal	ra,d03c <pbuf_clen>
    841c:	06a95783          	lhu	a5,106(s2)
    8420:	00f50533          	add	a0,a0,a5
    8424:	06a91523          	sh	a0,106(s2)
  pcb->snd_queuelen += pbuf_clen(seg->p);
    8428:	0049a503          	lw	a0,4(s3)
    842c:	411040ef          	jal	ra,d03c <pbuf_clen>
    8430:	06a95783          	lhu	a5,106(s2)
    8434:	00f50533          	add	a0,a0,a5
    8438:	06a91523          	sh	a0,106(s2)
  seg->next = useg->next;
    843c:	00042783          	lw	a5,0(s0)
    8440:	00f9a023          	sw	a5,0(s3)
  useg->next = seg;
    8444:	01342023          	sw	s3,0(s0)
  if (seg->next == NULL) {
    8448:	0009a783          	lw	a5,0(s3)
    844c:	00078663          	beqz	a5,8458 <tcp_split_unsent_seg+0x29c>
  return ERR_OK;
    8450:	00000513          	li	a0,0
    8454:	02c0006f          	j	8480 <tcp_split_unsent_seg+0x2c4>
    pcb->unsent_oversize = 0;
    8458:	06091623          	sh	zero,108(s2)
  return ERR_OK;
    845c:	00000513          	li	a0,0
    8460:	0200006f          	j	8480 <tcp_split_unsent_seg+0x2c4>
  struct tcp_seg *seg = NULL, *useg = NULL;
    8464:	00050993          	mv	s3,a0
    8468:	e25ff06f          	j	828c <tcp_split_unsent_seg+0xd0>
    p = NULL; /* Freed by tcp_create_segment */
    846c:	00050a93          	mv	s5,a0
    8470:	e1dff06f          	j	828c <tcp_split_unsent_seg+0xd0>
    return ERR_MEM;
    8474:	fff00513          	li	a0,-1
    8478:	0080006f          	j	8480 <tcp_split_unsent_seg+0x2c4>
    return ERR_OK;
    847c:	00000513          	li	a0,0
}
    8480:	02c12083          	lw	ra,44(sp)
    8484:	02812403          	lw	s0,40(sp)
    8488:	02412483          	lw	s1,36(sp)
    848c:	02012903          	lw	s2,32(sp)
    8490:	01c12983          	lw	s3,28(sp)
    8494:	01812a03          	lw	s4,24(sp)
    8498:	01412a83          	lw	s5,20(sp)
    849c:	01012b03          	lw	s6,16(sp)
    84a0:	00c12b83          	lw	s7,12(sp)
    84a4:	03010113          	addi	sp,sp,48
    84a8:	00008067          	ret
  return ERR_MEM;
    84ac:	fff00513          	li	a0,-1
    84b0:	fd1ff06f          	j	8480 <tcp_split_unsent_seg+0x2c4>

000084b4 <tcp_enqueue_flags>:
{
    84b4:	fe010113          	addi	sp,sp,-32
    84b8:	00112e23          	sw	ra,28(sp)
    84bc:	00812c23          	sw	s0,24(sp)
    84c0:	00912a23          	sw	s1,20(sp)
    84c4:	01212823          	sw	s2,16(sp)
    84c8:	01312623          	sw	s3,12(sp)
    84cc:	01412423          	sw	s4,8(sp)
    84d0:	01512223          	sw	s5,4(sp)
    84d4:	00050413          	mv	s0,a0
    84d8:	00058493          	mv	s1,a1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
    84dc:	0035fa93          	andi	s5,a1,3
    84e0:	080a8063          	beqz	s5,8560 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
    84e4:	08040663          	beqz	s0,8570 <tcp_enqueue_flags+0xbc>
  if (flags & TCP_SYN) {
    84e8:	0024f993          	andi	s3,s1,2
    84ec:	00098463          	beqz	s3,84f4 <tcp_enqueue_flags+0x40>
    optflags = TF_SEG_OPTS_MSS;
    84f0:	00100993          	li	s3,1
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
    84f4:	00299913          	slli	s2,s3,0x2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
    84f8:	00497913          	andi	s2,s2,4
    84fc:	28000613          	li	a2,640
    8500:	00090593          	mv	a1,s2
    8504:	03600513          	li	a0,54
    8508:	760040ef          	jal	ra,cc68 <pbuf_alloc>
    850c:	00050a13          	mv	s4,a0
    8510:	06050863          	beqz	a0,8580 <tcp_enqueue_flags+0xcc>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
    8514:	00a55783          	lhu	a5,10(a0)
    8518:	0927e863          	bltu	a5,s2,85a8 <tcp_enqueue_flags+0xf4>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    851c:	00098713          	mv	a4,s3
    8520:	06042683          	lw	a3,96(s0)
    8524:	00048613          	mv	a2,s1
    8528:	000a0593          	mv	a1,s4
    852c:	00040513          	mv	a0,s0
    8530:	d45fe0ef          	jal	ra,7274 <tcp_create_segment>
    8534:	00050913          	mv	s2,a0
    8538:	08050063          	beqz	a0,85b8 <tcp_enqueue_flags+0x104>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
    853c:	00c52783          	lw	a5,12(a0)
    8540:	0037f793          	andi	a5,a5,3
    8544:	08079e63          	bnez	a5,85e0 <tcp_enqueue_flags+0x12c>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
    8548:	00895783          	lhu	a5,8(s2)
    854c:	0a079263          	bnez	a5,85f0 <tcp_enqueue_flags+0x13c>
  if (pcb->unsent == NULL) {
    8550:	07042703          	lw	a4,112(s0)
    8554:	0a071863          	bnez	a4,8604 <tcp_enqueue_flags+0x150>
    pcb->unsent = seg;
    8558:	07242823          	sw	s2,112(s0)
    855c:	0b40006f          	j	8610 <tcp_enqueue_flags+0x15c>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
    8560:	0001d537          	lui	a0,0x1d
    8564:	47050513          	addi	a0,a0,1136 # 1d470 <lwiperf_txbuf_const+0xc90>
    8568:	981fe0ef          	jal	ra,6ee8 <bsp_printf>
    856c:	f79ff06f          	j	84e4 <tcp_enqueue_flags+0x30>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
    8570:	0001d537          	lui	a0,0x1d
    8574:	4c850513          	addi	a0,a0,1224 # 1d4c8 <lwiperf_txbuf_const+0xce8>
    8578:	971fe0ef          	jal	ra,6ee8 <bsp_printf>
    857c:	f6dff06f          	j	84e8 <tcp_enqueue_flags+0x34>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
    8580:	01e45783          	lhu	a5,30(s0)
    8584:	0807e793          	ori	a5,a5,128
    8588:	00f41f23          	sh	a5,30(s0)
    TCP_STATS_INC(tcp.memerr);
    858c:	000227b7          	lui	a5,0x22
    8590:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    8594:	0b87d703          	lhu	a4,184(a5)
    8598:	00170713          	addi	a4,a4,1
    859c:	0ae79c23          	sh	a4,184(a5)
    return ERR_MEM;
    85a0:	fff00513          	li	a0,-1
    85a4:	0ec0006f          	j	8690 <tcp_enqueue_flags+0x1dc>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
    85a8:	0001d537          	lui	a0,0x1d
    85ac:	4e850513          	addi	a0,a0,1256 # 1d4e8 <lwiperf_txbuf_const+0xd08>
    85b0:	939fe0ef          	jal	ra,6ee8 <bsp_printf>
    85b4:	f69ff06f          	j	851c <tcp_enqueue_flags+0x68>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
    85b8:	01e45783          	lhu	a5,30(s0)
    85bc:	0807e793          	ori	a5,a5,128
    85c0:	00f41f23          	sh	a5,30(s0)
    TCP_STATS_INC(tcp.memerr);
    85c4:	000227b7          	lui	a5,0x22
    85c8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    85cc:	0b87d703          	lhu	a4,184(a5)
    85d0:	00170713          	addi	a4,a4,1
    85d4:	0ae79c23          	sh	a4,184(a5)
    return ERR_MEM;
    85d8:	fff00513          	li	a0,-1
    85dc:	0b40006f          	j	8690 <tcp_enqueue_flags+0x1dc>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
    85e0:	0001d537          	lui	a0,0x1d
    85e4:	52450513          	addi	a0,a0,1316 # 1d524 <lwiperf_txbuf_const+0xd44>
    85e8:	901fe0ef          	jal	ra,6ee8 <bsp_printf>
    85ec:	f5dff06f          	j	8548 <tcp_enqueue_flags+0x94>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
    85f0:	0001d537          	lui	a0,0x1d
    85f4:	53c50513          	addi	a0,a0,1340 # 1d53c <lwiperf_txbuf_const+0xd5c>
    85f8:	8f1fe0ef          	jal	ra,6ee8 <bsp_printf>
    85fc:	f55ff06f          	j	8550 <tcp_enqueue_flags+0x9c>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
    8600:	00078713          	mv	a4,a5
    8604:	00072783          	lw	a5,0(a4)
    8608:	fe079ce3          	bnez	a5,8600 <tcp_enqueue_flags+0x14c>
    useg->next = seg;
    860c:	01272023          	sw	s2,0(a4)
  pcb->unsent_oversize = 0;
    8610:	06041623          	sh	zero,108(s0)
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
    8614:	000a8863          	beqz	s5,8624 <tcp_enqueue_flags+0x170>
    pcb->snd_lbb++;
    8618:	06042783          	lw	a5,96(s0)
    861c:	00178793          	addi	a5,a5,1
    8620:	06f42023          	sw	a5,96(s0)
  if (flags & TCP_FIN) {
    8624:	0014f493          	andi	s1,s1,1
    8628:	00048863          	beqz	s1,8638 <tcp_enqueue_flags+0x184>
    tcp_set_flags(pcb, TF_FIN);
    862c:	01e45783          	lhu	a5,30(s0)
    8630:	0207e793          	ori	a5,a5,32
    8634:	00f41f23          	sh	a5,30(s0)
  pcb->snd_queuelen += pbuf_clen(seg->p);
    8638:	00492503          	lw	a0,4(s2)
    863c:	201040ef          	jal	ra,d03c <pbuf_clen>
    8640:	06a45783          	lhu	a5,106(s0)
    8644:	00f50533          	add	a0,a0,a5
    8648:	01051513          	slli	a0,a0,0x10
    864c:	01055513          	srli	a0,a0,0x10
    8650:	06a41523          	sh	a0,106(s0)
  if (pcb->snd_queuelen != 0) {
    8654:	02050c63          	beqz	a0,868c <tcp_enqueue_flags+0x1d8>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
    8658:	07442783          	lw	a5,116(s0)
    865c:	00078663          	beqz	a5,8668 <tcp_enqueue_flags+0x1b4>
  return ERR_OK;
    8660:	00000513          	li	a0,0
    8664:	02c0006f          	j	8690 <tcp_enqueue_flags+0x1dc>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
    8668:	07042783          	lw	a5,112(s0)
    866c:	00078663          	beqz	a5,8678 <tcp_enqueue_flags+0x1c4>
  return ERR_OK;
    8670:	00000513          	li	a0,0
    8674:	01c0006f          	j	8690 <tcp_enqueue_flags+0x1dc>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
    8678:	0001d537          	lui	a0,0x1d
    867c:	56850513          	addi	a0,a0,1384 # 1d568 <lwiperf_txbuf_const+0xd88>
    8680:	869fe0ef          	jal	ra,6ee8 <bsp_printf>
  return ERR_OK;
    8684:	00000513          	li	a0,0
    8688:	0080006f          	j	8690 <tcp_enqueue_flags+0x1dc>
    868c:	00000513          	li	a0,0
}
    8690:	01c12083          	lw	ra,28(sp)
    8694:	01812403          	lw	s0,24(sp)
    8698:	01412483          	lw	s1,20(sp)
    869c:	01012903          	lw	s2,16(sp)
    86a0:	00c12983          	lw	s3,12(sp)
    86a4:	00812a03          	lw	s4,8(sp)
    86a8:	00412a83          	lw	s5,4(sp)
    86ac:	02010113          	addi	sp,sp,32
    86b0:	00008067          	ret

000086b4 <tcp_send_fin>:
{
    86b4:	ff010113          	addi	sp,sp,-16
    86b8:	00112623          	sw	ra,12(sp)
    86bc:	00812423          	sw	s0,8(sp)
    86c0:	00912223          	sw	s1,4(sp)
    86c4:	01212023          	sw	s2,0(sp)
    86c8:	00050493          	mv	s1,a0
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
    86cc:	00050863          	beqz	a0,86dc <tcp_send_fin+0x28>
  if (pcb->unsent != NULL) {
    86d0:	0704a403          	lw	s0,112(s1)
    86d4:	00041e63          	bnez	s0,86f0 <tcp_send_fin+0x3c>
    86d8:	0400006f          	j	8718 <tcp_send_fin+0x64>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
    86dc:	0001d537          	lui	a0,0x1d
    86e0:	59050513          	addi	a0,a0,1424 # 1d590 <lwiperf_txbuf_const+0xdb0>
    86e4:	805fe0ef          	jal	ra,6ee8 <bsp_printf>
    86e8:	fe9ff06f          	j	86d0 <tcp_send_fin+0x1c>
         last_unsent = last_unsent->next);
    86ec:	00078413          	mv	s0,a5
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
    86f0:	00042783          	lw	a5,0(s0)
    86f4:	fe079ce3          	bnez	a5,86ec <tcp_send_fin+0x38>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
    86f8:	00c42783          	lw	a5,12(s0)
    86fc:	00c7c503          	lbu	a0,12(a5)
    8700:	00d7c783          	lbu	a5,13(a5)
    8704:	00879793          	slli	a5,a5,0x8
    8708:	00a7e533          	or	a0,a5,a0
    870c:	56d010ef          	jal	ra,a478 <lwip_htons>
    8710:	00757513          	andi	a0,a0,7
    8714:	02050463          	beqz	a0,873c <tcp_send_fin+0x88>
  return tcp_enqueue_flags(pcb, TCP_FIN);
    8718:	00100593          	li	a1,1
    871c:	00048513          	mv	a0,s1
    8720:	d95ff0ef          	jal	ra,84b4 <tcp_enqueue_flags>
}
    8724:	00c12083          	lw	ra,12(sp)
    8728:	00812403          	lw	s0,8(sp)
    872c:	00412483          	lw	s1,4(sp)
    8730:	00012903          	lw	s2,0(sp)
    8734:	01010113          	addi	sp,sp,16
    8738:	00008067          	ret
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
    873c:	00c42783          	lw	a5,12(s0)
    8740:	00c7c503          	lbu	a0,12(a5)
    8744:	00d7c903          	lbu	s2,13(a5)
    8748:	00891913          	slli	s2,s2,0x8
    874c:	00a96933          	or	s2,s2,a0
    8750:	00100513          	li	a0,1
    8754:	525010ef          	jal	ra,a478 <lwip_htons>
    8758:	00c42783          	lw	a5,12(s0)
    875c:	00a96533          	or	a0,s2,a0
    8760:	01051513          	slli	a0,a0,0x10
    8764:	01055513          	srli	a0,a0,0x10
    8768:	00a78623          	sb	a0,12(a5)
    876c:	00855513          	srli	a0,a0,0x8
    8770:	00a786a3          	sb	a0,13(a5)
      tcp_set_flags(pcb, TF_FIN);
    8774:	01e4d783          	lhu	a5,30(s1)
    8778:	0207e793          	ori	a5,a5,32
    877c:	00f49f23          	sh	a5,30(s1)
      return ERR_OK;
    8780:	00000513          	li	a0,0
    8784:	fa1ff06f          	j	8724 <tcp_send_fin+0x70>

00008788 <tcp_rexmit_rto_prepare>:
{
    8788:	fe010113          	addi	sp,sp,-32
    878c:	00112e23          	sw	ra,28(sp)
    8790:	00812c23          	sw	s0,24(sp)
    8794:	00912a23          	sw	s1,20(sp)
    8798:	01212823          	sw	s2,16(sp)
    879c:	01312623          	sw	s3,12(sp)
    87a0:	00050493          	mv	s1,a0
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
    87a4:	02050463          	beqz	a0,87cc <tcp_rexmit_rto_prepare+0x44>
  if (pcb->unacked == NULL) {
    87a8:	0744a403          	lw	s0,116(s1)
    87ac:	0e040c63          	beqz	s0,88a4 <tcp_rexmit_rto_prepare+0x11c>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
    87b0:	00042783          	lw	a5,0(s0)
    87b4:	02078463          	beqz	a5,87dc <tcp_rexmit_rto_prepare+0x54>
    if (tcp_output_segment_busy(seg)) {
    87b8:	00040513          	mv	a0,s0
    87bc:	c69fe0ef          	jal	ra,7424 <tcp_output_segment_busy>
    87c0:	0e051663          	bnez	a0,88ac <tcp_rexmit_rto_prepare+0x124>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
    87c4:	00042403          	lw	s0,0(s0)
    87c8:	fe9ff06f          	j	87b0 <tcp_rexmit_rto_prepare+0x28>
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
    87cc:	0001d537          	lui	a0,0x1d
    87d0:	5ac50513          	addi	a0,a0,1452 # 1d5ac <lwiperf_txbuf_const+0xdcc>
    87d4:	f14fe0ef          	jal	ra,6ee8 <bsp_printf>
    87d8:	fd1ff06f          	j	87a8 <tcp_rexmit_rto_prepare+0x20>
  if (tcp_output_segment_busy(seg)) {
    87dc:	00040513          	mv	a0,s0
    87e0:	c45fe0ef          	jal	ra,7424 <tcp_output_segment_busy>
    87e4:	0c051863          	bnez	a0,88b4 <tcp_rexmit_rto_prepare+0x12c>
  seg->next = pcb->unsent;
    87e8:	0704a783          	lw	a5,112(s1)
    87ec:	00f42023          	sw	a5,0(s0)
  pcb->unsent = pcb->unacked;
    87f0:	0744a783          	lw	a5,116(s1)
    87f4:	06f4a823          	sw	a5,112(s1)
  pcb->unacked = NULL;
    87f8:	0604aa23          	sw	zero,116(s1)
  tcp_set_flags(pcb, TF_RTO);
    87fc:	01e4d783          	lhu	a5,30(s1)
    8800:	00001737          	lui	a4,0x1
    8804:	80070713          	addi	a4,a4,-2048 # 800 <regnum_t6+0x7e1>
    8808:	00e7e7b3          	or	a5,a5,a4
    880c:	00f49f23          	sh	a5,30(s1)
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    8810:	00c42703          	lw	a4,12(s0)
    8814:	00474503          	lbu	a0,4(a4)
    8818:	00574783          	lbu	a5,5(a4)
    881c:	00879793          	slli	a5,a5,0x8
    8820:	00a7e533          	or	a0,a5,a0
    8824:	00674783          	lbu	a5,6(a4)
    8828:	01079793          	slli	a5,a5,0x10
    882c:	00a7e7b3          	or	a5,a5,a0
    8830:	00774503          	lbu	a0,7(a4)
    8834:	01851513          	slli	a0,a0,0x18
    8838:	00f56533          	or	a0,a0,a5
    883c:	455010ef          	jal	ra,a490 <lwip_htonl>
    8840:	00050913          	mv	s2,a0
    8844:	00845983          	lhu	s3,8(s0)
    8848:	00c42783          	lw	a5,12(s0)
    884c:	00c7c503          	lbu	a0,12(a5)
    8850:	00d7c783          	lbu	a5,13(a5)
    8854:	00879793          	slli	a5,a5,0x8
    8858:	00a7e533          	or	a0,a5,a0
    885c:	41d010ef          	jal	ra,a478 <lwip_htons>
    8860:	00357513          	andi	a0,a0,3
    8864:	02050c63          	beqz	a0,889c <tcp_rexmit_rto_prepare+0x114>
    8868:	00100793          	li	a5,1
    886c:	00f989b3          	add	s3,s3,a5
    8870:	01390933          	add	s2,s2,s3
    8874:	0524a823          	sw	s2,80(s1)
  pcb->rttest = 0;
    8878:	0204ac23          	sw	zero,56(s1)
  return ERR_OK;
    887c:	00000513          	li	a0,0
}
    8880:	01c12083          	lw	ra,28(sp)
    8884:	01812403          	lw	s0,24(sp)
    8888:	01412483          	lw	s1,20(sp)
    888c:	01012903          	lw	s2,16(sp)
    8890:	00c12983          	lw	s3,12(sp)
    8894:	02010113          	addi	sp,sp,32
    8898:	00008067          	ret
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    889c:	00000793          	li	a5,0
    88a0:	fcdff06f          	j	886c <tcp_rexmit_rto_prepare+0xe4>
    return ERR_VAL;
    88a4:	ffa00513          	li	a0,-6
    88a8:	fd9ff06f          	j	8880 <tcp_rexmit_rto_prepare+0xf8>
      return ERR_VAL;
    88ac:	ffa00513          	li	a0,-6
    88b0:	fd1ff06f          	j	8880 <tcp_rexmit_rto_prepare+0xf8>
    return ERR_VAL;
    88b4:	ffa00513          	li	a0,-6
    88b8:	fc9ff06f          	j	8880 <tcp_rexmit_rto_prepare+0xf8>

000088bc <tcp_rexmit>:
{
    88bc:	fe010113          	addi	sp,sp,-32
    88c0:	00112e23          	sw	ra,28(sp)
    88c4:	00812c23          	sw	s0,24(sp)
    88c8:	00912a23          	sw	s1,20(sp)
    88cc:	01212823          	sw	s2,16(sp)
    88d0:	01312623          	sw	s3,12(sp)
    88d4:	00050913          	mv	s2,a0
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
    88d8:	0a050063          	beqz	a0,8978 <tcp_rexmit+0xbc>
  if (pcb->unacked == NULL) {
    88dc:	07492483          	lw	s1,116(s2)
    88e0:	0e048e63          	beqz	s1,89dc <tcp_rexmit+0x120>
  if (tcp_output_segment_busy(seg)) {
    88e4:	00048513          	mv	a0,s1
    88e8:	b3dfe0ef          	jal	ra,7424 <tcp_output_segment_busy>
    88ec:	0e051c63          	bnez	a0,89e4 <tcp_rexmit+0x128>
  pcb->unacked = seg->next;
    88f0:	0004a783          	lw	a5,0(s1)
    88f4:	06f92a23          	sw	a5,116(s2)
  cur_seg = &(pcb->unsent);
    88f8:	07090413          	addi	s0,s2,112
  while (*cur_seg &&
    88fc:	00042783          	lw	a5,0(s0)
    8900:	08078463          	beqz	a5,8988 <tcp_rexmit+0xcc>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    8904:	00c7a703          	lw	a4,12(a5)
    8908:	00474783          	lbu	a5,4(a4)
    890c:	00574503          	lbu	a0,5(a4)
    8910:	00851513          	slli	a0,a0,0x8
    8914:	00f56533          	or	a0,a0,a5
    8918:	00674783          	lbu	a5,6(a4)
    891c:	01079793          	slli	a5,a5,0x10
    8920:	00a7e7b3          	or	a5,a5,a0
    8924:	00774503          	lbu	a0,7(a4)
    8928:	01851513          	slli	a0,a0,0x18
    892c:	00f56533          	or	a0,a0,a5
    8930:	361010ef          	jal	ra,a490 <lwip_htonl>
    8934:	00050993          	mv	s3,a0
    8938:	00c4a703          	lw	a4,12(s1)
    893c:	00474783          	lbu	a5,4(a4)
    8940:	00574503          	lbu	a0,5(a4)
    8944:	00851513          	slli	a0,a0,0x8
    8948:	00f56533          	or	a0,a0,a5
    894c:	00674783          	lbu	a5,6(a4)
    8950:	01079793          	slli	a5,a5,0x10
    8954:	00a7e7b3          	or	a5,a5,a0
    8958:	00774503          	lbu	a0,7(a4)
    895c:	01851513          	slli	a0,a0,0x18
    8960:	00f56533          	or	a0,a0,a5
    8964:	32d010ef          	jal	ra,a490 <lwip_htonl>
    8968:	40a98533          	sub	a0,s3,a0
  while (*cur_seg &&
    896c:	00055e63          	bgez	a0,8988 <tcp_rexmit+0xcc>
    cur_seg = &((*cur_seg)->next );
    8970:	00042403          	lw	s0,0(s0)
    8974:	f89ff06f          	j	88fc <tcp_rexmit+0x40>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
    8978:	0001d537          	lui	a0,0x1d
    897c:	5d050513          	addi	a0,a0,1488 # 1d5d0 <lwiperf_txbuf_const+0xdf0>
    8980:	d68fe0ef          	jal	ra,6ee8 <bsp_printf>
    8984:	f59ff06f          	j	88dc <tcp_rexmit+0x20>
  seg->next = *cur_seg;
    8988:	00042783          	lw	a5,0(s0)
    898c:	00f4a023          	sw	a5,0(s1)
  *cur_seg = seg;
    8990:	00942023          	sw	s1,0(s0)
  if (seg->next == NULL) {
    8994:	0004a783          	lw	a5,0(s1)
    8998:	02078e63          	beqz	a5,89d4 <tcp_rexmit+0x118>
  if (pcb->nrtx < 0xFF) {
    899c:	04694783          	lbu	a5,70(s2)
    89a0:	0ff00713          	li	a4,255
    89a4:	00e78663          	beq	a5,a4,89b0 <tcp_rexmit+0xf4>
    ++pcb->nrtx;
    89a8:	00178793          	addi	a5,a5,1
    89ac:	04f90323          	sb	a5,70(s2)
  pcb->rttest = 0;
    89b0:	02092c23          	sw	zero,56(s2)
  return ERR_OK;
    89b4:	00000513          	li	a0,0
}
    89b8:	01c12083          	lw	ra,28(sp)
    89bc:	01812403          	lw	s0,24(sp)
    89c0:	01412483          	lw	s1,20(sp)
    89c4:	01012903          	lw	s2,16(sp)
    89c8:	00c12983          	lw	s3,12(sp)
    89cc:	02010113          	addi	sp,sp,32
    89d0:	00008067          	ret
    pcb->unsent_oversize = 0;
    89d4:	06091623          	sh	zero,108(s2)
    89d8:	fc5ff06f          	j	899c <tcp_rexmit+0xe0>
    return ERR_VAL;
    89dc:	ffa00513          	li	a0,-6
    89e0:	fd9ff06f          	j	89b8 <tcp_rexmit+0xfc>
    return ERR_VAL;
    89e4:	ffa00513          	li	a0,-6
    89e8:	fd1ff06f          	j	89b8 <tcp_rexmit+0xfc>

000089ec <tcp_rexmit_fast>:
{
    89ec:	ff010113          	addi	sp,sp,-16
    89f0:	00112623          	sw	ra,12(sp)
    89f4:	00812423          	sw	s0,8(sp)
    89f8:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
    89fc:	02050463          	beqz	a0,8a24 <tcp_rexmit_fast+0x38>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
    8a00:	07442783          	lw	a5,116(s0)
    8a04:	00078863          	beqz	a5,8a14 <tcp_rexmit_fast+0x28>
    8a08:	01e45783          	lhu	a5,30(s0)
    8a0c:	0047f793          	andi	a5,a5,4
    8a10:	02078263          	beqz	a5,8a34 <tcp_rexmit_fast+0x48>
}
    8a14:	00c12083          	lw	ra,12(sp)
    8a18:	00812403          	lw	s0,8(sp)
    8a1c:	01010113          	addi	sp,sp,16
    8a20:	00008067          	ret
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
    8a24:	0001d537          	lui	a0,0x1d
    8a28:	5e850513          	addi	a0,a0,1512 # 1d5e8 <lwiperf_txbuf_const+0xe08>
    8a2c:	cbcfe0ef          	jal	ra,6ee8 <bsp_printf>
    8a30:	fd1ff06f          	j	8a00 <tcp_rexmit_fast+0x14>
    if (tcp_rexmit(pcb) == ERR_OK) {
    8a34:	00040513          	mv	a0,s0
    8a38:	e85ff0ef          	jal	ra,88bc <tcp_rexmit>
    8a3c:	fc051ce3          	bnez	a0,8a14 <tcp_rexmit_fast+0x28>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
    8a40:	06445703          	lhu	a4,100(s0)
    8a44:	04c45683          	lhu	a3,76(s0)
    8a48:	00070793          	mv	a5,a4
    8a4c:	00e6f463          	bgeu	a3,a4,8a54 <tcp_rexmit_fast+0x68>
    8a50:	00068793          	mv	a5,a3
    8a54:	01079793          	slli	a5,a5,0x10
    8a58:	0107d793          	srli	a5,a5,0x10
    8a5c:	0017d793          	srli	a5,a5,0x1
    8a60:	04f41723          	sh	a5,78(s0)
      if (pcb->ssthresh < (2U * pcb->mss)) {
    8a64:	03645703          	lhu	a4,54(s0)
    8a68:	00171693          	slli	a3,a4,0x1
    8a6c:	00d7f463          	bgeu	a5,a3,8a74 <tcp_rexmit_fast+0x88>
        pcb->ssthresh = 2 * pcb->mss;
    8a70:	04d41723          	sh	a3,78(s0)
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
    8a74:	04e45783          	lhu	a5,78(s0)
    8a78:	00171693          	slli	a3,a4,0x1
    8a7c:	00d70733          	add	a4,a4,a3
    8a80:	00e78733          	add	a4,a5,a4
    8a84:	04e41623          	sh	a4,76(s0)
      tcp_set_flags(pcb, TF_INFR);
    8a88:	01e45783          	lhu	a5,30(s0)
    8a8c:	0047e793          	ori	a5,a5,4
    8a90:	00f41f23          	sh	a5,30(s0)
      pcb->rtime = 0;
    8a94:	02041a23          	sh	zero,52(s0)
}
    8a98:	f7dff06f          	j	8a14 <tcp_rexmit_fast+0x28>

00008a9c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
    8a9c:	fe010113          	addi	sp,sp,-32
    8aa0:	00112e23          	sw	ra,28(sp)
    8aa4:	00812c23          	sw	s0,24(sp)
    8aa8:	00912a23          	sw	s1,20(sp)
    8aac:	01212823          	sw	s2,16(sp)
    8ab0:	01312623          	sw	s3,12(sp)
    8ab4:	01412423          	sw	s4,8(sp)
    8ab8:	01512223          	sw	s5,4(sp)
    8abc:	01612023          	sw	s6,0(sp)
    8ac0:	00050993          	mv	s3,a0
    8ac4:	00058b13          	mv	s6,a1
    8ac8:	00060413          	mv	s0,a2
    8acc:	00068493          	mv	s1,a3
    8ad0:	00070913          	mv	s2,a4
    8ad4:	00078a13          	mv	s4,a5
    8ad8:	00080a93          	mv	s5,a6
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
    8adc:	08068863          	beqz	a3,8b6c <tcp_rst+0xd0>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
    8ae0:	08090e63          	beqz	s2,8b7c <tcp_rst+0xe0>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
    8ae4:	000b0513          	mv	a0,s6
    8ae8:	1a9010ef          	jal	ra,a490 <lwip_htonl>
    8aec:	0000a8b7          	lui	a7,0xa
    8af0:	02d88893          	addi	a7,a7,45 # a02d <altcp_tcp_shutdown+0x59>
    8af4:	01400813          	li	a6,20
    8af8:	000a8793          	mv	a5,s5
    8afc:	000a0713          	mv	a4,s4
    8b00:	00050693          	mv	a3,a0
    8b04:	00000613          	li	a2,0
    8b08:	00000593          	li	a1,0
    8b0c:	00040513          	mv	a0,s0
    8b10:	965fe0ef          	jal	ra,7474 <tcp_output_alloc_header_common>
    8b14:	00050413          	mv	s0,a0
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
    8b18:	02050663          	beqz	a0,8b44 <tcp_rst+0xa8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
    8b1c:	00000693          	li	a3,0
    8b20:	00000613          	li	a2,0
    8b24:	00050593          	mv	a1,a0
    8b28:	00098513          	mv	a0,s3
    8b2c:	ac5fe0ef          	jal	ra,75f0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
    8b30:	00090693          	mv	a3,s2
    8b34:	00048613          	mv	a2,s1
    8b38:	00040593          	mv	a1,s0
    8b3c:	00098513          	mv	a0,s3
    8b40:	e29fe0ef          	jal	ra,7968 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
    8b44:	01c12083          	lw	ra,28(sp)
    8b48:	01812403          	lw	s0,24(sp)
    8b4c:	01412483          	lw	s1,20(sp)
    8b50:	01012903          	lw	s2,16(sp)
    8b54:	00c12983          	lw	s3,12(sp)
    8b58:	00812a03          	lw	s4,8(sp)
    8b5c:	00412a83          	lw	s5,4(sp)
    8b60:	00012b03          	lw	s6,0(sp)
    8b64:	02010113          	addi	sp,sp,32
    8b68:	00008067          	ret
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
    8b6c:	0001d537          	lui	a0,0x1d
    8b70:	60850513          	addi	a0,a0,1544 # 1d608 <lwiperf_txbuf_const+0xe28>
    8b74:	b74fe0ef          	jal	ra,6ee8 <bsp_printf>
    8b78:	f69ff06f          	j	8ae0 <tcp_rst+0x44>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
    8b7c:	0001d537          	lui	a0,0x1d
    8b80:	62450513          	addi	a0,a0,1572 # 1d624 <lwiperf_txbuf_const+0xe44>
    8b84:	b64fe0ef          	jal	ra,6ee8 <bsp_printf>
    8b88:	f5dff06f          	j	8ae4 <tcp_rst+0x48>

00008b8c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
    8b8c:	ff010113          	addi	sp,sp,-16
    8b90:	00112623          	sw	ra,12(sp)
    8b94:	00812423          	sw	s0,8(sp)
    8b98:	00912223          	sw	s1,4(sp)
    8b9c:	00050413          	mv	s0,a0
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
    8ba0:	06050a63          	beqz	a0,8c14 <tcp_send_empty_ack+0x88>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
    8ba4:	05442503          	lw	a0,84(s0)
    8ba8:	0e9010ef          	jal	ra,a490 <lwip_htonl>
    8bac:	00050693          	mv	a3,a0
    8bb0:	00000613          	li	a2,0
    8bb4:	00000593          	li	a1,0
    8bb8:	00040513          	mv	a0,s0
    8bbc:	a9dfe0ef          	jal	ra,7658 <tcp_output_alloc_header>
    8bc0:	00050493          	mv	s1,a0
  if (p == NULL) {
    8bc4:	06050063          	beqz	a0,8c24 <tcp_send_empty_ack+0x98>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
    8bc8:	00000693          	li	a3,0
    8bcc:	00000613          	li	a2,0
    8bd0:	00050593          	mv	a1,a0
    8bd4:	00040513          	mv	a0,s0
    8bd8:	a19fe0ef          	jal	ra,75f0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
    8bdc:	00440693          	addi	a3,s0,4
    8be0:	00040613          	mv	a2,s0
    8be4:	00048593          	mv	a1,s1
    8be8:	00040513          	mv	a0,s0
    8bec:	d7dfe0ef          	jal	ra,7968 <tcp_output_control_segment>
  if (err != ERR_OK) {
    8bf0:	04050463          	beqz	a0,8c38 <tcp_send_empty_ack+0xac>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    8bf4:	01e45783          	lhu	a5,30(s0)
    8bf8:	0037e793          	ori	a5,a5,3
    8bfc:	00f41f23          	sh	a5,30(s0)
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
    8c00:	00c12083          	lw	ra,12(sp)
    8c04:	00812403          	lw	s0,8(sp)
    8c08:	00412483          	lw	s1,4(sp)
    8c0c:	01010113          	addi	sp,sp,16
    8c10:	00008067          	ret
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
    8c14:	0001d537          	lui	a0,0x1d
    8c18:	64050513          	addi	a0,a0,1600 # 1d640 <lwiperf_txbuf_const+0xe60>
    8c1c:	accfe0ef          	jal	ra,6ee8 <bsp_printf>
    8c20:	f85ff06f          	j	8ba4 <tcp_send_empty_ack+0x18>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    8c24:	01e45783          	lhu	a5,30(s0)
    8c28:	0037e793          	ori	a5,a5,3
    8c2c:	00f41f23          	sh	a5,30(s0)
    return ERR_BUF;
    8c30:	ffe00513          	li	a0,-2
    8c34:	fcdff06f          	j	8c00 <tcp_send_empty_ack+0x74>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    8c38:	01e45783          	lhu	a5,30(s0)
    8c3c:	ffc7f793          	andi	a5,a5,-4
    8c40:	00f41f23          	sh	a5,30(s0)
    8c44:	fbdff06f          	j	8c00 <tcp_send_empty_ack+0x74>

00008c48 <tcp_output>:
{
    8c48:	fe010113          	addi	sp,sp,-32
    8c4c:	00112e23          	sw	ra,28(sp)
    8c50:	00812c23          	sw	s0,24(sp)
    8c54:	00912a23          	sw	s1,20(sp)
    8c58:	01212823          	sw	s2,16(sp)
    8c5c:	01312623          	sw	s3,12(sp)
    8c60:	01412423          	sw	s4,8(sp)
    8c64:	01512223          	sw	s5,4(sp)
    8c68:	01612023          	sw	s6,0(sp)
    8c6c:	00050493          	mv	s1,a0
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
    8c70:	0c050e63          	beqz	a0,8d4c <tcp_output+0x104>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
    8c74:	0144a703          	lw	a4,20(s1)
    8c78:	00100793          	li	a5,1
    8c7c:	0ef70063          	beq	a4,a5,8d5c <tcp_output+0x114>
  if (tcp_input_pcb == pcb) {
    8c80:	000227b7          	lui	a5,0x22
    8c84:	ee07a783          	lw	a5,-288(a5) # 21ee0 <tcp_input_pcb>
    8c88:	4a978e63          	beq	a5,s1,9144 <tcp_output+0x4fc>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
    8c8c:	04c4d783          	lhu	a5,76(s1)
    8c90:	0644d703          	lhu	a4,100(s1)
    8c94:	00078913          	mv	s2,a5
    8c98:	00f77463          	bgeu	a4,a5,8ca0 <tcp_output+0x58>
    8c9c:	00070913          	mv	s2,a4
    8ca0:	01091913          	slli	s2,s2,0x10
    8ca4:	01095913          	srli	s2,s2,0x10
    8ca8:	00090a93          	mv	s5,s2
  seg = pcb->unsent;
    8cac:	0704a403          	lw	s0,112(s1)
  if (seg == NULL) {
    8cb0:	0a040e63          	beqz	s0,8d6c <tcp_output+0x124>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
    8cb4:	00448613          	addi	a2,s1,4
    8cb8:	00048593          	mv	a1,s1
    8cbc:	00048513          	mv	a0,s1
    8cc0:	a29fe0ef          	jal	ra,76e8 <tcp_route>
    8cc4:	00050a13          	mv	s4,a0
  if (netif == NULL) {
    8cc8:	48050263          	beqz	a0,914c <tcp_output+0x504>
  if (ip_addr_isany(&pcb->local_ip)) {
    8ccc:	00048663          	beqz	s1,8cd8 <tcp_output+0x90>
    8cd0:	0004a783          	lw	a5,0(s1)
    8cd4:	00079a63          	bnez	a5,8ce8 <tcp_output+0xa0>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
    8cd8:	004a0793          	addi	a5,s4,4
    if (local_ip == NULL) {
    8cdc:	46078c63          	beqz	a5,9154 <tcp_output+0x50c>
    ip_addr_copy(pcb->local_ip, *local_ip);
    8ce0:	004a2783          	lw	a5,4(s4)
    8ce4:	00f4a023          	sw	a5,0(s1)
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
    8ce8:	00c42703          	lw	a4,12(s0)
    8cec:	00474783          	lbu	a5,4(a4)
    8cf0:	00574503          	lbu	a0,5(a4)
    8cf4:	00851513          	slli	a0,a0,0x8
    8cf8:	00f56533          	or	a0,a0,a5
    8cfc:	00674783          	lbu	a5,6(a4)
    8d00:	01079793          	slli	a5,a5,0x10
    8d04:	00a7e7b3          	or	a5,a5,a0
    8d08:	00774503          	lbu	a0,7(a4)
    8d0c:	01851513          	slli	a0,a0,0x18
    8d10:	00f56533          	or	a0,a0,a5
    8d14:	77c010ef          	jal	ra,a490 <lwip_htonl>
    8d18:	0484a783          	lw	a5,72(s1)
    8d1c:	40f50533          	sub	a0,a0,a5
    8d20:	00845783          	lhu	a5,8(s0)
    8d24:	00f50533          	add	a0,a0,a5
    8d28:	0aaafc63          	bgeu	s5,a0,8de0 <tcp_output+0x198>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
    8d2c:	0644d783          	lhu	a5,100(s1)
    8d30:	08f90663          	beq	s2,a5,8dbc <tcp_output+0x174>
    if (pcb->flags & TF_ACK_NOW) {
    8d34:	01e4d783          	lhu	a5,30(s1)
    8d38:	0027f793          	andi	a5,a5,2
    8d3c:	02078e63          	beqz	a5,8d78 <tcp_output+0x130>
      return tcp_send_empty_ack(pcb);
    8d40:	00048513          	mv	a0,s1
    8d44:	e49ff0ef          	jal	ra,8b8c <tcp_send_empty_ack>
    8d48:	0400006f          	j	8d88 <tcp_output+0x140>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
    8d4c:	0001d537          	lui	a0,0x1d
    8d50:	66050513          	addi	a0,a0,1632 # 1d660 <lwiperf_txbuf_const+0xe80>
    8d54:	994fe0ef          	jal	ra,6ee8 <bsp_printf>
    8d58:	f1dff06f          	j	8c74 <tcp_output+0x2c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
    8d5c:	0001d537          	lui	a0,0x1d
    8d60:	67850513          	addi	a0,a0,1656 # 1d678 <lwiperf_txbuf_const+0xe98>
    8d64:	984fe0ef          	jal	ra,6ee8 <bsp_printf>
    8d68:	f19ff06f          	j	8c80 <tcp_output+0x38>
    if (pcb->flags & TF_ACK_NOW) {
    8d6c:	01e4d783          	lhu	a5,30(s1)
    8d70:	0027f793          	andi	a5,a5,2
    8d74:	02079e63          	bnez	a5,8db0 <tcp_output+0x168>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
    8d78:	01e4d783          	lhu	a5,30(s1)
    8d7c:	f7f7f793          	andi	a5,a5,-129
    8d80:	00f49f23          	sh	a5,30(s1)
  return ERR_OK;
    8d84:	00000513          	li	a0,0
}
    8d88:	01c12083          	lw	ra,28(sp)
    8d8c:	01812403          	lw	s0,24(sp)
    8d90:	01412483          	lw	s1,20(sp)
    8d94:	01012903          	lw	s2,16(sp)
    8d98:	00c12983          	lw	s3,12(sp)
    8d9c:	00812a03          	lw	s4,8(sp)
    8da0:	00412a83          	lw	s5,4(sp)
    8da4:	00012b03          	lw	s6,0(sp)
    8da8:	02010113          	addi	sp,sp,32
    8dac:	00008067          	ret
      return tcp_send_empty_ack(pcb);
    8db0:	00048513          	mv	a0,s1
    8db4:	dd9ff0ef          	jal	ra,8b8c <tcp_send_empty_ack>
    8db8:	fd1ff06f          	j	8d88 <tcp_output+0x140>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
    8dbc:	0744a783          	lw	a5,116(s1)
    8dc0:	f6079ae3          	bnez	a5,8d34 <tcp_output+0xec>
    8dc4:	09d4c783          	lbu	a5,157(s1)
    8dc8:	f60796e3          	bnez	a5,8d34 <tcp_output+0xec>
      pcb->persist_cnt = 0;
    8dcc:	08048e23          	sb	zero,156(s1)
      pcb->persist_backoff = 1;
    8dd0:	00100793          	li	a5,1
    8dd4:	08f48ea3          	sb	a5,157(s1)
      pcb->persist_probe = 0;
    8dd8:	08048f23          	sb	zero,158(s1)
    8ddc:	f59ff06f          	j	8d34 <tcp_output+0xec>
  pcb->persist_backoff = 0;
    8de0:	08048ea3          	sb	zero,157(s1)
  useg = pcb->unacked;
    8de4:	0744a983          	lw	s3,116(s1)
  if (useg != NULL) {
    8de8:	00099663          	bnez	s3,8df4 <tcp_output+0x1ac>
    8dec:	1680006f          	j	8f54 <tcp_output+0x30c>
    for (; useg->next != NULL; useg = useg->next);
    8df0:	00078993          	mv	s3,a5
    8df4:	0009a783          	lw	a5,0(s3)
    8df8:	fe079ce3          	bnez	a5,8df0 <tcp_output+0x1a8>
    8dfc:	1580006f          	j	8f54 <tcp_output+0x30c>
    LWIP_ASSERT("RST not expected here!",
    8e00:	0001d537          	lui	a0,0x1d
    8e04:	6a050513          	addi	a0,a0,1696 # 1d6a0 <lwiperf_txbuf_const+0xec0>
    8e08:	8e0fe0ef          	jal	ra,6ee8 <bsp_printf>
    8e0c:	1b00006f          	j	8fbc <tcp_output+0x374>
    if ((tcp_do_output_nagle(pcb) == 0) &&
    8e10:	00875683          	lhu	a3,8(a4)
    8e14:	0364d703          	lhu	a4,54(s1)
    8e18:	1ce6f463          	bgeu	a3,a4,8fe0 <tcp_output+0x398>
    8e1c:	0684d703          	lhu	a4,104(s1)
    8e20:	1c070063          	beqz	a4,8fe0 <tcp_output+0x398>
    8e24:	06a4d683          	lhu	a3,106(s1)
    8e28:	03f00713          	li	a4,63
    8e2c:	1ad76a63          	bltu	a4,a3,8fe0 <tcp_output+0x398>
    8e30:	0a07f793          	andi	a5,a5,160
    8e34:	1a079663          	bnez	a5,8fe0 <tcp_output+0x398>
  if (pcb->unsent == NULL) {
    8e38:	0704a783          	lw	a5,112(s1)
    8e3c:	f2079ee3          	bnez	a5,8d78 <tcp_output+0x130>
    pcb->unsent_oversize = 0;
    8e40:	06049623          	sh	zero,108(s1)
    8e44:	f35ff06f          	j	8d78 <tcp_output+0x130>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
    8e48:	00c42783          	lw	a5,12(s0)
    8e4c:	00c7c503          	lbu	a0,12(a5)
    8e50:	00d7c903          	lbu	s2,13(a5)
    8e54:	00891913          	slli	s2,s2,0x8
    8e58:	00a96933          	or	s2,s2,a0
    8e5c:	01000513          	li	a0,16
    8e60:	618010ef          	jal	ra,a478 <lwip_htons>
    8e64:	00c42783          	lw	a5,12(s0)
    8e68:	00a96533          	or	a0,s2,a0
    8e6c:	01051513          	slli	a0,a0,0x10
    8e70:	01055513          	srli	a0,a0,0x10
    8e74:	00a78623          	sb	a0,12(a5)
    8e78:	00855513          	srli	a0,a0,0x8
    8e7c:	00a786a3          	sb	a0,13(a5)
    8e80:	16c0006f          	j	8fec <tcp_output+0x3a4>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
    8e84:	01e4d783          	lhu	a5,30(s1)
    8e88:	0807e793          	ori	a5,a5,128
    8e8c:	00f49f23          	sh	a5,30(s1)
      return err;
    8e90:	ef9ff06f          	j	8d88 <tcp_output+0x140>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    8e94:	00000513          	li	a0,0
    8e98:	1e40006f          	j	907c <tcp_output+0x434>
      pcb->snd_nxt = snd_nxt;
    8e9c:	04a4aa23          	sw	a0,84(s1)
    8ea0:	1f00006f          	j	9090 <tcp_output+0x448>
    if (TCP_TCPLEN(seg) > 0) {
    8ea4:	00000793          	li	a5,0
    8ea8:	2100006f          	j	90b8 <tcp_output+0x470>
        pcb->unacked = seg;
    8eac:	0684aa23          	sw	s0,116(s1)
        useg = seg;
    8eb0:	00040993          	mv	s3,s0
    8eb4:	09c0006f          	j	8f50 <tcp_output+0x308>
          struct tcp_seg **cur_seg = &(pcb->unacked);
    8eb8:	07448b13          	addi	s6,s1,116
          while (*cur_seg &&
    8ebc:	0080006f          	j	8ec4 <tcp_output+0x27c>
            cur_seg = &((*cur_seg)->next );
    8ec0:	000b2b03          	lw	s6,0(s6)
          while (*cur_seg &&
    8ec4:	000b2783          	lw	a5,0(s6)
    8ec8:	06078863          	beqz	a5,8f38 <tcp_output+0x2f0>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    8ecc:	00c7a703          	lw	a4,12(a5)
    8ed0:	00474783          	lbu	a5,4(a4)
    8ed4:	00574503          	lbu	a0,5(a4)
    8ed8:	00851513          	slli	a0,a0,0x8
    8edc:	00f56533          	or	a0,a0,a5
    8ee0:	00674783          	lbu	a5,6(a4)
    8ee4:	01079793          	slli	a5,a5,0x10
    8ee8:	00a7e7b3          	or	a5,a5,a0
    8eec:	00774503          	lbu	a0,7(a4)
    8ef0:	01851513          	slli	a0,a0,0x18
    8ef4:	00f56533          	or	a0,a0,a5
    8ef8:	598010ef          	jal	ra,a490 <lwip_htonl>
    8efc:	00050913          	mv	s2,a0
    8f00:	00c42703          	lw	a4,12(s0)
    8f04:	00474783          	lbu	a5,4(a4)
    8f08:	00574503          	lbu	a0,5(a4)
    8f0c:	00851513          	slli	a0,a0,0x8
    8f10:	00f56533          	or	a0,a0,a5
    8f14:	00674783          	lbu	a5,6(a4)
    8f18:	01079793          	slli	a5,a5,0x10
    8f1c:	00a7e7b3          	or	a5,a5,a0
    8f20:	00774503          	lbu	a0,7(a4)
    8f24:	01851513          	slli	a0,a0,0x18
    8f28:	00f56533          	or	a0,a0,a5
    8f2c:	564010ef          	jal	ra,a490 <lwip_htonl>
    8f30:	40a90533          	sub	a0,s2,a0
          while (*cur_seg &&
    8f34:	f80546e3          	bltz	a0,8ec0 <tcp_output+0x278>
          seg->next = (*cur_seg);
    8f38:	000b2783          	lw	a5,0(s6)
    8f3c:	00f42023          	sw	a5,0(s0)
          (*cur_seg) = seg;
    8f40:	008b2023          	sw	s0,0(s6)
    8f44:	00c0006f          	j	8f50 <tcp_output+0x308>
      tcp_seg_free(seg);
    8f48:	00040513          	mv	a0,s0
    8f4c:	6c8090ef          	jal	ra,12614 <tcp_seg_free>
    seg = pcb->unsent;
    8f50:	0704a403          	lw	s0,112(s1)
  while (seg != NULL &&
    8f54:	ee0402e3          	beqz	s0,8e38 <tcp_output+0x1f0>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    8f58:	00c42703          	lw	a4,12(s0)
    8f5c:	00474783          	lbu	a5,4(a4)
    8f60:	00574503          	lbu	a0,5(a4)
    8f64:	00851513          	slli	a0,a0,0x8
    8f68:	00f56533          	or	a0,a0,a5
    8f6c:	00674783          	lbu	a5,6(a4)
    8f70:	01079793          	slli	a5,a5,0x10
    8f74:	00a7e7b3          	or	a5,a5,a0
    8f78:	00774503          	lbu	a0,7(a4)
    8f7c:	01851513          	slli	a0,a0,0x18
    8f80:	00f56533          	or	a0,a0,a5
    8f84:	50c010ef          	jal	ra,a490 <lwip_htonl>
    8f88:	0484a783          	lw	a5,72(s1)
    8f8c:	40f50533          	sub	a0,a0,a5
    8f90:	00845783          	lhu	a5,8(s0)
    8f94:	00f50533          	add	a0,a0,a5
  while (seg != NULL &&
    8f98:	eaaae0e3          	bltu	s5,a0,8e38 <tcp_output+0x1f0>
    LWIP_ASSERT("RST not expected here!",
    8f9c:	00c42783          	lw	a5,12(s0)
    8fa0:	00c7c503          	lbu	a0,12(a5)
    8fa4:	00d7c783          	lbu	a5,13(a5)
    8fa8:	00879793          	slli	a5,a5,0x8
    8fac:	00a7e533          	or	a0,a5,a0
    8fb0:	4c8010ef          	jal	ra,a478 <lwip_htons>
    8fb4:	00457513          	andi	a0,a0,4
    8fb8:	e40514e3          	bnez	a0,8e00 <tcp_output+0x1b8>
    if ((tcp_do_output_nagle(pcb) == 0) &&
    8fbc:	0744a783          	lw	a5,116(s1)
    8fc0:	02078063          	beqz	a5,8fe0 <tcp_output+0x398>
    8fc4:	01e4d783          	lhu	a5,30(s1)
    8fc8:	0447f713          	andi	a4,a5,68
    8fcc:	00071a63          	bnez	a4,8fe0 <tcp_output+0x398>
    8fd0:	0704a703          	lw	a4,112(s1)
    8fd4:	e40704e3          	beqz	a4,8e1c <tcp_output+0x1d4>
    8fd8:	00072683          	lw	a3,0(a4)
    8fdc:	e2068ae3          	beqz	a3,8e10 <tcp_output+0x1c8>
    if (pcb->state != SYN_SENT) {
    8fe0:	0144a703          	lw	a4,20(s1)
    8fe4:	00200793          	li	a5,2
    8fe8:	e6f710e3          	bne	a4,a5,8e48 <tcp_output+0x200>
    err = tcp_output_segment(seg, pcb, netif);
    8fec:	000a0613          	mv	a2,s4
    8ff0:	00048593          	mv	a1,s1
    8ff4:	00040513          	mv	a0,s0
    8ff8:	f20fe0ef          	jal	ra,7718 <tcp_output_segment>
    if (err != ERR_OK) {
    8ffc:	e80514e3          	bnez	a0,8e84 <tcp_output+0x23c>
    pcb->unsent = seg->next;
    9000:	00042783          	lw	a5,0(s0)
    9004:	06f4a823          	sw	a5,112(s1)
    if (pcb->state != SYN_SENT) {
    9008:	0144a703          	lw	a4,20(s1)
    900c:	00200793          	li	a5,2
    9010:	00f70863          	beq	a4,a5,9020 <tcp_output+0x3d8>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    9014:	01e4d783          	lhu	a5,30(s1)
    9018:	ffc7f793          	andi	a5,a5,-4
    901c:	00f49f23          	sh	a5,30(s1)
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    9020:	00c42703          	lw	a4,12(s0)
    9024:	00474783          	lbu	a5,4(a4)
    9028:	00574503          	lbu	a0,5(a4)
    902c:	00851513          	slli	a0,a0,0x8
    9030:	00f56533          	or	a0,a0,a5
    9034:	00674783          	lbu	a5,6(a4)
    9038:	01079793          	slli	a5,a5,0x10
    903c:	00a7e7b3          	or	a5,a5,a0
    9040:	00774503          	lbu	a0,7(a4)
    9044:	01851513          	slli	a0,a0,0x18
    9048:	00f56533          	or	a0,a0,a5
    904c:	444010ef          	jal	ra,a490 <lwip_htonl>
    9050:	00050913          	mv	s2,a0
    9054:	00845b03          	lhu	s6,8(s0)
    9058:	00c42783          	lw	a5,12(s0)
    905c:	00c7c503          	lbu	a0,12(a5)
    9060:	00d7c783          	lbu	a5,13(a5)
    9064:	00879793          	slli	a5,a5,0x8
    9068:	00a7e533          	or	a0,a5,a0
    906c:	40c010ef          	jal	ra,a478 <lwip_htons>
    9070:	00357513          	andi	a0,a0,3
    9074:	e20500e3          	beqz	a0,8e94 <tcp_output+0x24c>
    9078:	00100513          	li	a0,1
    907c:	00ab0533          	add	a0,s6,a0
    9080:	00a90533          	add	a0,s2,a0
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    9084:	0544a783          	lw	a5,84(s1)
    9088:	40a787b3          	sub	a5,a5,a0
    908c:	e007c8e3          	bltz	a5,8e9c <tcp_output+0x254>
    if (TCP_TCPLEN(seg) > 0) {
    9090:	00845903          	lhu	s2,8(s0)
    9094:	00c42783          	lw	a5,12(s0)
    9098:	00c7c503          	lbu	a0,12(a5)
    909c:	00d7c783          	lbu	a5,13(a5)
    90a0:	00879793          	slli	a5,a5,0x8
    90a4:	00a7e533          	or	a0,a5,a0
    90a8:	3d0010ef          	jal	ra,a478 <lwip_htons>
    90ac:	00357513          	andi	a0,a0,3
    90b0:	de050ae3          	beqz	a0,8ea4 <tcp_output+0x25c>
    90b4:	00100793          	li	a5,1
    90b8:	00f90933          	add	s2,s2,a5
    90bc:	e80906e3          	beqz	s2,8f48 <tcp_output+0x300>
      seg->next = NULL;
    90c0:	00042023          	sw	zero,0(s0)
      if (pcb->unacked == NULL) {
    90c4:	0744a783          	lw	a5,116(s1)
    90c8:	de0782e3          	beqz	a5,8eac <tcp_output+0x264>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
    90cc:	00c42703          	lw	a4,12(s0)
    90d0:	00474783          	lbu	a5,4(a4)
    90d4:	00574503          	lbu	a0,5(a4)
    90d8:	00851513          	slli	a0,a0,0x8
    90dc:	00f56533          	or	a0,a0,a5
    90e0:	00674783          	lbu	a5,6(a4)
    90e4:	01079793          	slli	a5,a5,0x10
    90e8:	00a7e7b3          	or	a5,a5,a0
    90ec:	00774503          	lbu	a0,7(a4)
    90f0:	01851513          	slli	a0,a0,0x18
    90f4:	00f56533          	or	a0,a0,a5
    90f8:	398010ef          	jal	ra,a490 <lwip_htonl>
    90fc:	00050913          	mv	s2,a0
    9100:	00c9a703          	lw	a4,12(s3)
    9104:	00474783          	lbu	a5,4(a4)
    9108:	00574503          	lbu	a0,5(a4)
    910c:	00851513          	slli	a0,a0,0x8
    9110:	00f56533          	or	a0,a0,a5
    9114:	00674783          	lbu	a5,6(a4)
    9118:	01079793          	slli	a5,a5,0x10
    911c:	00a7e7b3          	or	a5,a5,a0
    9120:	00774503          	lbu	a0,7(a4)
    9124:	01851513          	slli	a0,a0,0x18
    9128:	00f56533          	or	a0,a0,a5
    912c:	364010ef          	jal	ra,a490 <lwip_htonl>
    9130:	40a90533          	sub	a0,s2,a0
    9134:	d80542e3          	bltz	a0,8eb8 <tcp_output+0x270>
          useg->next = seg;
    9138:	0089a023          	sw	s0,0(s3)
          useg = useg->next;
    913c:	00040993          	mv	s3,s0
    9140:	e11ff06f          	j	8f50 <tcp_output+0x308>
    return ERR_OK;
    9144:	00000513          	li	a0,0
    9148:	c41ff06f          	j	8d88 <tcp_output+0x140>
    return ERR_RTE;
    914c:	ffc00513          	li	a0,-4
    9150:	c39ff06f          	j	8d88 <tcp_output+0x140>
      return ERR_RTE;
    9154:	ffc00513          	li	a0,-4
    9158:	c31ff06f          	j	8d88 <tcp_output+0x140>

0000915c <tcp_rexmit_rto_commit>:
{
    915c:	ff010113          	addi	sp,sp,-16
    9160:	00112623          	sw	ra,12(sp)
    9164:	00812423          	sw	s0,8(sp)
    9168:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
    916c:	02050863          	beqz	a0,919c <tcp_rexmit_rto_commit+0x40>
  if (pcb->nrtx < 0xFF) {
    9170:	04644783          	lbu	a5,70(s0)
    9174:	0ff00713          	li	a4,255
    9178:	00e78663          	beq	a5,a4,9184 <tcp_rexmit_rto_commit+0x28>
    ++pcb->nrtx;
    917c:	00178793          	addi	a5,a5,1
    9180:	04f40323          	sb	a5,70(s0)
  tcp_output(pcb);
    9184:	00040513          	mv	a0,s0
    9188:	ac1ff0ef          	jal	ra,8c48 <tcp_output>
}
    918c:	00c12083          	lw	ra,12(sp)
    9190:	00812403          	lw	s0,8(sp)
    9194:	01010113          	addi	sp,sp,16
    9198:	00008067          	ret
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
    919c:	0001d537          	lui	a0,0x1d
    91a0:	6b850513          	addi	a0,a0,1720 # 1d6b8 <lwiperf_txbuf_const+0xed8>
    91a4:	d45fd0ef          	jal	ra,6ee8 <bsp_printf>
    91a8:	fc9ff06f          	j	9170 <tcp_rexmit_rto_commit+0x14>

000091ac <tcp_rexmit_rto>:
{
    91ac:	ff010113          	addi	sp,sp,-16
    91b0:	00112623          	sw	ra,12(sp)
    91b4:	00812423          	sw	s0,8(sp)
    91b8:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
    91bc:	02050063          	beqz	a0,91dc <tcp_rexmit_rto+0x30>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
    91c0:	00040513          	mv	a0,s0
    91c4:	dc4ff0ef          	jal	ra,8788 <tcp_rexmit_rto_prepare>
    91c8:	02050263          	beqz	a0,91ec <tcp_rexmit_rto+0x40>
}
    91cc:	00c12083          	lw	ra,12(sp)
    91d0:	00812403          	lw	s0,8(sp)
    91d4:	01010113          	addi	sp,sp,16
    91d8:	00008067          	ret
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
    91dc:	0001d537          	lui	a0,0x1d
    91e0:	6dc50513          	addi	a0,a0,1756 # 1d6dc <lwiperf_txbuf_const+0xefc>
    91e4:	d05fd0ef          	jal	ra,6ee8 <bsp_printf>
    91e8:	fd9ff06f          	j	91c0 <tcp_rexmit_rto+0x14>
    tcp_rexmit_rto_commit(pcb);
    91ec:	00040513          	mv	a0,s0
    91f0:	f6dff0ef          	jal	ra,915c <tcp_rexmit_rto_commit>
}
    91f4:	fd9ff06f          	j	91cc <tcp_rexmit_rto+0x20>

000091f8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
    91f8:	ff010113          	addi	sp,sp,-16
    91fc:	00112623          	sw	ra,12(sp)
    9200:	00812423          	sw	s0,8(sp)
    9204:	00912223          	sw	s1,4(sp)
    9208:	00050413          	mv	s0,a0
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
    920c:	06050463          	beqz	a0,9274 <tcp_keepalive+0x7c>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
    9210:	05442503          	lw	a0,84(s0)
    9214:	fff50513          	addi	a0,a0,-1
    9218:	278010ef          	jal	ra,a490 <lwip_htonl>
    921c:	00050693          	mv	a3,a0
    9220:	00000613          	li	a2,0
    9224:	00000593          	li	a1,0
    9228:	00040513          	mv	a0,s0
    922c:	c2cfe0ef          	jal	ra,7658 <tcp_output_alloc_header>
    9230:	00050493          	mv	s1,a0
  if (p == NULL) {
    9234:	04050863          	beqz	a0,9284 <tcp_keepalive+0x8c>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
    9238:	00000693          	li	a3,0
    923c:	00000613          	li	a2,0
    9240:	00050593          	mv	a1,a0
    9244:	00040513          	mv	a0,s0
    9248:	ba8fe0ef          	jal	ra,75f0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
    924c:	00440693          	addi	a3,s0,4
    9250:	00040613          	mv	a2,s0
    9254:	00048593          	mv	a1,s1
    9258:	00040513          	mv	a0,s0
    925c:	f0cfe0ef          	jal	ra,7968 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
    9260:	00c12083          	lw	ra,12(sp)
    9264:	00812403          	lw	s0,8(sp)
    9268:	00412483          	lw	s1,4(sp)
    926c:	01010113          	addi	sp,sp,16
    9270:	00008067          	ret
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
    9274:	0001d537          	lui	a0,0x1d
    9278:	6f850513          	addi	a0,a0,1784 # 1d6f8 <lwiperf_txbuf_const+0xf18>
    927c:	c6dfd0ef          	jal	ra,6ee8 <bsp_printf>
    9280:	f91ff06f          	j	9210 <tcp_keepalive+0x18>
    return ERR_MEM;
    9284:	fff00513          	li	a0,-1
    9288:	fd9ff06f          	j	9260 <tcp_keepalive+0x68>

0000928c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
    928c:	fe010113          	addi	sp,sp,-32
    9290:	00112e23          	sw	ra,28(sp)
    9294:	00812c23          	sw	s0,24(sp)
    9298:	00912a23          	sw	s1,20(sp)
    929c:	01212823          	sw	s2,16(sp)
    92a0:	01312623          	sw	s3,12(sp)
    92a4:	01412423          	sw	s4,8(sp)
    92a8:	00050413          	mv	s0,a0
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
    92ac:	04050863          	beqz	a0,92fc <tcp_zero_window_probe+0x70>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
    92b0:	07042903          	lw	s2,112(s0)
  if (seg == NULL) {
    92b4:	1a090c63          	beqz	s2,946c <tcp_zero_window_probe+0x1e0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
    92b8:	09e44783          	lbu	a5,158(s0)
    92bc:	0ff00713          	li	a4,255
    92c0:	00e78663          	beq	a5,a4,92cc <tcp_zero_window_probe+0x40>
    ++pcb->persist_probe;
    92c4:	00178793          	addi	a5,a5,1
    92c8:	08f40f23          	sb	a5,158(s0)
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
    92cc:	00c92783          	lw	a5,12(s2)
    92d0:	00c7c503          	lbu	a0,12(a5)
    92d4:	00d7c783          	lbu	a5,13(a5)
    92d8:	00879793          	slli	a5,a5,0x8
    92dc:	00a7e533          	or	a0,a5,a0
    92e0:	198010ef          	jal	ra,a478 <lwip_htons>
    92e4:	00157513          	andi	a0,a0,1
    92e8:	02050263          	beqz	a0,930c <tcp_zero_window_probe+0x80>
    92ec:	00895783          	lhu	a5,8(s2)
    92f0:	14078263          	beqz	a5,9434 <tcp_zero_window_probe+0x1a8>
    92f4:	00000493          	li	s1,0
    92f8:	0180006f          	j	9310 <tcp_zero_window_probe+0x84>
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
    92fc:	0001d537          	lui	a0,0x1d
    9300:	71450513          	addi	a0,a0,1812 # 1d714 <lwiperf_txbuf_const+0xf34>
    9304:	be5fd0ef          	jal	ra,6ee8 <bsp_printf>
    9308:	fa9ff06f          	j	92b0 <tcp_zero_window_probe+0x24>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
    930c:	00000493          	li	s1,0
    9310:	0ff4f493          	andi	s1,s1,255
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
    9314:	00c92703          	lw	a4,12(s2)
    9318:	00474783          	lbu	a5,4(a4)
    931c:	00574683          	lbu	a3,5(a4)
    9320:	00869693          	slli	a3,a3,0x8
    9324:	00f6e6b3          	or	a3,a3,a5
    9328:	00674783          	lbu	a5,6(a4)
    932c:	01079793          	slli	a5,a5,0x10
    9330:	00d7e7b3          	or	a5,a5,a3
    9334:	00774683          	lbu	a3,7(a4)
    9338:	01869693          	slli	a3,a3,0x18
    933c:	00f6e6b3          	or	a3,a3,a5
    9340:	0014c613          	xori	a2,s1,1
    9344:	00000593          	li	a1,0
    9348:	00040513          	mv	a0,s0
    934c:	b0cfe0ef          	jal	ra,7658 <tcp_output_alloc_header>
    9350:	00050993          	mv	s3,a0
  if (p == NULL) {
    9354:	12050063          	beqz	a0,9474 <tcp_zero_window_probe+0x1e8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
    9358:	00452a03          	lw	s4,4(a0)

  if (is_fin) {
    935c:	0e048063          	beqz	s1,943c <tcp_zero_window_probe+0x1b0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
    9360:	00ca4503          	lbu	a0,12(s4)
    9364:	00da4483          	lbu	s1,13(s4)
    9368:	00849493          	slli	s1,s1,0x8
    936c:	00a4e4b3          	or	s1,s1,a0
    9370:	01049493          	slli	s1,s1,0x10
    9374:	4104d493          	srai	s1,s1,0x10
    9378:	ffffc537          	lui	a0,0xffffc
    937c:	0ff50513          	addi	a0,a0,255 # ffffc0ff <__freertos_irq_stack_top+0xfffd71cf>
    9380:	00a4f4b3          	and	s1,s1,a0
    9384:	01100513          	li	a0,17
    9388:	0f0010ef          	jal	ra,a478 <lwip_htons>
    938c:	01051513          	slli	a0,a0,0x10
    9390:	41055513          	srai	a0,a0,0x10
    9394:	00a4e533          	or	a0,s1,a0
    9398:	01051513          	slli	a0,a0,0x10
    939c:	01055513          	srli	a0,a0,0x10
    93a0:	00aa0623          	sb	a0,12(s4)
    93a4:	00855513          	srli	a0,a0,0x8
    93a8:	00aa06a3          	sb	a0,13(s4)
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
    93ac:	00c92703          	lw	a4,12(s2)
    93b0:	00474783          	lbu	a5,4(a4)
    93b4:	00574503          	lbu	a0,5(a4)
    93b8:	00851513          	slli	a0,a0,0x8
    93bc:	00f56533          	or	a0,a0,a5
    93c0:	00674783          	lbu	a5,6(a4)
    93c4:	01079793          	slli	a5,a5,0x10
    93c8:	00a7e7b3          	or	a5,a5,a0
    93cc:	00774503          	lbu	a0,7(a4)
    93d0:	01851513          	slli	a0,a0,0x18
    93d4:	00f56533          	or	a0,a0,a5
    93d8:	0b8010ef          	jal	ra,a490 <lwip_htonl>
    93dc:	00150513          	addi	a0,a0,1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    93e0:	05442783          	lw	a5,84(s0)
    93e4:	40a787b3          	sub	a5,a5,a0
    93e8:	0607ce63          	bltz	a5,9464 <tcp_zero_window_probe+0x1d8>
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
    93ec:	00000693          	li	a3,0
    93f0:	00000613          	li	a2,0
    93f4:	00098593          	mv	a1,s3
    93f8:	00040513          	mv	a0,s0
    93fc:	9f4fe0ef          	jal	ra,75f0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
    9400:	00440693          	addi	a3,s0,4
    9404:	00040613          	mv	a2,s0
    9408:	00098593          	mv	a1,s3
    940c:	00040513          	mv	a0,s0
    9410:	d58fe0ef          	jal	ra,7968 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
    9414:	01c12083          	lw	ra,28(sp)
    9418:	01812403          	lw	s0,24(sp)
    941c:	01412483          	lw	s1,20(sp)
    9420:	01012903          	lw	s2,16(sp)
    9424:	00c12983          	lw	s3,12(sp)
    9428:	00812a03          	lw	s4,8(sp)
    942c:	02010113          	addi	sp,sp,32
    9430:	00008067          	ret
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
    9434:	00100493          	li	s1,1
    9438:	ed9ff06f          	j	9310 <tcp_zero_window_probe+0x84>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
    943c:	00492503          	lw	a0,4(s2)
    9440:	00855683          	lhu	a3,8(a0)
    9444:	00895783          	lhu	a5,8(s2)
    9448:	40f686b3          	sub	a3,a3,a5
    944c:	01069693          	slli	a3,a3,0x10
    9450:	0106d693          	srli	a3,a3,0x10
    9454:	00100613          	li	a2,1
    9458:	014a0593          	addi	a1,s4,20
    945c:	7a9030ef          	jal	ra,d404 <pbuf_copy_partial>
    9460:	f4dff06f          	j	93ac <tcp_zero_window_probe+0x120>
    pcb->snd_nxt = snd_nxt;
    9464:	04a42a23          	sw	a0,84(s0)
    9468:	f85ff06f          	j	93ec <tcp_zero_window_probe+0x160>
    return ERR_OK;
    946c:	00000513          	li	a0,0
    9470:	fa5ff06f          	j	9414 <tcp_zero_window_probe+0x188>
    return ERR_MEM;
    9474:	fff00513          	li	a0,-1
    9478:	f9dff06f          	j	9414 <tcp_zero_window_probe+0x188>

0000947c <uart_writeAvailability>:
        return *((volatile u32*) address);
    947c:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    9480:	01055513          	srli	a0,a0,0x10
    }
    9484:	0ff57513          	andi	a0,a0,255
    9488:	00008067          	ret

0000948c <uart_write>:
    static void uart_write(u32 reg, char data){
    948c:	ff010113          	addi	sp,sp,-16
    9490:	00112623          	sw	ra,12(sp)
    9494:	00812423          	sw	s0,8(sp)
    9498:	00912223          	sw	s1,4(sp)
    949c:	00050413          	mv	s0,a0
    94a0:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    94a4:	00040513          	mv	a0,s0
    94a8:	fd5ff0ef          	jal	ra,947c <uart_writeAvailability>
    94ac:	fe050ce3          	beqz	a0,94a4 <uart_write+0x18>
        *((volatile u32*) address) = data;
    94b0:	00942023          	sw	s1,0(s0)
    }
    94b4:	00c12083          	lw	ra,12(sp)
    94b8:	00812403          	lw	s0,8(sp)
    94bc:	00412483          	lw	s1,4(sp)
    94c0:	01010113          	addi	sp,sp,16
    94c4:	00008067          	ret

000094c8 <bsp_printHex>:
    {
    94c8:	ff010113          	addi	sp,sp,-16
    94cc:	00112623          	sw	ra,12(sp)
    94d0:	00812423          	sw	s0,8(sp)
    94d4:	00912223          	sw	s1,4(sp)
    94d8:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    94dc:	01c00413          	li	s0,28
    94e0:	0280006f          	j	9508 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    94e4:	0084d7b3          	srl	a5,s1,s0
    94e8:	00f7f713          	andi	a4,a5,15
    94ec:	0001c7b7          	lui	a5,0x1c
    94f0:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    94f4:	00e787b3          	add	a5,a5,a4
    94f8:	0007c583          	lbu	a1,0(a5)
    94fc:	f8010537          	lui	a0,0xf8010
    9500:	f8dff0ef          	jal	ra,948c <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    9504:	ffc40413          	addi	s0,s0,-4
    9508:	fc045ee3          	bgez	s0,94e4 <bsp_printHex+0x1c>
    }
    950c:	00c12083          	lw	ra,12(sp)
    9510:	00812403          	lw	s0,8(sp)
    9514:	00412483          	lw	s1,4(sp)
    9518:	01010113          	addi	sp,sp,16
    951c:	00008067          	ret

00009520 <bsp_printHex_lower>:
        {
    9520:	ff010113          	addi	sp,sp,-16
    9524:	00112623          	sw	ra,12(sp)
    9528:	00812423          	sw	s0,8(sp)
    952c:	00912223          	sw	s1,4(sp)
    9530:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    9534:	01c00413          	li	s0,28
    9538:	0280006f          	j	9560 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    953c:	0084d7b3          	srl	a5,s1,s0
    9540:	00f7f713          	andi	a4,a5,15
    9544:	0001c7b7          	lui	a5,0x1c
    9548:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    954c:	00e787b3          	add	a5,a5,a4
    9550:	0007c583          	lbu	a1,0(a5)
    9554:	f8010537          	lui	a0,0xf8010
    9558:	f35ff0ef          	jal	ra,948c <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    955c:	ffc40413          	addi	s0,s0,-4
    9560:	fc045ee3          	bgez	s0,953c <bsp_printHex_lower+0x1c>
        }
    9564:	00c12083          	lw	ra,12(sp)
    9568:	00812403          	lw	s0,8(sp)
    956c:	00412483          	lw	s1,4(sp)
    9570:	01010113          	addi	sp,sp,16
    9574:	00008067          	ret

00009578 <bsp_printf_c>:
    {
    9578:	ff010113          	addi	sp,sp,-16
    957c:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    9580:	0ff57593          	andi	a1,a0,255
    9584:	f8010537          	lui	a0,0xf8010
    9588:	f05ff0ef          	jal	ra,948c <uart_write>
    }
    958c:	00c12083          	lw	ra,12(sp)
    9590:	01010113          	addi	sp,sp,16
    9594:	00008067          	ret

00009598 <bsp_printf_s>:
    {
    9598:	ff010113          	addi	sp,sp,-16
    959c:	00112623          	sw	ra,12(sp)
    95a0:	00812423          	sw	s0,8(sp)
    95a4:	00050413          	mv	s0,a0
        while (*p)
    95a8:	00044583          	lbu	a1,0(s0)
    95ac:	00058a63          	beqz	a1,95c0 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    95b0:	00140413          	addi	s0,s0,1
    95b4:	f8010537          	lui	a0,0xf8010
    95b8:	ed5ff0ef          	jal	ra,948c <uart_write>
    95bc:	fedff06f          	j	95a8 <bsp_printf_s+0x10>
    }
    95c0:	00c12083          	lw	ra,12(sp)
    95c4:	00812403          	lw	s0,8(sp)
    95c8:	01010113          	addi	sp,sp,16
    95cc:	00008067          	ret

000095d0 <bsp_printf_d>:
    {
    95d0:	fd010113          	addi	sp,sp,-48
    95d4:	02112623          	sw	ra,44(sp)
    95d8:	02812423          	sw	s0,40(sp)
    95dc:	02912223          	sw	s1,36(sp)
    95e0:	00050493          	mv	s1,a0
        if (val < 0) {
    95e4:	00054663          	bltz	a0,95f0 <bsp_printf_d+0x20>
    {
    95e8:	00010413          	mv	s0,sp
    95ec:	02c0006f          	j	9618 <bsp_printf_d+0x48>
            bsp_printf_c('-');
    95f0:	02d00513          	li	a0,45
    95f4:	f85ff0ef          	jal	ra,9578 <bsp_printf_c>
            val = -val;
    95f8:	409004b3          	neg	s1,s1
    95fc:	fedff06f          	j	95e8 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
    9600:	00a00713          	li	a4,10
    9604:	02e4e7b3          	rem	a5,s1,a4
    9608:	03078793          	addi	a5,a5,48
    960c:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    9610:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    9614:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    9618:	fe0494e3          	bnez	s1,9600 <bsp_printf_d+0x30>
    961c:	00010793          	mv	a5,sp
    9620:	fef400e3          	beq	s0,a5,9600 <bsp_printf_d+0x30>
    9624:	0100006f          	j	9634 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
    9628:	fff40413          	addi	s0,s0,-1
    962c:	00044503          	lbu	a0,0(s0)
    9630:	f49ff0ef          	jal	ra,9578 <bsp_printf_c>
        while (p != buffer)
    9634:	00010793          	mv	a5,sp
    9638:	fef418e3          	bne	s0,a5,9628 <bsp_printf_d+0x58>
    }
    963c:	02c12083          	lw	ra,44(sp)
    9640:	02812403          	lw	s0,40(sp)
    9644:	02412483          	lw	s1,36(sp)
    9648:	03010113          	addi	sp,sp,48
    964c:	00008067          	ret

00009650 <bsp_printf_x>:
    {
    9650:	ff010113          	addi	sp,sp,-16
    9654:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
    9658:	00000713          	li	a4,0
    965c:	00700793          	li	a5,7
    9660:	02e7c063          	blt	a5,a4,9680 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    9664:	00271693          	slli	a3,a4,0x2
    9668:	ff000793          	li	a5,-16
    966c:	00d797b3          	sll	a5,a5,a3
    9670:	00f577b3          	and	a5,a0,a5
    9674:	00078663          	beqz	a5,9680 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    9678:	00170713          	addi	a4,a4,1
    967c:	fe1ff06f          	j	965c <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
    9680:	ea1ff0ef          	jal	ra,9520 <bsp_printHex_lower>
    }
    9684:	00c12083          	lw	ra,12(sp)
    9688:	01010113          	addi	sp,sp,16
    968c:	00008067          	ret

00009690 <bsp_printf_X>:
        {
    9690:	ff010113          	addi	sp,sp,-16
    9694:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
    9698:	00000713          	li	a4,0
    969c:	00700793          	li	a5,7
    96a0:	02e7c063          	blt	a5,a4,96c0 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    96a4:	00271693          	slli	a3,a4,0x2
    96a8:	ff000793          	li	a5,-16
    96ac:	00d797b3          	sll	a5,a5,a3
    96b0:	00f577b3          	and	a5,a0,a5
    96b4:	00078663          	beqz	a5,96c0 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    96b8:	00170713          	addi	a4,a4,1
    96bc:	fe1ff06f          	j	969c <bsp_printf_X+0xc>
            bsp_printHex(val);
    96c0:	e09ff0ef          	jal	ra,94c8 <bsp_printHex>
        }
    96c4:	00c12083          	lw	ra,12(sp)
    96c8:	01010113          	addi	sp,sp,16
    96cc:	00008067          	ret

000096d0 <altcp_tcp_setup_callbacks>:
  }
}

static void
altcp_tcp_setup_callbacks(struct altcp_pcb *conn, struct tcp_pcb *tpcb)
{
    96d0:	ff010113          	addi	sp,sp,-16
    96d4:	00112623          	sw	ra,12(sp)
    96d8:	00812423          	sw	s0,8(sp)
    96dc:	00058413          	mv	s0,a1
  tcp_arg(tpcb, conn);
    96e0:	00050593          	mv	a1,a0
    96e4:	00040513          	mv	a0,s0
    96e8:	010090ef          	jal	ra,126f8 <tcp_arg>
  /* this might be called for LISTN when close fails... */
  if (tpcb->state != LISTEN) {
    96ec:	01442703          	lw	a4,20(s0)
    96f0:	00100793          	li	a5,1
    96f4:	00f71a63          	bne	a4,a5,9708 <altcp_tcp_setup_callbacks+0x38>
    tcp_recv(tpcb, altcp_tcp_recv);
    tcp_sent(tpcb, altcp_tcp_sent);
    tcp_err(tpcb, altcp_tcp_err);
    /* tcp_poll is set when interval is set by application */
  }
}
    96f8:	00c12083          	lw	ra,12(sp)
    96fc:	00812403          	lw	s0,8(sp)
    9700:	01010113          	addi	sp,sp,16
    9704:	00008067          	ret
    tcp_recv(tpcb, altcp_tcp_recv);
    9708:	0000a5b7          	lui	a1,0xa
    970c:	dac58593          	addi	a1,a1,-596 # 9dac <altcp_tcp_recv>
    9710:	00040513          	mv	a0,s0
    9714:	7f1080ef          	jal	ra,12704 <tcp_recv>
    tcp_sent(tpcb, altcp_tcp_sent);
    9718:	0000a5b7          	lui	a1,0xa
    971c:	98458593          	addi	a1,a1,-1660 # 9984 <altcp_tcp_sent>
    9720:	00040513          	mv	a0,s0
    9724:	034090ef          	jal	ra,12758 <tcp_sent>
    tcp_err(tpcb, altcp_tcp_err);
    9728:	0000a5b7          	lui	a1,0xa
    972c:	80858593          	addi	a1,a1,-2040 # 9808 <altcp_tcp_err>
    9730:	00040513          	mv	a0,s0
    9734:	078090ef          	jal	ra,127ac <tcp_err>
}
    9738:	fc1ff06f          	j	96f8 <altcp_tcp_setup_callbacks+0x28>

0000973c <altcp_tcp_setup>:

static void
altcp_tcp_setup(struct altcp_pcb *conn, struct tcp_pcb *tpcb)
{
    973c:	ff010113          	addi	sp,sp,-16
    9740:	00112623          	sw	ra,12(sp)
    9744:	00812423          	sw	s0,8(sp)
    9748:	00912223          	sw	s1,4(sp)
    974c:	00050413          	mv	s0,a0
    9750:	00058493          	mv	s1,a1
  altcp_tcp_setup_callbacks(conn, tpcb);
    9754:	f7dff0ef          	jal	ra,96d0 <altcp_tcp_setup_callbacks>
  conn->state = tpcb;
    9758:	00942623          	sw	s1,12(s0)
  conn->fns = &altcp_tcp_functions;
    975c:	0001d7b7          	lui	a5,0x1d
    9760:	73878793          	addi	a5,a5,1848 # 1d738 <altcp_tcp_functions>
    9764:	00f42023          	sw	a5,0(s0)
}
    9768:	00c12083          	lw	ra,12(sp)
    976c:	00812403          	lw	s0,8(sp)
    9770:	00412483          	lw	s1,4(sp)
    9774:	01010113          	addi	sp,sp,16
    9778:	00008067          	ret

0000977c <altcp_tcp_accept>:
  if (listen_conn && listen_conn->accept) {
    977c:	06050a63          	beqz	a0,97f0 <altcp_tcp_accept+0x74>
    9780:	01052783          	lw	a5,16(a0) # f8010010 <__freertos_irq_stack_top+0xf7feb0e0>
    9784:	06078a63          	beqz	a5,97f8 <altcp_tcp_accept+0x7c>
{
    9788:	fe010113          	addi	sp,sp,-32
    978c:	00112e23          	sw	ra,28(sp)
    9790:	00812c23          	sw	s0,24(sp)
    9794:	00912a23          	sw	s1,20(sp)
    9798:	01212823          	sw	s2,16(sp)
    979c:	01312623          	sw	s3,12(sp)
    97a0:	00060493          	mv	s1,a2
    97a4:	00058913          	mv	s2,a1
    97a8:	00050413          	mv	s0,a0
    struct altcp_pcb *new_conn = altcp_alloc();
    97ac:	745000ef          	jal	ra,a6f0 <altcp_alloc>
    97b0:	00050993          	mv	s3,a0
    if (new_conn == NULL) {
    97b4:	04050663          	beqz	a0,9800 <altcp_tcp_accept+0x84>
    altcp_tcp_setup(new_conn, new_tpcb);
    97b8:	00090593          	mv	a1,s2
    97bc:	f81ff0ef          	jal	ra,973c <altcp_tcp_setup>
    return listen_conn->accept(listen_conn->arg, new_conn, err);
    97c0:	01042783          	lw	a5,16(s0)
    97c4:	00048613          	mv	a2,s1
    97c8:	00098593          	mv	a1,s3
    97cc:	00842503          	lw	a0,8(s0)
    97d0:	000780e7          	jalr	a5
}
    97d4:	01c12083          	lw	ra,28(sp)
    97d8:	01812403          	lw	s0,24(sp)
    97dc:	01412483          	lw	s1,20(sp)
    97e0:	01012903          	lw	s2,16(sp)
    97e4:	00c12983          	lw	s3,12(sp)
    97e8:	02010113          	addi	sp,sp,32
    97ec:	00008067          	ret
  return ERR_ARG;
    97f0:	ff000513          	li	a0,-16
    97f4:	00008067          	ret
    97f8:	ff000513          	li	a0,-16
}
    97fc:	00008067          	ret
      return ERR_MEM;
    9800:	fff00513          	li	a0,-1
    9804:	fd1ff06f          	j	97d4 <altcp_tcp_accept+0x58>

00009808 <altcp_tcp_err>:
  if (conn) {
    9808:	04050063          	beqz	a0,9848 <altcp_tcp_err+0x40>
{
    980c:	ff010113          	addi	sp,sp,-16
    9810:	00112623          	sw	ra,12(sp)
    9814:	00812423          	sw	s0,8(sp)
    9818:	00050413          	mv	s0,a0
    conn->state = NULL; /* already freed */
    981c:	00052623          	sw	zero,12(a0)
    if (conn->err) {
    9820:	02452783          	lw	a5,36(a0)
    9824:	00078663          	beqz	a5,9830 <altcp_tcp_err+0x28>
      conn->err(conn->arg, err);
    9828:	00852503          	lw	a0,8(a0)
    982c:	000780e7          	jalr	a5
    altcp_free(conn);
    9830:	00040513          	mv	a0,s0
    9834:	6f9000ef          	jal	ra,a72c <altcp_free>
}
    9838:	00c12083          	lw	ra,12(sp)
    983c:	00812403          	lw	s0,8(sp)
    9840:	01010113          	addi	sp,sp,16
    9844:	00008067          	ret
    9848:	00008067          	ret

0000984c <bsp_printf>:
    {
    984c:	fc010113          	addi	sp,sp,-64
    9850:	00112e23          	sw	ra,28(sp)
    9854:	00812c23          	sw	s0,24(sp)
    9858:	00912a23          	sw	s1,20(sp)
    985c:	00050493          	mv	s1,a0
    9860:	02b12223          	sw	a1,36(sp)
    9864:	02c12423          	sw	a2,40(sp)
    9868:	02d12623          	sw	a3,44(sp)
    986c:	02e12823          	sw	a4,48(sp)
    9870:	02f12a23          	sw	a5,52(sp)
    9874:	03012c23          	sw	a6,56(sp)
    9878:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
    987c:	02410793          	addi	a5,sp,36
    9880:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
    9884:	00000413          	li	s0,0
    9888:	01c0006f          	j	98a4 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
    988c:	00c12783          	lw	a5,12(sp)
    9890:	00478713          	addi	a4,a5,4
    9894:	00e12623          	sw	a4,12(sp)
    9898:	0007a503          	lw	a0,0(a5)
    989c:	cddff0ef          	jal	ra,9578 <bsp_printf_c>
        for (i = 0; format[i]; i++)
    98a0:	00140413          	addi	s0,s0,1
    98a4:	008487b3          	add	a5,s1,s0
    98a8:	0007c503          	lbu	a0,0(a5)
    98ac:	0c050263          	beqz	a0,9970 <bsp_printf+0x124>
            if (format[i] == '%') {
    98b0:	02500793          	li	a5,37
    98b4:	06f50663          	beq	a0,a5,9920 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
    98b8:	cc1ff0ef          	jal	ra,9578 <bsp_printf_c>
    98bc:	fe5ff06f          	j	98a0 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    98c0:	00c12783          	lw	a5,12(sp)
    98c4:	00478713          	addi	a4,a5,4
    98c8:	00e12623          	sw	a4,12(sp)
    98cc:	0007a503          	lw	a0,0(a5)
    98d0:	cc9ff0ef          	jal	ra,9598 <bsp_printf_s>
                        break;
    98d4:	fcdff06f          	j	98a0 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    98d8:	00c12783          	lw	a5,12(sp)
    98dc:	00478713          	addi	a4,a5,4
    98e0:	00e12623          	sw	a4,12(sp)
    98e4:	0007a503          	lw	a0,0(a5)
    98e8:	ce9ff0ef          	jal	ra,95d0 <bsp_printf_d>
                        break;
    98ec:	fb5ff06f          	j	98a0 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    98f0:	00c12783          	lw	a5,12(sp)
    98f4:	00478713          	addi	a4,a5,4
    98f8:	00e12623          	sw	a4,12(sp)
    98fc:	0007a503          	lw	a0,0(a5)
    9900:	d91ff0ef          	jal	ra,9690 <bsp_printf_X>
                        break;
    9904:	f9dff06f          	j	98a0 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    9908:	00c12783          	lw	a5,12(sp)
    990c:	00478713          	addi	a4,a5,4
    9910:	00e12623          	sw	a4,12(sp)
    9914:	0007a503          	lw	a0,0(a5)
    9918:	d39ff0ef          	jal	ra,9650 <bsp_printf_x>
                        break;
    991c:	f85ff06f          	j	98a0 <bsp_printf+0x54>
                while (format[++i]) {
    9920:	00140413          	addi	s0,s0,1
    9924:	008487b3          	add	a5,s1,s0
    9928:	0007c783          	lbu	a5,0(a5)
    992c:	f6078ae3          	beqz	a5,98a0 <bsp_printf+0x54>
                    if (format[i] == 'c') {
    9930:	06300713          	li	a4,99
    9934:	f4e78ce3          	beq	a5,a4,988c <bsp_printf+0x40>
                    else if (format[i] == 's') {
    9938:	07300713          	li	a4,115
    993c:	f8e782e3          	beq	a5,a4,98c0 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    9940:	06400713          	li	a4,100
    9944:	f8e78ae3          	beq	a5,a4,98d8 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    9948:	05800713          	li	a4,88
    994c:	fae782e3          	beq	a5,a4,98f0 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    9950:	07800713          	li	a4,120
    9954:	fae78ae3          	beq	a5,a4,9908 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    9958:	06600713          	li	a4,102
    995c:	fce792e3          	bne	a5,a4,9920 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    9960:	0001c537          	lui	a0,0x1c
    9964:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    9968:	c31ff0ef          	jal	ra,9598 <bsp_printf_s>
                        break;
    996c:	f35ff06f          	j	98a0 <bsp_printf+0x54>
    }
    9970:	01c12083          	lw	ra,28(sp)
    9974:	01812403          	lw	s0,24(sp)
    9978:	01412483          	lw	s1,20(sp)
    997c:	04010113          	addi	sp,sp,64
    9980:	00008067          	ret

00009984 <altcp_tcp_sent>:
  if (conn) {
    9984:	06050863          	beqz	a0,99f4 <altcp_tcp_sent+0x70>
{
    9988:	ff010113          	addi	sp,sp,-16
    998c:	00112623          	sw	ra,12(sp)
    9990:	00812423          	sw	s0,8(sp)
    9994:	00912223          	sw	s1,4(sp)
    9998:	00060493          	mv	s1,a2
    999c:	00050413          	mv	s0,a0
    ALTCP_TCP_ASSERT_CONN_PCB(conn, tpcb);
    99a0:	00c52783          	lw	a5,12(a0)
    99a4:	00b78863          	beq	a5,a1,99b4 <altcp_tcp_sent+0x30>
    99a8:	0001d537          	lui	a0,0x1d
    99ac:	ee050513          	addi	a0,a0,-288 # 1cee0 <lwiperf_txbuf_const+0x700>
    99b0:	e9dff0ef          	jal	ra,984c <bsp_printf>
    99b4:	00442783          	lw	a5,4(s0)
    99b8:	00078863          	beqz	a5,99c8 <altcp_tcp_sent+0x44>
    99bc:	0001d537          	lui	a0,0x1d
    99c0:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    99c4:	e89ff0ef          	jal	ra,984c <bsp_printf>
    if (conn->sent) {
    99c8:	01c42783          	lw	a5,28(s0)
    99cc:	02078863          	beqz	a5,99fc <altcp_tcp_sent+0x78>
      return conn->sent(conn->arg, conn, len);
    99d0:	00048613          	mv	a2,s1
    99d4:	00040593          	mv	a1,s0
    99d8:	00842503          	lw	a0,8(s0)
    99dc:	000780e7          	jalr	a5
}
    99e0:	00c12083          	lw	ra,12(sp)
    99e4:	00812403          	lw	s0,8(sp)
    99e8:	00412483          	lw	s1,4(sp)
    99ec:	01010113          	addi	sp,sp,16
    99f0:	00008067          	ret
  return ERR_OK;
    99f4:	00000513          	li	a0,0
}
    99f8:	00008067          	ret
  return ERR_OK;
    99fc:	00000513          	li	a0,0
    9a00:	fe1ff06f          	j	99e0 <altcp_tcp_sent+0x5c>

00009a04 <altcp_tcp_get_port>:
}

static u16_t
altcp_tcp_get_port(struct altcp_pcb *conn, int local)
{
  if (conn) {
    9a04:	04050c63          	beqz	a0,9a5c <altcp_tcp_get_port+0x58>
{
    9a08:	ff010113          	addi	sp,sp,-16
    9a0c:	00112623          	sw	ra,12(sp)
    9a10:	00812423          	sw	s0,8(sp)
    9a14:	00912223          	sw	s1,4(sp)
    9a18:	00058413          	mv	s0,a1
    struct tcp_pcb *pcb = (struct tcp_pcb *)conn->state;
    9a1c:	00c52483          	lw	s1,12(a0)
    ALTCP_TCP_ASSERT_CONN(conn);
    9a20:	00452783          	lw	a5,4(a0)
    9a24:	00078863          	beqz	a5,9a34 <altcp_tcp_get_port+0x30>
    9a28:	0001d537          	lui	a0,0x1d
    9a2c:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9a30:	e1dff0ef          	jal	ra,984c <bsp_printf>
    if (pcb) {
    9a34:	02048863          	beqz	s1,9a64 <altcp_tcp_get_port+0x60>
      if (local) {
    9a38:	00040e63          	beqz	s0,9a54 <altcp_tcp_get_port+0x50>
        return pcb->local_port;
    9a3c:	01a4d503          	lhu	a0,26(s1)
        return pcb->remote_port;
      }
    }
  }
  return 0;
}
    9a40:	00c12083          	lw	ra,12(sp)
    9a44:	00812403          	lw	s0,8(sp)
    9a48:	00412483          	lw	s1,4(sp)
    9a4c:	01010113          	addi	sp,sp,16
    9a50:	00008067          	ret
        return pcb->remote_port;
    9a54:	01c4d503          	lhu	a0,28(s1)
    9a58:	fe9ff06f          	j	9a40 <altcp_tcp_get_port+0x3c>
  return 0;
    9a5c:	00000513          	li	a0,0
}
    9a60:	00008067          	ret
  return 0;
    9a64:	00000513          	li	a0,0
    9a68:	fd9ff06f          	j	9a40 <altcp_tcp_get_port+0x3c>

00009a6c <altcp_tcp_get_ip>:
{
    9a6c:	ff010113          	addi	sp,sp,-16
    9a70:	00112623          	sw	ra,12(sp)
    9a74:	00812423          	sw	s0,8(sp)
    9a78:	00912223          	sw	s1,4(sp)
  if (conn) {
    9a7c:	04050263          	beqz	a0,9ac0 <altcp_tcp_get_ip+0x54>
    9a80:	00058493          	mv	s1,a1
    struct tcp_pcb *pcb = (struct tcp_pcb *)conn->state;
    9a84:	00c52403          	lw	s0,12(a0)
    ALTCP_TCP_ASSERT_CONN(conn);
    9a88:	00452783          	lw	a5,4(a0)
    9a8c:	00078863          	beqz	a5,9a9c <altcp_tcp_get_ip+0x30>
    9a90:	0001d537          	lui	a0,0x1d
    9a94:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9a98:	db5ff0ef          	jal	ra,984c <bsp_printf>
    if (pcb) {
    9a9c:	00040663          	beqz	s0,9aa8 <altcp_tcp_get_ip+0x3c>
      if (local) {
    9aa0:	00049463          	bnez	s1,9aa8 <altcp_tcp_get_ip+0x3c>
        return &pcb->remote_ip;
    9aa4:	00440413          	addi	s0,s0,4
}
    9aa8:	00040513          	mv	a0,s0
    9aac:	00c12083          	lw	ra,12(sp)
    9ab0:	00812403          	lw	s0,8(sp)
    9ab4:	00412483          	lw	s1,4(sp)
    9ab8:	01010113          	addi	sp,sp,16
    9abc:	00008067          	ret
  return NULL;
    9ac0:	00050413          	mv	s0,a0
    9ac4:	fe5ff06f          	j	9aa8 <altcp_tcp_get_ip+0x3c>

00009ac8 <altcp_tcp_dealloc>:
  ALTCP_TCP_ASSERT_CONN(conn);
    9ac8:	00452783          	lw	a5,4(a0)
    9acc:	02078263          	beqz	a5,9af0 <altcp_tcp_dealloc+0x28>
{
    9ad0:	ff010113          	addi	sp,sp,-16
    9ad4:	00112623          	sw	ra,12(sp)
  ALTCP_TCP_ASSERT_CONN(conn);
    9ad8:	0001d537          	lui	a0,0x1d
    9adc:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9ae0:	d6dff0ef          	jal	ra,984c <bsp_printf>
}
    9ae4:	00c12083          	lw	ra,12(sp)
    9ae8:	01010113          	addi	sp,sp,16
    9aec:	00008067          	ret
    9af0:	00008067          	ret

00009af4 <altcp_tcp_nagle_disabled>:
  if (conn && conn->state) {
    9af4:	04050463          	beqz	a0,9b3c <altcp_tcp_nagle_disabled+0x48>
{
    9af8:	ff010113          	addi	sp,sp,-16
    9afc:	00112623          	sw	ra,12(sp)
    9b00:	00812423          	sw	s0,8(sp)
  if (conn && conn->state) {
    9b04:	00c52403          	lw	s0,12(a0)
    9b08:	02040e63          	beqz	s0,9b44 <altcp_tcp_nagle_disabled+0x50>
    ALTCP_TCP_ASSERT_CONN(conn);
    9b0c:	00452783          	lw	a5,4(a0)
    9b10:	00078863          	beqz	a5,9b20 <altcp_tcp_nagle_disabled+0x2c>
    9b14:	0001d537          	lui	a0,0x1d
    9b18:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9b1c:	d31ff0ef          	jal	ra,984c <bsp_printf>
    return tcp_nagle_disabled(pcb);
    9b20:	01e45503          	lhu	a0,30(s0)
    9b24:	00655513          	srli	a0,a0,0x6
    9b28:	00157513          	andi	a0,a0,1
}
    9b2c:	00c12083          	lw	ra,12(sp)
    9b30:	00812403          	lw	s0,8(sp)
    9b34:	01010113          	addi	sp,sp,16
    9b38:	00008067          	ret
  return 0;
    9b3c:	00000513          	li	a0,0
}
    9b40:	00008067          	ret
  return 0;
    9b44:	00000513          	li	a0,0
    9b48:	fe5ff06f          	j	9b2c <altcp_tcp_nagle_disabled+0x38>

00009b4c <altcp_tcp_nagle_enable>:
  if (conn && conn->state) {
    9b4c:	04050463          	beqz	a0,9b94 <altcp_tcp_nagle_enable+0x48>
{
    9b50:	ff010113          	addi	sp,sp,-16
    9b54:	00112623          	sw	ra,12(sp)
    9b58:	00812423          	sw	s0,8(sp)
  if (conn && conn->state) {
    9b5c:	00c52403          	lw	s0,12(a0)
    9b60:	02040263          	beqz	s0,9b84 <altcp_tcp_nagle_enable+0x38>
    ALTCP_TCP_ASSERT_CONN(conn);
    9b64:	00452783          	lw	a5,4(a0)
    9b68:	00078863          	beqz	a5,9b78 <altcp_tcp_nagle_enable+0x2c>
    9b6c:	0001d537          	lui	a0,0x1d
    9b70:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9b74:	cd9ff0ef          	jal	ra,984c <bsp_printf>
    tcp_nagle_enable(pcb);
    9b78:	01e45783          	lhu	a5,30(s0)
    9b7c:	fbf7f793          	andi	a5,a5,-65
    9b80:	00f41f23          	sh	a5,30(s0)
}
    9b84:	00c12083          	lw	ra,12(sp)
    9b88:	00812403          	lw	s0,8(sp)
    9b8c:	01010113          	addi	sp,sp,16
    9b90:	00008067          	ret
    9b94:	00008067          	ret

00009b98 <altcp_tcp_nagle_disable>:
  if (conn && conn->state) {
    9b98:	04050463          	beqz	a0,9be0 <altcp_tcp_nagle_disable+0x48>
{
    9b9c:	ff010113          	addi	sp,sp,-16
    9ba0:	00112623          	sw	ra,12(sp)
    9ba4:	00812423          	sw	s0,8(sp)
  if (conn && conn->state) {
    9ba8:	00c52403          	lw	s0,12(a0)
    9bac:	02040263          	beqz	s0,9bd0 <altcp_tcp_nagle_disable+0x38>
    ALTCP_TCP_ASSERT_CONN(conn);
    9bb0:	00452783          	lw	a5,4(a0)
    9bb4:	00078863          	beqz	a5,9bc4 <altcp_tcp_nagle_disable+0x2c>
    9bb8:	0001d537          	lui	a0,0x1d
    9bbc:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9bc0:	c8dff0ef          	jal	ra,984c <bsp_printf>
    tcp_nagle_disable(pcb);
    9bc4:	01e45783          	lhu	a5,30(s0)
    9bc8:	0407e793          	ori	a5,a5,64
    9bcc:	00f41f23          	sh	a5,30(s0)
}
    9bd0:	00c12083          	lw	ra,12(sp)
    9bd4:	00812403          	lw	s0,8(sp)
    9bd8:	01010113          	addi	sp,sp,16
    9bdc:	00008067          	ret
    9be0:	00008067          	ret

00009be4 <altcp_tcp_sndqueuelen>:
  if (conn == NULL) {
    9be4:	04050063          	beqz	a0,9c24 <altcp_tcp_sndqueuelen+0x40>
{
    9be8:	ff010113          	addi	sp,sp,-16
    9bec:	00112623          	sw	ra,12(sp)
    9bf0:	00812423          	sw	s0,8(sp)
    9bf4:	00050413          	mv	s0,a0
  ALTCP_TCP_ASSERT_CONN(conn);
    9bf8:	00452783          	lw	a5,4(a0)
    9bfc:	00078863          	beqz	a5,9c0c <altcp_tcp_sndqueuelen+0x28>
    9c00:	0001d537          	lui	a0,0x1d
    9c04:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9c08:	c45ff0ef          	jal	ra,984c <bsp_printf>
  pcb = (struct tcp_pcb *)conn->state;
    9c0c:	00c42783          	lw	a5,12(s0)
  return tcp_sndqueuelen(pcb);
    9c10:	06a7d503          	lhu	a0,106(a5)
}
    9c14:	00c12083          	lw	ra,12(sp)
    9c18:	00812403          	lw	s0,8(sp)
    9c1c:	01010113          	addi	sp,sp,16
    9c20:	00008067          	ret
    return 0;
    9c24:	00000513          	li	a0,0
}
    9c28:	00008067          	ret

00009c2c <altcp_tcp_sndbuf>:
  if (conn == NULL) {
    9c2c:	04050063          	beqz	a0,9c6c <altcp_tcp_sndbuf+0x40>
{
    9c30:	ff010113          	addi	sp,sp,-16
    9c34:	00112623          	sw	ra,12(sp)
    9c38:	00812423          	sw	s0,8(sp)
    9c3c:	00050413          	mv	s0,a0
  ALTCP_TCP_ASSERT_CONN(conn);
    9c40:	00452783          	lw	a5,4(a0)
    9c44:	00078863          	beqz	a5,9c54 <altcp_tcp_sndbuf+0x28>
    9c48:	0001d537          	lui	a0,0x1d
    9c4c:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9c50:	bfdff0ef          	jal	ra,984c <bsp_printf>
  pcb = (struct tcp_pcb *)conn->state;
    9c54:	00c42783          	lw	a5,12(s0)
  return tcp_sndbuf(pcb);
    9c58:	0687d503          	lhu	a0,104(a5)
}
    9c5c:	00c12083          	lw	ra,12(sp)
    9c60:	00812403          	lw	s0,8(sp)
    9c64:	01010113          	addi	sp,sp,16
    9c68:	00008067          	ret
    return 0;
    9c6c:	00000513          	li	a0,0
}
    9c70:	00008067          	ret

00009c74 <altcp_tcp_mss>:
  if (conn == NULL) {
    9c74:	04050063          	beqz	a0,9cb4 <altcp_tcp_mss+0x40>
{
    9c78:	ff010113          	addi	sp,sp,-16
    9c7c:	00112623          	sw	ra,12(sp)
    9c80:	00812423          	sw	s0,8(sp)
    9c84:	00050413          	mv	s0,a0
  ALTCP_TCP_ASSERT_CONN(conn);
    9c88:	00452783          	lw	a5,4(a0)
    9c8c:	00078863          	beqz	a5,9c9c <altcp_tcp_mss+0x28>
    9c90:	0001d537          	lui	a0,0x1d
    9c94:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9c98:	bb5ff0ef          	jal	ra,984c <bsp_printf>
  pcb = (struct tcp_pcb *)conn->state;
    9c9c:	00c42783          	lw	a5,12(s0)
  return tcp_mss(pcb);
    9ca0:	0367d503          	lhu	a0,54(a5)
}
    9ca4:	00c12083          	lw	ra,12(sp)
    9ca8:	00812403          	lw	s0,8(sp)
    9cac:	01010113          	addi	sp,sp,16
    9cb0:	00008067          	ret
    return 0;
    9cb4:	00000513          	li	a0,0
}
    9cb8:	00008067          	ret

00009cbc <altcp_tcp_connected>:
  if (conn) {
    9cbc:	06050863          	beqz	a0,9d2c <altcp_tcp_connected+0x70>
{
    9cc0:	ff010113          	addi	sp,sp,-16
    9cc4:	00112623          	sw	ra,12(sp)
    9cc8:	00812423          	sw	s0,8(sp)
    9ccc:	00912223          	sw	s1,4(sp)
    9cd0:	00060493          	mv	s1,a2
    9cd4:	00050413          	mv	s0,a0
    ALTCP_TCP_ASSERT_CONN_PCB(conn, tpcb);
    9cd8:	00c52783          	lw	a5,12(a0)
    9cdc:	00b78863          	beq	a5,a1,9cec <altcp_tcp_connected+0x30>
    9ce0:	0001d537          	lui	a0,0x1d
    9ce4:	ee050513          	addi	a0,a0,-288 # 1cee0 <lwiperf_txbuf_const+0x700>
    9ce8:	b65ff0ef          	jal	ra,984c <bsp_printf>
    9cec:	00442783          	lw	a5,4(s0)
    9cf0:	00078863          	beqz	a5,9d00 <altcp_tcp_connected+0x44>
    9cf4:	0001d537          	lui	a0,0x1d
    9cf8:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9cfc:	b51ff0ef          	jal	ra,984c <bsp_printf>
    if (conn->connected) {
    9d00:	01442783          	lw	a5,20(s0)
    9d04:	02078863          	beqz	a5,9d34 <altcp_tcp_connected+0x78>
      return conn->connected(conn->arg, conn, err);
    9d08:	00048613          	mv	a2,s1
    9d0c:	00040593          	mv	a1,s0
    9d10:	00842503          	lw	a0,8(s0)
    9d14:	000780e7          	jalr	a5
}
    9d18:	00c12083          	lw	ra,12(sp)
    9d1c:	00812403          	lw	s0,8(sp)
    9d20:	00412483          	lw	s1,4(sp)
    9d24:	01010113          	addi	sp,sp,16
    9d28:	00008067          	ret
  return ERR_OK;
    9d2c:	00000513          	li	a0,0
}
    9d30:	00008067          	ret
  return ERR_OK;
    9d34:	00000513          	li	a0,0
    9d38:	fe1ff06f          	j	9d18 <altcp_tcp_connected+0x5c>

00009d3c <altcp_tcp_poll>:
  if (conn) {
    9d3c:	06050063          	beqz	a0,9d9c <altcp_tcp_poll+0x60>
{
    9d40:	ff010113          	addi	sp,sp,-16
    9d44:	00112623          	sw	ra,12(sp)
    9d48:	00812423          	sw	s0,8(sp)
    9d4c:	00050413          	mv	s0,a0
    ALTCP_TCP_ASSERT_CONN_PCB(conn, tpcb);
    9d50:	00c52783          	lw	a5,12(a0)
    9d54:	00b78863          	beq	a5,a1,9d64 <altcp_tcp_poll+0x28>
    9d58:	0001d537          	lui	a0,0x1d
    9d5c:	ee050513          	addi	a0,a0,-288 # 1cee0 <lwiperf_txbuf_const+0x700>
    9d60:	aedff0ef          	jal	ra,984c <bsp_printf>
    9d64:	00442783          	lw	a5,4(s0)
    9d68:	00078863          	beqz	a5,9d78 <altcp_tcp_poll+0x3c>
    9d6c:	0001d537          	lui	a0,0x1d
    9d70:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9d74:	ad9ff0ef          	jal	ra,984c <bsp_printf>
    if (conn->poll) {
    9d78:	02042783          	lw	a5,32(s0)
    9d7c:	02078463          	beqz	a5,9da4 <altcp_tcp_poll+0x68>
      return conn->poll(conn->arg, conn);
    9d80:	00040593          	mv	a1,s0
    9d84:	00842503          	lw	a0,8(s0)
    9d88:	000780e7          	jalr	a5
}
    9d8c:	00c12083          	lw	ra,12(sp)
    9d90:	00812403          	lw	s0,8(sp)
    9d94:	01010113          	addi	sp,sp,16
    9d98:	00008067          	ret
  return ERR_OK;
    9d9c:	00000513          	li	a0,0
}
    9da0:	00008067          	ret
  return ERR_OK;
    9da4:	00000513          	li	a0,0
    9da8:	fe5ff06f          	j	9d8c <altcp_tcp_poll+0x50>

00009dac <altcp_tcp_recv>:
{
    9dac:	ff010113          	addi	sp,sp,-16
    9db0:	00112623          	sw	ra,12(sp)
    9db4:	00812423          	sw	s0,8(sp)
    9db8:	00912223          	sw	s1,4(sp)
    9dbc:	01212023          	sw	s2,0(sp)
    9dc0:	00060493          	mv	s1,a2
  if (conn) {
    9dc4:	06050463          	beqz	a0,9e2c <altcp_tcp_recv+0x80>
    9dc8:	00050413          	mv	s0,a0
    9dcc:	00068913          	mv	s2,a3
    ALTCP_TCP_ASSERT_CONN_PCB(conn, tpcb);
    9dd0:	00c52783          	lw	a5,12(a0)
    9dd4:	00b78863          	beq	a5,a1,9de4 <altcp_tcp_recv+0x38>
    9dd8:	0001d537          	lui	a0,0x1d
    9ddc:	ee050513          	addi	a0,a0,-288 # 1cee0 <lwiperf_txbuf_const+0x700>
    9de0:	a6dff0ef          	jal	ra,984c <bsp_printf>
    9de4:	00442783          	lw	a5,4(s0)
    9de8:	00078863          	beqz	a5,9df8 <altcp_tcp_recv+0x4c>
    9dec:	0001d537          	lui	a0,0x1d
    9df0:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9df4:	a59ff0ef          	jal	ra,984c <bsp_printf>
    if (conn->recv) {
    9df8:	01842783          	lw	a5,24(s0)
    9dfc:	02078863          	beqz	a5,9e2c <altcp_tcp_recv+0x80>
      return conn->recv(conn->arg, conn, p, err);
    9e00:	00090693          	mv	a3,s2
    9e04:	00048613          	mv	a2,s1
    9e08:	00040593          	mv	a1,s0
    9e0c:	00842503          	lw	a0,8(s0)
    9e10:	000780e7          	jalr	a5
}
    9e14:	00c12083          	lw	ra,12(sp)
    9e18:	00812403          	lw	s0,8(sp)
    9e1c:	00412483          	lw	s1,4(sp)
    9e20:	00012903          	lw	s2,0(sp)
    9e24:	01010113          	addi	sp,sp,16
    9e28:	00008067          	ret
  if (p != NULL) {
    9e2c:	00048a63          	beqz	s1,9e40 <altcp_tcp_recv+0x94>
    pbuf_free(p);
    9e30:	00048513          	mv	a0,s1
    9e34:	51d020ef          	jal	ra,cb50 <pbuf_free>
  return ERR_OK;
    9e38:	00000513          	li	a0,0
    9e3c:	fd9ff06f          	j	9e14 <altcp_tcp_recv+0x68>
    9e40:	00000513          	li	a0,0
    9e44:	fd1ff06f          	j	9e14 <altcp_tcp_recv+0x68>

00009e48 <altcp_tcp_get_tcp_addrinfo>:
  if (conn) {
    9e48:	06050863          	beqz	a0,9eb8 <altcp_tcp_get_tcp_addrinfo+0x70>
{
    9e4c:	fe010113          	addi	sp,sp,-32
    9e50:	00112e23          	sw	ra,28(sp)
    9e54:	00812c23          	sw	s0,24(sp)
    9e58:	00912a23          	sw	s1,20(sp)
    9e5c:	01212823          	sw	s2,16(sp)
    9e60:	01312623          	sw	s3,12(sp)
    9e64:	00068913          	mv	s2,a3
    9e68:	00060493          	mv	s1,a2
    9e6c:	00058413          	mv	s0,a1
    struct tcp_pcb *pcb = (struct tcp_pcb *)conn->state;
    9e70:	00c52983          	lw	s3,12(a0)
    ALTCP_TCP_ASSERT_CONN(conn);
    9e74:	00452783          	lw	a5,4(a0)
    9e78:	00078863          	beqz	a5,9e88 <altcp_tcp_get_tcp_addrinfo+0x40>
    9e7c:	0001d537          	lui	a0,0x1d
    9e80:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9e84:	9c9ff0ef          	jal	ra,984c <bsp_printf>
    return tcp_tcp_get_tcp_addrinfo(pcb, local, addr, port);
    9e88:	00090693          	mv	a3,s2
    9e8c:	00048613          	mv	a2,s1
    9e90:	00040593          	mv	a1,s0
    9e94:	00098513          	mv	a0,s3
    9e98:	47d080ef          	jal	ra,12b14 <tcp_tcp_get_tcp_addrinfo>
}
    9e9c:	01c12083          	lw	ra,28(sp)
    9ea0:	01812403          	lw	s0,24(sp)
    9ea4:	01412483          	lw	s1,20(sp)
    9ea8:	01012903          	lw	s2,16(sp)
    9eac:	00c12983          	lw	s3,12(sp)
    9eb0:	02010113          	addi	sp,sp,32
    9eb4:	00008067          	ret
  return ERR_VAL;
    9eb8:	ffa00513          	li	a0,-6
}
    9ebc:	00008067          	ret

00009ec0 <altcp_tcp_setprio>:
  if (conn != NULL) {
    9ec0:	04050863          	beqz	a0,9f10 <altcp_tcp_setprio+0x50>
{
    9ec4:	ff010113          	addi	sp,sp,-16
    9ec8:	00112623          	sw	ra,12(sp)
    9ecc:	00812423          	sw	s0,8(sp)
    9ed0:	00912223          	sw	s1,4(sp)
    9ed4:	00058413          	mv	s0,a1
    struct tcp_pcb *pcb = (struct tcp_pcb *)conn->state;
    9ed8:	00c52483          	lw	s1,12(a0)
    ALTCP_TCP_ASSERT_CONN(conn);
    9edc:	00452783          	lw	a5,4(a0)
    9ee0:	00078863          	beqz	a5,9ef0 <altcp_tcp_setprio+0x30>
    9ee4:	0001d537          	lui	a0,0x1d
    9ee8:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9eec:	961ff0ef          	jal	ra,984c <bsp_printf>
    tcp_setprio(pcb, prio);
    9ef0:	00040593          	mv	a1,s0
    9ef4:	00048513          	mv	a0,s1
    9ef8:	790080ef          	jal	ra,12688 <tcp_setprio>
}
    9efc:	00c12083          	lw	ra,12(sp)
    9f00:	00812403          	lw	s0,8(sp)
    9f04:	00412483          	lw	s1,4(sp)
    9f08:	01010113          	addi	sp,sp,16
    9f0c:	00008067          	ret
    9f10:	00008067          	ret

00009f14 <altcp_tcp_output>:
  if (conn == NULL) {
    9f14:	04050063          	beqz	a0,9f54 <altcp_tcp_output+0x40>
{
    9f18:	ff010113          	addi	sp,sp,-16
    9f1c:	00112623          	sw	ra,12(sp)
    9f20:	00812423          	sw	s0,8(sp)
    9f24:	00050413          	mv	s0,a0
  ALTCP_TCP_ASSERT_CONN(conn);
    9f28:	00452783          	lw	a5,4(a0)
    9f2c:	00078863          	beqz	a5,9f3c <altcp_tcp_output+0x28>
    9f30:	0001d537          	lui	a0,0x1d
    9f34:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9f38:	915ff0ef          	jal	ra,984c <bsp_printf>
  return tcp_output(pcb);
    9f3c:	00c42503          	lw	a0,12(s0)
    9f40:	d09fe0ef          	jal	ra,8c48 <tcp_output>
}
    9f44:	00c12083          	lw	ra,12(sp)
    9f48:	00812403          	lw	s0,8(sp)
    9f4c:	01010113          	addi	sp,sp,16
    9f50:	00008067          	ret
    return ERR_VAL;
    9f54:	ffa00513          	li	a0,-6
}
    9f58:	00008067          	ret

00009f5c <altcp_tcp_write>:
  if (conn == NULL) {
    9f5c:	06050863          	beqz	a0,9fcc <altcp_tcp_write+0x70>
{
    9f60:	fe010113          	addi	sp,sp,-32
    9f64:	00112e23          	sw	ra,28(sp)
    9f68:	00812c23          	sw	s0,24(sp)
    9f6c:	00912a23          	sw	s1,20(sp)
    9f70:	01212823          	sw	s2,16(sp)
    9f74:	01312623          	sw	s3,12(sp)
    9f78:	00068993          	mv	s3,a3
    9f7c:	00060913          	mv	s2,a2
    9f80:	00058493          	mv	s1,a1
    9f84:	00050413          	mv	s0,a0
  ALTCP_TCP_ASSERT_CONN(conn);
    9f88:	00452783          	lw	a5,4(a0)
    9f8c:	00078863          	beqz	a5,9f9c <altcp_tcp_write+0x40>
    9f90:	0001d537          	lui	a0,0x1d
    9f94:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    9f98:	8b5ff0ef          	jal	ra,984c <bsp_printf>
  return tcp_write(pcb, dataptr, len, apiflags);
    9f9c:	00098693          	mv	a3,s3
    9fa0:	00090613          	mv	a2,s2
    9fa4:	00048593          	mv	a1,s1
    9fa8:	00c42503          	lw	a0,12(s0)
    9fac:	ac1fd0ef          	jal	ra,7a6c <tcp_write>
}
    9fb0:	01c12083          	lw	ra,28(sp)
    9fb4:	01812403          	lw	s0,24(sp)
    9fb8:	01412483          	lw	s1,20(sp)
    9fbc:	01012903          	lw	s2,16(sp)
    9fc0:	00c12983          	lw	s3,12(sp)
    9fc4:	02010113          	addi	sp,sp,32
    9fc8:	00008067          	ret
    return ERR_VAL;
    9fcc:	ffa00513          	li	a0,-6
}
    9fd0:	00008067          	ret

00009fd4 <altcp_tcp_shutdown>:
  if (conn == NULL) {
    9fd4:	06050063          	beqz	a0,a034 <altcp_tcp_shutdown+0x60>
{
    9fd8:	ff010113          	addi	sp,sp,-16
    9fdc:	00112623          	sw	ra,12(sp)
    9fe0:	00812423          	sw	s0,8(sp)
    9fe4:	00912223          	sw	s1,4(sp)
    9fe8:	01212023          	sw	s2,0(sp)
    9fec:	00060913          	mv	s2,a2
    9ff0:	00058493          	mv	s1,a1
    9ff4:	00050413          	mv	s0,a0
  ALTCP_TCP_ASSERT_CONN(conn);
    9ff8:	00452783          	lw	a5,4(a0)
    9ffc:	00078863          	beqz	a5,a00c <altcp_tcp_shutdown+0x38>
    a000:	0001d537          	lui	a0,0x1d
    a004:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    a008:	845ff0ef          	jal	ra,984c <bsp_printf>
  return tcp_shutdown(pcb, shut_rx, shut_tx);
    a00c:	00090613          	mv	a2,s2
    a010:	00048593          	mv	a1,s1
    a014:	00c42503          	lw	a0,12(s0)
    a018:	7b0090ef          	jal	ra,137c8 <tcp_shutdown>
}
    a01c:	00c12083          	lw	ra,12(sp)
    a020:	00812403          	lw	s0,8(sp)
    a024:	00412483          	lw	s1,4(sp)
    a028:	00012903          	lw	s2,0(sp)
    a02c:	01010113          	addi	sp,sp,16
    a030:	00008067          	ret
    return ERR_VAL;
    a034:	ffa00513          	li	a0,-6
}
    a038:	00008067          	ret

0000a03c <altcp_tcp_remove_callbacks>:
{
    a03c:	ff010113          	addi	sp,sp,-16
    a040:	00112623          	sw	ra,12(sp)
    a044:	00812423          	sw	s0,8(sp)
    a048:	00050413          	mv	s0,a0
  tcp_arg(tpcb, NULL);
    a04c:	00000593          	li	a1,0
    a050:	6a8080ef          	jal	ra,126f8 <tcp_arg>
  if (tpcb->state != LISTEN) {
    a054:	01442703          	lw	a4,20(s0)
    a058:	00100793          	li	a5,1
    a05c:	00f71a63          	bne	a4,a5,a070 <altcp_tcp_remove_callbacks+0x34>
}
    a060:	00c12083          	lw	ra,12(sp)
    a064:	00812403          	lw	s0,8(sp)
    a068:	01010113          	addi	sp,sp,16
    a06c:	00008067          	ret
    tcp_recv(tpcb, NULL);
    a070:	00000593          	li	a1,0
    a074:	00040513          	mv	a0,s0
    a078:	68c080ef          	jal	ra,12704 <tcp_recv>
    tcp_sent(tpcb, NULL);
    a07c:	00000593          	li	a1,0
    a080:	00040513          	mv	a0,s0
    a084:	6d4080ef          	jal	ra,12758 <tcp_sent>
    tcp_err(tpcb, NULL);
    a088:	00000593          	li	a1,0
    a08c:	00040513          	mv	a0,s0
    a090:	71c080ef          	jal	ra,127ac <tcp_err>
    tcp_poll(tpcb, NULL, tpcb->pollinterval);
    a094:	02144603          	lbu	a2,33(s0)
    a098:	00000593          	li	a1,0
    a09c:	00040513          	mv	a0,s0
    a0a0:	77c080ef          	jal	ra,1281c <tcp_poll>
}
    a0a4:	fbdff06f          	j	a060 <altcp_tcp_remove_callbacks+0x24>

0000a0a8 <altcp_tcp_close>:
{
    a0a8:	fe010113          	addi	sp,sp,-32
    a0ac:	00112e23          	sw	ra,28(sp)
    a0b0:	00812c23          	sw	s0,24(sp)
    a0b4:	00912a23          	sw	s1,20(sp)
    a0b8:	01212823          	sw	s2,16(sp)
    a0bc:	01312623          	sw	s3,12(sp)
  if (conn == NULL) {
    a0c0:	08050863          	beqz	a0,a150 <altcp_tcp_close+0xa8>
    a0c4:	00050413          	mv	s0,a0
  ALTCP_TCP_ASSERT_CONN(conn);
    a0c8:	00452783          	lw	a5,4(a0)
    a0cc:	00078863          	beqz	a5,a0dc <altcp_tcp_close+0x34>
    a0d0:	0001d537          	lui	a0,0x1d
    a0d4:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    a0d8:	f74ff0ef          	jal	ra,984c <bsp_printf>
  pcb = (struct tcp_pcb *)conn->state;
    a0dc:	00c42483          	lw	s1,12(s0)
  if (pcb) {
    a0e0:	02048263          	beqz	s1,a104 <altcp_tcp_close+0x5c>
    tcp_poll_fn oldpoll = pcb->poll;
    a0e4:	0904a983          	lw	s3,144(s1)
    altcp_tcp_remove_callbacks(pcb);
    a0e8:	00048513          	mv	a0,s1
    a0ec:	f51ff0ef          	jal	ra,a03c <altcp_tcp_remove_callbacks>
    err = tcp_close(pcb);
    a0f0:	00048513          	mv	a0,s1
    a0f4:	474090ef          	jal	ra,13568 <tcp_close>
    a0f8:	00050913          	mv	s2,a0
    if (err != ERR_OK) {
    a0fc:	02051a63          	bnez	a0,a130 <altcp_tcp_close+0x88>
    conn->state = NULL; /* unsafe to reference pcb after tcp_close(). */
    a100:	00042623          	sw	zero,12(s0)
  altcp_free(conn);
    a104:	00040513          	mv	a0,s0
    a108:	624000ef          	jal	ra,a72c <altcp_free>
  return ERR_OK;
    a10c:	00000913          	li	s2,0
}
    a110:	00090513          	mv	a0,s2
    a114:	01c12083          	lw	ra,28(sp)
    a118:	01812403          	lw	s0,24(sp)
    a11c:	01412483          	lw	s1,20(sp)
    a120:	01012903          	lw	s2,16(sp)
    a124:	00c12983          	lw	s3,12(sp)
    a128:	02010113          	addi	sp,sp,32
    a12c:	00008067          	ret
      altcp_tcp_setup_callbacks(conn, pcb);
    a130:	00048593          	mv	a1,s1
    a134:	00040513          	mv	a0,s0
    a138:	d98ff0ef          	jal	ra,96d0 <altcp_tcp_setup_callbacks>
      tcp_poll(pcb, oldpoll, pcb->pollinterval);
    a13c:	0214c603          	lbu	a2,33(s1)
    a140:	00098593          	mv	a1,s3
    a144:	00048513          	mv	a0,s1
    a148:	6d4080ef          	jal	ra,1281c <tcp_poll>
      return err;
    a14c:	fc5ff06f          	j	a110 <altcp_tcp_close+0x68>
    return ERR_VAL;
    a150:	ffa00913          	li	s2,-6
    a154:	fbdff06f          	j	a110 <altcp_tcp_close+0x68>

0000a158 <altcp_tcp_set_poll>:
  if (conn != NULL) {
    a158:	04050c63          	beqz	a0,a1b0 <altcp_tcp_set_poll+0x58>
{
    a15c:	ff010113          	addi	sp,sp,-16
    a160:	00112623          	sw	ra,12(sp)
    a164:	00812423          	sw	s0,8(sp)
    a168:	00912223          	sw	s1,4(sp)
    a16c:	00058413          	mv	s0,a1
    struct tcp_pcb *pcb = (struct tcp_pcb *)conn->state;
    a170:	00c52483          	lw	s1,12(a0)
    ALTCP_TCP_ASSERT_CONN(conn);
    a174:	00452783          	lw	a5,4(a0)
    a178:	00078863          	beqz	a5,a188 <altcp_tcp_set_poll+0x30>
    a17c:	0001d537          	lui	a0,0x1d
    a180:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    a184:	ec8ff0ef          	jal	ra,984c <bsp_printf>
    tcp_poll(pcb, altcp_tcp_poll, interval);
    a188:	00040613          	mv	a2,s0
    a18c:	0000a5b7          	lui	a1,0xa
    a190:	d3c58593          	addi	a1,a1,-708 # 9d3c <altcp_tcp_poll>
    a194:	00048513          	mv	a0,s1
    a198:	684080ef          	jal	ra,1281c <tcp_poll>
}
    a19c:	00c12083          	lw	ra,12(sp)
    a1a0:	00812403          	lw	s0,8(sp)
    a1a4:	00412483          	lw	s1,4(sp)
    a1a8:	01010113          	addi	sp,sp,16
    a1ac:	00008067          	ret
    a1b0:	00008067          	ret

0000a1b4 <altcp_tcp_abort>:
  if (conn != NULL) {
    a1b4:	04050263          	beqz	a0,a1f8 <altcp_tcp_abort+0x44>
{
    a1b8:	ff010113          	addi	sp,sp,-16
    a1bc:	00112623          	sw	ra,12(sp)
    a1c0:	00812423          	sw	s0,8(sp)
    struct tcp_pcb *pcb = (struct tcp_pcb *)conn->state;
    a1c4:	00c52403          	lw	s0,12(a0)
    ALTCP_TCP_ASSERT_CONN(conn);
    a1c8:	00452783          	lw	a5,4(a0)
    a1cc:	00078863          	beqz	a5,a1dc <altcp_tcp_abort+0x28>
    a1d0:	0001d537          	lui	a0,0x1d
    a1d4:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    a1d8:	e74ff0ef          	jal	ra,984c <bsp_printf>
    if (pcb) {
    a1dc:	00040663          	beqz	s0,a1e8 <altcp_tcp_abort+0x34>
      tcp_abort(pcb);
    a1e0:	00040513          	mv	a0,s0
    a1e4:	4e9080ef          	jal	ra,12ecc <tcp_abort>
}
    a1e8:	00c12083          	lw	ra,12(sp)
    a1ec:	00812403          	lw	s0,8(sp)
    a1f0:	01010113          	addi	sp,sp,16
    a1f4:	00008067          	ret
    a1f8:	00008067          	ret

0000a1fc <altcp_tcp_listen>:
  if (conn == NULL) {
    a1fc:	06050c63          	beqz	a0,a274 <altcp_tcp_listen+0x78>
{
    a200:	ff010113          	addi	sp,sp,-16
    a204:	00112623          	sw	ra,12(sp)
    a208:	00812423          	sw	s0,8(sp)
    a20c:	00912223          	sw	s1,4(sp)
    a210:	01212023          	sw	s2,0(sp)
    a214:	00060913          	mv	s2,a2
    a218:	00058493          	mv	s1,a1
    a21c:	00050413          	mv	s0,a0
  ALTCP_TCP_ASSERT_CONN(conn);
    a220:	00452783          	lw	a5,4(a0)
    a224:	00078863          	beqz	a5,a234 <altcp_tcp_listen+0x38>
    a228:	0001d537          	lui	a0,0x1d
    a22c:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    a230:	e1cff0ef          	jal	ra,984c <bsp_printf>
  lpcb = tcp_listen_with_backlog_and_err(pcb, backlog, err);
    a234:	00090613          	mv	a2,s2
    a238:	00048593          	mv	a1,s1
    a23c:	00c42503          	lw	a0,12(s0)
    a240:	084080ef          	jal	ra,122c4 <tcp_listen_with_backlog_and_err>
  if (lpcb != NULL) {
    a244:	00050c63          	beqz	a0,a25c <altcp_tcp_listen+0x60>
    conn->state = lpcb;
    a248:	00a42623          	sw	a0,12(s0)
    tcp_accept(lpcb, altcp_tcp_accept);
    a24c:	000095b7          	lui	a1,0x9
    a250:	77c58593          	addi	a1,a1,1916 # 977c <altcp_tcp_accept>
    a254:	5ac080ef          	jal	ra,12800 <tcp_accept>
    return conn;
    a258:	00040513          	mv	a0,s0
}
    a25c:	00c12083          	lw	ra,12(sp)
    a260:	00812403          	lw	s0,8(sp)
    a264:	00412483          	lw	s1,4(sp)
    a268:	00012903          	lw	s2,0(sp)
    a26c:	01010113          	addi	sp,sp,16
    a270:	00008067          	ret
    a274:	00008067          	ret

0000a278 <altcp_tcp_connect>:
  if (conn == NULL) {
    a278:	06050c63          	beqz	a0,a2f0 <altcp_tcp_connect+0x78>
{
    a27c:	fe010113          	addi	sp,sp,-32
    a280:	00112e23          	sw	ra,28(sp)
    a284:	00812c23          	sw	s0,24(sp)
    a288:	00912a23          	sw	s1,20(sp)
    a28c:	01212823          	sw	s2,16(sp)
    a290:	01312623          	sw	s3,12(sp)
    a294:	00068993          	mv	s3,a3
    a298:	00060913          	mv	s2,a2
    a29c:	00058493          	mv	s1,a1
    a2a0:	00050413          	mv	s0,a0
  ALTCP_TCP_ASSERT_CONN(conn);
    a2a4:	00452783          	lw	a5,4(a0)
    a2a8:	00078863          	beqz	a5,a2b8 <altcp_tcp_connect+0x40>
    a2ac:	0001d537          	lui	a0,0x1d
    a2b0:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    a2b4:	d98ff0ef          	jal	ra,984c <bsp_printf>
  conn->connected = connected;
    a2b8:	01342a23          	sw	s3,20(s0)
  return tcp_connect(pcb, ipaddr, port, altcp_tcp_connected);
    a2bc:	0000a6b7          	lui	a3,0xa
    a2c0:	cbc68693          	addi	a3,a3,-836 # 9cbc <altcp_tcp_connected>
    a2c4:	00090613          	mv	a2,s2
    a2c8:	00048593          	mv	a1,s1
    a2cc:	00c42503          	lw	a0,12(s0)
    a2d0:	66c080ef          	jal	ra,1293c <tcp_connect>
}
    a2d4:	01c12083          	lw	ra,28(sp)
    a2d8:	01812403          	lw	s0,24(sp)
    a2dc:	01412483          	lw	s1,20(sp)
    a2e0:	01012903          	lw	s2,16(sp)
    a2e4:	00c12983          	lw	s3,12(sp)
    a2e8:	02010113          	addi	sp,sp,32
    a2ec:	00008067          	ret
    return ERR_VAL;
    a2f0:	ffa00513          	li	a0,-6
}
    a2f4:	00008067          	ret

0000a2f8 <altcp_tcp_bind>:
  if (conn == NULL) {
    a2f8:	06050063          	beqz	a0,a358 <altcp_tcp_bind+0x60>
{
    a2fc:	ff010113          	addi	sp,sp,-16
    a300:	00112623          	sw	ra,12(sp)
    a304:	00812423          	sw	s0,8(sp)
    a308:	00912223          	sw	s1,4(sp)
    a30c:	01212023          	sw	s2,0(sp)
    a310:	00060913          	mv	s2,a2
    a314:	00058493          	mv	s1,a1
    a318:	00050413          	mv	s0,a0
  ALTCP_TCP_ASSERT_CONN(conn);
    a31c:	00452783          	lw	a5,4(a0)
    a320:	00078863          	beqz	a5,a330 <altcp_tcp_bind+0x38>
    a324:	0001d537          	lui	a0,0x1d
    a328:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    a32c:	d20ff0ef          	jal	ra,984c <bsp_printf>
  return tcp_bind(pcb, ipaddr, port);
    a330:	00090613          	mv	a2,s2
    a334:	00048593          	mv	a1,s1
    a338:	00c42503          	lw	a0,12(s0)
    a33c:	651070ef          	jal	ra,1218c <tcp_bind>
}
    a340:	00c12083          	lw	ra,12(sp)
    a344:	00812403          	lw	s0,8(sp)
    a348:	00412483          	lw	s1,4(sp)
    a34c:	00012903          	lw	s2,0(sp)
    a350:	01010113          	addi	sp,sp,16
    a354:	00008067          	ret
    return ERR_VAL;
    a358:	ffa00513          	li	a0,-6
}
    a35c:	00008067          	ret

0000a360 <altcp_tcp_recved>:
  if (conn != NULL) {
    a360:	04050863          	beqz	a0,a3b0 <altcp_tcp_recved+0x50>
{
    a364:	ff010113          	addi	sp,sp,-16
    a368:	00112623          	sw	ra,12(sp)
    a36c:	00812423          	sw	s0,8(sp)
    a370:	00912223          	sw	s1,4(sp)
    a374:	00058413          	mv	s0,a1
    struct tcp_pcb *pcb = (struct tcp_pcb *)conn->state;
    a378:	00c52483          	lw	s1,12(a0)
    ALTCP_TCP_ASSERT_CONN(conn);
    a37c:	00452783          	lw	a5,4(a0)
    a380:	00078863          	beqz	a5,a390 <altcp_tcp_recved+0x30>
    a384:	0001d537          	lui	a0,0x1d
    a388:	78c50513          	addi	a0,a0,1932 # 1d78c <altcp_tcp_functions+0x54>
    a38c:	cc0ff0ef          	jal	ra,984c <bsp_printf>
    tcp_recved(pcb, len);
    a390:	00040593          	mv	a1,s0
    a394:	00048513          	mv	a0,s1
    a398:	184080ef          	jal	ra,1251c <tcp_recved>
}
    a39c:	00c12083          	lw	ra,12(sp)
    a3a0:	00812403          	lw	s0,8(sp)
    a3a4:	00412483          	lw	s1,4(sp)
    a3a8:	01010113          	addi	sp,sp,16
    a3ac:	00008067          	ret
    a3b0:	00008067          	ret

0000a3b4 <altcp_tcp_new_ip_type>:
{
    a3b4:	ff010113          	addi	sp,sp,-16
    a3b8:	00112623          	sw	ra,12(sp)
    a3bc:	00812423          	sw	s0,8(sp)
    a3c0:	00912223          	sw	s1,4(sp)
  struct tcp_pcb *tpcb = tcp_new_ip_type(ip_type);
    a3c4:	79d080ef          	jal	ra,13360 <tcp_new_ip_type>
    a3c8:	00050493          	mv	s1,a0
  if (tpcb != NULL) {
    a3cc:	02050e63          	beqz	a0,a408 <altcp_tcp_new_ip_type+0x54>
    struct altcp_pcb *ret = altcp_alloc();
    a3d0:	320000ef          	jal	ra,a6f0 <altcp_alloc>
    a3d4:	00050413          	mv	s0,a0
    if (ret != NULL) {
    a3d8:	02050263          	beqz	a0,a3fc <altcp_tcp_new_ip_type+0x48>
      altcp_tcp_setup(ret, tpcb);
    a3dc:	00048593          	mv	a1,s1
    a3e0:	b5cff0ef          	jal	ra,973c <altcp_tcp_setup>
}
    a3e4:	00040513          	mv	a0,s0
    a3e8:	00c12083          	lw	ra,12(sp)
    a3ec:	00812403          	lw	s0,8(sp)
    a3f0:	00412483          	lw	s1,4(sp)
    a3f4:	01010113          	addi	sp,sp,16
    a3f8:	00008067          	ret
      tcp_close(tpcb);
    a3fc:	00048513          	mv	a0,s1
    a400:	168090ef          	jal	ra,13568 <tcp_close>
    a404:	fe1ff06f          	j	a3e4 <altcp_tcp_new_ip_type+0x30>
  return NULL;
    a408:	00050413          	mv	s0,a0
    a40c:	fd9ff06f          	j	a3e4 <altcp_tcp_new_ip_type+0x30>

0000a410 <altcp_tcp_alloc>:
{
    a410:	ff010113          	addi	sp,sp,-16
    a414:	00112623          	sw	ra,12(sp)
  return altcp_tcp_new_ip_type(ip_type);
    a418:	00058513          	mv	a0,a1
    a41c:	f99ff0ef          	jal	ra,a3b4 <altcp_tcp_new_ip_type>
}
    a420:	00c12083          	lw	ra,12(sp)
    a424:	01010113          	addi	sp,sp,16
    a428:	00008067          	ret

0000a42c <altcp_tcp_wrap>:
{
    a42c:	ff010113          	addi	sp,sp,-16
    a430:	00112623          	sw	ra,12(sp)
    a434:	00812423          	sw	s0,8(sp)
    a438:	00912223          	sw	s1,4(sp)
  if (tpcb != NULL) {
    a43c:	02050a63          	beqz	a0,a470 <altcp_tcp_wrap+0x44>
    a440:	00050413          	mv	s0,a0
    struct altcp_pcb *ret = altcp_alloc();
    a444:	2ac000ef          	jal	ra,a6f0 <altcp_alloc>
    a448:	00050493          	mv	s1,a0
    if (ret != NULL) {
    a44c:	00050663          	beqz	a0,a458 <altcp_tcp_wrap+0x2c>
      altcp_tcp_setup(ret, tpcb);
    a450:	00040593          	mv	a1,s0
    a454:	ae8ff0ef          	jal	ra,973c <altcp_tcp_setup>
}
    a458:	00048513          	mv	a0,s1
    a45c:	00c12083          	lw	ra,12(sp)
    a460:	00812403          	lw	s0,8(sp)
    a464:	00412483          	lw	s1,4(sp)
    a468:	01010113          	addi	sp,sp,16
    a46c:	00008067          	ret
  return NULL;
    a470:	00050493          	mv	s1,a0
    a474:	fe5ff06f          	j	a458 <altcp_tcp_wrap+0x2c>

0000a478 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
    a478:	00851793          	slli	a5,a0,0x8
    a47c:	00855513          	srli	a0,a0,0x8
    a480:	00a7e533          	or	a0,a5,a0
}
    a484:	01051513          	slli	a0,a0,0x10
    a488:	01055513          	srli	a0,a0,0x10
    a48c:	00008067          	ret

0000a490 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
    a490:	01851793          	slli	a5,a0,0x18
    a494:	00851713          	slli	a4,a0,0x8
    a498:	00ff06b7          	lui	a3,0xff0
    a49c:	00d77733          	and	a4,a4,a3
    a4a0:	00e7e7b3          	or	a5,a5,a4
    a4a4:	00855713          	srli	a4,a0,0x8
    a4a8:	000106b7          	lui	a3,0x10
    a4ac:	f0068693          	addi	a3,a3,-256 # ff00 <tcp_input+0x84>
    a4b0:	00d77733          	and	a4,a4,a3
    a4b4:	00e7e7b3          	or	a5,a5,a4
    a4b8:	01855513          	srli	a0,a0,0x18
}
    a4bc:	00a7e533          	or	a0,a5,a0
    a4c0:	00008067          	ret

0000a4c4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
    a4c4:	fe010113          	addi	sp,sp,-32
    a4c8:	00112e23          	sw	ra,28(sp)
    a4cc:	00812c23          	sw	s0,24(sp)
    a4d0:	00912a23          	sw	s1,20(sp)
    a4d4:	01212823          	sw	s2,16(sp)
    a4d8:	01312623          	sw	s3,12(sp)
    a4dc:	01412423          	sw	s4,8(sp)
    a4e0:	00050993          	mv	s3,a0
    a4e4:	00058913          	mv	s2,a1
    a4e8:	00060a13          	mv	s4,a2
  const char *p;
  size_t tokenlen = strlen(token);
    a4ec:	00058513          	mv	a0,a1
    a4f0:	8bdf70ef          	jal	ra,1dac <strlen>
  if (tokenlen == 0) {
    a4f4:	04050863          	beqz	a0,a544 <lwip_strnstr+0x80>
    a4f8:	00050493          	mv	s1,a0
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
    a4fc:	00098413          	mv	s0,s3
    a500:	0080006f          	j	a508 <lwip_strnstr+0x44>
    a504:	00140413          	addi	s0,s0,1
    a508:	00044703          	lbu	a4,0(s0)
    a50c:	06070063          	beqz	a4,a56c <lwip_strnstr+0xa8>
    a510:	009407b3          	add	a5,s0,s1
    a514:	014986b3          	add	a3,s3,s4
    a518:	02f6e263          	bltu	a3,a5,a53c <lwip_strnstr+0x78>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
    a51c:	00094783          	lbu	a5,0(s2)
    a520:	fee792e3          	bne	a5,a4,a504 <lwip_strnstr+0x40>
    a524:	00048613          	mv	a2,s1
    a528:	00090593          	mv	a1,s2
    a52c:	00040513          	mv	a0,s0
    a530:	909f70ef          	jal	ra,1e38 <strncmp>
    a534:	fc0518e3          	bnez	a0,a504 <lwip_strnstr+0x40>
    a538:	0100006f          	j	a548 <lwip_strnstr+0x84>
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
    a53c:	00000413          	li	s0,0
    a540:	0080006f          	j	a548 <lwip_strnstr+0x84>
    return LWIP_CONST_CAST(char *, buffer);
    a544:	00098413          	mv	s0,s3
}
    a548:	00040513          	mv	a0,s0
    a54c:	01c12083          	lw	ra,28(sp)
    a550:	01812403          	lw	s0,24(sp)
    a554:	01412483          	lw	s1,20(sp)
    a558:	01012903          	lw	s2,16(sp)
    a55c:	00c12983          	lw	s3,12(sp)
    a560:	00812a03          	lw	s4,8(sp)
    a564:	02010113          	addi	sp,sp,32
    a568:	00008067          	ret
  return NULL;
    a56c:	00000413          	li	s0,0
    a570:	fd9ff06f          	j	a548 <lwip_strnstr+0x84>

0000a574 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
    a574:	0100006f          	j	a584 <lwip_stricmp+0x10>
  char c1, c2;

  do {
    c1 = *str1++;
    a578:	00088513          	mv	a0,a7
    c2 = *str2++;
    a57c:	00080593          	mv	a1,a6
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
    a580:	02070e63          	beqz	a4,a5bc <lwip_stricmp+0x48>
    c1 = *str1++;
    a584:	00150893          	addi	a7,a0,1
    a588:	00054703          	lbu	a4,0(a0)
    c2 = *str2++;
    a58c:	00158813          	addi	a6,a1,1
    a590:	0005c783          	lbu	a5,0(a1)
    if (c1 != c2) {
    a594:	fef702e3          	beq	a4,a5,a578 <lwip_stricmp+0x4>
      char c1_upc = c1 | 0x20;
    a598:	02076613          	ori	a2,a4,32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
    a59c:	f9f60693          	addi	a3,a2,-97
    a5a0:	0ff6f693          	andi	a3,a3,255
    a5a4:	01900593          	li	a1,25
    a5a8:	00d5ee63          	bltu	a1,a3,a5c4 <lwip_stricmp+0x50>
        char c2_upc = c2 | 0x20;
    a5ac:	0207e793          	ori	a5,a5,32
        if (c1_upc != c2_upc) {
    a5b0:	fcf604e3          	beq	a2,a5,a578 <lwip_stricmp+0x4>
          return 1;
    a5b4:	00100513          	li	a0,1
  return 0;
}
    a5b8:	00008067          	ret
  return 0;
    a5bc:	00000513          	li	a0,0
    a5c0:	00008067          	ret
        return 1;
    a5c4:	00100513          	li	a0,1
    a5c8:	00008067          	ret

0000a5cc <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
    a5cc:	0180006f          	j	a5e4 <lwip_strnicmp+0x18>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
    a5d0:	fff60613          	addi	a2,a2,-1
  } while ((len != 0) && (c1 != 0));
    a5d4:	04060c63          	beqz	a2,a62c <lwip_strnicmp+0x60>
    c1 = *str1++;
    a5d8:	00088513          	mv	a0,a7
    c2 = *str2++;
    a5dc:	00080593          	mv	a1,a6
  } while ((len != 0) && (c1 != 0));
    a5e0:	02070e63          	beqz	a4,a61c <lwip_strnicmp+0x50>
    c1 = *str1++;
    a5e4:	00150893          	addi	a7,a0,1
    a5e8:	00054703          	lbu	a4,0(a0)
    c2 = *str2++;
    a5ec:	00158813          	addi	a6,a1,1
    a5f0:	0005c783          	lbu	a5,0(a1)
    if (c1 != c2) {
    a5f4:	fcf70ee3          	beq	a4,a5,a5d0 <lwip_strnicmp+0x4>
      char c1_upc = c1 | 0x20;
    a5f8:	02076593          	ori	a1,a4,32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
    a5fc:	f9f58693          	addi	a3,a1,-97
    a600:	0ff6f693          	andi	a3,a3,255
    a604:	01900513          	li	a0,25
    a608:	00d56e63          	bltu	a0,a3,a624 <lwip_strnicmp+0x58>
        char c2_upc = c2 | 0x20;
    a60c:	0207e793          	ori	a5,a5,32
        if (c1_upc != c2_upc) {
    a610:	fcf580e3          	beq	a1,a5,a5d0 <lwip_strnicmp+0x4>
          return 1;
    a614:	00100513          	li	a0,1
    a618:	00008067          	ret
  return 0;
    a61c:	00000513          	li	a0,0
    a620:	00008067          	ret
        return 1;
    a624:	00100513          	li	a0,1
    a628:	00008067          	ret
  return 0;
    a62c:	00000513          	li	a0,0
}
    a630:	00008067          	ret

0000a634 <lwip_itoa>:
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
  char *res = result;
  char *tmp = result + bufsize - 1;
    a634:	fff58713          	addi	a4,a1,-1
    a638:	00e50733          	add	a4,a0,a4
  int n = (number >= 0) ? number : -number;
    a63c:	41f65793          	srai	a5,a2,0x1f
    a640:	00c7c6b3          	xor	a3,a5,a2
    a644:	40f686b3          	sub	a3,a3,a5

  /* handle invalid bufsize */
  if (bufsize < 2) {
    a648:	00100793          	li	a5,1
    a64c:	02b7fc63          	bgeu	a5,a1,a684 <lwip_itoa+0x50>
    }
    return;
  }

  /* First, add sign */
  if (number < 0) {
    a650:	04064263          	bltz	a2,a694 <lwip_itoa+0x60>
  char *res = result;
    a654:	00050813          	mv	a6,a0
    *res++ = '-';
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
    a658:	00070023          	sb	zero,0(a4)
  while ((n != 0) && (tmp > res)) {
    a65c:	04068463          	beqz	a3,a6a4 <lwip_itoa+0x70>
    a660:	04e87263          	bgeu	a6,a4,a6a4 <lwip_itoa+0x70>
    char val = (char)('0' + (n % 10));
    a664:	00a00613          	li	a2,10
    a668:	02c6e7b3          	rem	a5,a3,a2
    a66c:	0ff7f793          	andi	a5,a5,255
    a670:	03078793          	addi	a5,a5,48
    tmp--;
    a674:	fff70713          	addi	a4,a4,-1
    *tmp = val;
    a678:	00f70023          	sb	a5,0(a4)
    n = n / 10;
    a67c:	02c6c6b3          	div	a3,a3,a2
    a680:	fddff06f          	j	a65c <lwip_itoa+0x28>
    if (bufsize == 1) {
    a684:	00f58463          	beq	a1,a5,a68c <lwip_itoa+0x58>
    a688:	00008067          	ret
      *result = 0;
    a68c:	00050023          	sb	zero,0(a0)
    return;
    a690:	00008067          	ret
    *res++ = '-';
    a694:	00150813          	addi	a6,a0,1
    a698:	02d00793          	li	a5,45
    a69c:	00f50023          	sb	a5,0(a0)
    a6a0:	fb9ff06f          	j	a658 <lwip_itoa+0x24>
  }
  if (n) {
    a6a4:	00069e63          	bnez	a3,a6c0 <lwip_itoa+0x8c>
    /* buffer is too small */
    *result = 0;
    return;
  }
  if (*tmp == 0) {
    a6a8:	00074783          	lbu	a5,0(a4)
    a6ac:	00079e63          	bnez	a5,a6c8 <lwip_itoa+0x94>
    /* Nothing added? */
    *res++ = '0';
    a6b0:	03000793          	li	a5,48
    a6b4:	00f80023          	sb	a5,0(a6)
    *res++ = 0;
    a6b8:	000800a3          	sb	zero,1(a6)
    return;
    a6bc:	00008067          	ret
    *result = 0;
    a6c0:	00050023          	sb	zero,0(a0)
    return;
    a6c4:	00008067          	ret
{
    a6c8:	ff010113          	addi	sp,sp,-16
    a6cc:	00112623          	sw	ra,12(sp)
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
    a6d0:	00b50633          	add	a2,a0,a1
    a6d4:	40e60633          	sub	a2,a2,a4
    a6d8:	00070593          	mv	a1,a4
    a6dc:	00080513          	mv	a0,a6
    a6e0:	c00f70ef          	jal	ra,1ae0 <memmove>
}
    a6e4:	00c12083          	lw	ra,12(sp)
    a6e8:	01010113          	addi	sp,sp,16
    a6ec:	00008067          	ret

0000a6f0 <altcp_alloc>:
 * For altcp layer implementations only: allocate a new struct altcp_pcb from the pool
 * and zero the memory
 */
struct altcp_pcb *
altcp_alloc(void)
{
    a6f0:	ff010113          	addi	sp,sp,-16
    a6f4:	00112623          	sw	ra,12(sp)
    a6f8:	00812423          	sw	s0,8(sp)
  struct altcp_pcb *ret = (struct altcp_pcb *)memp_malloc(MEMP_ALTCP_PCB);
    a6fc:	00400513          	li	a0,4
    a700:	54d090ef          	jal	ra,1444c <memp_malloc>
    a704:	00050413          	mv	s0,a0
  if (ret != NULL) {
    a708:	00050863          	beqz	a0,a718 <altcp_alloc+0x28>
    memset(ret, 0, sizeof(struct altcp_pcb));
    a70c:	02c00613          	li	a2,44
    a710:	00000593          	li	a1,0
    a714:	cecf70ef          	jal	ra,1c00 <memset>
  }
  return ret;
}
    a718:	00040513          	mv	a0,s0
    a71c:	00c12083          	lw	ra,12(sp)
    a720:	00812403          	lw	s0,8(sp)
    a724:	01010113          	addi	sp,sp,16
    a728:	00008067          	ret

0000a72c <altcp_free>:
 * For altcp layer implementations only: return a struct altcp_pcb to the pool
 */
void
altcp_free(struct altcp_pcb *conn)
{
  if (conn) {
    a72c:	04050263          	beqz	a0,a770 <altcp_free+0x44>
{
    a730:	ff010113          	addi	sp,sp,-16
    a734:	00112623          	sw	ra,12(sp)
    a738:	00812423          	sw	s0,8(sp)
    a73c:	00050413          	mv	s0,a0
    if (conn->fns && conn->fns->dealloc) {
    a740:	00052783          	lw	a5,0(a0)
    a744:	00078863          	beqz	a5,a754 <altcp_free+0x28>
    a748:	0447a783          	lw	a5,68(a5)
    a74c:	00078463          	beqz	a5,a754 <altcp_free+0x28>
      conn->fns->dealloc(conn);
    a750:	000780e7          	jalr	a5
    }
    memp_free(MEMP_ALTCP_PCB, conn);
    a754:	00040593          	mv	a1,s0
    a758:	00400513          	li	a0,4
    a75c:	581090ef          	jal	ra,144dc <memp_free>
  }
}
    a760:	00c12083          	lw	ra,12(sp)
    a764:	00812403          	lw	s0,8(sp)
    a768:	01010113          	addi	sp,sp,16
    a76c:	00008067          	ret
    a770:	00008067          	ret

0000a774 <altcp_new_ip_type>:
 * @param ip_type IP version of the pcb (@ref lwip_ip_addr_type)
 * @return a new altcp_pcb or NULL on error
 */
struct altcp_pcb *
altcp_new_ip_type(altcp_allocator_t *allocator, u8_t ip_type)
{
    a774:	ff010113          	addi	sp,sp,-16
    a778:	00112623          	sw	ra,12(sp)
  struct altcp_pcb *conn;
  if (allocator == NULL) {
    a77c:	02050063          	beqz	a0,a79c <altcp_new_ip_type+0x28>
    /* no allocator given, create a simple TCP connection */
    return altcp_tcp_new_ip_type(ip_type);
  }
  if (allocator->alloc == NULL) {
    a780:	00052783          	lw	a5,0(a0)
    a784:	02078263          	beqz	a5,a7a8 <altcp_new_ip_type+0x34>
    /* illegal allocator */
    return NULL;
  }
  conn = allocator->alloc(allocator->arg, ip_type);
    a788:	00452503          	lw	a0,4(a0)
    a78c:	000780e7          	jalr	a5
  if (conn == NULL) {
    /* allocation failed */
    return NULL;
  }
  return conn;
}
    a790:	00c12083          	lw	ra,12(sp)
    a794:	01010113          	addi	sp,sp,16
    a798:	00008067          	ret
    return altcp_tcp_new_ip_type(ip_type);
    a79c:	00058513          	mv	a0,a1
    a7a0:	c15ff0ef          	jal	ra,a3b4 <altcp_tcp_new_ip_type>
    a7a4:	fedff06f          	j	a790 <altcp_new_ip_type+0x1c>
    return NULL;
    a7a8:	00000513          	li	a0,0
    a7ac:	fe5ff06f          	j	a790 <altcp_new_ip_type+0x1c>

0000a7b0 <altcp_new_ip6>:
{
    a7b0:	ff010113          	addi	sp,sp,-16
    a7b4:	00112623          	sw	ra,12(sp)
  return altcp_new_ip_type(allocator, IPADDR_TYPE_V6);
    a7b8:	00600593          	li	a1,6
    a7bc:	fb9ff0ef          	jal	ra,a774 <altcp_new_ip_type>
}
    a7c0:	00c12083          	lw	ra,12(sp)
    a7c4:	01010113          	addi	sp,sp,16
    a7c8:	00008067          	ret

0000a7cc <altcp_new>:
{
    a7cc:	ff010113          	addi	sp,sp,-16
    a7d0:	00112623          	sw	ra,12(sp)
  return altcp_new_ip_type(allocator, IPADDR_TYPE_V4);
    a7d4:	00000593          	li	a1,0
    a7d8:	f9dff0ef          	jal	ra,a774 <altcp_new_ip_type>
}
    a7dc:	00c12083          	lw	ra,12(sp)
    a7e0:	01010113          	addi	sp,sp,16
    a7e4:	00008067          	ret

0000a7e8 <altcp_arg>:
 * @see tcp_arg()
 */
void
altcp_arg(struct altcp_pcb *conn, void *arg)
{
  if (conn) {
    a7e8:	00050463          	beqz	a0,a7f0 <altcp_arg+0x8>
    conn->arg = arg;
    a7ec:	00b52423          	sw	a1,8(a0)
  }
}
    a7f0:	00008067          	ret

0000a7f4 <altcp_accept>:
 * @see tcp_accept()
 */
void
altcp_accept(struct altcp_pcb *conn, altcp_accept_fn accept)
{
  if (conn != NULL) {
    a7f4:	00050463          	beqz	a0,a7fc <altcp_accept+0x8>
    conn->accept = accept;
    a7f8:	00b52823          	sw	a1,16(a0)
  }
}
    a7fc:	00008067          	ret

0000a800 <altcp_recv>:
 * @see tcp_recv()
 */
void
altcp_recv(struct altcp_pcb *conn, altcp_recv_fn recv)
{
  if (conn) {
    a800:	00050463          	beqz	a0,a808 <altcp_recv+0x8>
    conn->recv = recv;
    a804:	00b52c23          	sw	a1,24(a0)
  }
}
    a808:	00008067          	ret

0000a80c <altcp_sent>:
 * @see tcp_sent()
 */
void
altcp_sent(struct altcp_pcb *conn, altcp_sent_fn sent)
{
  if (conn) {
    a80c:	00050463          	beqz	a0,a814 <altcp_sent+0x8>
    conn->sent = sent;
    a810:	00b52e23          	sw	a1,28(a0)
  }
}
    a814:	00008067          	ret

0000a818 <altcp_poll>:
 * @see tcp_poll()
 */
void
altcp_poll(struct altcp_pcb *conn, altcp_poll_fn poll, u8_t interval)
{
  if (conn) {
    a818:	02050c63          	beqz	a0,a850 <altcp_poll+0x38>
    conn->poll = poll;
    a81c:	02b52023          	sw	a1,32(a0)
    conn->pollinterval = interval;
    a820:	02c50423          	sb	a2,40(a0)
    if (conn->fns && conn->fns->set_poll) {
    a824:	00052783          	lw	a5,0(a0)
    a828:	02078463          	beqz	a5,a850 <altcp_poll+0x38>
    a82c:	0007a783          	lw	a5,0(a5)
    a830:	02078063          	beqz	a5,a850 <altcp_poll+0x38>
{
    a834:	ff010113          	addi	sp,sp,-16
    a838:	00112623          	sw	ra,12(sp)
    a83c:	00060593          	mv	a1,a2
      conn->fns->set_poll(conn, interval);
    a840:	000780e7          	jalr	a5
    }
  }
}
    a844:	00c12083          	lw	ra,12(sp)
    a848:	01010113          	addi	sp,sp,16
    a84c:	00008067          	ret
    a850:	00008067          	ret

0000a854 <altcp_err>:
 * @see tcp_err()
 */
void
altcp_err(struct altcp_pcb *conn, altcp_err_fn err)
{
  if (conn) {
    a854:	00050463          	beqz	a0,a85c <altcp_err+0x8>
    conn->err = err;
    a858:	02b52223          	sw	a1,36(a0)
  }
}
    a85c:	00008067          	ret

0000a860 <altcp_recved>:
 * @see tcp_recved()
 */
void
altcp_recved(struct altcp_pcb *conn, u16_t len)
{
  if (conn && conn->fns && conn->fns->recved) {
    a860:	02050663          	beqz	a0,a88c <altcp_recved+0x2c>
    a864:	00052783          	lw	a5,0(a0)
    a868:	02078263          	beqz	a5,a88c <altcp_recved+0x2c>
    a86c:	0047a783          	lw	a5,4(a5)
    a870:	00078e63          	beqz	a5,a88c <altcp_recved+0x2c>
{
    a874:	ff010113          	addi	sp,sp,-16
    a878:	00112623          	sw	ra,12(sp)
    conn->fns->recved(conn, len);
    a87c:	000780e7          	jalr	a5
  }
}
    a880:	00c12083          	lw	ra,12(sp)
    a884:	01010113          	addi	sp,sp,16
    a888:	00008067          	ret
    a88c:	00008067          	ret

0000a890 <altcp_bind>:
 * @see tcp_bind()
 */
err_t
altcp_bind(struct altcp_pcb *conn, const ip_addr_t *ipaddr, u16_t port)
{
  if (conn && conn->fns && conn->fns->bind) {
    a890:	02050663          	beqz	a0,a8bc <altcp_bind+0x2c>
    a894:	00052783          	lw	a5,0(a0)
    a898:	02078663          	beqz	a5,a8c4 <altcp_bind+0x34>
    a89c:	0087a783          	lw	a5,8(a5)
    a8a0:	02078663          	beqz	a5,a8cc <altcp_bind+0x3c>
{
    a8a4:	ff010113          	addi	sp,sp,-16
    a8a8:	00112623          	sw	ra,12(sp)
    return conn->fns->bind(conn, ipaddr, port);
    a8ac:	000780e7          	jalr	a5
  }
  return ERR_VAL;
}
    a8b0:	00c12083          	lw	ra,12(sp)
    a8b4:	01010113          	addi	sp,sp,16
    a8b8:	00008067          	ret
  return ERR_VAL;
    a8bc:	ffa00513          	li	a0,-6
    a8c0:	00008067          	ret
    a8c4:	ffa00513          	li	a0,-6
    a8c8:	00008067          	ret
    a8cc:	ffa00513          	li	a0,-6
}
    a8d0:	00008067          	ret

0000a8d4 <altcp_connect>:
 * @see tcp_connect()
 */
err_t
altcp_connect(struct altcp_pcb *conn, const ip_addr_t *ipaddr, u16_t port, altcp_connected_fn connected)
{
  if (conn && conn->fns && conn->fns->connect) {
    a8d4:	02050663          	beqz	a0,a900 <altcp_connect+0x2c>
    a8d8:	00052783          	lw	a5,0(a0)
    a8dc:	02078663          	beqz	a5,a908 <altcp_connect+0x34>
    a8e0:	00c7a783          	lw	a5,12(a5)
    a8e4:	02078663          	beqz	a5,a910 <altcp_connect+0x3c>
{
    a8e8:	ff010113          	addi	sp,sp,-16
    a8ec:	00112623          	sw	ra,12(sp)
    return conn->fns->connect(conn, ipaddr, port, connected);
    a8f0:	000780e7          	jalr	a5
  }
  return ERR_VAL;
}
    a8f4:	00c12083          	lw	ra,12(sp)
    a8f8:	01010113          	addi	sp,sp,16
    a8fc:	00008067          	ret
  return ERR_VAL;
    a900:	ffa00513          	li	a0,-6
    a904:	00008067          	ret
    a908:	ffa00513          	li	a0,-6
    a90c:	00008067          	ret
    a910:	ffa00513          	li	a0,-6
}
    a914:	00008067          	ret

0000a918 <altcp_listen_with_backlog_and_err>:
 * @ingroup altcp
 * @see tcp_listen_with_backlog_and_err()
 */
struct altcp_pcb *
altcp_listen_with_backlog_and_err(struct altcp_pcb *conn, u8_t backlog, err_t *err)
{
    a918:	00050793          	mv	a5,a0
  if (conn && conn->fns && conn->fns->listen) {
    a91c:	02050863          	beqz	a0,a94c <altcp_listen_with_backlog_and_err+0x34>
    a920:	00052503          	lw	a0,0(a0)
    a924:	02050a63          	beqz	a0,a958 <altcp_listen_with_backlog_and_err+0x40>
    a928:	01052703          	lw	a4,16(a0)
    a92c:	02070263          	beqz	a4,a950 <altcp_listen_with_backlog_and_err+0x38>
{
    a930:	ff010113          	addi	sp,sp,-16
    a934:	00112623          	sw	ra,12(sp)
    a938:	00078513          	mv	a0,a5
    return conn->fns->listen(conn, backlog, err);
    a93c:	000700e7          	jalr	a4
  }
  return NULL;
}
    a940:	00c12083          	lw	ra,12(sp)
    a944:	01010113          	addi	sp,sp,16
    a948:	00008067          	ret
    a94c:	00008067          	ret
  return NULL;
    a950:	00000513          	li	a0,0
    a954:	00008067          	ret
}
    a958:	00008067          	ret

0000a95c <altcp_abort>:
 * @see tcp_abort()
 */
void
altcp_abort(struct altcp_pcb *conn)
{
  if (conn && conn->fns && conn->fns->abort) {
    a95c:	02050663          	beqz	a0,a988 <altcp_abort+0x2c>
    a960:	00052783          	lw	a5,0(a0)
    a964:	02078263          	beqz	a5,a988 <altcp_abort+0x2c>
    a968:	0147a783          	lw	a5,20(a5)
    a96c:	00078e63          	beqz	a5,a988 <altcp_abort+0x2c>
{
    a970:	ff010113          	addi	sp,sp,-16
    a974:	00112623          	sw	ra,12(sp)
    conn->fns->abort(conn);
    a978:	000780e7          	jalr	a5
  }
}
    a97c:	00c12083          	lw	ra,12(sp)
    a980:	01010113          	addi	sp,sp,16
    a984:	00008067          	ret
    a988:	00008067          	ret

0000a98c <altcp_close>:
 * @see tcp_close()
 */
err_t
altcp_close(struct altcp_pcb *conn)
{
  if (conn && conn->fns && conn->fns->close) {
    a98c:	02050663          	beqz	a0,a9b8 <altcp_close+0x2c>
    a990:	00052783          	lw	a5,0(a0)
    a994:	02078663          	beqz	a5,a9c0 <altcp_close+0x34>
    a998:	0187a783          	lw	a5,24(a5)
    a99c:	02078663          	beqz	a5,a9c8 <altcp_close+0x3c>
{
    a9a0:	ff010113          	addi	sp,sp,-16
    a9a4:	00112623          	sw	ra,12(sp)
    return conn->fns->close(conn);
    a9a8:	000780e7          	jalr	a5
  }
  return ERR_VAL;
}
    a9ac:	00c12083          	lw	ra,12(sp)
    a9b0:	01010113          	addi	sp,sp,16
    a9b4:	00008067          	ret
  return ERR_VAL;
    a9b8:	ffa00513          	li	a0,-6
    a9bc:	00008067          	ret
    a9c0:	ffa00513          	li	a0,-6
    a9c4:	00008067          	ret
    a9c8:	ffa00513          	li	a0,-6
}
    a9cc:	00008067          	ret

0000a9d0 <altcp_shutdown>:
 * @see tcp_shutdown()
 */
err_t
altcp_shutdown(struct altcp_pcb *conn, int shut_rx, int shut_tx)
{
  if (conn && conn->fns && conn->fns->shutdown) {
    a9d0:	02050663          	beqz	a0,a9fc <altcp_shutdown+0x2c>
    a9d4:	00052783          	lw	a5,0(a0)
    a9d8:	02078663          	beqz	a5,aa04 <altcp_shutdown+0x34>
    a9dc:	01c7a783          	lw	a5,28(a5)
    a9e0:	02078663          	beqz	a5,aa0c <altcp_shutdown+0x3c>
{
    a9e4:	ff010113          	addi	sp,sp,-16
    a9e8:	00112623          	sw	ra,12(sp)
    return conn->fns->shutdown(conn, shut_rx, shut_tx);
    a9ec:	000780e7          	jalr	a5
  }
  return ERR_VAL;
}
    a9f0:	00c12083          	lw	ra,12(sp)
    a9f4:	01010113          	addi	sp,sp,16
    a9f8:	00008067          	ret
  return ERR_VAL;
    a9fc:	ffa00513          	li	a0,-6
    aa00:	00008067          	ret
    aa04:	ffa00513          	li	a0,-6
    aa08:	00008067          	ret
    aa0c:	ffa00513          	li	a0,-6
}
    aa10:	00008067          	ret

0000aa14 <altcp_write>:
 * @see tcp_write()
 */
err_t
altcp_write(struct altcp_pcb *conn, const void *dataptr, u16_t len, u8_t apiflags)
{
  if (conn && conn->fns && conn->fns->write) {
    aa14:	02050663          	beqz	a0,aa40 <altcp_write+0x2c>
    aa18:	00052783          	lw	a5,0(a0)
    aa1c:	02078663          	beqz	a5,aa48 <altcp_write+0x34>
    aa20:	0207a783          	lw	a5,32(a5)
    aa24:	02078663          	beqz	a5,aa50 <altcp_write+0x3c>
{
    aa28:	ff010113          	addi	sp,sp,-16
    aa2c:	00112623          	sw	ra,12(sp)
    return conn->fns->write(conn, dataptr, len, apiflags);
    aa30:	000780e7          	jalr	a5
  }
  return ERR_VAL;
}
    aa34:	00c12083          	lw	ra,12(sp)
    aa38:	01010113          	addi	sp,sp,16
    aa3c:	00008067          	ret
  return ERR_VAL;
    aa40:	ffa00513          	li	a0,-6
    aa44:	00008067          	ret
    aa48:	ffa00513          	li	a0,-6
    aa4c:	00008067          	ret
    aa50:	ffa00513          	li	a0,-6
}
    aa54:	00008067          	ret

0000aa58 <altcp_output>:
 * @see tcp_output()
 */
err_t
altcp_output(struct altcp_pcb *conn)
{
  if (conn && conn->fns && conn->fns->output) {
    aa58:	02050663          	beqz	a0,aa84 <altcp_output+0x2c>
    aa5c:	00052783          	lw	a5,0(a0)
    aa60:	02078663          	beqz	a5,aa8c <altcp_output+0x34>
    aa64:	0247a783          	lw	a5,36(a5)
    aa68:	02078663          	beqz	a5,aa94 <altcp_output+0x3c>
{
    aa6c:	ff010113          	addi	sp,sp,-16
    aa70:	00112623          	sw	ra,12(sp)
    return conn->fns->output(conn);
    aa74:	000780e7          	jalr	a5
  }
  return ERR_VAL;
}
    aa78:	00c12083          	lw	ra,12(sp)
    aa7c:	01010113          	addi	sp,sp,16
    aa80:	00008067          	ret
  return ERR_VAL;
    aa84:	ffa00513          	li	a0,-6
    aa88:	00008067          	ret
    aa8c:	ffa00513          	li	a0,-6
    aa90:	00008067          	ret
    aa94:	ffa00513          	li	a0,-6
}
    aa98:	00008067          	ret

0000aa9c <altcp_mss>:
 * @see tcp_mss()
 */
u16_t
altcp_mss(struct altcp_pcb *conn)
{
  if (conn && conn->fns && conn->fns->mss) {
    aa9c:	02050663          	beqz	a0,aac8 <altcp_mss+0x2c>
    aaa0:	00052783          	lw	a5,0(a0)
    aaa4:	02078663          	beqz	a5,aad0 <altcp_mss+0x34>
    aaa8:	0287a783          	lw	a5,40(a5)
    aaac:	02078663          	beqz	a5,aad8 <altcp_mss+0x3c>
{
    aab0:	ff010113          	addi	sp,sp,-16
    aab4:	00112623          	sw	ra,12(sp)
    return conn->fns->mss(conn);
    aab8:	000780e7          	jalr	a5
  }
  return 0;
}
    aabc:	00c12083          	lw	ra,12(sp)
    aac0:	01010113          	addi	sp,sp,16
    aac4:	00008067          	ret
  return 0;
    aac8:	00000513          	li	a0,0
    aacc:	00008067          	ret
    aad0:	00000513          	li	a0,0
    aad4:	00008067          	ret
    aad8:	00000513          	li	a0,0
}
    aadc:	00008067          	ret

0000aae0 <altcp_sndbuf>:
 * @see tcp_sndbuf()
 */
u16_t
altcp_sndbuf(struct altcp_pcb *conn)
{
  if (conn && conn->fns && conn->fns->sndbuf) {
    aae0:	02050663          	beqz	a0,ab0c <altcp_sndbuf+0x2c>
    aae4:	00052783          	lw	a5,0(a0)
    aae8:	02078663          	beqz	a5,ab14 <altcp_sndbuf+0x34>
    aaec:	02c7a783          	lw	a5,44(a5)
    aaf0:	02078663          	beqz	a5,ab1c <altcp_sndbuf+0x3c>
{
    aaf4:	ff010113          	addi	sp,sp,-16
    aaf8:	00112623          	sw	ra,12(sp)
    return conn->fns->sndbuf(conn);
    aafc:	000780e7          	jalr	a5
  }
  return 0;
}
    ab00:	00c12083          	lw	ra,12(sp)
    ab04:	01010113          	addi	sp,sp,16
    ab08:	00008067          	ret
  return 0;
    ab0c:	00000513          	li	a0,0
    ab10:	00008067          	ret
    ab14:	00000513          	li	a0,0
    ab18:	00008067          	ret
    ab1c:	00000513          	li	a0,0
}
    ab20:	00008067          	ret

0000ab24 <altcp_sndqueuelen>:
 * @see tcp_sndqueuelen()
 */
u16_t
altcp_sndqueuelen(struct altcp_pcb *conn)
{
  if (conn && conn->fns && conn->fns->sndqueuelen) {
    ab24:	02050663          	beqz	a0,ab50 <altcp_sndqueuelen+0x2c>
    ab28:	00052783          	lw	a5,0(a0)
    ab2c:	02078663          	beqz	a5,ab58 <altcp_sndqueuelen+0x34>
    ab30:	0307a783          	lw	a5,48(a5)
    ab34:	02078663          	beqz	a5,ab60 <altcp_sndqueuelen+0x3c>
{
    ab38:	ff010113          	addi	sp,sp,-16
    ab3c:	00112623          	sw	ra,12(sp)
    return conn->fns->sndqueuelen(conn);
    ab40:	000780e7          	jalr	a5
  }
  return 0;
}
    ab44:	00c12083          	lw	ra,12(sp)
    ab48:	01010113          	addi	sp,sp,16
    ab4c:	00008067          	ret
  return 0;
    ab50:	00000513          	li	a0,0
    ab54:	00008067          	ret
    ab58:	00000513          	li	a0,0
    ab5c:	00008067          	ret
    ab60:	00000513          	li	a0,0
}
    ab64:	00008067          	ret

0000ab68 <altcp_nagle_disable>:

void
altcp_nagle_disable(struct altcp_pcb *conn)
{
  if (conn && conn->fns && conn->fns->nagle_disable) {
    ab68:	02050663          	beqz	a0,ab94 <altcp_nagle_disable+0x2c>
    ab6c:	00052783          	lw	a5,0(a0)
    ab70:	02078263          	beqz	a5,ab94 <altcp_nagle_disable+0x2c>
    ab74:	0347a783          	lw	a5,52(a5)
    ab78:	00078e63          	beqz	a5,ab94 <altcp_nagle_disable+0x2c>
{
    ab7c:	ff010113          	addi	sp,sp,-16
    ab80:	00112623          	sw	ra,12(sp)
    conn->fns->nagle_disable(conn);
    ab84:	000780e7          	jalr	a5
  }
}
    ab88:	00c12083          	lw	ra,12(sp)
    ab8c:	01010113          	addi	sp,sp,16
    ab90:	00008067          	ret
    ab94:	00008067          	ret

0000ab98 <altcp_nagle_enable>:

void
altcp_nagle_enable(struct altcp_pcb *conn)
{
  if (conn && conn->fns && conn->fns->nagle_enable) {
    ab98:	02050663          	beqz	a0,abc4 <altcp_nagle_enable+0x2c>
    ab9c:	00052783          	lw	a5,0(a0)
    aba0:	02078263          	beqz	a5,abc4 <altcp_nagle_enable+0x2c>
    aba4:	0387a783          	lw	a5,56(a5)
    aba8:	00078e63          	beqz	a5,abc4 <altcp_nagle_enable+0x2c>
{
    abac:	ff010113          	addi	sp,sp,-16
    abb0:	00112623          	sw	ra,12(sp)
    conn->fns->nagle_enable(conn);
    abb4:	000780e7          	jalr	a5
  }
}
    abb8:	00c12083          	lw	ra,12(sp)
    abbc:	01010113          	addi	sp,sp,16
    abc0:	00008067          	ret
    abc4:	00008067          	ret

0000abc8 <altcp_nagle_disabled>:

int
altcp_nagle_disabled(struct altcp_pcb *conn)
{
  if (conn && conn->fns && conn->fns->nagle_disabled) {
    abc8:	02050663          	beqz	a0,abf4 <altcp_nagle_disabled+0x2c>
    abcc:	00052783          	lw	a5,0(a0)
    abd0:	02078663          	beqz	a5,abfc <altcp_nagle_disabled+0x34>
    abd4:	03c7a783          	lw	a5,60(a5)
    abd8:	02078663          	beqz	a5,ac04 <altcp_nagle_disabled+0x3c>
{
    abdc:	ff010113          	addi	sp,sp,-16
    abe0:	00112623          	sw	ra,12(sp)
    return conn->fns->nagle_disabled(conn);
    abe4:	000780e7          	jalr	a5
  }
  return 0;
}
    abe8:	00c12083          	lw	ra,12(sp)
    abec:	01010113          	addi	sp,sp,16
    abf0:	00008067          	ret
  return 0;
    abf4:	00000513          	li	a0,0
    abf8:	00008067          	ret
    abfc:	00000513          	li	a0,0
    ac00:	00008067          	ret
    ac04:	00000513          	li	a0,0
}
    ac08:	00008067          	ret

0000ac0c <altcp_setprio>:
 * @see tcp_setprio()
 */
void
altcp_setprio(struct altcp_pcb *conn, u8_t prio)
{
  if (conn && conn->fns && conn->fns->setprio) {
    ac0c:	02050663          	beqz	a0,ac38 <altcp_setprio+0x2c>
    ac10:	00052783          	lw	a5,0(a0)
    ac14:	02078263          	beqz	a5,ac38 <altcp_setprio+0x2c>
    ac18:	0407a783          	lw	a5,64(a5)
    ac1c:	00078e63          	beqz	a5,ac38 <altcp_setprio+0x2c>
{
    ac20:	ff010113          	addi	sp,sp,-16
    ac24:	00112623          	sw	ra,12(sp)
    conn->fns->setprio(conn, prio);
    ac28:	000780e7          	jalr	a5
  }
}
    ac2c:	00c12083          	lw	ra,12(sp)
    ac30:	01010113          	addi	sp,sp,16
    ac34:	00008067          	ret
    ac38:	00008067          	ret

0000ac3c <altcp_get_tcp_addrinfo>:

err_t
altcp_get_tcp_addrinfo(struct altcp_pcb *conn, int local, ip_addr_t *addr, u16_t *port)
{
  if (conn && conn->fns && conn->fns->addrinfo) {
    ac3c:	02050663          	beqz	a0,ac68 <altcp_get_tcp_addrinfo+0x2c>
    ac40:	00052783          	lw	a5,0(a0)
    ac44:	02078663          	beqz	a5,ac70 <altcp_get_tcp_addrinfo+0x34>
    ac48:	0487a783          	lw	a5,72(a5)
    ac4c:	02078663          	beqz	a5,ac78 <altcp_get_tcp_addrinfo+0x3c>
{
    ac50:	ff010113          	addi	sp,sp,-16
    ac54:	00112623          	sw	ra,12(sp)
    return conn->fns->addrinfo(conn, local, addr, port);
    ac58:	000780e7          	jalr	a5
  }
  return ERR_VAL;
}
    ac5c:	00c12083          	lw	ra,12(sp)
    ac60:	01010113          	addi	sp,sp,16
    ac64:	00008067          	ret
  return ERR_VAL;
    ac68:	ffa00513          	li	a0,-6
    ac6c:	00008067          	ret
    ac70:	ffa00513          	li	a0,-6
    ac74:	00008067          	ret
    ac78:	ffa00513          	li	a0,-6
}
    ac7c:	00008067          	ret

0000ac80 <altcp_get_ip>:

ip_addr_t *
altcp_get_ip(struct altcp_pcb *conn, int local)
{
    ac80:	00050793          	mv	a5,a0
  if (conn && conn->fns && conn->fns->getip) {
    ac84:	02050863          	beqz	a0,acb4 <altcp_get_ip+0x34>
    ac88:	00052503          	lw	a0,0(a0)
    ac8c:	02050a63          	beqz	a0,acc0 <altcp_get_ip+0x40>
    ac90:	04c52703          	lw	a4,76(a0)
    ac94:	02070263          	beqz	a4,acb8 <altcp_get_ip+0x38>
{
    ac98:	ff010113          	addi	sp,sp,-16
    ac9c:	00112623          	sw	ra,12(sp)
    aca0:	00078513          	mv	a0,a5
    return conn->fns->getip(conn, local);
    aca4:	000700e7          	jalr	a4
  }
  return NULL;
}
    aca8:	00c12083          	lw	ra,12(sp)
    acac:	01010113          	addi	sp,sp,16
    acb0:	00008067          	ret
    acb4:	00008067          	ret
  return NULL;
    acb8:	00000513          	li	a0,0
    acbc:	00008067          	ret
}
    acc0:	00008067          	ret

0000acc4 <altcp_get_port>:

u16_t
altcp_get_port(struct altcp_pcb *conn, int local)
{
  if (conn && conn->fns && conn->fns->getport) {
    acc4:	02050663          	beqz	a0,acf0 <altcp_get_port+0x2c>
    acc8:	00052783          	lw	a5,0(a0)
    accc:	02078663          	beqz	a5,acf8 <altcp_get_port+0x34>
    acd0:	0507a783          	lw	a5,80(a5)
    acd4:	02078663          	beqz	a5,ad00 <altcp_get_port+0x3c>
{
    acd8:	ff010113          	addi	sp,sp,-16
    acdc:	00112623          	sw	ra,12(sp)
    return conn->fns->getport(conn, local);
    ace0:	000780e7          	jalr	a5
  }
  return 0;
}
    ace4:	00c12083          	lw	ra,12(sp)
    ace8:	01010113          	addi	sp,sp,16
    acec:	00008067          	ret
  return 0;
    acf0:	00000513          	li	a0,0
    acf4:	00008067          	ret
    acf8:	00000513          	li	a0,0
    acfc:	00008067          	ret
    ad00:	00000513          	li	a0,0
}
    ad04:	00008067          	ret

0000ad08 <altcp_default_set_poll>:
/* Default implementations for the "virtual" functions */

void
altcp_default_set_poll(struct altcp_pcb *conn, u8_t interval)
{
  if (conn && conn->inner_conn) {
    ad08:	02050863          	beqz	a0,ad38 <altcp_default_set_poll+0x30>
    ad0c:	00452703          	lw	a4,4(a0)
    ad10:	02070463          	beqz	a4,ad38 <altcp_default_set_poll+0x30>
{
    ad14:	ff010113          	addi	sp,sp,-16
    ad18:	00112623          	sw	ra,12(sp)
    ad1c:	00058613          	mv	a2,a1
    altcp_poll(conn->inner_conn, conn->poll, interval);
    ad20:	02052583          	lw	a1,32(a0)
    ad24:	00070513          	mv	a0,a4
    ad28:	af1ff0ef          	jal	ra,a818 <altcp_poll>
  }
}
    ad2c:	00c12083          	lw	ra,12(sp)
    ad30:	01010113          	addi	sp,sp,16
    ad34:	00008067          	ret
    ad38:	00008067          	ret

0000ad3c <altcp_default_recved>:

void
altcp_default_recved(struct altcp_pcb *conn, u16_t len)
{
  if (conn && conn->inner_conn) {
    ad3c:	02050263          	beqz	a0,ad60 <altcp_default_recved+0x24>
    ad40:	00452503          	lw	a0,4(a0)
    ad44:	00050e63          	beqz	a0,ad60 <altcp_default_recved+0x24>
{
    ad48:	ff010113          	addi	sp,sp,-16
    ad4c:	00112623          	sw	ra,12(sp)
    altcp_recved(conn->inner_conn, len);
    ad50:	b11ff0ef          	jal	ra,a860 <altcp_recved>
  }
}
    ad54:	00c12083          	lw	ra,12(sp)
    ad58:	01010113          	addi	sp,sp,16
    ad5c:	00008067          	ret
    ad60:	00008067          	ret

0000ad64 <altcp_default_bind>:

err_t
altcp_default_bind(struct altcp_pcb *conn, const ip_addr_t *ipaddr, u16_t port)
{
  if (conn && conn->inner_conn) {
    ad64:	02050263          	beqz	a0,ad88 <altcp_default_bind+0x24>
    ad68:	00452503          	lw	a0,4(a0)
    ad6c:	02050263          	beqz	a0,ad90 <altcp_default_bind+0x2c>
{
    ad70:	ff010113          	addi	sp,sp,-16
    ad74:	00112623          	sw	ra,12(sp)
    return altcp_bind(conn->inner_conn, ipaddr, port);
    ad78:	b19ff0ef          	jal	ra,a890 <altcp_bind>
  }
  return ERR_VAL;
}
    ad7c:	00c12083          	lw	ra,12(sp)
    ad80:	01010113          	addi	sp,sp,16
    ad84:	00008067          	ret
  return ERR_VAL;
    ad88:	ffa00513          	li	a0,-6
    ad8c:	00008067          	ret
    ad90:	ffa00513          	li	a0,-6
}
    ad94:	00008067          	ret

0000ad98 <altcp_default_shutdown>:

err_t
altcp_default_shutdown(struct altcp_pcb *conn, int shut_rx, int shut_tx)
{
  if (conn) {
    ad98:	04050263          	beqz	a0,addc <altcp_default_shutdown+0x44>
{
    ad9c:	ff010113          	addi	sp,sp,-16
    ada0:	00112623          	sw	ra,12(sp)
    if (shut_rx && shut_tx && conn->fns && conn->fns->close) {
    ada4:	02058063          	beqz	a1,adc4 <altcp_default_shutdown+0x2c>
    ada8:	00060e63          	beqz	a2,adc4 <altcp_default_shutdown+0x2c>
    adac:	00052783          	lw	a5,0(a0)
    adb0:	00078a63          	beqz	a5,adc4 <altcp_default_shutdown+0x2c>
    adb4:	0187a783          	lw	a5,24(a5)
    adb8:	00078663          	beqz	a5,adc4 <altcp_default_shutdown+0x2c>
      /* default shutdown for both sides is close */
      return conn->fns->close(conn);
    adbc:	000780e7          	jalr	a5
    adc0:	0100006f          	j	add0 <altcp_default_shutdown+0x38>
    }
    if (conn->inner_conn) {
    adc4:	00452503          	lw	a0,4(a0)
    adc8:	00050e63          	beqz	a0,ade4 <altcp_default_shutdown+0x4c>
      return altcp_shutdown(conn->inner_conn, shut_rx, shut_tx);
    adcc:	c05ff0ef          	jal	ra,a9d0 <altcp_shutdown>
    }
  }
  return ERR_VAL;
}
    add0:	00c12083          	lw	ra,12(sp)
    add4:	01010113          	addi	sp,sp,16
    add8:	00008067          	ret
  return ERR_VAL;
    addc:	ffa00513          	li	a0,-6
}
    ade0:	00008067          	ret
  return ERR_VAL;
    ade4:	ffa00513          	li	a0,-6
    ade8:	fe9ff06f          	j	add0 <altcp_default_shutdown+0x38>

0000adec <altcp_default_write>:

err_t
altcp_default_write(struct altcp_pcb *conn, const void *dataptr, u16_t len, u8_t apiflags)
{
  if (conn && conn->inner_conn) {
    adec:	02050263          	beqz	a0,ae10 <altcp_default_write+0x24>
    adf0:	00452503          	lw	a0,4(a0)
    adf4:	02050263          	beqz	a0,ae18 <altcp_default_write+0x2c>
{
    adf8:	ff010113          	addi	sp,sp,-16
    adfc:	00112623          	sw	ra,12(sp)
    return altcp_write(conn->inner_conn, dataptr, len, apiflags);
    ae00:	c15ff0ef          	jal	ra,aa14 <altcp_write>
  }
  return ERR_VAL;
}
    ae04:	00c12083          	lw	ra,12(sp)
    ae08:	01010113          	addi	sp,sp,16
    ae0c:	00008067          	ret
  return ERR_VAL;
    ae10:	ffa00513          	li	a0,-6
    ae14:	00008067          	ret
    ae18:	ffa00513          	li	a0,-6
}
    ae1c:	00008067          	ret

0000ae20 <altcp_default_output>:

err_t
altcp_default_output(struct altcp_pcb *conn)
{
  if (conn && conn->inner_conn) {
    ae20:	02050263          	beqz	a0,ae44 <altcp_default_output+0x24>
    ae24:	00452503          	lw	a0,4(a0)
    ae28:	02050263          	beqz	a0,ae4c <altcp_default_output+0x2c>
{
    ae2c:	ff010113          	addi	sp,sp,-16
    ae30:	00112623          	sw	ra,12(sp)
    return altcp_output(conn->inner_conn);
    ae34:	c25ff0ef          	jal	ra,aa58 <altcp_output>
  }
  return ERR_VAL;
}
    ae38:	00c12083          	lw	ra,12(sp)
    ae3c:	01010113          	addi	sp,sp,16
    ae40:	00008067          	ret
  return ERR_VAL;
    ae44:	ffa00513          	li	a0,-6
    ae48:	00008067          	ret
    ae4c:	ffa00513          	li	a0,-6
}
    ae50:	00008067          	ret

0000ae54 <altcp_default_mss>:

u16_t
altcp_default_mss(struct altcp_pcb *conn)
{
  if (conn && conn->inner_conn) {
    ae54:	02050663          	beqz	a0,ae80 <altcp_default_mss+0x2c>
    ae58:	00452503          	lw	a0,4(a0)
    ae5c:	00051663          	bnez	a0,ae68 <altcp_default_mss+0x14>
    return altcp_mss(conn->inner_conn);
  }
  return 0;
    ae60:	00000513          	li	a0,0
}
    ae64:	00008067          	ret
{
    ae68:	ff010113          	addi	sp,sp,-16
    ae6c:	00112623          	sw	ra,12(sp)
    return altcp_mss(conn->inner_conn);
    ae70:	c2dff0ef          	jal	ra,aa9c <altcp_mss>
}
    ae74:	00c12083          	lw	ra,12(sp)
    ae78:	01010113          	addi	sp,sp,16
    ae7c:	00008067          	ret
  return 0;
    ae80:	00000513          	li	a0,0
    ae84:	00008067          	ret

0000ae88 <altcp_default_sndbuf>:

u16_t
altcp_default_sndbuf(struct altcp_pcb *conn)
{
  if (conn && conn->inner_conn) {
    ae88:	02050663          	beqz	a0,aeb4 <altcp_default_sndbuf+0x2c>
    ae8c:	00452503          	lw	a0,4(a0)
    ae90:	00051663          	bnez	a0,ae9c <altcp_default_sndbuf+0x14>
    return altcp_sndbuf(conn->inner_conn);
  }
  return 0;
    ae94:	00000513          	li	a0,0
}
    ae98:	00008067          	ret
{
    ae9c:	ff010113          	addi	sp,sp,-16
    aea0:	00112623          	sw	ra,12(sp)
    return altcp_sndbuf(conn->inner_conn);
    aea4:	c3dff0ef          	jal	ra,aae0 <altcp_sndbuf>
}
    aea8:	00c12083          	lw	ra,12(sp)
    aeac:	01010113          	addi	sp,sp,16
    aeb0:	00008067          	ret
  return 0;
    aeb4:	00000513          	li	a0,0
    aeb8:	00008067          	ret

0000aebc <altcp_default_sndqueuelen>:

u16_t
altcp_default_sndqueuelen(struct altcp_pcb *conn)
{
  if (conn && conn->inner_conn) {
    aebc:	02050663          	beqz	a0,aee8 <altcp_default_sndqueuelen+0x2c>
    aec0:	00452503          	lw	a0,4(a0)
    aec4:	00051663          	bnez	a0,aed0 <altcp_default_sndqueuelen+0x14>
    return altcp_sndqueuelen(conn->inner_conn);
  }
  return 0;
    aec8:	00000513          	li	a0,0
}
    aecc:	00008067          	ret
{
    aed0:	ff010113          	addi	sp,sp,-16
    aed4:	00112623          	sw	ra,12(sp)
    return altcp_sndqueuelen(conn->inner_conn);
    aed8:	c4dff0ef          	jal	ra,ab24 <altcp_sndqueuelen>
}
    aedc:	00c12083          	lw	ra,12(sp)
    aee0:	01010113          	addi	sp,sp,16
    aee4:	00008067          	ret
  return 0;
    aee8:	00000513          	li	a0,0
    aeec:	00008067          	ret

0000aef0 <altcp_default_nagle_disable>:

void
altcp_default_nagle_disable(struct altcp_pcb *conn)
{
  if (conn && conn->inner_conn) {
    aef0:	02050263          	beqz	a0,af14 <altcp_default_nagle_disable+0x24>
    aef4:	00452503          	lw	a0,4(a0)
    aef8:	00050e63          	beqz	a0,af14 <altcp_default_nagle_disable+0x24>
{
    aefc:	ff010113          	addi	sp,sp,-16
    af00:	00112623          	sw	ra,12(sp)
    altcp_nagle_disable(conn->inner_conn);
    af04:	c65ff0ef          	jal	ra,ab68 <altcp_nagle_disable>
  }
}
    af08:	00c12083          	lw	ra,12(sp)
    af0c:	01010113          	addi	sp,sp,16
    af10:	00008067          	ret
    af14:	00008067          	ret

0000af18 <altcp_default_nagle_enable>:

void
altcp_default_nagle_enable(struct altcp_pcb *conn)
{
  if (conn && conn->inner_conn) {
    af18:	02050263          	beqz	a0,af3c <altcp_default_nagle_enable+0x24>
    af1c:	00452503          	lw	a0,4(a0)
    af20:	00050e63          	beqz	a0,af3c <altcp_default_nagle_enable+0x24>
{
    af24:	ff010113          	addi	sp,sp,-16
    af28:	00112623          	sw	ra,12(sp)
    altcp_nagle_enable(conn->inner_conn);
    af2c:	c6dff0ef          	jal	ra,ab98 <altcp_nagle_enable>
  }
}
    af30:	00c12083          	lw	ra,12(sp)
    af34:	01010113          	addi	sp,sp,16
    af38:	00008067          	ret
    af3c:	00008067          	ret

0000af40 <altcp_default_nagle_disabled>:

int
altcp_default_nagle_disabled(struct altcp_pcb *conn)
{
  if (conn && conn->inner_conn) {
    af40:	02050663          	beqz	a0,af6c <altcp_default_nagle_disabled+0x2c>
    af44:	00452503          	lw	a0,4(a0)
    af48:	00051663          	bnez	a0,af54 <altcp_default_nagle_disabled+0x14>
    return altcp_nagle_disabled(conn->inner_conn);
  }
  return 0;
    af4c:	00000513          	li	a0,0
}
    af50:	00008067          	ret
{
    af54:	ff010113          	addi	sp,sp,-16
    af58:	00112623          	sw	ra,12(sp)
    return altcp_nagle_disabled(conn->inner_conn);
    af5c:	c6dff0ef          	jal	ra,abc8 <altcp_nagle_disabled>
}
    af60:	00c12083          	lw	ra,12(sp)
    af64:	01010113          	addi	sp,sp,16
    af68:	00008067          	ret
  return 0;
    af6c:	00000513          	li	a0,0
    af70:	00008067          	ret

0000af74 <altcp_default_setprio>:

void
altcp_default_setprio(struct altcp_pcb *conn, u8_t prio)
{
  if (conn && conn->inner_conn) {
    af74:	02050263          	beqz	a0,af98 <altcp_default_setprio+0x24>
    af78:	00452503          	lw	a0,4(a0)
    af7c:	00050e63          	beqz	a0,af98 <altcp_default_setprio+0x24>
{
    af80:	ff010113          	addi	sp,sp,-16
    af84:	00112623          	sw	ra,12(sp)
    altcp_setprio(conn->inner_conn, prio);
    af88:	c85ff0ef          	jal	ra,ac0c <altcp_setprio>
  }
}
    af8c:	00c12083          	lw	ra,12(sp)
    af90:	01010113          	addi	sp,sp,16
    af94:	00008067          	ret
    af98:	00008067          	ret

0000af9c <altcp_default_dealloc>:
void
altcp_default_dealloc(struct altcp_pcb *conn)
{
  LWIP_UNUSED_ARG(conn);
  /* nothing to do */
}
    af9c:	00008067          	ret

0000afa0 <altcp_default_get_tcp_addrinfo>:

err_t
altcp_default_get_tcp_addrinfo(struct altcp_pcb *conn, int local, ip_addr_t *addr, u16_t *port)
{
  if (conn && conn->inner_conn) {
    afa0:	02050263          	beqz	a0,afc4 <altcp_default_get_tcp_addrinfo+0x24>
    afa4:	00452503          	lw	a0,4(a0)
    afa8:	02050263          	beqz	a0,afcc <altcp_default_get_tcp_addrinfo+0x2c>
{
    afac:	ff010113          	addi	sp,sp,-16
    afb0:	00112623          	sw	ra,12(sp)
    return altcp_get_tcp_addrinfo(conn->inner_conn, local, addr, port);
    afb4:	c89ff0ef          	jal	ra,ac3c <altcp_get_tcp_addrinfo>
  }
  return ERR_VAL;
}
    afb8:	00c12083          	lw	ra,12(sp)
    afbc:	01010113          	addi	sp,sp,16
    afc0:	00008067          	ret
  return ERR_VAL;
    afc4:	ffa00513          	li	a0,-6
    afc8:	00008067          	ret
    afcc:	ffa00513          	li	a0,-6
}
    afd0:	00008067          	ret

0000afd4 <altcp_default_get_ip>:

ip_addr_t *
altcp_default_get_ip(struct altcp_pcb *conn, int local)
{
  if (conn && conn->inner_conn) {
    afd4:	02050263          	beqz	a0,aff8 <altcp_default_get_ip+0x24>
    afd8:	00452503          	lw	a0,4(a0)
    afdc:	00050e63          	beqz	a0,aff8 <altcp_default_get_ip+0x24>
{
    afe0:	ff010113          	addi	sp,sp,-16
    afe4:	00112623          	sw	ra,12(sp)
    return altcp_get_ip(conn->inner_conn, local);
    afe8:	c99ff0ef          	jal	ra,ac80 <altcp_get_ip>
  }
  return NULL;
}
    afec:	00c12083          	lw	ra,12(sp)
    aff0:	01010113          	addi	sp,sp,16
    aff4:	00008067          	ret
    aff8:	00008067          	ret

0000affc <altcp_default_get_port>:

u16_t
altcp_default_get_port(struct altcp_pcb *conn, int local)
{
  if (conn && conn->inner_conn) {
    affc:	02050663          	beqz	a0,b028 <altcp_default_get_port+0x2c>
    b000:	00452503          	lw	a0,4(a0)
    b004:	00051663          	bnez	a0,b010 <altcp_default_get_port+0x14>
    return altcp_get_port(conn->inner_conn, local);
  }
  return 0;
    b008:	00000513          	li	a0,0
}
    b00c:	00008067          	ret
{
    b010:	ff010113          	addi	sp,sp,-16
    b014:	00112623          	sw	ra,12(sp)
    return altcp_get_port(conn->inner_conn, local);
    b018:	cadff0ef          	jal	ra,acc4 <altcp_get_port>
}
    b01c:	00c12083          	lw	ra,12(sp)
    b020:	01010113          	addi	sp,sp,16
    b024:	00008067          	ret
  return 0;
    b028:	00000513          	li	a0,0
    b02c:	00008067          	ret

0000b030 <stats_init>:
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
    b030:	00008067          	ret

0000b034 <uart_writeAvailability>:
        return *((volatile u32*) address);
    b034:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    b038:	01055513          	srli	a0,a0,0x10
    }
    b03c:	0ff57513          	andi	a0,a0,255
    b040:	00008067          	ret

0000b044 <uart_write>:
    static void uart_write(u32 reg, char data){
    b044:	ff010113          	addi	sp,sp,-16
    b048:	00112623          	sw	ra,12(sp)
    b04c:	00812423          	sw	s0,8(sp)
    b050:	00912223          	sw	s1,4(sp)
    b054:	00050413          	mv	s0,a0
    b058:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    b05c:	00040513          	mv	a0,s0
    b060:	fd5ff0ef          	jal	ra,b034 <uart_writeAvailability>
    b064:	fe050ce3          	beqz	a0,b05c <uart_write+0x18>
        *((volatile u32*) address) = data;
    b068:	00942023          	sw	s1,0(s0)
    }
    b06c:	00c12083          	lw	ra,12(sp)
    b070:	00812403          	lw	s0,8(sp)
    b074:	00412483          	lw	s1,4(sp)
    b078:	01010113          	addi	sp,sp,16
    b07c:	00008067          	ret

0000b080 <bsp_printHex>:
    {
    b080:	ff010113          	addi	sp,sp,-16
    b084:	00112623          	sw	ra,12(sp)
    b088:	00812423          	sw	s0,8(sp)
    b08c:	00912223          	sw	s1,4(sp)
    b090:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    b094:	01c00413          	li	s0,28
    b098:	0280006f          	j	b0c0 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    b09c:	0084d7b3          	srl	a5,s1,s0
    b0a0:	00f7f713          	andi	a4,a5,15
    b0a4:	0001c7b7          	lui	a5,0x1c
    b0a8:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    b0ac:	00e787b3          	add	a5,a5,a4
    b0b0:	0007c583          	lbu	a1,0(a5)
    b0b4:	f8010537          	lui	a0,0xf8010
    b0b8:	f8dff0ef          	jal	ra,b044 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    b0bc:	ffc40413          	addi	s0,s0,-4
    b0c0:	fc045ee3          	bgez	s0,b09c <bsp_printHex+0x1c>
    }
    b0c4:	00c12083          	lw	ra,12(sp)
    b0c8:	00812403          	lw	s0,8(sp)
    b0cc:	00412483          	lw	s1,4(sp)
    b0d0:	01010113          	addi	sp,sp,16
    b0d4:	00008067          	ret

0000b0d8 <bsp_printHex_lower>:
        {
    b0d8:	ff010113          	addi	sp,sp,-16
    b0dc:	00112623          	sw	ra,12(sp)
    b0e0:	00812423          	sw	s0,8(sp)
    b0e4:	00912223          	sw	s1,4(sp)
    b0e8:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    b0ec:	01c00413          	li	s0,28
    b0f0:	0280006f          	j	b118 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    b0f4:	0084d7b3          	srl	a5,s1,s0
    b0f8:	00f7f713          	andi	a4,a5,15
    b0fc:	0001c7b7          	lui	a5,0x1c
    b100:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    b104:	00e787b3          	add	a5,a5,a4
    b108:	0007c583          	lbu	a1,0(a5)
    b10c:	f8010537          	lui	a0,0xf8010
    b110:	f35ff0ef          	jal	ra,b044 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    b114:	ffc40413          	addi	s0,s0,-4
    b118:	fc045ee3          	bgez	s0,b0f4 <bsp_printHex_lower+0x1c>
        }
    b11c:	00c12083          	lw	ra,12(sp)
    b120:	00812403          	lw	s0,8(sp)
    b124:	00412483          	lw	s1,4(sp)
    b128:	01010113          	addi	sp,sp,16
    b12c:	00008067          	ret

0000b130 <bsp_printf_c>:
    {
    b130:	ff010113          	addi	sp,sp,-16
    b134:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    b138:	0ff57593          	andi	a1,a0,255
    b13c:	f8010537          	lui	a0,0xf8010
    b140:	f05ff0ef          	jal	ra,b044 <uart_write>
    }
    b144:	00c12083          	lw	ra,12(sp)
    b148:	01010113          	addi	sp,sp,16
    b14c:	00008067          	ret

0000b150 <bsp_printf_s>:
    {
    b150:	ff010113          	addi	sp,sp,-16
    b154:	00112623          	sw	ra,12(sp)
    b158:	00812423          	sw	s0,8(sp)
    b15c:	00050413          	mv	s0,a0
        while (*p)
    b160:	00044583          	lbu	a1,0(s0)
    b164:	00058a63          	beqz	a1,b178 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    b168:	00140413          	addi	s0,s0,1
    b16c:	f8010537          	lui	a0,0xf8010
    b170:	ed5ff0ef          	jal	ra,b044 <uart_write>
    b174:	fedff06f          	j	b160 <bsp_printf_s+0x10>
    }
    b178:	00c12083          	lw	ra,12(sp)
    b17c:	00812403          	lw	s0,8(sp)
    b180:	01010113          	addi	sp,sp,16
    b184:	00008067          	ret

0000b188 <bsp_printf_d>:
    {
    b188:	fd010113          	addi	sp,sp,-48
    b18c:	02112623          	sw	ra,44(sp)
    b190:	02812423          	sw	s0,40(sp)
    b194:	02912223          	sw	s1,36(sp)
    b198:	00050493          	mv	s1,a0
        if (val < 0) {
    b19c:	00054663          	bltz	a0,b1a8 <bsp_printf_d+0x20>
    {
    b1a0:	00010413          	mv	s0,sp
    b1a4:	02c0006f          	j	b1d0 <bsp_printf_d+0x48>
            bsp_printf_c('-');
    b1a8:	02d00513          	li	a0,45
    b1ac:	f85ff0ef          	jal	ra,b130 <bsp_printf_c>
            val = -val;
    b1b0:	409004b3          	neg	s1,s1
    b1b4:	fedff06f          	j	b1a0 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
    b1b8:	00a00713          	li	a4,10
    b1bc:	02e4e7b3          	rem	a5,s1,a4
    b1c0:	03078793          	addi	a5,a5,48
    b1c4:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    b1c8:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    b1cc:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    b1d0:	fe0494e3          	bnez	s1,b1b8 <bsp_printf_d+0x30>
    b1d4:	00010793          	mv	a5,sp
    b1d8:	fef400e3          	beq	s0,a5,b1b8 <bsp_printf_d+0x30>
    b1dc:	0100006f          	j	b1ec <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
    b1e0:	fff40413          	addi	s0,s0,-1
    b1e4:	00044503          	lbu	a0,0(s0)
    b1e8:	f49ff0ef          	jal	ra,b130 <bsp_printf_c>
        while (p != buffer)
    b1ec:	00010793          	mv	a5,sp
    b1f0:	fef418e3          	bne	s0,a5,b1e0 <bsp_printf_d+0x58>
    }
    b1f4:	02c12083          	lw	ra,44(sp)
    b1f8:	02812403          	lw	s0,40(sp)
    b1fc:	02412483          	lw	s1,36(sp)
    b200:	03010113          	addi	sp,sp,48
    b204:	00008067          	ret

0000b208 <bsp_printf_x>:
    {
    b208:	ff010113          	addi	sp,sp,-16
    b20c:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
    b210:	00000713          	li	a4,0
    b214:	00700793          	li	a5,7
    b218:	02e7c063          	blt	a5,a4,b238 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    b21c:	00271693          	slli	a3,a4,0x2
    b220:	ff000793          	li	a5,-16
    b224:	00d797b3          	sll	a5,a5,a3
    b228:	00f577b3          	and	a5,a0,a5
    b22c:	00078663          	beqz	a5,b238 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    b230:	00170713          	addi	a4,a4,1
    b234:	fe1ff06f          	j	b214 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
    b238:	ea1ff0ef          	jal	ra,b0d8 <bsp_printHex_lower>
    }
    b23c:	00c12083          	lw	ra,12(sp)
    b240:	01010113          	addi	sp,sp,16
    b244:	00008067          	ret

0000b248 <bsp_printf_X>:
        {
    b248:	ff010113          	addi	sp,sp,-16
    b24c:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
    b250:	00000713          	li	a4,0
    b254:	00700793          	li	a5,7
    b258:	02e7c063          	blt	a5,a4,b278 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    b25c:	00271693          	slli	a3,a4,0x2
    b260:	ff000793          	li	a5,-16
    b264:	00d797b3          	sll	a5,a5,a3
    b268:	00f577b3          	and	a5,a0,a5
    b26c:	00078663          	beqz	a5,b278 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    b270:	00170713          	addi	a4,a4,1
    b274:	fe1ff06f          	j	b254 <bsp_printf_X+0xc>
            bsp_printHex(val);
    b278:	e09ff0ef          	jal	ra,b080 <bsp_printHex>
        }
    b27c:	00c12083          	lw	ra,12(sp)
    b280:	01010113          	addi	sp,sp,16
    b284:	00008067          	ret

0000b288 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
    b288:	ff400513          	li	a0,-12
    b28c:	00008067          	ret

0000b290 <bsp_printf>:
    {
    b290:	fc010113          	addi	sp,sp,-64
    b294:	00112e23          	sw	ra,28(sp)
    b298:	00812c23          	sw	s0,24(sp)
    b29c:	00912a23          	sw	s1,20(sp)
    b2a0:	00050493          	mv	s1,a0
    b2a4:	02b12223          	sw	a1,36(sp)
    b2a8:	02c12423          	sw	a2,40(sp)
    b2ac:	02d12623          	sw	a3,44(sp)
    b2b0:	02e12823          	sw	a4,48(sp)
    b2b4:	02f12a23          	sw	a5,52(sp)
    b2b8:	03012c23          	sw	a6,56(sp)
    b2bc:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
    b2c0:	02410793          	addi	a5,sp,36
    b2c4:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
    b2c8:	00000413          	li	s0,0
    b2cc:	01c0006f          	j	b2e8 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
    b2d0:	00c12783          	lw	a5,12(sp)
    b2d4:	00478713          	addi	a4,a5,4
    b2d8:	00e12623          	sw	a4,12(sp)
    b2dc:	0007a503          	lw	a0,0(a5)
    b2e0:	e51ff0ef          	jal	ra,b130 <bsp_printf_c>
        for (i = 0; format[i]; i++)
    b2e4:	00140413          	addi	s0,s0,1
    b2e8:	008487b3          	add	a5,s1,s0
    b2ec:	0007c503          	lbu	a0,0(a5)
    b2f0:	0c050263          	beqz	a0,b3b4 <bsp_printf+0x124>
            if (format[i] == '%') {
    b2f4:	02500793          	li	a5,37
    b2f8:	06f50663          	beq	a0,a5,b364 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
    b2fc:	e35ff0ef          	jal	ra,b130 <bsp_printf_c>
    b300:	fe5ff06f          	j	b2e4 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    b304:	00c12783          	lw	a5,12(sp)
    b308:	00478713          	addi	a4,a5,4
    b30c:	00e12623          	sw	a4,12(sp)
    b310:	0007a503          	lw	a0,0(a5)
    b314:	e3dff0ef          	jal	ra,b150 <bsp_printf_s>
                        break;
    b318:	fcdff06f          	j	b2e4 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    b31c:	00c12783          	lw	a5,12(sp)
    b320:	00478713          	addi	a4,a5,4
    b324:	00e12623          	sw	a4,12(sp)
    b328:	0007a503          	lw	a0,0(a5)
    b32c:	e5dff0ef          	jal	ra,b188 <bsp_printf_d>
                        break;
    b330:	fb5ff06f          	j	b2e4 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    b334:	00c12783          	lw	a5,12(sp)
    b338:	00478713          	addi	a4,a5,4
    b33c:	00e12623          	sw	a4,12(sp)
    b340:	0007a503          	lw	a0,0(a5)
    b344:	f05ff0ef          	jal	ra,b248 <bsp_printf_X>
                        break;
    b348:	f9dff06f          	j	b2e4 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    b34c:	00c12783          	lw	a5,12(sp)
    b350:	00478713          	addi	a4,a5,4
    b354:	00e12623          	sw	a4,12(sp)
    b358:	0007a503          	lw	a0,0(a5)
    b35c:	eadff0ef          	jal	ra,b208 <bsp_printf_x>
                        break;
    b360:	f85ff06f          	j	b2e4 <bsp_printf+0x54>
                while (format[++i]) {
    b364:	00140413          	addi	s0,s0,1
    b368:	008487b3          	add	a5,s1,s0
    b36c:	0007c783          	lbu	a5,0(a5)
    b370:	f6078ae3          	beqz	a5,b2e4 <bsp_printf+0x54>
                    if (format[i] == 'c') {
    b374:	06300713          	li	a4,99
    b378:	f4e78ce3          	beq	a5,a4,b2d0 <bsp_printf+0x40>
                    else if (format[i] == 's') {
    b37c:	07300713          	li	a4,115
    b380:	f8e782e3          	beq	a5,a4,b304 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    b384:	06400713          	li	a4,100
    b388:	f8e78ae3          	beq	a5,a4,b31c <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    b38c:	05800713          	li	a4,88
    b390:	fae782e3          	beq	a5,a4,b334 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    b394:	07800713          	li	a4,120
    b398:	fae78ae3          	beq	a5,a4,b34c <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    b39c:	06600713          	li	a4,102
    b3a0:	fce792e3          	bne	a5,a4,b364 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    b3a4:	0001c537          	lui	a0,0x1c
    b3a8:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    b3ac:	da5ff0ef          	jal	ra,b150 <bsp_printf_s>
                        break;
    b3b0:	f35ff06f          	j	b2e4 <bsp_printf+0x54>
    }
    b3b4:	01c12083          	lw	ra,28(sp)
    b3b8:	01812403          	lw	s0,24(sp)
    b3bc:	01412483          	lw	s1,20(sp)
    b3c0:	04010113          	addi	sp,sp,64
    b3c4:	00008067          	ret

0000b3c8 <netif_loopif_init>:
{
    b3c8:	ff010113          	addi	sp,sp,-16
    b3cc:	00112623          	sw	ra,12(sp)
    b3d0:	00812423          	sw	s0,8(sp)
    b3d4:	00050413          	mv	s0,a0
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
    b3d8:	02050a63          	beqz	a0,b40c <netif_loopif_init+0x44>
  netif->name[0] = 'l';
    b3dc:	06c00793          	li	a5,108
    b3e0:	02f40b23          	sb	a5,54(s0)
  netif->name[1] = 'o';
    b3e4:	06f00793          	li	a5,111
    b3e8:	02f40ba3          	sb	a5,55(s0)
  netif->output = netif_loop_output_ipv4;
    b3ec:	0000c7b7          	lui	a5,0xc
    b3f0:	8d878793          	addi	a5,a5,-1832 # b8d8 <netif_loop_output_ipv4>
    b3f4:	00f42a23          	sw	a5,20(s0)
}
    b3f8:	00000513          	li	a0,0
    b3fc:	00c12083          	lw	ra,12(sp)
    b400:	00812403          	lw	s0,8(sp)
    b404:	01010113          	addi	sp,sp,16
    b408:	00008067          	ret
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
    b40c:	0001d537          	lui	a0,0x1d
    b410:	7a850513          	addi	a0,a0,1960 # 1d7a8 <altcp_tcp_functions+0x70>
    b414:	e7dff0ef          	jal	ra,b290 <bsp_printf>
    b418:	fc5ff06f          	j	b3dc <netif_loopif_init+0x14>

0000b41c <netif_do_set_netmask>:
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
    b41c:	0005a703          	lw	a4,0(a1)
    b420:	00852783          	lw	a5,8(a0)
    b424:	06f70863          	beq	a4,a5,b494 <netif_do_set_netmask+0x78>
{
    b428:	ff010113          	addi	sp,sp,-16
    b42c:	00112623          	sw	ra,12(sp)
    b430:	00812423          	sw	s0,8(sp)
    b434:	00912223          	sw	s1,4(sp)
    b438:	01212023          	sw	s2,0(sp)
    b43c:	00060913          	mv	s2,a2
    b440:	00058493          	mv	s1,a1
    b444:	00050413          	mv	s0,a0
    LWIP_ASSERT("invalid pointer", old_nm != NULL);
    b448:	02060a63          	beqz	a2,b47c <netif_do_set_netmask+0x60>
    ip_addr_copy(*old_nm, *netif_ip_netmask4(netif));
    b44c:	00842783          	lw	a5,8(s0)
    b450:	00f92023          	sw	a5,0(s2)
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
    b454:	02048c63          	beqz	s1,b48c <netif_do_set_netmask+0x70>
    b458:	0004a783          	lw	a5,0(s1)
    b45c:	00f42423          	sw	a5,8(s0)
    return 1; /* netmask changed */
    b460:	00100513          	li	a0,1
}
    b464:	00c12083          	lw	ra,12(sp)
    b468:	00812403          	lw	s0,8(sp)
    b46c:	00412483          	lw	s1,4(sp)
    b470:	00012903          	lw	s2,0(sp)
    b474:	01010113          	addi	sp,sp,16
    b478:	00008067          	ret
    LWIP_ASSERT("invalid pointer", old_nm != NULL);
    b47c:	0001d537          	lui	a0,0x1d
    b480:	7cc50513          	addi	a0,a0,1996 # 1d7cc <altcp_tcp_functions+0x94>
    b484:	e0dff0ef          	jal	ra,b290 <bsp_printf>
    b488:	fc5ff06f          	j	b44c <netif_do_set_netmask+0x30>
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
    b48c:	00000793          	li	a5,0
    b490:	fcdff06f          	j	b45c <netif_do_set_netmask+0x40>
  return 0; /* netmask unchanged */
    b494:	00000513          	li	a0,0
}
    b498:	00008067          	ret

0000b49c <netif_do_set_gw>:
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
    b49c:	0005a703          	lw	a4,0(a1)
    b4a0:	00c52783          	lw	a5,12(a0)
    b4a4:	06f70863          	beq	a4,a5,b514 <netif_do_set_gw+0x78>
{
    b4a8:	ff010113          	addi	sp,sp,-16
    b4ac:	00112623          	sw	ra,12(sp)
    b4b0:	00812423          	sw	s0,8(sp)
    b4b4:	00912223          	sw	s1,4(sp)
    b4b8:	01212023          	sw	s2,0(sp)
    b4bc:	00060913          	mv	s2,a2
    b4c0:	00058493          	mv	s1,a1
    b4c4:	00050413          	mv	s0,a0
    LWIP_ASSERT("invalid pointer", old_gw != NULL);
    b4c8:	02060a63          	beqz	a2,b4fc <netif_do_set_gw+0x60>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
    b4cc:	00c42783          	lw	a5,12(s0)
    b4d0:	00f92023          	sw	a5,0(s2)
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
    b4d4:	02048c63          	beqz	s1,b50c <netif_do_set_gw+0x70>
    b4d8:	0004a783          	lw	a5,0(s1)
    b4dc:	00f42623          	sw	a5,12(s0)
    return 1; /* gateway changed */
    b4e0:	00100513          	li	a0,1
}
    b4e4:	00c12083          	lw	ra,12(sp)
    b4e8:	00812403          	lw	s0,8(sp)
    b4ec:	00412483          	lw	s1,4(sp)
    b4f0:	00012903          	lw	s2,0(sp)
    b4f4:	01010113          	addi	sp,sp,16
    b4f8:	00008067          	ret
    LWIP_ASSERT("invalid pointer", old_gw != NULL);
    b4fc:	0001d537          	lui	a0,0x1d
    b500:	7cc50513          	addi	a0,a0,1996 # 1d7cc <altcp_tcp_functions+0x94>
    b504:	d8dff0ef          	jal	ra,b290 <bsp_printf>
    b508:	fc5ff06f          	j	b4cc <netif_do_set_gw+0x30>
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
    b50c:	00000793          	li	a5,0
    b510:	fcdff06f          	j	b4dc <netif_do_set_gw+0x40>
  return 0; /* gateway unchanged */
    b514:	00000513          	li	a0,0
}
    b518:	00008067          	ret

0000b51c <netif_do_ip_addr_changed>:
{
    b51c:	ff010113          	addi	sp,sp,-16
    b520:	00112623          	sw	ra,12(sp)
    b524:	00812423          	sw	s0,8(sp)
    b528:	00912223          	sw	s1,4(sp)
    b52c:	00050413          	mv	s0,a0
    b530:	00058493          	mv	s1,a1
  tcp_netif_ip_addr_changed(old_addr, new_addr);
    b534:	359070ef          	jal	ra,1308c <tcp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
    b538:	00048593          	mv	a1,s1
    b53c:	00040513          	mv	a0,s0
    b540:	455050ef          	jal	ra,11194 <raw_netif_ip_addr_changed>
}
    b544:	00c12083          	lw	ra,12(sp)
    b548:	00812403          	lw	s0,8(sp)
    b54c:	00412483          	lw	s1,4(sp)
    b550:	01010113          	addi	sp,sp,16
    b554:	00008067          	ret

0000b558 <netif_issue_reports>:
{
    b558:	ff010113          	addi	sp,sp,-16
    b55c:	00112623          	sw	ra,12(sp)
    b560:	00812423          	sw	s0,8(sp)
    b564:	00912223          	sw	s1,4(sp)
    b568:	00050413          	mv	s0,a0
    b56c:	00058493          	mv	s1,a1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
    b570:	04050663          	beqz	a0,b5bc <netif_issue_reports+0x64>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
    b574:	03544783          	lbu	a5,53(s0)
    b578:	0057f693          	andi	a3,a5,5
    b57c:	00500713          	li	a4,5
    b580:	02e69463          	bne	a3,a4,b5a8 <netif_issue_reports+0x50>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
    b584:	0014f493          	andi	s1,s1,1
    b588:	02048063          	beqz	s1,b5a8 <netif_issue_reports+0x50>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
    b58c:	00442703          	lw	a4,4(s0)
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
    b590:	00070c63          	beqz	a4,b5a8 <netif_issue_reports+0x50>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
    b594:	0087f793          	andi	a5,a5,8
    b598:	02079a63          	bnez	a5,b5cc <netif_issue_reports+0x74>
    if (netif->flags & NETIF_FLAG_IGMP) {
    b59c:	03544783          	lbu	a5,53(s0)
    b5a0:	0207f793          	andi	a5,a5,32
    b5a4:	02079c63          	bnez	a5,b5dc <netif_issue_reports+0x84>
}
    b5a8:	00c12083          	lw	ra,12(sp)
    b5ac:	00812403          	lw	s0,8(sp)
    b5b0:	00412483          	lw	s1,4(sp)
    b5b4:	01010113          	addi	sp,sp,16
    b5b8:	00008067          	ret
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
    b5bc:	0001d537          	lui	a0,0x1d
    b5c0:	7dc50513          	addi	a0,a0,2012 # 1d7dc <altcp_tcp_functions+0xa4>
    b5c4:	ccdff0ef          	jal	ra,b290 <bsp_printf>
    b5c8:	fadff06f          	j	b574 <netif_issue_reports+0x1c>
      etharp_gratuitous(netif);
    b5cc:	00440593          	addi	a1,s0,4
    b5d0:	00040513          	mv	a0,s0
    b5d4:	1940e0ef          	jal	ra,19768 <etharp_request>
    b5d8:	fc5ff06f          	j	b59c <netif_issue_reports+0x44>
      igmp_report_groups(netif);
    b5dc:	00040513          	mv	a0,s0
    b5e0:	2cc0c0ef          	jal	ra,178ac <igmp_report_groups>
    b5e4:	fc5ff06f          	j	b5a8 <netif_issue_reports+0x50>

0000b5e8 <netif_do_set_ipaddr>:
{
    b5e8:	fe010113          	addi	sp,sp,-32
    b5ec:	00112e23          	sw	ra,28(sp)
    b5f0:	00812c23          	sw	s0,24(sp)
    b5f4:	00912a23          	sw	s1,20(sp)
    b5f8:	01212823          	sw	s2,16(sp)
    b5fc:	00050493          	mv	s1,a0
    b600:	00058413          	mv	s0,a1
    b604:	00060913          	mv	s2,a2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
    b608:	02058863          	beqz	a1,b638 <netif_do_set_ipaddr+0x50>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
    b60c:	02090e63          	beqz	s2,b648 <netif_do_set_ipaddr+0x60>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
    b610:	00042703          	lw	a4,0(s0)
    b614:	0044a783          	lw	a5,4(s1)
    b618:	04f71063          	bne	a4,a5,b658 <netif_do_set_ipaddr+0x70>
  return 0; /* address unchanged */
    b61c:	00000513          	li	a0,0
}
    b620:	01c12083          	lw	ra,28(sp)
    b624:	01812403          	lw	s0,24(sp)
    b628:	01412483          	lw	s1,20(sp)
    b62c:	01012903          	lw	s2,16(sp)
    b630:	02010113          	addi	sp,sp,32
    b634:	00008067          	ret
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
    b638:	0001d537          	lui	a0,0x1d
    b63c:	7cc50513          	addi	a0,a0,1996 # 1d7cc <altcp_tcp_functions+0x94>
    b640:	c51ff0ef          	jal	ra,b290 <bsp_printf>
    b644:	fc9ff06f          	j	b60c <netif_do_set_ipaddr+0x24>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
    b648:	0001d537          	lui	a0,0x1d
    b64c:	7cc50513          	addi	a0,a0,1996 # 1d7cc <altcp_tcp_functions+0x94>
    b650:	c41ff0ef          	jal	ra,b290 <bsp_printf>
    b654:	fbdff06f          	j	b610 <netif_do_set_ipaddr+0x28>
    *ip_2_ip4(&new_addr) = *ipaddr;
    b658:	00e12623          	sw	a4,12(sp)
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
    b65c:	00f92023          	sw	a5,0(s2)
    netif_do_ip_addr_changed(old_addr, &new_addr);
    b660:	00c10593          	addi	a1,sp,12
    b664:	00090513          	mv	a0,s2
    b668:	eb5ff0ef          	jal	ra,b51c <netif_do_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
    b66c:	02040863          	beqz	s0,b69c <netif_do_set_ipaddr+0xb4>
    b670:	00042783          	lw	a5,0(s0)
    b674:	00f4a223          	sw	a5,4(s1)
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
    b678:	00100593          	li	a1,1
    b67c:	00048513          	mv	a0,s1
    b680:	ed9ff0ef          	jal	ra,b558 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
    b684:	01c4a783          	lw	a5,28(s1)
    b688:	00078663          	beqz	a5,b694 <netif_do_set_ipaddr+0xac>
    b68c:	00048513          	mv	a0,s1
    b690:	000780e7          	jalr	a5
    return 1; /* address changed */
    b694:	00100513          	li	a0,1
    b698:	f89ff06f          	j	b620 <netif_do_set_ipaddr+0x38>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
    b69c:	00000793          	li	a5,0
    b6a0:	fd5ff06f          	j	b674 <netif_do_set_ipaddr+0x8c>

0000b6a4 <netif_input>:
{
    b6a4:	ff010113          	addi	sp,sp,-16
    b6a8:	00112623          	sw	ra,12(sp)
    b6ac:	00812423          	sw	s0,8(sp)
    b6b0:	00912223          	sw	s1,4(sp)
    b6b4:	00050493          	mv	s1,a0
    b6b8:	00058413          	mv	s0,a1
  LWIP_ASSERT("netif_input: invalid pbuf", p != NULL);
    b6bc:	02050a63          	beqz	a0,b6f0 <netif_input+0x4c>
  LWIP_ASSERT("netif_input: invalid netif", inp != NULL);
    b6c0:	04040063          	beqz	s0,b700 <netif_input+0x5c>
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
    b6c4:	03544783          	lbu	a5,53(s0)
    b6c8:	0187f793          	andi	a5,a5,24
    b6cc:	04078263          	beqz	a5,b710 <netif_input+0x6c>
    return ethernet_input(p, inp);
    b6d0:	00040593          	mv	a1,s0
    b6d4:	00048513          	mv	a0,s1
    b6d8:	b04fb0ef          	jal	ra,69dc <ethernet_input>
}
    b6dc:	00c12083          	lw	ra,12(sp)
    b6e0:	00812403          	lw	s0,8(sp)
    b6e4:	00412483          	lw	s1,4(sp)
    b6e8:	01010113          	addi	sp,sp,16
    b6ec:	00008067          	ret
  LWIP_ASSERT("netif_input: invalid pbuf", p != NULL);
    b6f0:	0001e537          	lui	a0,0x1e
    b6f4:	80050513          	addi	a0,a0,-2048 # 1d800 <altcp_tcp_functions+0xc8>
    b6f8:	b99ff0ef          	jal	ra,b290 <bsp_printf>
    b6fc:	fc5ff06f          	j	b6c0 <netif_input+0x1c>
  LWIP_ASSERT("netif_input: invalid netif", inp != NULL);
    b700:	0001e537          	lui	a0,0x1e
    b704:	81c50513          	addi	a0,a0,-2020 # 1d81c <altcp_tcp_functions+0xe4>
    b708:	b89ff0ef          	jal	ra,b290 <bsp_printf>
    b70c:	fb9ff06f          	j	b6c4 <netif_input+0x20>
    return ip_input(p, inp);
    b710:	00040593          	mv	a1,s0
    b714:	00048513          	mv	a0,s1
    b718:	0980b0ef          	jal	ra,167b0 <ip4_input>
    b71c:	fc1ff06f          	j	b6dc <netif_input+0x38>

0000b720 <netif_set_default>:
  netif_default = netif;
    b720:	000227b7          	lui	a5,0x22
    b724:	eca7ac23          	sw	a0,-296(a5) # 21ed8 <netif_default>
}
    b728:	00008067          	ret

0000b72c <netif_set_status_callback>:
  if (netif) {
    b72c:	00050463          	beqz	a0,b734 <netif_set_status_callback+0x8>
    netif->status_callback = status_callback;
    b730:	00b52e23          	sw	a1,28(a0)
}
    b734:	00008067          	ret

0000b738 <netif_set_link_callback>:
  if (netif) {
    b738:	00050463          	beqz	a0,b740 <netif_set_link_callback+0x8>
    netif->link_callback = link_callback;
    b73c:	02b52023          	sw	a1,32(a0)
}
    b740:	00008067          	ret

0000b744 <netif_loop_output>:
{
    b744:	fe010113          	addi	sp,sp,-32
    b748:	00112e23          	sw	ra,28(sp)
    b74c:	00812c23          	sw	s0,24(sp)
    b750:	00912a23          	sw	s1,20(sp)
    b754:	01212823          	sw	s2,16(sp)
    b758:	01312623          	sw	s3,12(sp)
    b75c:	00050493          	mv	s1,a0
    b760:	00058413          	mv	s0,a1
  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
    b764:	04050c63          	beqz	a0,b7bc <netif_loop_output+0x78>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
    b768:	06040263          	beqz	s0,b7cc <netif_loop_output+0x88>
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
    b76c:	28000613          	li	a2,640
    b770:	00845583          	lhu	a1,8(s0)
    b774:	00e00513          	li	a0,14
    b778:	4f0010ef          	jal	ra,cc68 <pbuf_alloc>
    b77c:	00050913          	mv	s2,a0
  if (r == NULL) {
    b780:	04050e63          	beqz	a0,b7dc <netif_loop_output+0x98>
  clen = pbuf_clen(r);
    b784:	0b9010ef          	jal	ra,d03c <pbuf_clen>
      ((netif->loop_cnt_current + clen) > LWIP_MIN(LWIP_LOOPBACK_MAX_PBUFS, 0xFFFF))) {
    b788:	0484d783          	lhu	a5,72(s1)
    b78c:	00f506b3          	add	a3,a0,a5
  if (((netif->loop_cnt_current + clen) < netif->loop_cnt_current) ||
    b790:	00a00713          	li	a4,10
    b794:	06d74863          	blt	a4,a3,b804 <netif_loop_output+0xc0>
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
    b798:	00a787b3          	add	a5,a5,a0
    b79c:	04f49423          	sh	a5,72(s1)
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
    b7a0:	00040593          	mv	a1,s0
    b7a4:	00090513          	mv	a0,s2
    b7a8:	431010ef          	jal	ra,d3d8 <pbuf_copy>
    b7ac:	00050993          	mv	s3,a0
    b7b0:	08051263          	bnez	a0,b834 <netif_loop_output+0xf0>
  for (last = r; last->next != NULL; last = last->next) {
    b7b4:	00090413          	mv	s0,s2
    b7b8:	0ac0006f          	j	b864 <netif_loop_output+0x120>
  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
    b7bc:	0001e537          	lui	a0,0x1e
    b7c0:	83850513          	addi	a0,a0,-1992 # 1d838 <altcp_tcp_functions+0x100>
    b7c4:	acdff0ef          	jal	ra,b290 <bsp_printf>
    b7c8:	fa1ff06f          	j	b768 <netif_loop_output+0x24>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
    b7cc:	0001e537          	lui	a0,0x1e
    b7d0:	85c50513          	addi	a0,a0,-1956 # 1d85c <altcp_tcp_functions+0x124>
    b7d4:	abdff0ef          	jal	ra,b290 <bsp_printf>
    b7d8:	f95ff06f          	j	b76c <netif_loop_output+0x28>
    LINK_STATS_INC(link.memerr);
    b7dc:	000227b7          	lui	a5,0x22
    b7e0:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    b7e4:	00c7d703          	lhu	a4,12(a5)
    b7e8:	00170713          	addi	a4,a4,1
    b7ec:	00e79623          	sh	a4,12(a5)
    LINK_STATS_INC(link.drop);
    b7f0:	0067d703          	lhu	a4,6(a5)
    b7f4:	00170713          	addi	a4,a4,1
    b7f8:	00e79323          	sh	a4,6(a5)
    return ERR_MEM;
    b7fc:	fff00993          	li	s3,-1
    b800:	09c0006f          	j	b89c <netif_loop_output+0x158>
    pbuf_free(r);
    b804:	00090513          	mv	a0,s2
    b808:	348010ef          	jal	ra,cb50 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    b80c:	000227b7          	lui	a5,0x22
    b810:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    b814:	00c7d703          	lhu	a4,12(a5)
    b818:	00170713          	addi	a4,a4,1
    b81c:	00e79623          	sh	a4,12(a5)
    LINK_STATS_INC(link.drop);
    b820:	0067d703          	lhu	a4,6(a5)
    b824:	00170713          	addi	a4,a4,1
    b828:	00e79323          	sh	a4,6(a5)
    return ERR_MEM;
    b82c:	fff00993          	li	s3,-1
    b830:	06c0006f          	j	b89c <netif_loop_output+0x158>
    pbuf_free(r);
    b834:	00090513          	mv	a0,s2
    b838:	318010ef          	jal	ra,cb50 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    b83c:	000227b7          	lui	a5,0x22
    b840:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    b844:	00c7d703          	lhu	a4,12(a5)
    b848:	00170713          	addi	a4,a4,1
    b84c:	00e79623          	sh	a4,12(a5)
    LINK_STATS_INC(link.drop);
    b850:	0067d703          	lhu	a4,6(a5)
    b854:	00170713          	addi	a4,a4,1
    b858:	00e79323          	sh	a4,6(a5)
    return err;
    b85c:	0400006f          	j	b89c <netif_loop_output+0x158>
  for (last = r; last->next != NULL; last = last->next) {
    b860:	00078413          	mv	s0,a5
    b864:	00042783          	lw	a5,0(s0)
    b868:	fe079ce3          	bnez	a5,b860 <netif_loop_output+0x11c>
  if (netif->loop_first != NULL) {
    b86c:	0404a783          	lw	a5,64(s1)
    b870:	04078e63          	beqz	a5,b8cc <netif_loop_output+0x188>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
    b874:	0444a783          	lw	a5,68(s1)
    b878:	04078263          	beqz	a5,b8bc <netif_loop_output+0x178>
    netif->loop_last->next = r;
    b87c:	0444a783          	lw	a5,68(s1)
    b880:	0127a023          	sw	s2,0(a5)
    netif->loop_last = last;
    b884:	0484a223          	sw	s0,68(s1)
  LINK_STATS_INC(link.xmit);
    b888:	000227b7          	lui	a5,0x22
    b88c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    b890:	0007d703          	lhu	a4,0(a5)
    b894:	00170713          	addi	a4,a4,1
    b898:	00e79023          	sh	a4,0(a5)
}
    b89c:	00098513          	mv	a0,s3
    b8a0:	01c12083          	lw	ra,28(sp)
    b8a4:	01812403          	lw	s0,24(sp)
    b8a8:	01412483          	lw	s1,20(sp)
    b8ac:	01012903          	lw	s2,16(sp)
    b8b0:	00c12983          	lw	s3,12(sp)
    b8b4:	02010113          	addi	sp,sp,32
    b8b8:	00008067          	ret
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
    b8bc:	0001e537          	lui	a0,0x1e
    b8c0:	87c50513          	addi	a0,a0,-1924 # 1d87c <altcp_tcp_functions+0x144>
    b8c4:	9cdff0ef          	jal	ra,b290 <bsp_printf>
    b8c8:	fb5ff06f          	j	b87c <netif_loop_output+0x138>
    netif->loop_first = r;
    b8cc:	0524a023          	sw	s2,64(s1)
    netif->loop_last = last;
    b8d0:	0484a223          	sw	s0,68(s1)
    b8d4:	fb5ff06f          	j	b888 <netif_loop_output+0x144>

0000b8d8 <netif_loop_output_ipv4>:
{
    b8d8:	ff010113          	addi	sp,sp,-16
    b8dc:	00112623          	sw	ra,12(sp)
  return netif_loop_output(netif, p);
    b8e0:	e65ff0ef          	jal	ra,b744 <netif_loop_output>
}
    b8e4:	00c12083          	lw	ra,12(sp)
    b8e8:	01010113          	addi	sp,sp,16
    b8ec:	00008067          	ret

0000b8f0 <netif_poll>:
{
    b8f0:	fe010113          	addi	sp,sp,-32
    b8f4:	00112e23          	sw	ra,28(sp)
    b8f8:	00812c23          	sw	s0,24(sp)
    b8fc:	00912a23          	sw	s1,20(sp)
    b900:	01212823          	sw	s2,16(sp)
    b904:	01312623          	sw	s3,12(sp)
    b908:	00050913          	mv	s2,a0
  LWIP_ASSERT("netif_poll: invalid netif", netif != NULL);
    b90c:	08051e63          	bnez	a0,b9a8 <netif_poll+0xb8>
    b910:	0001e537          	lui	a0,0x1e
    b914:	8a850513          	addi	a0,a0,-1880 # 1d8a8 <altcp_tcp_functions+0x170>
    b918:	979ff0ef          	jal	ra,b290 <bsp_printf>
    b91c:	08c0006f          	j	b9a8 <netif_poll+0xb8>
      in_end = in_end->next;
    b920:	00042403          	lw	s0,0(s0)
      clen++;
    b924:	00148493          	addi	s1,s1,1
    b928:	0ff4f493          	andi	s1,s1,255
    while (in_end->len != in_end->tot_len) {
    b92c:	00a45703          	lhu	a4,10(s0)
    b930:	00845783          	lhu	a5,8(s0)
    b934:	00f70e63          	beq	a4,a5,b950 <netif_poll+0x60>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
    b938:	00042783          	lw	a5,0(s0)
    b93c:	fe0792e3          	bnez	a5,b920 <netif_poll+0x30>
    b940:	0001e537          	lui	a0,0x1e
    b944:	8c450513          	addi	a0,a0,-1852 # 1d8c4 <altcp_tcp_functions+0x18c>
    b948:	949ff0ef          	jal	ra,b290 <bsp_printf>
    b94c:	fd5ff06f          	j	b920 <netif_poll+0x30>
    LWIP_ASSERT("netif->loop_cnt_current underflow",
    b950:	06048663          	beqz	s1,b9bc <netif_poll+0xcc>
    netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current - clen);
    b954:	04895783          	lhu	a5,72(s2)
    b958:	409784b3          	sub	s1,a5,s1
    b95c:	04991423          	sh	s1,72(s2)
    if (in_end == netif->loop_last) {
    b960:	04492783          	lw	a5,68(s2)
    b964:	06878463          	beq	a5,s0,b9cc <netif_poll+0xdc>
      netif->loop_first = in_end->next;
    b968:	00042783          	lw	a5,0(s0)
    b96c:	04f92023          	sw	a5,64(s2)
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
    b970:	06078463          	beqz	a5,b9d8 <netif_poll+0xe8>
    in_end->next = NULL;
    b974:	00042023          	sw	zero,0(s0)
    in->if_idx = netif_get_index(netif);
    b978:	03894783          	lbu	a5,56(s2)
    b97c:	00178793          	addi	a5,a5,1
    b980:	00f987a3          	sb	a5,15(s3)
    LINK_STATS_INC(link.recv);
    b984:	000227b7          	lui	a5,0x22
    b988:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    b98c:	0027d703          	lhu	a4,2(a5)
    b990:	00170713          	addi	a4,a4,1
    b994:	00e79123          	sh	a4,2(a5)
    if (ip_input(in, netif) != ERR_OK) {
    b998:	00090593          	mv	a1,s2
    b99c:	00098513          	mv	a0,s3
    b9a0:	6110a0ef          	jal	ra,167b0 <ip4_input>
    b9a4:	04051263          	bnez	a0,b9e8 <netif_poll+0xf8>
  while (netif->loop_first != NULL) {
    b9a8:	04092983          	lw	s3,64(s2)
    b9ac:	04098463          	beqz	s3,b9f4 <netif_poll+0x104>
    in = in_end = netif->loop_first;
    b9b0:	00098413          	mv	s0,s3
    u8_t clen = 1;
    b9b4:	00100493          	li	s1,1
    b9b8:	f75ff06f          	j	b92c <netif_poll+0x3c>
    LWIP_ASSERT("netif->loop_cnt_current underflow",
    b9bc:	0001e537          	lui	a0,0x1e
    b9c0:	8f450513          	addi	a0,a0,-1804 # 1d8f4 <altcp_tcp_functions+0x1bc>
    b9c4:	8cdff0ef          	jal	ra,b290 <bsp_printf>
    b9c8:	f8dff06f          	j	b954 <netif_poll+0x64>
      netif->loop_first = netif->loop_last = NULL;
    b9cc:	04092223          	sw	zero,68(s2)
    b9d0:	04092023          	sw	zero,64(s2)
    b9d4:	fa1ff06f          	j	b974 <netif_poll+0x84>
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
    b9d8:	0001e537          	lui	a0,0x1e
    b9dc:	91850513          	addi	a0,a0,-1768 # 1d918 <altcp_tcp_functions+0x1e0>
    b9e0:	8b1ff0ef          	jal	ra,b290 <bsp_printf>
    b9e4:	f91ff06f          	j	b974 <netif_poll+0x84>
      pbuf_free(in);
    b9e8:	00098513          	mv	a0,s3
    b9ec:	164010ef          	jal	ra,cb50 <pbuf_free>
    b9f0:	fb9ff06f          	j	b9a8 <netif_poll+0xb8>
}
    b9f4:	01c12083          	lw	ra,28(sp)
    b9f8:	01812403          	lw	s0,24(sp)
    b9fc:	01412483          	lw	s1,20(sp)
    ba00:	01012903          	lw	s2,16(sp)
    ba04:	00c12983          	lw	s3,12(sp)
    ba08:	02010113          	addi	sp,sp,32
    ba0c:	00008067          	ret

0000ba10 <netif_poll_all>:
{
    ba10:	ff010113          	addi	sp,sp,-16
    ba14:	00112623          	sw	ra,12(sp)
    ba18:	00812423          	sw	s0,8(sp)
  NETIF_FOREACH(netif) {
    ba1c:	000227b7          	lui	a5,0x22
    ba20:	ed47a403          	lw	s0,-300(a5) # 21ed4 <netif_list>
    ba24:	00040a63          	beqz	s0,ba38 <netif_poll_all+0x28>
    netif_poll(netif);
    ba28:	00040513          	mv	a0,s0
    ba2c:	ec5ff0ef          	jal	ra,b8f0 <netif_poll>
  NETIF_FOREACH(netif) {
    ba30:	00042403          	lw	s0,0(s0)
    ba34:	ff1ff06f          	j	ba24 <netif_poll_all+0x14>
}
    ba38:	00c12083          	lw	ra,12(sp)
    ba3c:	00812403          	lw	s0,8(sp)
    ba40:	01010113          	addi	sp,sp,16
    ba44:	00008067          	ret

0000ba48 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
    ba48:	02050463          	beqz	a0,ba70 <netif_get_by_index+0x28>
    NETIF_FOREACH(netif) {
    ba4c:	000227b7          	lui	a5,0x22
    ba50:	ed47a703          	lw	a4,-300(a5) # 21ed4 <netif_list>
    ba54:	02070063          	beqz	a4,ba74 <netif_get_by_index+0x2c>
      if (idx == netif_get_index(netif)) {
    ba58:	03874783          	lbu	a5,56(a4)
    ba5c:	00178793          	addi	a5,a5,1
    ba60:	0ff7f793          	andi	a5,a5,255
    ba64:	00a78863          	beq	a5,a0,ba74 <netif_get_by_index+0x2c>
    NETIF_FOREACH(netif) {
    ba68:	00072703          	lw	a4,0(a4)
    ba6c:	fe9ff06f          	j	ba54 <netif_get_by_index+0xc>
        return netif; /* found! */
      }
    }
  }

  return NULL;
    ba70:	00000713          	li	a4,0
}
    ba74:	00070513          	mv	a0,a4
    ba78:	00008067          	ret

0000ba7c <netif_index_to_name>:
{
    ba7c:	ff010113          	addi	sp,sp,-16
    ba80:	00112623          	sw	ra,12(sp)
    ba84:	00812423          	sw	s0,8(sp)
    ba88:	00912223          	sw	s1,4(sp)
    ba8c:	00050493          	mv	s1,a0
    ba90:	00058413          	mv	s0,a1
  struct netif *netif = netif_get_by_index(idx);
    ba94:	fb5ff0ef          	jal	ra,ba48 <netif_get_by_index>
  if (netif != NULL) {
    ba98:	02050463          	beqz	a0,bac0 <netif_index_to_name+0x44>
    name[0] = netif->name[0];
    ba9c:	03654783          	lbu	a5,54(a0)
    baa0:	00f40023          	sb	a5,0(s0)
    name[1] = netif->name[1];
    baa4:	03754783          	lbu	a5,55(a0)
    baa8:	00f400a3          	sb	a5,1(s0)
    lwip_itoa(&name[2], NETIF_NAMESIZE - 2, netif_index_to_num(idx));
    baac:	fff48613          	addi	a2,s1,-1
    bab0:	00400593          	li	a1,4
    bab4:	00240513          	addi	a0,s0,2
    bab8:	b7dfe0ef          	jal	ra,a634 <lwip_itoa>
    return name;
    babc:	00040513          	mv	a0,s0
}
    bac0:	00c12083          	lw	ra,12(sp)
    bac4:	00812403          	lw	s0,8(sp)
    bac8:	00412483          	lw	s1,4(sp)
    bacc:	01010113          	addi	sp,sp,16
    bad0:	00008067          	ret

0000bad4 <netif_find>:
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
    bad4:	06050e63          	beqz	a0,bb50 <netif_find+0x7c>
{
    bad8:	ff010113          	addi	sp,sp,-16
    badc:	00112623          	sw	ra,12(sp)
    bae0:	00812423          	sw	s0,8(sp)
    bae4:	00050413          	mv	s0,a0
    return NULL;
  }

  num = (u8_t)atoi(&name[2]);
    bae8:	00250513          	addi	a0,a0,2
    baec:	d7cf50ef          	jal	ra,1068 <atoi>
    baf0:	0ff57713          	andi	a4,a0,255
  if (!num && (name[2] != '0')) {
    baf4:	00071863          	bnez	a4,bb04 <netif_find+0x30>
    baf8:	00244683          	lbu	a3,2(s0)
    bafc:	03000793          	li	a5,48
    bb00:	02f69e63          	bne	a3,a5,bb3c <netif_find+0x68>
    /* this means atoi has failed */
    return NULL;
  }

  NETIF_FOREACH(netif) {
    bb04:	000227b7          	lui	a5,0x22
    bb08:	ed47a503          	lw	a0,-300(a5) # 21ed4 <netif_list>
    bb0c:	0080006f          	j	bb14 <netif_find+0x40>
    bb10:	00052503          	lw	a0,0(a0)
    bb14:	02050663          	beqz	a0,bb40 <netif_find+0x6c>
    if (num == netif->num &&
    bb18:	03854783          	lbu	a5,56(a0)
    bb1c:	fee79ae3          	bne	a5,a4,bb10 <netif_find+0x3c>
        name[0] == netif->name[0] &&
    bb20:	00044683          	lbu	a3,0(s0)
    bb24:	03654783          	lbu	a5,54(a0)
    if (num == netif->num &&
    bb28:	fef694e3          	bne	a3,a5,bb10 <netif_find+0x3c>
        name[1] == netif->name[1]) {
    bb2c:	00144683          	lbu	a3,1(s0)
    bb30:	03754783          	lbu	a5,55(a0)
        name[0] == netif->name[0] &&
    bb34:	fcf69ee3          	bne	a3,a5,bb10 <netif_find+0x3c>
    bb38:	0080006f          	j	bb40 <netif_find+0x6c>
    return NULL;
    bb3c:	00000513          	li	a0,0
      return netif;
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
}
    bb40:	00c12083          	lw	ra,12(sp)
    bb44:	00812403          	lw	s0,8(sp)
    bb48:	01010113          	addi	sp,sp,16
    bb4c:	00008067          	ret
    bb50:	00008067          	ret

0000bb54 <netif_name_to_index>:
{
    bb54:	ff010113          	addi	sp,sp,-16
    bb58:	00112623          	sw	ra,12(sp)
  struct netif *netif = netif_find(name);
    bb5c:	f79ff0ef          	jal	ra,bad4 <netif_find>
  if (netif != NULL) {
    bb60:	00050e63          	beqz	a0,bb7c <netif_name_to_index+0x28>
    return netif_get_index(netif);
    bb64:	03854503          	lbu	a0,56(a0)
    bb68:	00150513          	addi	a0,a0,1
    bb6c:	0ff57513          	andi	a0,a0,255
}
    bb70:	00c12083          	lw	ra,12(sp)
    bb74:	01010113          	addi	sp,sp,16
    bb78:	00008067          	ret
  return NETIF_NO_INDEX;
    bb7c:	00000513          	li	a0,0
    bb80:	ff1ff06f          	j	bb70 <netif_name_to_index+0x1c>

0000bb84 <netif_add_ext_callback>:
 * @param callback pointer to listener structure
 * @param fn callback function
 */
void
netif_add_ext_callback(netif_ext_callback_t *callback, netif_ext_callback_fn fn)
{
    bb84:	ff010113          	addi	sp,sp,-16
    bb88:	00112623          	sw	ra,12(sp)
    bb8c:	00812423          	sw	s0,8(sp)
    bb90:	00912223          	sw	s1,4(sp)
    bb94:	00050413          	mv	s0,a0
    bb98:	00058493          	mv	s1,a1
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("callback must be != NULL", callback != NULL);
    bb9c:	02050663          	beqz	a0,bbc8 <netif_add_ext_callback+0x44>
  LWIP_ASSERT("fn must be != NULL", fn != NULL);
    bba0:	02048c63          	beqz	s1,bbd8 <netif_add_ext_callback+0x54>

  callback->callback_fn = fn;
    bba4:	00942023          	sw	s1,0(s0)
  callback->next        = ext_callback;
    bba8:	90c1a703          	lw	a4,-1780(gp) # 1fadc <ext_callback>
    bbac:	00e42223          	sw	a4,4(s0)
  ext_callback          = callback;
    bbb0:	9081a623          	sw	s0,-1780(gp) # 1fadc <ext_callback>
}
    bbb4:	00c12083          	lw	ra,12(sp)
    bbb8:	00812403          	lw	s0,8(sp)
    bbbc:	00412483          	lw	s1,4(sp)
    bbc0:	01010113          	addi	sp,sp,16
    bbc4:	00008067          	ret
  LWIP_ASSERT("callback must be != NULL", callback != NULL);
    bbc8:	0001e537          	lui	a0,0x1e
    bbcc:	94050513          	addi	a0,a0,-1728 # 1d940 <altcp_tcp_functions+0x208>
    bbd0:	ec0ff0ef          	jal	ra,b290 <bsp_printf>
    bbd4:	fcdff06f          	j	bba0 <netif_add_ext_callback+0x1c>
  LWIP_ASSERT("fn must be != NULL", fn != NULL);
    bbd8:	0001e537          	lui	a0,0x1e
    bbdc:	95c50513          	addi	a0,a0,-1700 # 1d95c <altcp_tcp_functions+0x224>
    bbe0:	eb0ff0ef          	jal	ra,b290 <bsp_printf>
    bbe4:	fc1ff06f          	j	bba4 <netif_add_ext_callback+0x20>

0000bbe8 <netif_remove_ext_callback>:
 * Remove extended netif events listener
 * @param callback pointer to listener structure
 */
void
netif_remove_ext_callback(netif_ext_callback_t* callback)
{
    bbe8:	ff010113          	addi	sp,sp,-16
    bbec:	00112623          	sw	ra,12(sp)
    bbf0:	00812423          	sw	s0,8(sp)
    bbf4:	00912223          	sw	s1,4(sp)
    bbf8:	00050493          	mv	s1,a0
  netif_ext_callback_t *last, *iter;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("callback must be != NULL", callback != NULL);
    bbfc:	02050463          	beqz	a0,bc24 <netif_remove_ext_callback+0x3c>

  if (ext_callback == NULL) {
    bc00:	90c1a403          	lw	s0,-1780(gp) # 1fadc <ext_callback>
    bc04:	04040663          	beqz	s0,bc50 <netif_remove_ext_callback+0x68>
    return;
  }

  if (callback == ext_callback) {
    bc08:	02940663          	beq	s0,s1,bc34 <netif_remove_ext_callback+0x4c>
    ext_callback = ext_callback->next;
  } else {
    last = ext_callback;
    for (iter = ext_callback->next; iter != NULL; last = iter, iter = iter->next) {
    bc0c:	00442783          	lw	a5,4(s0)
    bc10:	04078063          	beqz	a5,bc50 <netif_remove_ext_callback+0x68>
      if (iter == callback) {
    bc14:	02978663          	beq	a5,s1,bc40 <netif_remove_ext_callback+0x58>
    for (iter = ext_callback->next; iter != NULL; last = iter, iter = iter->next) {
    bc18:	00078413          	mv	s0,a5
    bc1c:	0047a783          	lw	a5,4(a5)
    bc20:	ff1ff06f          	j	bc10 <netif_remove_ext_callback+0x28>
  LWIP_ASSERT("callback must be != NULL", callback != NULL);
    bc24:	0001e537          	lui	a0,0x1e
    bc28:	94050513          	addi	a0,a0,-1728 # 1d940 <altcp_tcp_functions+0x208>
    bc2c:	e64ff0ef          	jal	ra,b290 <bsp_printf>
    bc30:	fd1ff06f          	j	bc00 <netif_remove_ext_callback+0x18>
    ext_callback = ext_callback->next;
    bc34:	00442703          	lw	a4,4(s0)
    bc38:	90e1a623          	sw	a4,-1780(gp) # 1fadc <ext_callback>
    bc3c:	0140006f          	j	bc50 <netif_remove_ext_callback+0x68>
        LWIP_ASSERT("last != NULL", last != NULL);
    bc40:	02040263          	beqz	s0,bc64 <netif_remove_ext_callback+0x7c>
        last->next = callback->next;
    bc44:	0044a783          	lw	a5,4(s1)
    bc48:	00f42223          	sw	a5,4(s0)
        callback->next = NULL;
    bc4c:	0004a223          	sw	zero,4(s1)
        return;
      }
    }
  }
}
    bc50:	00c12083          	lw	ra,12(sp)
    bc54:	00812403          	lw	s0,8(sp)
    bc58:	00412483          	lw	s1,4(sp)
    bc5c:	01010113          	addi	sp,sp,16
    bc60:	00008067          	ret
        LWIP_ASSERT("last != NULL", last != NULL);
    bc64:	0001e537          	lui	a0,0x1e
    bc68:	97050513          	addi	a0,a0,-1680 # 1d970 <altcp_tcp_functions+0x238>
    bc6c:	e24ff0ef          	jal	ra,b290 <bsp_printf>
    bc70:	fd5ff06f          	j	bc44 <netif_remove_ext_callback+0x5c>

0000bc74 <netif_invoke_ext_callback>:
 * @param reason change reason
 * @param args depends on reason, see reason description
 */
void
netif_invoke_ext_callback(struct netif *netif, netif_nsc_reason_t reason, const netif_ext_callback_args_t *args)
{
    bc74:	fe010113          	addi	sp,sp,-32
    bc78:	00112e23          	sw	ra,28(sp)
    bc7c:	00812c23          	sw	s0,24(sp)
    bc80:	00912a23          	sw	s1,20(sp)
    bc84:	01212823          	sw	s2,16(sp)
    bc88:	01312623          	sw	s3,12(sp)
    bc8c:	00050493          	mv	s1,a0
    bc90:	00058913          	mv	s2,a1
    bc94:	00060993          	mv	s3,a2
  netif_ext_callback_t *callback = ext_callback;
    bc98:	90c1a403          	lw	s0,-1780(gp) # 1fadc <ext_callback>

  LWIP_ASSERT("netif must be != NULL", netif != NULL);
    bc9c:	02050263          	beqz	a0,bcc0 <netif_invoke_ext_callback+0x4c>

  while (callback != NULL) {
    bca0:	02040863          	beqz	s0,bcd0 <netif_invoke_ext_callback+0x5c>
    callback->callback_fn(netif, reason, args);
    bca4:	00042783          	lw	a5,0(s0)
    bca8:	00098613          	mv	a2,s3
    bcac:	00090593          	mv	a1,s2
    bcb0:	00048513          	mv	a0,s1
    bcb4:	000780e7          	jalr	a5
    callback = callback->next;
    bcb8:	00442403          	lw	s0,4(s0)
    bcbc:	fe5ff06f          	j	bca0 <netif_invoke_ext_callback+0x2c>
  LWIP_ASSERT("netif must be != NULL", netif != NULL);
    bcc0:	0001e537          	lui	a0,0x1e
    bcc4:	98050513          	addi	a0,a0,-1664 # 1d980 <altcp_tcp_functions+0x248>
    bcc8:	dc8ff0ef          	jal	ra,b290 <bsp_printf>
    bccc:	fd5ff06f          	j	bca0 <netif_invoke_ext_callback+0x2c>
  }
}
    bcd0:	01c12083          	lw	ra,28(sp)
    bcd4:	01812403          	lw	s0,24(sp)
    bcd8:	01412483          	lw	s1,20(sp)
    bcdc:	01012903          	lw	s2,16(sp)
    bce0:	00c12983          	lw	s3,12(sp)
    bce4:	02010113          	addi	sp,sp,32
    bce8:	00008067          	ret

0000bcec <netif_set_ipaddr>:
  LWIP_ERROR("netif_set_ipaddr: invalid netif", netif != NULL, return);
    bcec:	04050e63          	beqz	a0,bd48 <netif_set_ipaddr+0x5c>
{
    bcf0:	fe010113          	addi	sp,sp,-32
    bcf4:	00112e23          	sw	ra,28(sp)
    bcf8:	00812c23          	sw	s0,24(sp)
    bcfc:	00050413          	mv	s0,a0
  if (ipaddr == NULL) {
    bd00:	02058263          	beqz	a1,bd24 <netif_set_ipaddr+0x38>
  if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
    bd04:	00c10613          	addi	a2,sp,12
    bd08:	00040513          	mv	a0,s0
    bd0c:	8ddff0ef          	jal	ra,b5e8 <netif_do_set_ipaddr>
    bd10:	00051e63          	bnez	a0,bd2c <netif_set_ipaddr+0x40>
}
    bd14:	01c12083          	lw	ra,28(sp)
    bd18:	01812403          	lw	s0,24(sp)
    bd1c:	02010113          	addi	sp,sp,32
    bd20:	00008067          	ret
    ipaddr = IP4_ADDR_ANY4;
    bd24:	8ac18593          	addi	a1,gp,-1876 # 1fa7c <ip_addr_any>
    bd28:	fddff06f          	j	bd04 <netif_set_ipaddr+0x18>
    args.ipv4_changed.old_address = &old_addr;
    bd2c:	00c10793          	addi	a5,sp,12
    bd30:	00f12023          	sw	a5,0(sp)
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_ADDRESS_CHANGED, &args);
    bd34:	00010613          	mv	a2,sp
    bd38:	01000593          	li	a1,16
    bd3c:	00040513          	mv	a0,s0
    bd40:	f35ff0ef          	jal	ra,bc74 <netif_invoke_ext_callback>
    bd44:	fd1ff06f          	j	bd14 <netif_set_ipaddr+0x28>
    bd48:	00008067          	ret

0000bd4c <netif_set_netmask>:
  LWIP_ERROR("netif_set_netmask: invalid netif", netif != NULL, return);
    bd4c:	04050e63          	beqz	a0,bda8 <netif_set_netmask+0x5c>
{
    bd50:	fe010113          	addi	sp,sp,-32
    bd54:	00112e23          	sw	ra,28(sp)
    bd58:	00812c23          	sw	s0,24(sp)
    bd5c:	00050413          	mv	s0,a0
  if (netmask == NULL) {
    bd60:	02058263          	beqz	a1,bd84 <netif_set_netmask+0x38>
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
    bd64:	00c10613          	addi	a2,sp,12
    bd68:	00040513          	mv	a0,s0
    bd6c:	eb0ff0ef          	jal	ra,b41c <netif_do_set_netmask>
    bd70:	00051e63          	bnez	a0,bd8c <netif_set_netmask+0x40>
}
    bd74:	01c12083          	lw	ra,28(sp)
    bd78:	01812403          	lw	s0,24(sp)
    bd7c:	02010113          	addi	sp,sp,32
    bd80:	00008067          	ret
    netmask = IP4_ADDR_ANY4;
    bd84:	8ac18593          	addi	a1,gp,-1876 # 1fa7c <ip_addr_any>
    bd88:	fddff06f          	j	bd64 <netif_set_netmask+0x18>
    args.ipv4_changed.old_netmask = old_nm;
    bd8c:	00c10793          	addi	a5,sp,12
    bd90:	00f12223          	sw	a5,4(sp)
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_NETMASK_CHANGED, &args);
    bd94:	00010613          	mv	a2,sp
    bd98:	04000593          	li	a1,64
    bd9c:	00040513          	mv	a0,s0
    bda0:	ed5ff0ef          	jal	ra,bc74 <netif_invoke_ext_callback>
    bda4:	fd1ff06f          	j	bd74 <netif_set_netmask+0x28>
    bda8:	00008067          	ret

0000bdac <netif_set_gw>:
  LWIP_ERROR("netif_set_gw: invalid netif", netif != NULL, return);
    bdac:	04050e63          	beqz	a0,be08 <netif_set_gw+0x5c>
{
    bdb0:	fe010113          	addi	sp,sp,-32
    bdb4:	00112e23          	sw	ra,28(sp)
    bdb8:	00812c23          	sw	s0,24(sp)
    bdbc:	00050413          	mv	s0,a0
  if (gw == NULL) {
    bdc0:	02058263          	beqz	a1,bde4 <netif_set_gw+0x38>
  if (netif_do_set_gw(netif, gw, old_gw)) {
    bdc4:	00c10613          	addi	a2,sp,12
    bdc8:	00040513          	mv	a0,s0
    bdcc:	ed0ff0ef          	jal	ra,b49c <netif_do_set_gw>
    bdd0:	00051e63          	bnez	a0,bdec <netif_set_gw+0x40>
}
    bdd4:	01c12083          	lw	ra,28(sp)
    bdd8:	01812403          	lw	s0,24(sp)
    bddc:	02010113          	addi	sp,sp,32
    bde0:	00008067          	ret
    gw = IP4_ADDR_ANY4;
    bde4:	8ac18593          	addi	a1,gp,-1876 # 1fa7c <ip_addr_any>
    bde8:	fddff06f          	j	bdc4 <netif_set_gw+0x18>
    args.ipv4_changed.old_gw = old_gw;
    bdec:	00c10793          	addi	a5,sp,12
    bdf0:	00f12423          	sw	a5,8(sp)
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_GATEWAY_CHANGED, &args);
    bdf4:	00010613          	mv	a2,sp
    bdf8:	02000593          	li	a1,32
    bdfc:	00040513          	mv	a0,s0
    be00:	e75ff0ef          	jal	ra,bc74 <netif_invoke_ext_callback>
    be04:	fd1ff06f          	j	bdd4 <netif_set_gw+0x28>
    be08:	00008067          	ret

0000be0c <netif_set_addr>:
{
    be0c:	fc010113          	addi	sp,sp,-64
    be10:	02112e23          	sw	ra,60(sp)
    be14:	02812c23          	sw	s0,56(sp)
    be18:	02912a23          	sw	s1,52(sp)
    be1c:	03212823          	sw	s2,48(sp)
    be20:	03312623          	sw	s3,44(sp)
    be24:	03412423          	sw	s4,40(sp)
    be28:	03512223          	sw	s5,36(sp)
    be2c:	00050913          	mv	s2,a0
    be30:	00058413          	mv	s0,a1
    be34:	00060a13          	mv	s4,a2
    be38:	00068993          	mv	s3,a3
  if (ipaddr == NULL) {
    be3c:	04058063          	beqz	a1,be7c <netif_set_addr+0x70>
  if (netmask == NULL) {
    be40:	040a0263          	beqz	s4,be84 <netif_set_addr+0x78>
  if (gw == NULL) {
    be44:	04098463          	beqz	s3,be8c <netif_set_addr+0x80>
  remove = ip4_addr_isany(ipaddr);
    be48:	00040663          	beqz	s0,be54 <netif_set_addr+0x48>
    be4c:	00042783          	lw	a5,0(s0)
    be50:	04079263          	bnez	a5,be94 <netif_set_addr+0x88>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
    be54:	00810613          	addi	a2,sp,8
    be58:	00040593          	mv	a1,s0
    be5c:	00090513          	mv	a0,s2
    be60:	f88ff0ef          	jal	ra,b5e8 <netif_do_set_ipaddr>
    be64:	0a050263          	beqz	a0,bf08 <netif_set_addr+0xfc>
      cb_args.ipv4_changed.old_address = &old_addr;
    be68:	00810793          	addi	a5,sp,8
    be6c:	00f12a23          	sw	a5,20(sp)
    be70:	00100a93          	li	s5,1
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
    be74:	01000493          	li	s1,16
    be78:	0240006f          	j	be9c <netif_set_addr+0x90>
    ipaddr = IP4_ADDR_ANY4;
    be7c:	8ac18413          	addi	s0,gp,-1876 # 1fa7c <ip_addr_any>
    be80:	fc1ff06f          	j	be40 <netif_set_addr+0x34>
    netmask = IP4_ADDR_ANY4;
    be84:	8ac18a13          	addi	s4,gp,-1876 # 1fa7c <ip_addr_any>
    be88:	fbdff06f          	j	be44 <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
    be8c:	8ac18993          	addi	s3,gp,-1876 # 1fa7c <ip_addr_any>
    be90:	fb9ff06f          	j	be48 <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
    be94:	00000a93          	li	s5,0
  netif_nsc_reason_t change_reason = LWIP_NSC_NONE;
    be98:	00000493          	li	s1,0
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
    be9c:	01010613          	addi	a2,sp,16
    bea0:	000a0593          	mv	a1,s4
    bea4:	00090513          	mv	a0,s2
    bea8:	d74ff0ef          	jal	ra,b41c <netif_do_set_netmask>
    beac:	00050863          	beqz	a0,bebc <netif_set_addr+0xb0>
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    beb0:	0404e493          	ori	s1,s1,64
    cb_args.ipv4_changed.old_netmask = old_nm;
    beb4:	01010793          	addi	a5,sp,16
    beb8:	00f12c23          	sw	a5,24(sp)
  if (netif_do_set_gw(netif, gw, old_gw)) {
    bebc:	00c10613          	addi	a2,sp,12
    bec0:	00098593          	mv	a1,s3
    bec4:	00090513          	mv	a0,s2
    bec8:	dd4ff0ef          	jal	ra,b49c <netif_do_set_gw>
    becc:	00050863          	beqz	a0,bedc <netif_set_addr+0xd0>
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    bed0:	0204e493          	ori	s1,s1,32
    cb_args.ipv4_changed.old_gw = old_gw;
    bed4:	00c10793          	addi	a5,sp,12
    bed8:	00f12e23          	sw	a5,28(sp)
  if (!remove) {
    bedc:	020a8c63          	beqz	s5,bf14 <netif_set_addr+0x108>
  if (change_reason != LWIP_NSC_NONE) {
    bee0:	04049c63          	bnez	s1,bf38 <netif_set_addr+0x12c>
}
    bee4:	03c12083          	lw	ra,60(sp)
    bee8:	03812403          	lw	s0,56(sp)
    beec:	03412483          	lw	s1,52(sp)
    bef0:	03012903          	lw	s2,48(sp)
    bef4:	02c12983          	lw	s3,44(sp)
    bef8:	02812a03          	lw	s4,40(sp)
    befc:	02412a83          	lw	s5,36(sp)
    bf00:	04010113          	addi	sp,sp,64
    bf04:	00008067          	ret
    bf08:	00100a93          	li	s5,1
  netif_nsc_reason_t change_reason = LWIP_NSC_NONE;
    bf0c:	00000493          	li	s1,0
    bf10:	f8dff06f          	j	be9c <netif_set_addr+0x90>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
    bf14:	00810613          	addi	a2,sp,8
    bf18:	00040593          	mv	a1,s0
    bf1c:	00090513          	mv	a0,s2
    bf20:	ec8ff0ef          	jal	ra,b5e8 <netif_do_set_ipaddr>
    bf24:	fa050ee3          	beqz	a0,bee0 <netif_set_addr+0xd4>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
    bf28:	0104e493          	ori	s1,s1,16
      cb_args.ipv4_changed.old_address = &old_addr;
    bf2c:	00810793          	addi	a5,sp,8
    bf30:	00f12a23          	sw	a5,20(sp)
    bf34:	fadff06f          	j	bee0 <netif_set_addr+0xd4>
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
    bf38:	01410613          	addi	a2,sp,20
    bf3c:	0804e593          	ori	a1,s1,128
    bf40:	00090513          	mv	a0,s2
    bf44:	d31ff0ef          	jal	ra,bc74 <netif_invoke_ext_callback>
}
    bf48:	f9dff06f          	j	bee4 <netif_set_addr+0xd8>

0000bf4c <netif_add>:
{
    bf4c:	ff010113          	addi	sp,sp,-16
    bf50:	00112623          	sw	ra,12(sp)
    bf54:	00812423          	sw	s0,8(sp)
    bf58:	00912223          	sw	s1,4(sp)
    bf5c:	01212023          	sw	s2,0(sp)
    bf60:	00050913          	mv	s2,a0
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
    bf64:	14050e63          	beqz	a0,c0c0 <netif_add+0x174>
    bf68:	00078413          	mv	s0,a5
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
    bf6c:	18078063          	beqz	a5,c0ec <netif_add+0x1a0>
  if (ipaddr == NULL) {
    bf70:	08058063          	beqz	a1,bff0 <netif_add+0xa4>
  if (netmask == NULL) {
    bf74:	08060263          	beqz	a2,bff8 <netif_add+0xac>
  if (gw == NULL) {
    bf78:	08068463          	beqz	a3,c000 <netif_add+0xb4>
  ip_addr_set_zero_ip4(&netif->ip_addr);
    bf7c:	00092223          	sw	zero,4(s2)
  ip_addr_set_zero_ip4(&netif->netmask);
    bf80:	00092423          	sw	zero,8(s2)
  ip_addr_set_zero_ip4(&netif->gw);
    bf84:	00092623          	sw	zero,12(s2)
  netif->output = netif_null_output_ip4;
    bf88:	0000b7b7          	lui	a5,0xb
    bf8c:	28878793          	addi	a5,a5,648 # b288 <netif_null_output_ip4>
    bf90:	00f92a23          	sw	a5,20(s2)
  netif->mtu = 0;
    bf94:	02091623          	sh	zero,44(s2)
  netif->flags = 0;
    bf98:	02090aa3          	sb	zero,53(s2)
  memset(netif->client_data, 0, sizeof(netif->client_data));
    bf9c:	02090423          	sb	zero,40(s2)
    bfa0:	020904a3          	sb	zero,41(s2)
    bfa4:	02090523          	sb	zero,42(s2)
    bfa8:	020905a3          	sb	zero,43(s2)
  netif->status_callback = NULL;
    bfac:	00092e23          	sw	zero,28(s2)
  netif->link_callback = NULL;
    bfb0:	02092023          	sw	zero,32(s2)
  netif->igmp_mac_filter = NULL;
    bfb4:	02092e23          	sw	zero,60(s2)
  netif->state = state;
    bfb8:	02e92223          	sw	a4,36(s2)
  netif->num = netif_num;
    bfbc:	9081c783          	lbu	a5,-1784(gp) # 1fad8 <netif_num>
    bfc0:	02f90c23          	sb	a5,56(s2)
  netif->input = input;
    bfc4:	01092823          	sw	a6,16(s2)
  netif->loop_first = NULL;
    bfc8:	04092023          	sw	zero,64(s2)
  netif->loop_last = NULL;
    bfcc:	04092223          	sw	zero,68(s2)
  netif->loop_cnt_current = 0;
    bfd0:	04091423          	sh	zero,72(s2)
  netif_set_addr(netif, ipaddr, netmask, gw);
    bfd4:	00090513          	mv	a0,s2
    bfd8:	e35ff0ef          	jal	ra,be0c <netif_set_addr>
  if (init(netif) != ERR_OK) {
    bfdc:	00090513          	mv	a0,s2
    bfe0:	000400e7          	jalr	s0
    bfe4:	06050e63          	beqz	a0,c060 <netif_add+0x114>
    return NULL;
    bfe8:	00000513          	li	a0,0
    bfec:	0d40006f          	j	c0c0 <netif_add+0x174>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
    bff0:	8ac18593          	addi	a1,gp,-1876 # 1fa7c <ip_addr_any>
    bff4:	f81ff06f          	j	bf74 <netif_add+0x28>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
    bff8:	8ac18613          	addi	a2,gp,-1876 # 1fa7c <ip_addr_any>
    bffc:	f7dff06f          	j	bf78 <netif_add+0x2c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
    c000:	8ac18693          	addi	a3,gp,-1876 # 1fa7c <ip_addr_any>
    c004:	f79ff06f          	j	bf7c <netif_add+0x30>
        netif->num = 0;
    c008:	02090c23          	sb	zero,56(s2)
    c00c:	0600006f          	j	c06c <netif_add+0x120>
        LWIP_ASSERT("netif already added", netif2 != netif);
    c010:	0001e537          	lui	a0,0x1e
    c014:	99850513          	addi	a0,a0,-1640 # 1d998 <altcp_tcp_functions+0x260>
    c018:	a78ff0ef          	jal	ra,b290 <bsp_printf>
    c01c:	0280006f          	j	c044 <netif_add+0xf8>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
    c020:	0001e537          	lui	a0,0x1e
    c024:	9ac50513          	addi	a0,a0,-1620 # 1d9ac <altcp_tcp_functions+0x274>
    c028:	a68ff0ef          	jal	ra,b290 <bsp_printf>
        if (netif2->num == netif->num) {
    c02c:	03844703          	lbu	a4,56(s0)
    c030:	03894783          	lbu	a5,56(s2)
    c034:	02f70063          	beq	a4,a5,c054 <netif_add+0x108>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
    c038:	00042403          	lw	s0,0(s0)
    c03c:	02040063          	beqz	s0,c05c <netif_add+0x110>
        LWIP_ASSERT("netif already added", netif2 != netif);
    c040:	fd2408e3          	beq	s0,s2,c010 <netif_add+0xc4>
        num_netifs++;
    c044:	00148493          	addi	s1,s1,1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
    c048:	0ff00793          	li	a5,255
    c04c:	fe97d0e3          	bge	a5,s1,c02c <netif_add+0xe0>
    c050:	fd1ff06f          	j	c020 <netif_add+0xd4>
          netif->num++;
    c054:	00178793          	addi	a5,a5,1
    c058:	02f90c23          	sb	a5,56(s2)
    } while (netif2 != NULL);
    c05c:	02040063          	beqz	s0,c07c <netif_add+0x130>
      if (netif->num == 255) {
    c060:	03894703          	lbu	a4,56(s2)
    c064:	0ff00793          	li	a5,255
    c068:	faf700e3          	beq	a4,a5,c008 <netif_add+0xbc>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
    c06c:	000227b7          	lui	a5,0x22
    c070:	ed47a403          	lw	s0,-300(a5) # 21ed4 <netif_list>
      num_netifs = 0;
    c074:	00000493          	li	s1,0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
    c078:	fc5ff06f          	j	c03c <netif_add+0xf0>
  if (netif->num == 254) {
    c07c:	03894783          	lbu	a5,56(s2)
    c080:	0fe00713          	li	a4,254
    c084:	04e78a63          	beq	a5,a4,c0d8 <netif_add+0x18c>
    netif_num = (u8_t)(netif->num + 1);
    c088:	00178793          	addi	a5,a5,1
    c08c:	90f18423          	sb	a5,-1784(gp) # 1fad8 <netif_num>
  netif->next = netif_list;
    c090:	000227b7          	lui	a5,0x22
    c094:	ed47a703          	lw	a4,-300(a5) # 21ed4 <netif_list>
    c098:	00e92023          	sw	a4,0(s2)
  netif_list = netif;
    c09c:	ed27aa23          	sw	s2,-300(a5)
  if (netif->flags & NETIF_FLAG_IGMP) {
    c0a0:	03594783          	lbu	a5,53(s2)
    c0a4:	0207f793          	andi	a5,a5,32
    c0a8:	02079c63          	bnez	a5,c0e0 <netif_add+0x194>
  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);
    c0ac:	00000613          	li	a2,0
    c0b0:	00100593          	li	a1,1
    c0b4:	00090513          	mv	a0,s2
    c0b8:	bbdff0ef          	jal	ra,bc74 <netif_invoke_ext_callback>
  return netif;
    c0bc:	00090513          	mv	a0,s2
}
    c0c0:	00c12083          	lw	ra,12(sp)
    c0c4:	00812403          	lw	s0,8(sp)
    c0c8:	00412483          	lw	s1,4(sp)
    c0cc:	00012903          	lw	s2,0(sp)
    c0d0:	01010113          	addi	sp,sp,16
    c0d4:	00008067          	ret
    netif_num = 0;
    c0d8:	90018423          	sb	zero,-1784(gp) # 1fad8 <netif_num>
    c0dc:	fb5ff06f          	j	c090 <netif_add+0x144>
    igmp_start(netif);
    c0e0:	00090513          	mv	a0,s2
    c0e4:	1050b0ef          	jal	ra,179e8 <igmp_start>
    c0e8:	fc5ff06f          	j	c0ac <netif_add+0x160>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
    c0ec:	00000513          	li	a0,0
    c0f0:	fd1ff06f          	j	c0c0 <netif_add+0x174>

0000c0f4 <netif_add_noaddr>:
{
    c0f4:	ff010113          	addi	sp,sp,-16
    c0f8:	00112623          	sw	ra,12(sp)
  return netif_add(netif,
    c0fc:	00068813          	mv	a6,a3
    c100:	00060793          	mv	a5,a2
    c104:	00058713          	mv	a4,a1
    c108:	00000693          	li	a3,0
    c10c:	00000613          	li	a2,0
    c110:	00000593          	li	a1,0
    c114:	e39ff0ef          	jal	ra,bf4c <netif_add>
}
    c118:	00c12083          	lw	ra,12(sp)
    c11c:	01010113          	addi	sp,sp,16
    c120:	00008067          	ret

0000c124 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
    c124:	06050463          	beqz	a0,c18c <netif_set_up+0x68>
  if (!(netif->flags & NETIF_FLAG_UP)) {
    c128:	03554783          	lbu	a5,53(a0)
    c12c:	0017f713          	andi	a4,a5,1
    c130:	04071e63          	bnez	a4,c18c <netif_set_up+0x68>
{
    c134:	fe010113          	addi	sp,sp,-32
    c138:	00112e23          	sw	ra,28(sp)
    c13c:	00812c23          	sw	s0,24(sp)
    c140:	00050413          	mv	s0,a0
    netif_set_flags(netif, NETIF_FLAG_UP);
    c144:	0017e793          	ori	a5,a5,1
    c148:	02f50aa3          	sb	a5,53(a0)
    NETIF_STATUS_CALLBACK(netif);
    c14c:	01c52783          	lw	a5,28(a0)
    c150:	00078463          	beqz	a5,c158 <netif_set_up+0x34>
    c154:	000780e7          	jalr	a5
      args.status_changed.state = 1;
    c158:	00100793          	li	a5,1
    c15c:	00f10223          	sb	a5,4(sp)
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    c160:	00410613          	addi	a2,sp,4
    c164:	00800593          	li	a1,8
    c168:	00040513          	mv	a0,s0
    c16c:	b09ff0ef          	jal	ra,bc74 <netif_invoke_ext_callback>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
    c170:	00300593          	li	a1,3
    c174:	00040513          	mv	a0,s0
    c178:	be0ff0ef          	jal	ra,b558 <netif_issue_reports>
}
    c17c:	01c12083          	lw	ra,28(sp)
    c180:	01812403          	lw	s0,24(sp)
    c184:	02010113          	addi	sp,sp,32
    c188:	00008067          	ret
    c18c:	00008067          	ret

0000c190 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
    c190:	00050863          	beqz	a0,c1a0 <netif_set_down+0x10>
  if (netif->flags & NETIF_FLAG_UP) {
    c194:	03554783          	lbu	a5,53(a0)
    c198:	0017f793          	andi	a5,a5,1
    c19c:	00079463          	bnez	a5,c1a4 <netif_set_down+0x14>
    c1a0:	00008067          	ret
{
    c1a4:	fe010113          	addi	sp,sp,-32
    c1a8:	00112e23          	sw	ra,28(sp)
    c1ac:	00812c23          	sw	s0,24(sp)
    c1b0:	00050413          	mv	s0,a0
      args.status_changed.state = 0;
    c1b4:	00010223          	sb	zero,4(sp)
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    c1b8:	00410613          	addi	a2,sp,4
    c1bc:	00800593          	li	a1,8
    c1c0:	ab5ff0ef          	jal	ra,bc74 <netif_invoke_ext_callback>
    netif_clear_flags(netif, NETIF_FLAG_UP);
    c1c4:	03544783          	lbu	a5,53(s0)
    c1c8:	0fe7f793          	andi	a5,a5,254
    c1cc:	02f40aa3          	sb	a5,53(s0)
    if (netif->flags & NETIF_FLAG_ETHARP) {
    c1d0:	0087f793          	andi	a5,a5,8
    c1d4:	02079263          	bnez	a5,c1f8 <netif_set_down+0x68>
    NETIF_STATUS_CALLBACK(netif);
    c1d8:	01c42783          	lw	a5,28(s0)
    c1dc:	00078663          	beqz	a5,c1e8 <netif_set_down+0x58>
    c1e0:	00040513          	mv	a0,s0
    c1e4:	000780e7          	jalr	a5
}
    c1e8:	01c12083          	lw	ra,28(sp)
    c1ec:	01812403          	lw	s0,24(sp)
    c1f0:	02010113          	addi	sp,sp,32
    c1f4:	00008067          	ret
      etharp_cleanup_netif(netif);
    c1f8:	00040513          	mv	a0,s0
    c1fc:	18c0d0ef          	jal	ra,19388 <etharp_cleanup_netif>
    c200:	fd9ff06f          	j	c1d8 <netif_set_down+0x48>

0000c204 <netif_remove>:
  if (netif == NULL) {
    c204:	0c050463          	beqz	a0,c2cc <netif_remove+0xc8>
{
    c208:	ff010113          	addi	sp,sp,-16
    c20c:	00112623          	sw	ra,12(sp)
    c210:	00812423          	sw	s0,8(sp)
    c214:	00050413          	mv	s0,a0
  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_REMOVED, NULL);
    c218:	00000613          	li	a2,0
    c21c:	00200593          	li	a1,2
    c220:	a55ff0ef          	jal	ra,bc74 <netif_invoke_ext_callback>
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
    c224:	00442783          	lw	a5,4(s0)
    c228:	04079463          	bnez	a5,c270 <netif_remove+0x6c>
  if (netif->flags & NETIF_FLAG_IGMP) {
    c22c:	03544783          	lbu	a5,53(s0)
    c230:	0207f793          	andi	a5,a5,32
    c234:	04079663          	bnez	a5,c280 <netif_remove+0x7c>
  if (netif_is_up(netif)) {
    c238:	03544783          	lbu	a5,53(s0)
    c23c:	0017f793          	andi	a5,a5,1
    c240:	04079663          	bnez	a5,c28c <netif_remove+0x88>
  if (netif_default == netif) {
    c244:	000227b7          	lui	a5,0x22
    c248:	ed87a783          	lw	a5,-296(a5) # 21ed8 <netif_default>
    c24c:	04878663          	beq	a5,s0,c298 <netif_remove+0x94>
  if (netif_list == netif) {
    c250:	000227b7          	lui	a5,0x22
    c254:	ed47a783          	lw	a5,-300(a5) # 21ed4 <netif_list>
    c258:	04878663          	beq	a5,s0,c2a4 <netif_remove+0xa0>
    NETIF_FOREACH(tmp_netif) {
    c25c:	06078063          	beqz	a5,c2bc <netif_remove+0xb8>
      if (tmp_netif->next == netif) {
    c260:	0007a703          	lw	a4,0(a5)
    c264:	04870863          	beq	a4,s0,c2b4 <netif_remove+0xb0>
    NETIF_FOREACH(tmp_netif) {
    c268:	00070793          	mv	a5,a4
    c26c:	ff1ff06f          	j	c25c <netif_remove+0x58>
    netif_do_ip_addr_changed(netif_ip_addr4(netif), NULL);
    c270:	00000593          	li	a1,0
    c274:	00440513          	addi	a0,s0,4
    c278:	aa4ff0ef          	jal	ra,b51c <netif_do_ip_addr_changed>
    c27c:	fb1ff06f          	j	c22c <netif_remove+0x28>
    igmp_stop(netif);
    c280:	00040513          	mv	a0,s0
    c284:	5b40b0ef          	jal	ra,17838 <igmp_stop>
    c288:	fb1ff06f          	j	c238 <netif_remove+0x34>
    netif_set_down(netif);
    c28c:	00040513          	mv	a0,s0
    c290:	f01ff0ef          	jal	ra,c190 <netif_set_down>
    c294:	fb1ff06f          	j	c244 <netif_remove+0x40>
    netif_set_default(NULL);
    c298:	00000513          	li	a0,0
    c29c:	c84ff0ef          	jal	ra,b720 <netif_set_default>
    c2a0:	fb1ff06f          	j	c250 <netif_remove+0x4c>
    netif_list = netif->next;
    c2a4:	00042703          	lw	a4,0(s0)
    c2a8:	000227b7          	lui	a5,0x22
    c2ac:	ece7aa23          	sw	a4,-300(a5) # 21ed4 <netif_list>
    c2b0:	00c0006f          	j	c2bc <netif_remove+0xb8>
        tmp_netif->next = netif->next;
    c2b4:	00042703          	lw	a4,0(s0)
    c2b8:	00e7a023          	sw	a4,0(a5)
}
    c2bc:	00c12083          	lw	ra,12(sp)
    c2c0:	00812403          	lw	s0,8(sp)
    c2c4:	01010113          	addi	sp,sp,16
    c2c8:	00008067          	ret
    c2cc:	00008067          	ret

0000c2d0 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
    c2d0:	00050863          	beqz	a0,c2e0 <netif_set_link_up+0x10>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
    c2d4:	03554783          	lbu	a5,53(a0)
    c2d8:	0047f713          	andi	a4,a5,4
    c2dc:	00070463          	beqz	a4,c2e4 <netif_set_link_up+0x14>
    c2e0:	00008067          	ret
{
    c2e4:	fe010113          	addi	sp,sp,-32
    c2e8:	00112e23          	sw	ra,28(sp)
    c2ec:	00812c23          	sw	s0,24(sp)
    c2f0:	00050413          	mv	s0,a0
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
    c2f4:	0047e793          	ori	a5,a5,4
    c2f8:	02f50aa3          	sb	a5,53(a0)
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
    c2fc:	00300593          	li	a1,3
    c300:	a58ff0ef          	jal	ra,b558 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
    c304:	02042783          	lw	a5,32(s0)
    c308:	00078663          	beqz	a5,c314 <netif_set_link_up+0x44>
    c30c:	00040513          	mv	a0,s0
    c310:	000780e7          	jalr	a5
      args.link_changed.state = 1;
    c314:	00100793          	li	a5,1
    c318:	00f10223          	sb	a5,4(sp)
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    c31c:	00410613          	addi	a2,sp,4
    c320:	00400593          	li	a1,4
    c324:	00040513          	mv	a0,s0
    c328:	94dff0ef          	jal	ra,bc74 <netif_invoke_ext_callback>
}
    c32c:	01c12083          	lw	ra,28(sp)
    c330:	01812403          	lw	s0,24(sp)
    c334:	02010113          	addi	sp,sp,32
    c338:	00008067          	ret

0000c33c <netif_init>:
{
    c33c:	fe010113          	addi	sp,sp,-32
    c340:	00112e23          	sw	ra,28(sp)
    c344:	00812c23          	sw	s0,24(sp)
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
    c348:	010007b7          	lui	a5,0x1000
    c34c:	07f78793          	addi	a5,a5,127 # 100007f <__freertos_irq_stack_top+0xfdb14f>
    c350:	00f12223          	sw	a5,4(sp)
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
    c354:	00f12623          	sw	a5,12(sp)
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
    c358:	0ff00793          	li	a5,255
    c35c:	00f12423          	sw	a5,8(sp)
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
    c360:	00016837          	lui	a6,0x16
    c364:	7b080813          	addi	a6,a6,1968 # 167b0 <ip4_input>
    c368:	0000b7b7          	lui	a5,0xb
    c36c:	3c878793          	addi	a5,a5,968 # b3c8 <netif_loopif_init>
    c370:	00000713          	li	a4,0
    c374:	00410693          	addi	a3,sp,4
    c378:	00810613          	addi	a2,sp,8
    c37c:	00c10593          	addi	a1,sp,12
    c380:	9cc18513          	addi	a0,gp,-1588 # 1fb9c <loop_netif>
    c384:	bc9ff0ef          	jal	ra,bf4c <netif_add>
  netif_set_link_up(&loop_netif);
    c388:	9cc18513          	addi	a0,gp,-1588 # 1fb9c <loop_netif>
    c38c:	f45ff0ef          	jal	ra,c2d0 <netif_set_link_up>
  netif_set_up(&loop_netif);
    c390:	9cc18513          	addi	a0,gp,-1588 # 1fb9c <loop_netif>
    c394:	d91ff0ef          	jal	ra,c124 <netif_set_up>
}
    c398:	01c12083          	lw	ra,28(sp)
    c39c:	01812403          	lw	s0,24(sp)
    c3a0:	02010113          	addi	sp,sp,32
    c3a4:	00008067          	ret

0000c3a8 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
    c3a8:	04050c63          	beqz	a0,c400 <netif_set_link_down+0x58>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
    c3ac:	03554783          	lbu	a5,53(a0)
    c3b0:	0047f713          	andi	a4,a5,4
    c3b4:	04070663          	beqz	a4,c400 <netif_set_link_down+0x58>
{
    c3b8:	fe010113          	addi	sp,sp,-32
    c3bc:	00112e23          	sw	ra,28(sp)
    c3c0:	00812c23          	sw	s0,24(sp)
    c3c4:	00050413          	mv	s0,a0
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
    c3c8:	0fb7f793          	andi	a5,a5,251
    c3cc:	02f50aa3          	sb	a5,53(a0)
    NETIF_LINK_CALLBACK(netif);
    c3d0:	02052783          	lw	a5,32(a0)
    c3d4:	00078463          	beqz	a5,c3dc <netif_set_link_down+0x34>
    c3d8:	000780e7          	jalr	a5
      args.link_changed.state = 0;
    c3dc:	00010223          	sb	zero,4(sp)
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    c3e0:	00410613          	addi	a2,sp,4
    c3e4:	00400593          	li	a1,4
    c3e8:	00040513          	mv	a0,s0
    c3ec:	889ff0ef          	jal	ra,bc74 <netif_invoke_ext_callback>
}
    c3f0:	01c12083          	lw	ra,28(sp)
    c3f4:	01812403          	lw	s0,24(sp)
    c3f8:	02010113          	addi	sp,sp,32
    c3fc:	00008067          	ret
    c400:	00008067          	ret

0000c404 <uart_writeAvailability>:
        return *((volatile u32*) address);
    c404:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    c408:	01055513          	srli	a0,a0,0x10
    }
    c40c:	0ff57513          	andi	a0,a0,255
    c410:	00008067          	ret

0000c414 <uart_write>:
    static void uart_write(u32 reg, char data){
    c414:	ff010113          	addi	sp,sp,-16
    c418:	00112623          	sw	ra,12(sp)
    c41c:	00812423          	sw	s0,8(sp)
    c420:	00912223          	sw	s1,4(sp)
    c424:	00050413          	mv	s0,a0
    c428:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    c42c:	00040513          	mv	a0,s0
    c430:	fd5ff0ef          	jal	ra,c404 <uart_writeAvailability>
    c434:	fe050ce3          	beqz	a0,c42c <uart_write+0x18>
        *((volatile u32*) address) = data;
    c438:	00942023          	sw	s1,0(s0)
    }
    c43c:	00c12083          	lw	ra,12(sp)
    c440:	00812403          	lw	s0,8(sp)
    c444:	00412483          	lw	s1,4(sp)
    c448:	01010113          	addi	sp,sp,16
    c44c:	00008067          	ret

0000c450 <bsp_printHex>:
    {
    c450:	ff010113          	addi	sp,sp,-16
    c454:	00112623          	sw	ra,12(sp)
    c458:	00812423          	sw	s0,8(sp)
    c45c:	00912223          	sw	s1,4(sp)
    c460:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    c464:	01c00413          	li	s0,28
    c468:	0280006f          	j	c490 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    c46c:	0084d7b3          	srl	a5,s1,s0
    c470:	00f7f713          	andi	a4,a5,15
    c474:	0001c7b7          	lui	a5,0x1c
    c478:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    c47c:	00e787b3          	add	a5,a5,a4
    c480:	0007c583          	lbu	a1,0(a5)
    c484:	f8010537          	lui	a0,0xf8010
    c488:	f8dff0ef          	jal	ra,c414 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    c48c:	ffc40413          	addi	s0,s0,-4
    c490:	fc045ee3          	bgez	s0,c46c <bsp_printHex+0x1c>
    }
    c494:	00c12083          	lw	ra,12(sp)
    c498:	00812403          	lw	s0,8(sp)
    c49c:	00412483          	lw	s1,4(sp)
    c4a0:	01010113          	addi	sp,sp,16
    c4a4:	00008067          	ret

0000c4a8 <bsp_printHex_lower>:
        {
    c4a8:	ff010113          	addi	sp,sp,-16
    c4ac:	00112623          	sw	ra,12(sp)
    c4b0:	00812423          	sw	s0,8(sp)
    c4b4:	00912223          	sw	s1,4(sp)
    c4b8:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    c4bc:	01c00413          	li	s0,28
    c4c0:	0280006f          	j	c4e8 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    c4c4:	0084d7b3          	srl	a5,s1,s0
    c4c8:	00f7f713          	andi	a4,a5,15
    c4cc:	0001c7b7          	lui	a5,0x1c
    c4d0:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    c4d4:	00e787b3          	add	a5,a5,a4
    c4d8:	0007c583          	lbu	a1,0(a5)
    c4dc:	f8010537          	lui	a0,0xf8010
    c4e0:	f35ff0ef          	jal	ra,c414 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    c4e4:	ffc40413          	addi	s0,s0,-4
    c4e8:	fc045ee3          	bgez	s0,c4c4 <bsp_printHex_lower+0x1c>
        }
    c4ec:	00c12083          	lw	ra,12(sp)
    c4f0:	00812403          	lw	s0,8(sp)
    c4f4:	00412483          	lw	s1,4(sp)
    c4f8:	01010113          	addi	sp,sp,16
    c4fc:	00008067          	ret

0000c500 <bsp_printf_c>:
    {
    c500:	ff010113          	addi	sp,sp,-16
    c504:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    c508:	0ff57593          	andi	a1,a0,255
    c50c:	f8010537          	lui	a0,0xf8010
    c510:	f05ff0ef          	jal	ra,c414 <uart_write>
    }
    c514:	00c12083          	lw	ra,12(sp)
    c518:	01010113          	addi	sp,sp,16
    c51c:	00008067          	ret

0000c520 <bsp_printf_s>:
    {
    c520:	ff010113          	addi	sp,sp,-16
    c524:	00112623          	sw	ra,12(sp)
    c528:	00812423          	sw	s0,8(sp)
    c52c:	00050413          	mv	s0,a0
        while (*p)
    c530:	00044583          	lbu	a1,0(s0)
    c534:	00058a63          	beqz	a1,c548 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    c538:	00140413          	addi	s0,s0,1
    c53c:	f8010537          	lui	a0,0xf8010
    c540:	ed5ff0ef          	jal	ra,c414 <uart_write>
    c544:	fedff06f          	j	c530 <bsp_printf_s+0x10>
    }
    c548:	00c12083          	lw	ra,12(sp)
    c54c:	00812403          	lw	s0,8(sp)
    c550:	01010113          	addi	sp,sp,16
    c554:	00008067          	ret

0000c558 <bsp_printf_d>:
    {
    c558:	fd010113          	addi	sp,sp,-48
    c55c:	02112623          	sw	ra,44(sp)
    c560:	02812423          	sw	s0,40(sp)
    c564:	02912223          	sw	s1,36(sp)
    c568:	00050493          	mv	s1,a0
        if (val < 0) {
    c56c:	00054663          	bltz	a0,c578 <bsp_printf_d+0x20>
    {
    c570:	00010413          	mv	s0,sp
    c574:	02c0006f          	j	c5a0 <bsp_printf_d+0x48>
            bsp_printf_c('-');
    c578:	02d00513          	li	a0,45
    c57c:	f85ff0ef          	jal	ra,c500 <bsp_printf_c>
            val = -val;
    c580:	409004b3          	neg	s1,s1
    c584:	fedff06f          	j	c570 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
    c588:	00a00713          	li	a4,10
    c58c:	02e4e7b3          	rem	a5,s1,a4
    c590:	03078793          	addi	a5,a5,48
    c594:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    c598:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    c59c:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    c5a0:	fe0494e3          	bnez	s1,c588 <bsp_printf_d+0x30>
    c5a4:	00010793          	mv	a5,sp
    c5a8:	fef400e3          	beq	s0,a5,c588 <bsp_printf_d+0x30>
    c5ac:	0100006f          	j	c5bc <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
    c5b0:	fff40413          	addi	s0,s0,-1
    c5b4:	00044503          	lbu	a0,0(s0)
    c5b8:	f49ff0ef          	jal	ra,c500 <bsp_printf_c>
        while (p != buffer)
    c5bc:	00010793          	mv	a5,sp
    c5c0:	fef418e3          	bne	s0,a5,c5b0 <bsp_printf_d+0x58>
    }
    c5c4:	02c12083          	lw	ra,44(sp)
    c5c8:	02812403          	lw	s0,40(sp)
    c5cc:	02412483          	lw	s1,36(sp)
    c5d0:	03010113          	addi	sp,sp,48
    c5d4:	00008067          	ret

0000c5d8 <bsp_printf_x>:
    {
    c5d8:	ff010113          	addi	sp,sp,-16
    c5dc:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
    c5e0:	00000713          	li	a4,0
    c5e4:	00700793          	li	a5,7
    c5e8:	02e7c063          	blt	a5,a4,c608 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    c5ec:	00271693          	slli	a3,a4,0x2
    c5f0:	ff000793          	li	a5,-16
    c5f4:	00d797b3          	sll	a5,a5,a3
    c5f8:	00f577b3          	and	a5,a0,a5
    c5fc:	00078663          	beqz	a5,c608 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    c600:	00170713          	addi	a4,a4,1
    c604:	fe1ff06f          	j	c5e4 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
    c608:	ea1ff0ef          	jal	ra,c4a8 <bsp_printHex_lower>
    }
    c60c:	00c12083          	lw	ra,12(sp)
    c610:	01010113          	addi	sp,sp,16
    c614:	00008067          	ret

0000c618 <bsp_printf_X>:
        {
    c618:	ff010113          	addi	sp,sp,-16
    c61c:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
    c620:	00000713          	li	a4,0
    c624:	00700793          	li	a5,7
    c628:	02e7c063          	blt	a5,a4,c648 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    c62c:	00271693          	slli	a3,a4,0x2
    c630:	ff000793          	li	a5,-16
    c634:	00d797b3          	sll	a5,a5,a3
    c638:	00f577b3          	and	a5,a0,a5
    c63c:	00078663          	beqz	a5,c648 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    c640:	00170713          	addi	a4,a4,1
    c644:	fe1ff06f          	j	c624 <bsp_printf_X+0xc>
            bsp_printHex(val);
    c648:	e09ff0ef          	jal	ra,c450 <bsp_printHex>
        }
    c64c:	00c12083          	lw	ra,12(sp)
    c650:	01010113          	addi	sp,sp,16
    c654:	00008067          	ret

0000c658 <pbuf_pool_is_empty>:
/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
    c658:	000227b7          	lui	a5,0x22
    c65c:	00100713          	li	a4,1
    c660:	ece78e23          	sb	a4,-292(a5) # 21edc <pbuf_free_ooseq_pending>
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
    c664:	00008067          	ret

0000c668 <pbuf_init_alloced_pbuf>:

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
  p->next = NULL;
    c668:	00052023          	sw	zero,0(a0) # f8010000 <__freertos_irq_stack_top+0xf7feb0d0>
  p->payload = payload;
    c66c:	00b52223          	sw	a1,4(a0)
  p->tot_len = tot_len;
    c670:	00c51423          	sh	a2,8(a0)
  p->len = len;
    c674:	00d51523          	sh	a3,10(a0)
  p->type_internal = (u8_t)type;
    c678:	00e50623          	sb	a4,12(a0)
  p->flags = flags;
    c67c:	00f506a3          	sb	a5,13(a0)
  p->ref = 1;
    c680:	00100793          	li	a5,1
    c684:	00f50723          	sb	a5,14(a0)
  p->if_idx = NETIF_NO_INDEX;
    c688:	000507a3          	sb	zero,15(a0)
}
    c68c:	00008067          	ret

0000c690 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
    c690:	02050063          	beqz	a0,c6b0 <pbuf_skip_const+0x20>
    c694:	00a55783          	lhu	a5,10(a0)
    c698:	00f5ec63          	bltu	a1,a5,c6b0 <pbuf_skip_const+0x20>
    offset_left = (u16_t)(offset_left - q->len);
    c69c:	40f585b3          	sub	a1,a1,a5
    c6a0:	01059593          	slli	a1,a1,0x10
    c6a4:	0105d593          	srli	a1,a1,0x10
    q = q->next;
    c6a8:	00052503          	lw	a0,0(a0)
    c6ac:	fe5ff06f          	j	c690 <pbuf_skip_const>
  }
  if (out_offset != NULL) {
    c6b0:	00060463          	beqz	a2,c6b8 <pbuf_skip_const+0x28>
    *out_offset = offset_left;
    c6b4:	00b61023          	sh	a1,0(a2)
  }
  return q;
}
    c6b8:	00008067          	ret

0000c6bc <bsp_printf>:
    {
    c6bc:	fc010113          	addi	sp,sp,-64
    c6c0:	00112e23          	sw	ra,28(sp)
    c6c4:	00812c23          	sw	s0,24(sp)
    c6c8:	00912a23          	sw	s1,20(sp)
    c6cc:	00050493          	mv	s1,a0
    c6d0:	02b12223          	sw	a1,36(sp)
    c6d4:	02c12423          	sw	a2,40(sp)
    c6d8:	02d12623          	sw	a3,44(sp)
    c6dc:	02e12823          	sw	a4,48(sp)
    c6e0:	02f12a23          	sw	a5,52(sp)
    c6e4:	03012c23          	sw	a6,56(sp)
    c6e8:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
    c6ec:	02410793          	addi	a5,sp,36
    c6f0:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
    c6f4:	00000413          	li	s0,0
    c6f8:	01c0006f          	j	c714 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
    c6fc:	00c12783          	lw	a5,12(sp)
    c700:	00478713          	addi	a4,a5,4
    c704:	00e12623          	sw	a4,12(sp)
    c708:	0007a503          	lw	a0,0(a5)
    c70c:	df5ff0ef          	jal	ra,c500 <bsp_printf_c>
        for (i = 0; format[i]; i++)
    c710:	00140413          	addi	s0,s0,1
    c714:	008487b3          	add	a5,s1,s0
    c718:	0007c503          	lbu	a0,0(a5)
    c71c:	0c050263          	beqz	a0,c7e0 <bsp_printf+0x124>
            if (format[i] == '%') {
    c720:	02500793          	li	a5,37
    c724:	06f50663          	beq	a0,a5,c790 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
    c728:	dd9ff0ef          	jal	ra,c500 <bsp_printf_c>
    c72c:	fe5ff06f          	j	c710 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    c730:	00c12783          	lw	a5,12(sp)
    c734:	00478713          	addi	a4,a5,4
    c738:	00e12623          	sw	a4,12(sp)
    c73c:	0007a503          	lw	a0,0(a5)
    c740:	de1ff0ef          	jal	ra,c520 <bsp_printf_s>
                        break;
    c744:	fcdff06f          	j	c710 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    c748:	00c12783          	lw	a5,12(sp)
    c74c:	00478713          	addi	a4,a5,4
    c750:	00e12623          	sw	a4,12(sp)
    c754:	0007a503          	lw	a0,0(a5)
    c758:	e01ff0ef          	jal	ra,c558 <bsp_printf_d>
                        break;
    c75c:	fb5ff06f          	j	c710 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    c760:	00c12783          	lw	a5,12(sp)
    c764:	00478713          	addi	a4,a5,4
    c768:	00e12623          	sw	a4,12(sp)
    c76c:	0007a503          	lw	a0,0(a5)
    c770:	ea9ff0ef          	jal	ra,c618 <bsp_printf_X>
                        break;
    c774:	f9dff06f          	j	c710 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    c778:	00c12783          	lw	a5,12(sp)
    c77c:	00478713          	addi	a4,a5,4
    c780:	00e12623          	sw	a4,12(sp)
    c784:	0007a503          	lw	a0,0(a5)
    c788:	e51ff0ef          	jal	ra,c5d8 <bsp_printf_x>
                        break;
    c78c:	f85ff06f          	j	c710 <bsp_printf+0x54>
                while (format[++i]) {
    c790:	00140413          	addi	s0,s0,1
    c794:	008487b3          	add	a5,s1,s0
    c798:	0007c783          	lbu	a5,0(a5)
    c79c:	f6078ae3          	beqz	a5,c710 <bsp_printf+0x54>
                    if (format[i] == 'c') {
    c7a0:	06300713          	li	a4,99
    c7a4:	f4e78ce3          	beq	a5,a4,c6fc <bsp_printf+0x40>
                    else if (format[i] == 's') {
    c7a8:	07300713          	li	a4,115
    c7ac:	f8e782e3          	beq	a5,a4,c730 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    c7b0:	06400713          	li	a4,100
    c7b4:	f8e78ae3          	beq	a5,a4,c748 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    c7b8:	05800713          	li	a4,88
    c7bc:	fae782e3          	beq	a5,a4,c760 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    c7c0:	07800713          	li	a4,120
    c7c4:	fae78ae3          	beq	a5,a4,c778 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    c7c8:	06600713          	li	a4,102
    c7cc:	fce792e3          	bne	a5,a4,c790 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    c7d0:	0001c537          	lui	a0,0x1c
    c7d4:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    c7d8:	d49ff0ef          	jal	ra,c520 <bsp_printf_s>
                        break;
    c7dc:	f35ff06f          	j	c710 <bsp_printf+0x54>
    }
    c7e0:	01c12083          	lw	ra,28(sp)
    c7e4:	01812403          	lw	s0,24(sp)
    c7e8:	01412483          	lw	s1,20(sp)
    c7ec:	04010113          	addi	sp,sp,64
    c7f0:	00008067          	ret

0000c7f4 <pbuf_add_header_impl>:
{
    c7f4:	ff010113          	addi	sp,sp,-16
    c7f8:	00112623          	sw	ra,12(sp)
    c7fc:	00812423          	sw	s0,8(sp)
    c800:	00912223          	sw	s1,4(sp)
    c804:	01212023          	sw	s2,0(sp)
    c808:	00050413          	mv	s0,a0
    c80c:	00058493          	mv	s1,a1
    c810:	00060913          	mv	s2,a2
  LWIP_ASSERT("p != NULL", p != NULL);
    c814:	06050063          	beqz	a0,c874 <pbuf_add_header_impl+0x80>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
    c818:	08040263          	beqz	s0,c89c <pbuf_add_header_impl+0xa8>
    c81c:	000107b7          	lui	a5,0x10
    c820:	08f4f263          	bgeu	s1,a5,c8a4 <pbuf_add_header_impl+0xb0>
  if (header_size_increment == 0) {
    c824:	08048e63          	beqz	s1,c8c0 <pbuf_add_header_impl+0xcc>
  increment_magnitude = (u16_t)header_size_increment;
    c828:	01049713          	slli	a4,s1,0x10
    c82c:	01075713          	srli	a4,a4,0x10
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    c830:	00845783          	lhu	a5,8(s0)
    c834:	00e787b3          	add	a5,a5,a4
    c838:	01079793          	slli	a5,a5,0x10
    c83c:	0107d793          	srli	a5,a5,0x10
    c840:	08e7e463          	bltu	a5,a4,c8c8 <pbuf_add_header_impl+0xd4>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
    c844:	00c40683          	lb	a3,12(s0)
    c848:	0206ce63          	bltz	a3,c884 <pbuf_add_header_impl+0x90>
    if (force) {
    c84c:	08090263          	beqz	s2,c8d0 <pbuf_add_header_impl+0xdc>
      payload = (u8_t *)p->payload - header_size_increment;
    c850:	00442683          	lw	a3,4(s0)
    c854:	409684b3          	sub	s1,a3,s1
  p->payload = payload;
    c858:	00942223          	sw	s1,4(s0)
  p->len = (u16_t)(p->len + increment_magnitude);
    c85c:	00a45683          	lhu	a3,10(s0)
    c860:	00e68733          	add	a4,a3,a4
    c864:	00e41523          	sh	a4,10(s0)
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
    c868:	00f41423          	sh	a5,8(s0)
  return 0;
    c86c:	00000513          	li	a0,0
    c870:	0380006f          	j	c8a8 <pbuf_add_header_impl+0xb4>
  LWIP_ASSERT("p != NULL", p != NULL);
    c874:	0001d537          	lui	a0,0x1d
    c878:	f0850513          	addi	a0,a0,-248 # 1cf08 <lwiperf_txbuf_const+0x728>
    c87c:	e41ff0ef          	jal	ra,c6bc <bsp_printf>
    c880:	f99ff06f          	j	c818 <pbuf_add_header_impl+0x24>
    payload = (u8_t *)p->payload - header_size_increment;
    c884:	00442683          	lw	a3,4(s0)
    c888:	409684b3          	sub	s1,a3,s1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
    c88c:	01040693          	addi	a3,s0,16
    c890:	fcd4f4e3          	bgeu	s1,a3,c858 <pbuf_add_header_impl+0x64>
      return 1;
    c894:	00100513          	li	a0,1
    c898:	0100006f          	j	c8a8 <pbuf_add_header_impl+0xb4>
    return 1;
    c89c:	00100513          	li	a0,1
    c8a0:	0080006f          	j	c8a8 <pbuf_add_header_impl+0xb4>
    c8a4:	00100513          	li	a0,1
}
    c8a8:	00c12083          	lw	ra,12(sp)
    c8ac:	00812403          	lw	s0,8(sp)
    c8b0:	00412483          	lw	s1,4(sp)
    c8b4:	00012903          	lw	s2,0(sp)
    c8b8:	01010113          	addi	sp,sp,16
    c8bc:	00008067          	ret
    return 0;
    c8c0:	00000513          	li	a0,0
    c8c4:	fe5ff06f          	j	c8a8 <pbuf_add_header_impl+0xb4>
    return 1;
    c8c8:	00100513          	li	a0,1
    c8cc:	fddff06f          	j	c8a8 <pbuf_add_header_impl+0xb4>
      return 1;
    c8d0:	00100513          	li	a0,1
    c8d4:	fd5ff06f          	j	c8a8 <pbuf_add_header_impl+0xb4>

0000c8d8 <pbuf_free_ooseq>:
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
    c8d8:	000227b7          	lui	a5,0x22
    c8dc:	ec078e23          	sb	zero,-292(a5) # 21edc <pbuf_free_ooseq_pending>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
    c8e0:	000227b7          	lui	a5,0x22
    c8e4:	f007a503          	lw	a0,-256(a5) # 21f00 <tcp_active_pcbs>
    c8e8:	02050663          	beqz	a0,c914 <pbuf_free_ooseq+0x3c>
    if (pcb->ooseq != NULL) {
    c8ec:	07852783          	lw	a5,120(a0)
    c8f0:	00079663          	bnez	a5,c8fc <pbuf_free_ooseq+0x24>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
    c8f4:	00c52503          	lw	a0,12(a0)
    c8f8:	ff1ff06f          	j	c8e8 <pbuf_free_ooseq+0x10>
{
    c8fc:	ff010113          	addi	sp,sp,-16
    c900:	00112623          	sw	ra,12(sp)
      tcp_free_ooseq(pcb);
    c904:	25c060ef          	jal	ra,12b60 <tcp_free_ooseq>
}
    c908:	00c12083          	lw	ra,12(sp)
    c90c:	01010113          	addi	sp,sp,16
    c910:	00008067          	ret
    c914:	00008067          	ret

0000c918 <pbuf_alloc_reference>:
{
    c918:	fe010113          	addi	sp,sp,-32
    c91c:	00112e23          	sw	ra,28(sp)
    c920:	00812c23          	sw	s0,24(sp)
    c924:	00912a23          	sw	s1,20(sp)
    c928:	01212823          	sw	s2,16(sp)
    c92c:	01312623          	sw	s3,12(sp)
    c930:	00050993          	mv	s3,a0
    c934:	00058913          	mv	s2,a1
    c938:	00060493          	mv	s1,a2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
    c93c:	04100793          	li	a5,65
    c940:	00f60663          	beq	a2,a5,c94c <pbuf_alloc_reference+0x34>
    c944:	00100793          	li	a5,1
    c948:	04f61663          	bne	a2,a5,c994 <pbuf_alloc_reference+0x7c>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
    c94c:	00a00513          	li	a0,10
    c950:	2fd070ef          	jal	ra,1444c <memp_malloc>
    c954:	00050413          	mv	s0,a0
  if (p == NULL) {
    c958:	00050e63          	beqz	a0,c974 <pbuf_alloc_reference+0x5c>
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
    c95c:	00000793          	li	a5,0
    c960:	00048713          	mv	a4,s1
    c964:	00090693          	mv	a3,s2
    c968:	00090613          	mv	a2,s2
    c96c:	00098593          	mv	a1,s3
    c970:	cf9ff0ef          	jal	ra,c668 <pbuf_init_alloced_pbuf>
}
    c974:	00040513          	mv	a0,s0
    c978:	01c12083          	lw	ra,28(sp)
    c97c:	01812403          	lw	s0,24(sp)
    c980:	01412483          	lw	s1,20(sp)
    c984:	01012903          	lw	s2,16(sp)
    c988:	00c12983          	lw	s3,12(sp)
    c98c:	02010113          	addi	sp,sp,32
    c990:	00008067          	ret
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
    c994:	0001e537          	lui	a0,0x1e
    c998:	9dc50513          	addi	a0,a0,-1572 # 1d9dc <altcp_tcp_functions+0x2a4>
    c99c:	d21ff0ef          	jal	ra,c6bc <bsp_printf>
    c9a0:	fadff06f          	j	c94c <pbuf_alloc_reference+0x34>

0000c9a4 <pbuf_alloced_custom>:
{
    c9a4:	ff010113          	addi	sp,sp,-16
    c9a8:	00112623          	sw	ra,12(sp)
    c9ac:	00812423          	sw	s0,8(sp)
    c9b0:	00070813          	mv	a6,a4
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
    c9b4:	01051513          	slli	a0,a0,0x10
    c9b8:	01055513          	srli	a0,a0,0x10
    c9bc:	00350513          	addi	a0,a0,3
    c9c0:	ffc57513          	andi	a0,a0,-4
    c9c4:	00a58733          	add	a4,a1,a0
    c9c8:	04e7e263          	bltu	a5,a4,ca0c <pbuf_alloced_custom+0x68>
    c9cc:	00068893          	mv	a7,a3
  if (payload_mem != NULL) {
    c9d0:	00080463          	beqz	a6,c9d8 <pbuf_alloced_custom+0x34>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
    c9d4:	00a80833          	add	a6,a6,a0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
    c9d8:	00088413          	mv	s0,a7
    c9dc:	00200793          	li	a5,2
    c9e0:	00060713          	mv	a4,a2
    c9e4:	00058693          	mv	a3,a1
    c9e8:	00058613          	mv	a2,a1
    c9ec:	00080593          	mv	a1,a6
    c9f0:	00088513          	mv	a0,a7
    c9f4:	c75ff0ef          	jal	ra,c668 <pbuf_init_alloced_pbuf>
}
    c9f8:	00040513          	mv	a0,s0
    c9fc:	00c12083          	lw	ra,12(sp)
    ca00:	00812403          	lw	s0,8(sp)
    ca04:	01010113          	addi	sp,sp,16
    ca08:	00008067          	ret
    return NULL;
    ca0c:	00000413          	li	s0,0
    ca10:	fe9ff06f          	j	c9f8 <pbuf_alloced_custom+0x54>

0000ca14 <pbuf_add_header>:
{
    ca14:	ff010113          	addi	sp,sp,-16
    ca18:	00112623          	sw	ra,12(sp)
  return pbuf_add_header_impl(p, header_size_increment, 0);
    ca1c:	00000613          	li	a2,0
    ca20:	dd5ff0ef          	jal	ra,c7f4 <pbuf_add_header_impl>
}
    ca24:	00c12083          	lw	ra,12(sp)
    ca28:	01010113          	addi	sp,sp,16
    ca2c:	00008067          	ret

0000ca30 <pbuf_add_header_force>:
{
    ca30:	ff010113          	addi	sp,sp,-16
    ca34:	00112623          	sw	ra,12(sp)
  return pbuf_add_header_impl(p, header_size_increment, 1);
    ca38:	00100613          	li	a2,1
    ca3c:	db9ff0ef          	jal	ra,c7f4 <pbuf_add_header_impl>
}
    ca40:	00c12083          	lw	ra,12(sp)
    ca44:	01010113          	addi	sp,sp,16
    ca48:	00008067          	ret

0000ca4c <pbuf_remove_header>:
{
    ca4c:	ff010113          	addi	sp,sp,-16
    ca50:	00112623          	sw	ra,12(sp)
    ca54:	00812423          	sw	s0,8(sp)
    ca58:	00912223          	sw	s1,4(sp)
    ca5c:	00050413          	mv	s0,a0
    ca60:	00058493          	mv	s1,a1
  LWIP_ASSERT("p != NULL", p != NULL);
    ca64:	04050663          	beqz	a0,cab0 <pbuf_remove_header+0x64>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
    ca68:	04040c63          	beqz	s0,cac0 <pbuf_remove_header+0x74>
    ca6c:	000107b7          	lui	a5,0x10
    ca70:	04f4fc63          	bgeu	s1,a5,cac8 <pbuf_remove_header+0x7c>
  if (header_size_decrement == 0) {
    ca74:	06048663          	beqz	s1,cae0 <pbuf_remove_header+0x94>
  increment_magnitude = (u16_t)header_size_decrement;
    ca78:	01049713          	slli	a4,s1,0x10
    ca7c:	01075713          	srli	a4,a4,0x10
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
    ca80:	00a45783          	lhu	a5,10(s0)
    ca84:	06e7e263          	bltu	a5,a4,cae8 <pbuf_remove_header+0x9c>
  payload = p->payload;
    ca88:	00442683          	lw	a3,4(s0)
  p->payload = (u8_t *)p->payload + header_size_decrement;
    ca8c:	009684b3          	add	s1,a3,s1
    ca90:	00942223          	sw	s1,4(s0)
  p->len = (u16_t)(p->len - increment_magnitude);
    ca94:	40e787b3          	sub	a5,a5,a4
    ca98:	00f41523          	sh	a5,10(s0)
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
    ca9c:	00845783          	lhu	a5,8(s0)
    caa0:	40e78733          	sub	a4,a5,a4
    caa4:	00e41423          	sh	a4,8(s0)
  return 0;
    caa8:	00000513          	li	a0,0
    caac:	0200006f          	j	cacc <pbuf_remove_header+0x80>
  LWIP_ASSERT("p != NULL", p != NULL);
    cab0:	0001d537          	lui	a0,0x1d
    cab4:	f0850513          	addi	a0,a0,-248 # 1cf08 <lwiperf_txbuf_const+0x728>
    cab8:	c05ff0ef          	jal	ra,c6bc <bsp_printf>
    cabc:	fadff06f          	j	ca68 <pbuf_remove_header+0x1c>
    return 1;
    cac0:	00100513          	li	a0,1
    cac4:	0080006f          	j	cacc <pbuf_remove_header+0x80>
    cac8:	00100513          	li	a0,1
}
    cacc:	00c12083          	lw	ra,12(sp)
    cad0:	00812403          	lw	s0,8(sp)
    cad4:	00412483          	lw	s1,4(sp)
    cad8:	01010113          	addi	sp,sp,16
    cadc:	00008067          	ret
    return 0;
    cae0:	00000513          	li	a0,0
    cae4:	fe9ff06f          	j	cacc <pbuf_remove_header+0x80>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
    cae8:	00100513          	li	a0,1
    caec:	fe1ff06f          	j	cacc <pbuf_remove_header+0x80>

0000caf0 <pbuf_header_impl>:
{
    caf0:	ff010113          	addi	sp,sp,-16
    caf4:	00112623          	sw	ra,12(sp)
  if (header_size_increment < 0) {
    caf8:	0005ca63          	bltz	a1,cb0c <pbuf_header_impl+0x1c>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
    cafc:	cf9ff0ef          	jal	ra,c7f4 <pbuf_add_header_impl>
}
    cb00:	00c12083          	lw	ra,12(sp)
    cb04:	01010113          	addi	sp,sp,16
    cb08:	00008067          	ret
    return pbuf_remove_header(p, (size_t) - header_size_increment);
    cb0c:	40b005b3          	neg	a1,a1
    cb10:	f3dff0ef          	jal	ra,ca4c <pbuf_remove_header>
    cb14:	fedff06f          	j	cb00 <pbuf_header_impl+0x10>

0000cb18 <pbuf_header>:
{
    cb18:	ff010113          	addi	sp,sp,-16
    cb1c:	00112623          	sw	ra,12(sp)
  return pbuf_header_impl(p, header_size_increment, 0);
    cb20:	00000613          	li	a2,0
    cb24:	fcdff0ef          	jal	ra,caf0 <pbuf_header_impl>
}
    cb28:	00c12083          	lw	ra,12(sp)
    cb2c:	01010113          	addi	sp,sp,16
    cb30:	00008067          	ret

0000cb34 <pbuf_header_force>:
{
    cb34:	ff010113          	addi	sp,sp,-16
    cb38:	00112623          	sw	ra,12(sp)
  return pbuf_header_impl(p, header_size_increment, 1);
    cb3c:	00100613          	li	a2,1
    cb40:	fb1ff0ef          	jal	ra,caf0 <pbuf_header_impl>
}
    cb44:	00c12083          	lw	ra,12(sp)
    cb48:	01010113          	addi	sp,sp,16
    cb4c:	00008067          	ret

0000cb50 <pbuf_free>:
{
    cb50:	ff010113          	addi	sp,sp,-16
    cb54:	00112623          	sw	ra,12(sp)
    cb58:	00812423          	sw	s0,8(sp)
    cb5c:	00912223          	sw	s1,4(sp)
    cb60:	01212023          	sw	s2,0(sp)
  if (p == NULL) {
    cb64:	00050863          	beqz	a0,cb74 <pbuf_free+0x24>
    cb68:	00050413          	mv	s0,a0
  count = 0;
    cb6c:	00000493          	li	s1,0
    cb70:	0580006f          	j	cbc8 <pbuf_free+0x78>
    LWIP_ASSERT("p != NULL", p != NULL);
    cb74:	0001d537          	lui	a0,0x1d
    cb78:	f0850513          	addi	a0,a0,-248 # 1cf08 <lwiperf_txbuf_const+0x728>
    cb7c:	b41ff0ef          	jal	ra,c6bc <bsp_printf>
    return 0;
    cb80:	00000493          	li	s1,0
}
    cb84:	00048513          	mv	a0,s1
    cb88:	00c12083          	lw	ra,12(sp)
    cb8c:	00812403          	lw	s0,8(sp)
    cb90:	00412483          	lw	s1,4(sp)
    cb94:	00012903          	lw	s2,0(sp)
    cb98:	01010113          	addi	sp,sp,16
    cb9c:	00008067          	ret
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    cba0:	0001e537          	lui	a0,0x1e
    cba4:	9f050513          	addi	a0,a0,-1552 # 1d9f0 <altcp_tcp_functions+0x2b8>
    cba8:	b15ff0ef          	jal	ra,c6bc <bsp_printf>
    cbac:	0280006f          	j	cbd4 <pbuf_free+0x84>
        pc->custom_free_function(p);
    cbb0:	01042783          	lw	a5,16(s0)
    cbb4:	00040513          	mv	a0,s0
    cbb8:	000780e7          	jalr	a5 # 10000 <tcp_input+0x184>
      count++;
    cbbc:	00148493          	addi	s1,s1,1
    cbc0:	0ff4f493          	andi	s1,s1,255
      p = q;
    cbc4:	00090413          	mv	s0,s2
  while (p != NULL) {
    cbc8:	fa040ee3          	beqz	s0,cb84 <pbuf_free+0x34>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    cbcc:	00e44783          	lbu	a5,14(s0)
    cbd0:	fc0788e3          	beqz	a5,cba0 <pbuf_free+0x50>
    ref = --(p->ref);
    cbd4:	00e44783          	lbu	a5,14(s0)
    cbd8:	fff78793          	addi	a5,a5,-1
    cbdc:	0ff7f793          	andi	a5,a5,255
    cbe0:	00f40723          	sb	a5,14(s0)
    if (ref == 0) {
    cbe4:	fa0790e3          	bnez	a5,cb84 <pbuf_free+0x34>
      q = p->next;
    cbe8:	00042903          	lw	s2,0(s0)
      alloc_src = pbuf_get_allocsrc(p);
    cbec:	00c44783          	lbu	a5,12(s0)
    cbf0:	00f7f793          	andi	a5,a5,15
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
    cbf4:	00d44703          	lbu	a4,13(s0)
    cbf8:	00277713          	andi	a4,a4,2
    cbfc:	00070e63          	beqz	a4,cc18 <pbuf_free+0xc8>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
    cc00:	01042783          	lw	a5,16(s0)
    cc04:	fa0796e3          	bnez	a5,cbb0 <pbuf_free+0x60>
    cc08:	0001e537          	lui	a0,0x1e
    cc0c:	a0850513          	addi	a0,a0,-1528 # 1da08 <altcp_tcp_functions+0x2d0>
    cc10:	aadff0ef          	jal	ra,c6bc <bsp_printf>
    cc14:	f9dff06f          	j	cbb0 <pbuf_free+0x60>
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
    cc18:	00200713          	li	a4,2
    cc1c:	00e78e63          	beq	a5,a4,cc38 <pbuf_free+0xe8>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
    cc20:	00100713          	li	a4,1
    cc24:	02e78263          	beq	a5,a4,cc48 <pbuf_free+0xf8>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
    cc28:	02079863          	bnez	a5,cc58 <pbuf_free+0x108>
          mem_free(p);
    cc2c:	00040513          	mv	a0,s0
    cc30:	77c080ef          	jal	ra,153ac <mem_free>
    cc34:	f89ff06f          	j	cbbc <pbuf_free+0x6c>
          memp_free(MEMP_PBUF_POOL, p);
    cc38:	00040593          	mv	a1,s0
    cc3c:	00b00513          	li	a0,11
    cc40:	09d070ef          	jal	ra,144dc <memp_free>
    cc44:	f79ff06f          	j	cbbc <pbuf_free+0x6c>
          memp_free(MEMP_PBUF, p);
    cc48:	00040593          	mv	a1,s0
    cc4c:	00a00513          	li	a0,10
    cc50:	08d070ef          	jal	ra,144dc <memp_free>
    cc54:	f69ff06f          	j	cbbc <pbuf_free+0x6c>
          LWIP_ASSERT("invalid pbuf type", 0);
    cc58:	0001e537          	lui	a0,0x1e
    cc5c:	a2c50513          	addi	a0,a0,-1492 # 1da2c <altcp_tcp_functions+0x2f4>
    cc60:	a5dff0ef          	jal	ra,c6bc <bsp_printf>
    cc64:	f59ff06f          	j	cbbc <pbuf_free+0x6c>

0000cc68 <pbuf_alloc>:
{
    cc68:	fd010113          	addi	sp,sp,-48
    cc6c:	02112623          	sw	ra,44(sp)
    cc70:	02812423          	sw	s0,40(sp)
    cc74:	02912223          	sw	s1,36(sp)
    cc78:	03212023          	sw	s2,32(sp)
    cc7c:	01312e23          	sw	s3,28(sp)
    cc80:	01412c23          	sw	s4,24(sp)
    cc84:	01512a23          	sw	s5,20(sp)
    cc88:	01612823          	sw	s6,16(sp)
    cc8c:	01712623          	sw	s7,12(sp)
    cc90:	00058913          	mv	s2,a1
    cc94:	00060a13          	mv	s4,a2
  switch (type) {
    cc98:	04100793          	li	a5,65
    cc9c:	0cf60c63          	beq	a2,a5,cd74 <pbuf_alloc+0x10c>
    cca0:	00050493          	mv	s1,a0
    cca4:	01051413          	slli	s0,a0,0x10
    cca8:	01045413          	srli	s0,s0,0x10
    ccac:	0ac7f663          	bgeu	a5,a2,cd58 <pbuf_alloc+0xf0>
    ccb0:	18200793          	li	a5,386
    ccb4:	10f60263          	beq	a2,a5,cdb8 <pbuf_alloc+0x150>
    ccb8:	28000793          	li	a5,640
    ccbc:	0af61263          	bne	a2,a5,cd60 <pbuf_alloc+0xf8>
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
    ccc0:	00340413          	addi	s0,s0,3
    ccc4:	01041413          	slli	s0,s0,0x10
    ccc8:	01045413          	srli	s0,s0,0x10
    cccc:	ffc47413          	andi	s0,s0,-4
    ccd0:	00358713          	addi	a4,a1,3
    ccd4:	01071793          	slli	a5,a4,0x10
    ccd8:	0107d793          	srli	a5,a5,0x10
    ccdc:	ffc7f793          	andi	a5,a5,-4
    cce0:	00878433          	add	s0,a5,s0
    cce4:	01041413          	slli	s0,s0,0x10
    cce8:	01045413          	srli	s0,s0,0x10
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
    ccec:	01040513          	addi	a0,s0,16
    ccf0:	01051513          	slli	a0,a0,0x10
    ccf4:	01055513          	srli	a0,a0,0x10
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
    ccf8:	ffc77713          	andi	a4,a4,-4
    ccfc:	1ae46c63          	bltu	s0,a4,ceb4 <pbuf_alloc+0x24c>
    cd00:	1ae56e63          	bltu	a0,a4,cebc <pbuf_alloc+0x254>
      p = (struct pbuf *)mem_malloc(alloc_len);
    cd04:	271080ef          	jal	ra,15774 <mem_malloc>
    cd08:	00050a93          	mv	s5,a0
      if (p == NULL) {
    cd0c:	06050e63          	beqz	a0,cd88 <pbuf_alloc+0x120>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
    cd10:	01049593          	slli	a1,s1,0x10
    cd14:	0105d593          	srli	a1,a1,0x10
    cd18:	01058593          	addi	a1,a1,16
    cd1c:	00b505b3          	add	a1,a0,a1
    cd20:	00358593          	addi	a1,a1,3
    cd24:	00000793          	li	a5,0
    cd28:	000a0713          	mv	a4,s4
    cd2c:	00090693          	mv	a3,s2
    cd30:	00090613          	mv	a2,s2
    cd34:	ffc5f593          	andi	a1,a1,-4
    cd38:	931ff0ef          	jal	ra,c668 <pbuf_init_alloced_pbuf>
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
    cd3c:	004aa783          	lw	a5,4(s5)
    cd40:	0037f793          	andi	a5,a5,3
    cd44:	04078263          	beqz	a5,cd88 <pbuf_alloc+0x120>
    cd48:	0001e537          	lui	a0,0x1e
    cd4c:	aa450513          	addi	a0,a0,-1372 # 1daa4 <altcp_tcp_functions+0x36c>
    cd50:	96dff0ef          	jal	ra,c6bc <bsp_printf>
    cd54:	0340006f          	j	cd88 <pbuf_alloc+0x120>
  switch (type) {
    cd58:	00100793          	li	a5,1
    cd5c:	00f60c63          	beq	a2,a5,cd74 <pbuf_alloc+0x10c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    cd60:	0001e537          	lui	a0,0x1e
    cd64:	ad050513          	addi	a0,a0,-1328 # 1dad0 <altcp_tcp_functions+0x398>
    cd68:	955ff0ef          	jal	ra,c6bc <bsp_printf>
      return NULL;
    cd6c:	00000a93          	li	s5,0
    cd70:	0180006f          	j	cd88 <pbuf_alloc+0x120>
      p = pbuf_alloc_reference(NULL, length, type);
    cd74:	000a0613          	mv	a2,s4
    cd78:	00090593          	mv	a1,s2
    cd7c:	00000513          	li	a0,0
    cd80:	b99ff0ef          	jal	ra,c918 <pbuf_alloc_reference>
    cd84:	00050a93          	mv	s5,a0
}
    cd88:	000a8513          	mv	a0,s5
    cd8c:	02c12083          	lw	ra,44(sp)
    cd90:	02812403          	lw	s0,40(sp)
    cd94:	02412483          	lw	s1,36(sp)
    cd98:	02012903          	lw	s2,32(sp)
    cd9c:	01c12983          	lw	s3,28(sp)
    cda0:	01812a03          	lw	s4,24(sp)
    cda4:	01412a83          	lw	s5,20(sp)
    cda8:	01012b03          	lw	s6,16(sp)
    cdac:	00c12b83          	lw	s7,12(sp)
    cdb0:	03010113          	addi	sp,sp,48
    cdb4:	00008067          	ret
      last = NULL;
    cdb8:	00000b13          	li	s6,0
      p = NULL;
    cdbc:	00000a93          	li	s5,0
    cdc0:	08c0006f          	j	ce4c <pbuf_alloc+0x1e4>
          PBUF_POOL_IS_EMPTY();
    cdc4:	895ff0ef          	jal	ra,c658 <pbuf_pool_is_empty>
          if (p) {
    cdc8:	000a8663          	beqz	s5,cdd4 <pbuf_alloc+0x16c>
            pbuf_free(p);
    cdcc:	000a8513          	mv	a0,s5
    cdd0:	d81ff0ef          	jal	ra,cb50 <pbuf_free>
          return NULL;
    cdd4:	00048a93          	mv	s5,s1
    cdd8:	fb1ff06f          	j	cd88 <pbuf_alloc+0x120>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
    cddc:	010b9b93          	slli	s7,s7,0x10
    cde0:	010bdb93          	srli	s7,s7,0x10
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
    cde4:	00040993          	mv	s3,s0
    cde8:	01040593          	addi	a1,s0,16
    cdec:	00b485b3          	add	a1,s1,a1
    cdf0:	00358593          	addi	a1,a1,3
    cdf4:	00000793          	li	a5,0
    cdf8:	000a0713          	mv	a4,s4
    cdfc:	000b8693          	mv	a3,s7
    ce00:	00090613          	mv	a2,s2
    ce04:	ffc5f593          	andi	a1,a1,-4
    ce08:	00048513          	mv	a0,s1
    ce0c:	85dff0ef          	jal	ra,c668 <pbuf_init_alloced_pbuf>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
    ce10:	0044a783          	lw	a5,4(s1)
    ce14:	0037f793          	andi	a5,a5,3
    ce18:	06079a63          	bnez	a5,ce8c <pbuf_alloc+0x224>
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
    ce1c:	00398993          	addi	s3,s3,3
    ce20:	ffc9f993          	andi	s3,s3,-4
    ce24:	5ec00793          	li	a5,1516
    ce28:	06f98a63          	beq	s3,a5,ce9c <pbuf_alloc+0x234>
        if (p == NULL) {
    ce2c:	080a8063          	beqz	s5,ceac <pbuf_alloc+0x244>
          last->next = q;
    ce30:	009b2023          	sw	s1,0(s6)
        rem_len = (u16_t)(rem_len - qlen);
    ce34:	41790933          	sub	s2,s2,s7
    ce38:	01091913          	slli	s2,s2,0x10
    ce3c:	01095913          	srli	s2,s2,0x10
        offset = 0;
    ce40:	00000413          	li	s0,0
        last = q;
    ce44:	00048b13          	mv	s6,s1
      } while (rem_len > 0);
    ce48:	f40900e3          	beqz	s2,cd88 <pbuf_alloc+0x120>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
    ce4c:	00b00513          	li	a0,11
    ce50:	5fc070ef          	jal	ra,1444c <memp_malloc>
    ce54:	00050493          	mv	s1,a0
        if (q == NULL) {
    ce58:	f60506e3          	beqz	a0,cdc4 <pbuf_alloc+0x15c>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
    ce5c:	00340793          	addi	a5,s0,3
    ce60:	01079793          	slli	a5,a5,0x10
    ce64:	0107d793          	srli	a5,a5,0x10
    ce68:	ffc7f713          	andi	a4,a5,-4
    ce6c:	5ec00793          	li	a5,1516
    ce70:	40e787b3          	sub	a5,a5,a4
    ce74:	01079793          	slli	a5,a5,0x10
    ce78:	0107d793          	srli	a5,a5,0x10
    ce7c:	00078b93          	mv	s7,a5
    ce80:	f4f97ee3          	bgeu	s2,a5,cddc <pbuf_alloc+0x174>
    ce84:	00090b93          	mv	s7,s2
    ce88:	f55ff06f          	j	cddc <pbuf_alloc+0x174>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
    ce8c:	0001e537          	lui	a0,0x1e
    ce90:	a4050513          	addi	a0,a0,-1472 # 1da40 <altcp_tcp_functions+0x308>
    ce94:	829ff0ef          	jal	ra,c6bc <bsp_printf>
    ce98:	f85ff06f          	j	ce1c <pbuf_alloc+0x1b4>
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
    ce9c:	0001e537          	lui	a0,0x1e
    cea0:	a7050513          	addi	a0,a0,-1424 # 1da70 <altcp_tcp_functions+0x338>
    cea4:	819ff0ef          	jal	ra,c6bc <bsp_printf>
    cea8:	f85ff06f          	j	ce2c <pbuf_alloc+0x1c4>
          p = q;
    ceac:	00048a93          	mv	s5,s1
    ceb0:	f85ff06f          	j	ce34 <pbuf_alloc+0x1cc>
        return NULL;
    ceb4:	00000a93          	li	s5,0
    ceb8:	ed1ff06f          	j	cd88 <pbuf_alloc+0x120>
    cebc:	00000a93          	li	s5,0
    cec0:	ec9ff06f          	j	cd88 <pbuf_alloc+0x120>

0000cec4 <pbuf_realloc>:
{
    cec4:	fe010113          	addi	sp,sp,-32
    cec8:	00112e23          	sw	ra,28(sp)
    cecc:	00812c23          	sw	s0,24(sp)
    ced0:	00912a23          	sw	s1,20(sp)
    ced4:	01212823          	sw	s2,16(sp)
    ced8:	01312623          	sw	s3,12(sp)
    cedc:	00050413          	mv	s0,a0
    cee0:	00058913          	mv	s2,a1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
    cee4:	04050663          	beqz	a0,cf30 <pbuf_realloc+0x6c>
  if (new_len >= p->tot_len) {
    cee8:	00845983          	lhu	s3,8(s0)
    ceec:	09397463          	bgeu	s2,s3,cf74 <pbuf_realloc+0xb0>
  rem_len = new_len;
    cef0:	00090493          	mv	s1,s2
  while (rem_len > q->len) {
    cef4:	00a45783          	lhu	a5,10(s0)
    cef8:	0497f463          	bgeu	a5,s1,cf40 <pbuf_realloc+0x7c>
    rem_len = (u16_t)(rem_len - q->len);
    cefc:	40f487b3          	sub	a5,s1,a5
    cf00:	01079493          	slli	s1,a5,0x10
    cf04:	0104d493          	srli	s1,s1,0x10
    q->tot_len = (u16_t)(q->tot_len - shrink);
    cf08:	00845783          	lhu	a5,8(s0)
    cf0c:	41390733          	sub	a4,s2,s3
    cf10:	00e787b3          	add	a5,a5,a4
    cf14:	00f41423          	sh	a5,8(s0)
    q = q->next;
    cf18:	00042403          	lw	s0,0(s0)
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
    cf1c:	fc041ce3          	bnez	s0,cef4 <pbuf_realloc+0x30>
    cf20:	0001e537          	lui	a0,0x1e
    cf24:	b0450513          	addi	a0,a0,-1276 # 1db04 <altcp_tcp_functions+0x3cc>
    cf28:	f94ff0ef          	jal	ra,c6bc <bsp_printf>
    cf2c:	fc9ff06f          	j	cef4 <pbuf_realloc+0x30>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
    cf30:	0001e537          	lui	a0,0x1e
    cf34:	aec50513          	addi	a0,a0,-1300 # 1daec <altcp_tcp_functions+0x3b4>
    cf38:	f84ff0ef          	jal	ra,c6bc <bsp_printf>
    cf3c:	fadff06f          	j	cee8 <pbuf_realloc+0x24>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
    cf40:	00c44703          	lbu	a4,12(s0)
    cf44:	00f77713          	andi	a4,a4,15
    cf48:	00071a63          	bnez	a4,cf5c <pbuf_realloc+0x98>
    cf4c:	00978863          	beq	a5,s1,cf5c <pbuf_realloc+0x98>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
    cf50:	00d44783          	lbu	a5,13(s0)
    cf54:	0027f793          	andi	a5,a5,2
    cf58:	02078c63          	beqz	a5,cf90 <pbuf_realloc+0xcc>
  q->len = rem_len;
    cf5c:	00941523          	sh	s1,10(s0)
  q->tot_len = q->len;
    cf60:	00941423          	sh	s1,8(s0)
  if (q->next != NULL) {
    cf64:	00042503          	lw	a0,0(s0)
    cf68:	00050463          	beqz	a0,cf70 <pbuf_realloc+0xac>
    pbuf_free(q->next);
    cf6c:	be5ff0ef          	jal	ra,cb50 <pbuf_free>
  q->next = NULL;
    cf70:	00042023          	sw	zero,0(s0)
}
    cf74:	01c12083          	lw	ra,28(sp)
    cf78:	01812403          	lw	s0,24(sp)
    cf7c:	01412483          	lw	s1,20(sp)
    cf80:	01012903          	lw	s2,16(sp)
    cf84:	00c12983          	lw	s3,12(sp)
    cf88:	02010113          	addi	sp,sp,32
    cf8c:	00008067          	ret
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
    cf90:	00442583          	lw	a1,4(s0)
    cf94:	408585b3          	sub	a1,a1,s0
    cf98:	00b485b3          	add	a1,s1,a1
    cf9c:	01059593          	slli	a1,a1,0x10
    cfa0:	0105d593          	srli	a1,a1,0x10
    cfa4:	00040513          	mv	a0,s0
    cfa8:	548080ef          	jal	ra,154f0 <mem_trim>
    cfac:	00050413          	mv	s0,a0
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
    cfb0:	fa0516e3          	bnez	a0,cf5c <pbuf_realloc+0x98>
    cfb4:	0001e537          	lui	a0,0x1e
    cfb8:	b1c50513          	addi	a0,a0,-1252 # 1db1c <altcp_tcp_functions+0x3e4>
    cfbc:	f00ff0ef          	jal	ra,c6bc <bsp_printf>
    cfc0:	f9dff06f          	j	cf5c <pbuf_realloc+0x98>

0000cfc4 <pbuf_free_header>:
{
    cfc4:	ff010113          	addi	sp,sp,-16
    cfc8:	00112623          	sw	ra,12(sp)
    cfcc:	00812423          	sw	s0,8(sp)
    cfd0:	00912223          	sw	s1,4(sp)
    cfd4:	01212023          	sw	s2,0(sp)
    cfd8:	00050413          	mv	s0,a0
    cfdc:	00058493          	mv	s1,a1
  while (free_left && p) {
    cfe0:	04048063          	beqz	s1,d020 <pbuf_free_header+0x5c>
    cfe4:	02040e63          	beqz	s0,d020 <pbuf_free_header+0x5c>
    if (free_left >= p->len) {
    cfe8:	00a45783          	lhu	a5,10(s0)
    cfec:	02f4e463          	bltu	s1,a5,d014 <pbuf_free_header+0x50>
      free_left = (u16_t)(free_left - p->len);
    cff0:	40f484b3          	sub	s1,s1,a5
    cff4:	01049493          	slli	s1,s1,0x10
    cff8:	0104d493          	srli	s1,s1,0x10
      p = p->next;
    cffc:	00042903          	lw	s2,0(s0)
      f->next = 0;
    d000:	00042023          	sw	zero,0(s0)
      pbuf_free(f);
    d004:	00040513          	mv	a0,s0
    d008:	b49ff0ef          	jal	ra,cb50 <pbuf_free>
      p = p->next;
    d00c:	00090413          	mv	s0,s2
    d010:	fd1ff06f          	j	cfe0 <pbuf_free_header+0x1c>
      pbuf_remove_header(p, free_left);
    d014:	00048593          	mv	a1,s1
    d018:	00040513          	mv	a0,s0
    d01c:	a31ff0ef          	jal	ra,ca4c <pbuf_remove_header>
}
    d020:	00040513          	mv	a0,s0
    d024:	00c12083          	lw	ra,12(sp)
    d028:	00812403          	lw	s0,8(sp)
    d02c:	00412483          	lw	s1,4(sp)
    d030:	00012903          	lw	s2,0(sp)
    d034:	01010113          	addi	sp,sp,16
    d038:	00008067          	ret

0000d03c <pbuf_clen>:
  len = 0;
    d03c:	00000793          	li	a5,0
  while (p != NULL) {
    d040:	00050c63          	beqz	a0,d058 <pbuf_clen+0x1c>
    ++len;
    d044:	00178793          	addi	a5,a5,1
    d048:	01079793          	slli	a5,a5,0x10
    d04c:	0107d793          	srli	a5,a5,0x10
    p = p->next;
    d050:	00052503          	lw	a0,0(a0)
    d054:	fedff06f          	j	d040 <pbuf_clen+0x4>
}
    d058:	00078513          	mv	a0,a5
    d05c:	00008067          	ret

0000d060 <pbuf_ref>:
  if (p != NULL) {
    d060:	00050c63          	beqz	a0,d078 <pbuf_ref+0x18>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
    d064:	00e54783          	lbu	a5,14(a0)
    d068:	00178793          	addi	a5,a5,1
    d06c:	0ff7f793          	andi	a5,a5,255
    d070:	00f50723          	sb	a5,14(a0)
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
    d074:	00078463          	beqz	a5,d07c <pbuf_ref+0x1c>
    d078:	00008067          	ret
{
    d07c:	ff010113          	addi	sp,sp,-16
    d080:	00112623          	sw	ra,12(sp)
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
    d084:	0001e537          	lui	a0,0x1e
    d088:	b3850513          	addi	a0,a0,-1224 # 1db38 <altcp_tcp_functions+0x400>
    d08c:	e30ff0ef          	jal	ra,c6bc <bsp_printf>
}
    d090:	00c12083          	lw	ra,12(sp)
    d094:	01010113          	addi	sp,sp,16
    d098:	00008067          	ret

0000d09c <pbuf_cat>:
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
    d09c:	08050c63          	beqz	a0,d134 <pbuf_cat+0x98>
{
    d0a0:	ff010113          	addi	sp,sp,-16
    d0a4:	00112623          	sw	ra,12(sp)
    d0a8:	00812423          	sw	s0,8(sp)
    d0ac:	00912223          	sw	s1,4(sp)
    d0b0:	00050413          	mv	s0,a0
    d0b4:	00058493          	mv	s1,a1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
    d0b8:	04058c63          	beqz	a1,d110 <pbuf_cat+0x74>
  for (p = h; p->next != NULL; p = p->next) {
    d0bc:	00042703          	lw	a4,0(s0)
    d0c0:	00070e63          	beqz	a4,d0dc <pbuf_cat+0x40>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
    d0c4:	00845783          	lhu	a5,8(s0)
    d0c8:	0084d683          	lhu	a3,8(s1)
    d0cc:	00d787b3          	add	a5,a5,a3
    d0d0:	00f41423          	sh	a5,8(s0)
  for (p = h; p->next != NULL; p = p->next) {
    d0d4:	00070413          	mv	s0,a4
    d0d8:	fe5ff06f          	j	d0bc <pbuf_cat+0x20>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
    d0dc:	00845703          	lhu	a4,8(s0)
    d0e0:	00a45783          	lhu	a5,10(s0)
    d0e4:	04f71063          	bne	a4,a5,d124 <pbuf_cat+0x88>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
    d0e8:	00042783          	lw	a5,0(s0)
    d0ec:	00078863          	beqz	a5,d0fc <pbuf_cat+0x60>
    d0f0:	0001e537          	lui	a0,0x1e
    d0f4:	b7c50513          	addi	a0,a0,-1156 # 1db7c <altcp_tcp_functions+0x444>
    d0f8:	dc4ff0ef          	jal	ra,c6bc <bsp_printf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
    d0fc:	00845783          	lhu	a5,8(s0)
    d100:	0084d703          	lhu	a4,8(s1)
    d104:	00e787b3          	add	a5,a5,a4
    d108:	00f41423          	sh	a5,8(s0)
  p->next = t;
    d10c:	00942023          	sw	s1,0(s0)
}
    d110:	00c12083          	lw	ra,12(sp)
    d114:	00812403          	lw	s0,8(sp)
    d118:	00412483          	lw	s1,4(sp)
    d11c:	01010113          	addi	sp,sp,16
    d120:	00008067          	ret
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
    d124:	0001e537          	lui	a0,0x1e
    d128:	b4c50513          	addi	a0,a0,-1204 # 1db4c <altcp_tcp_functions+0x414>
    d12c:	d90ff0ef          	jal	ra,c6bc <bsp_printf>
    d130:	fb9ff06f          	j	d0e8 <pbuf_cat+0x4c>
    d134:	00008067          	ret

0000d138 <pbuf_chain>:
{
    d138:	ff010113          	addi	sp,sp,-16
    d13c:	00112623          	sw	ra,12(sp)
    d140:	00812423          	sw	s0,8(sp)
    d144:	00058413          	mv	s0,a1
  pbuf_cat(h, t);
    d148:	f55ff0ef          	jal	ra,d09c <pbuf_cat>
  pbuf_ref(t);
    d14c:	00040513          	mv	a0,s0
    d150:	f11ff0ef          	jal	ra,d060 <pbuf_ref>
}
    d154:	00c12083          	lw	ra,12(sp)
    d158:	00812403          	lw	s0,8(sp)
    d15c:	01010113          	addi	sp,sp,16
    d160:	00008067          	ret

0000d164 <pbuf_dechain>:
{
    d164:	ff010113          	addi	sp,sp,-16
    d168:	00112623          	sw	ra,12(sp)
    d16c:	00812423          	sw	s0,8(sp)
    d170:	00912223          	sw	s1,4(sp)
    d174:	01212023          	sw	s2,0(sp)
    d178:	00050413          	mv	s0,a0
  q = p->next;
    d17c:	00052483          	lw	s1,0(a0)
  if (q != NULL) {
    d180:	06048e63          	beqz	s1,d1fc <pbuf_dechain+0x98>
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
    d184:	0084d703          	lhu	a4,8(s1)
    d188:	00855783          	lhu	a5,8(a0)
    d18c:	00a55683          	lhu	a3,10(a0)
    d190:	40d787b3          	sub	a5,a5,a3
    d194:	04f71c63          	bne	a4,a5,d1ec <pbuf_dechain+0x88>
    q->tot_len = (u16_t)(p->tot_len - p->len);
    d198:	00845783          	lhu	a5,8(s0)
    d19c:	00a45703          	lhu	a4,10(s0)
    d1a0:	40e787b3          	sub	a5,a5,a4
    d1a4:	00f49423          	sh	a5,8(s1)
    p->next = NULL;
    d1a8:	00042023          	sw	zero,0(s0)
    p->tot_len = p->len;
    d1ac:	00a45783          	lhu	a5,10(s0)
    d1b0:	00f41423          	sh	a5,8(s0)
    tail_gone = pbuf_free(q);
    d1b4:	00048513          	mv	a0,s1
    d1b8:	999ff0ef          	jal	ra,cb50 <pbuf_free>
    d1bc:	00050913          	mv	s2,a0
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
    d1c0:	00845703          	lhu	a4,8(s0)
    d1c4:	00a45783          	lhu	a5,10(s0)
    d1c8:	02f71e63          	bne	a4,a5,d204 <pbuf_dechain+0xa0>
  return ((tail_gone > 0) ? NULL : q);
    d1cc:	04091463          	bnez	s2,d214 <pbuf_dechain+0xb0>
}
    d1d0:	00048513          	mv	a0,s1
    d1d4:	00c12083          	lw	ra,12(sp)
    d1d8:	00812403          	lw	s0,8(sp)
    d1dc:	00412483          	lw	s1,4(sp)
    d1e0:	00012903          	lw	s2,0(sp)
    d1e4:	01010113          	addi	sp,sp,16
    d1e8:	00008067          	ret
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
    d1ec:	0001e537          	lui	a0,0x1e
    d1f0:	b8c50513          	addi	a0,a0,-1140 # 1db8c <altcp_tcp_functions+0x454>
    d1f4:	cc8ff0ef          	jal	ra,c6bc <bsp_printf>
    d1f8:	fa1ff06f          	j	d198 <pbuf_dechain+0x34>
  u8_t tail_gone = 1;
    d1fc:	00100913          	li	s2,1
    d200:	fc1ff06f          	j	d1c0 <pbuf_dechain+0x5c>
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
    d204:	0001e537          	lui	a0,0x1e
    d208:	bb050513          	addi	a0,a0,-1104 # 1dbb0 <altcp_tcp_functions+0x478>
    d20c:	cb0ff0ef          	jal	ra,c6bc <bsp_printf>
    d210:	fbdff06f          	j	d1cc <pbuf_dechain+0x68>
  return ((tail_gone > 0) ? NULL : q);
    d214:	00000493          	li	s1,0
    d218:	fb9ff06f          	j	d1d0 <pbuf_dechain+0x6c>

0000d21c <pbuf_copy_partial_pbuf>:
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
    d21c:	18058663          	beqz	a1,d3a8 <pbuf_copy_partial_pbuf+0x18c>
{
    d220:	fe010113          	addi	sp,sp,-32
    d224:	00112e23          	sw	ra,28(sp)
    d228:	00812c23          	sw	s0,24(sp)
    d22c:	00912a23          	sw	s1,20(sp)
    d230:	01212823          	sw	s2,16(sp)
    d234:	01312623          	sw	s3,12(sp)
    d238:	01412423          	sw	s4,8(sp)
    d23c:	01512223          	sw	s5,4(sp)
    d240:	00050913          	mv	s2,a0
    d244:	00058493          	mv	s1,a1
    d248:	00060a93          	mv	s5,a2
    d24c:	00068a13          	mv	s4,a3
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
    d250:	0085d783          	lhu	a5,8(a1)
    d254:	14c7ee63          	bltu	a5,a2,d3b0 <pbuf_copy_partial_pbuf+0x194>
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
    d258:	16050063          	beqz	a0,d3b8 <pbuf_copy_partial_pbuf+0x19c>
    d25c:	00855783          	lhu	a5,8(a0)
    d260:	00c686b3          	add	a3,a3,a2
    d264:	14d7ce63          	blt	a5,a3,d3c0 <pbuf_copy_partial_pbuf+0x1a4>
  size_t offset_to = offset, offset_from = 0, len_calc;
    d268:	00000993          	li	s3,0
    d26c:	0840006f          	j	d2f0 <pbuf_copy_partial_pbuf+0xd4>
    len = (u16_t)LWIP_MIN(copy_len, len_calc);
    d270:	000a8413          	mv	s0,s5
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    d274:	00492503          	lw	a0,4(s2)
    d278:	0044a583          	lw	a1,4(s1)
    d27c:	00040613          	mv	a2,s0
    d280:	013585b3          	add	a1,a1,s3
    d284:	01450533          	add	a0,a0,s4
    d288:	f3cf40ef          	jal	ra,19c4 <memcpy>
    offset_to += len;
    d28c:	008a0a33          	add	s4,s4,s0
    offset_from += len;
    d290:	008989b3          	add	s3,s3,s0
    copy_len -= len;
    d294:	408a8433          	sub	s0,s5,s0
    d298:	01041a93          	slli	s5,s0,0x10
    d29c:	010ada93          	srli	s5,s5,0x10
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    d2a0:	00a95783          	lhu	a5,10(s2)
    d2a4:	0747ea63          	bltu	a5,s4,d318 <pbuf_copy_partial_pbuf+0xfc>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    d2a8:	00a4d783          	lhu	a5,10(s1)
    d2ac:	0737ee63          	bltu	a5,s3,d328 <pbuf_copy_partial_pbuf+0x10c>
    if (offset_from >= p_from->len) {
    d2b0:	00a4d783          	lhu	a5,10(s1)
    d2b4:	00f9e863          	bltu	s3,a5,d2c4 <pbuf_copy_partial_pbuf+0xa8>
      p_from = p_from->next;
    d2b8:	0004a483          	lw	s1,0(s1)
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
    d2bc:	06048e63          	beqz	s1,d338 <pbuf_copy_partial_pbuf+0x11c>
      offset_from = 0;
    d2c0:	00000993          	li	s3,0
    if (offset_to == p_to->len) {
    d2c4:	00a95783          	lhu	a5,10(s2)
    d2c8:	07478e63          	beq	a5,s4,d344 <pbuf_copy_partial_pbuf+0x128>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
    d2cc:	00048863          	beqz	s1,d2dc <pbuf_copy_partial_pbuf+0xc0>
    d2d0:	00a4d703          	lhu	a4,10(s1)
    d2d4:	0084d783          	lhu	a5,8(s1)
    d2d8:	08f70463          	beq	a4,a5,d360 <pbuf_copy_partial_pbuf+0x144>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
    d2dc:	00090863          	beqz	s2,d2ec <pbuf_copy_partial_pbuf+0xd0>
    d2e0:	00a95703          	lhu	a4,10(s2)
    d2e4:	00895783          	lhu	a5,8(s2)
    d2e8:	08f70463          	beq	a4,a5,d370 <pbuf_copy_partial_pbuf+0x154>
  } while (copy_len);
    d2ec:	080a8a63          	beqz	s5,d380 <pbuf_copy_partial_pbuf+0x164>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
    d2f0:	00a95403          	lhu	s0,10(s2)
    d2f4:	41440433          	sub	s0,s0,s4
    d2f8:	00a4d783          	lhu	a5,10(s1)
    d2fc:	413787b3          	sub	a5,a5,s3
    d300:	00f46463          	bltu	s0,a5,d308 <pbuf_copy_partial_pbuf+0xec>
      len_calc = p_from->len - offset_from;
    d304:	00078413          	mv	s0,a5
    len = (u16_t)LWIP_MIN(copy_len, len_calc);
    d308:	f68ae4e3          	bltu	s5,s0,d270 <pbuf_copy_partial_pbuf+0x54>
    d30c:	01041413          	slli	s0,s0,0x10
    d310:	01045413          	srli	s0,s0,0x10
    d314:	f61ff06f          	j	d274 <pbuf_copy_partial_pbuf+0x58>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    d318:	0001e537          	lui	a0,0x1e
    d31c:	bc850513          	addi	a0,a0,-1080 # 1dbc8 <altcp_tcp_functions+0x490>
    d320:	b9cff0ef          	jal	ra,c6bc <bsp_printf>
    d324:	f85ff06f          	j	d2a8 <pbuf_copy_partial_pbuf+0x8c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    d328:	0001e537          	lui	a0,0x1e
    d32c:	be050513          	addi	a0,a0,-1056 # 1dbe0 <altcp_tcp_functions+0x4a8>
    d330:	b8cff0ef          	jal	ra,c6bc <bsp_printf>
    d334:	f7dff06f          	j	d2b0 <pbuf_copy_partial_pbuf+0x94>
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
    d338:	080a9863          	bnez	s5,d3c8 <pbuf_copy_partial_pbuf+0x1ac>
      offset_from = 0;
    d33c:	00000993          	li	s3,0
    d340:	f85ff06f          	j	d2c4 <pbuf_copy_partial_pbuf+0xa8>
      p_to = p_to->next;
    d344:	00092903          	lw	s2,0(s2)
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
    d348:	00090663          	beqz	s2,d354 <pbuf_copy_partial_pbuf+0x138>
      offset_to = 0;
    d34c:	00000a13          	li	s4,0
    d350:	f7dff06f          	j	d2cc <pbuf_copy_partial_pbuf+0xb0>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
    d354:	060a9e63          	bnez	s5,d3d0 <pbuf_copy_partial_pbuf+0x1b4>
      offset_to = 0;
    d358:	00000a13          	li	s4,0
    d35c:	f71ff06f          	j	d2cc <pbuf_copy_partial_pbuf+0xb0>
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
    d360:	0004a783          	lw	a5,0(s1)
    d364:	f6078ce3          	beqz	a5,d2dc <pbuf_copy_partial_pbuf+0xc0>
    d368:	ffa00513          	li	a0,-6
    d36c:	0180006f          	j	d384 <pbuf_copy_partial_pbuf+0x168>
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
    d370:	00092783          	lw	a5,0(s2)
    d374:	f6078ce3          	beqz	a5,d2ec <pbuf_copy_partial_pbuf+0xd0>
    d378:	ffa00513          	li	a0,-6
    d37c:	0080006f          	j	d384 <pbuf_copy_partial_pbuf+0x168>
  return ERR_OK;
    d380:	00000513          	li	a0,0
}
    d384:	01c12083          	lw	ra,28(sp)
    d388:	01812403          	lw	s0,24(sp)
    d38c:	01412483          	lw	s1,20(sp)
    d390:	01012903          	lw	s2,16(sp)
    d394:	00c12983          	lw	s3,12(sp)
    d398:	00812a03          	lw	s4,8(sp)
    d39c:	00412a83          	lw	s5,4(sp)
    d3a0:	02010113          	addi	sp,sp,32
    d3a4:	00008067          	ret
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
    d3a8:	ff000513          	li	a0,-16
}
    d3ac:	00008067          	ret
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
    d3b0:	ff000513          	li	a0,-16
    d3b4:	fd1ff06f          	j	d384 <pbuf_copy_partial_pbuf+0x168>
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
    d3b8:	ff000513          	li	a0,-16
    d3bc:	fc9ff06f          	j	d384 <pbuf_copy_partial_pbuf+0x168>
    d3c0:	ff000513          	li	a0,-16
    d3c4:	fc1ff06f          	j	d384 <pbuf_copy_partial_pbuf+0x168>
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
    d3c8:	ff000513          	li	a0,-16
    d3cc:	fb9ff06f          	j	d384 <pbuf_copy_partial_pbuf+0x168>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
    d3d0:	ff000513          	li	a0,-16
    d3d4:	fb1ff06f          	j	d384 <pbuf_copy_partial_pbuf+0x168>

0000d3d8 <pbuf_copy>:
  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
    d3d8:	02058263          	beqz	a1,d3fc <pbuf_copy+0x24>
{
    d3dc:	ff010113          	addi	sp,sp,-16
    d3e0:	00112623          	sw	ra,12(sp)
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
    d3e4:	00000693          	li	a3,0
    d3e8:	0085d603          	lhu	a2,8(a1)
    d3ec:	e31ff0ef          	jal	ra,d21c <pbuf_copy_partial_pbuf>
}
    d3f0:	00c12083          	lw	ra,12(sp)
    d3f4:	01010113          	addi	sp,sp,16
    d3f8:	00008067          	ret
  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
    d3fc:	ff000513          	li	a0,-16
}
    d400:	00008067          	ret

0000d404 <pbuf_copy_partial>:
{
    d404:	fe010113          	addi	sp,sp,-32
    d408:	00112e23          	sw	ra,28(sp)
    d40c:	00812c23          	sw	s0,24(sp)
    d410:	00912a23          	sw	s1,20(sp)
    d414:	01212823          	sw	s2,16(sp)
    d418:	01312623          	sw	s3,12(sp)
    d41c:	01412423          	sw	s4,8(sp)
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
    d420:	08050663          	beqz	a0,d4ac <pbuf_copy_partial+0xa8>
    d424:	00050913          	mv	s2,a0
    d428:	00058a13          	mv	s4,a1
    d42c:	00060493          	mv	s1,a2
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
    d430:	0a058263          	beqz	a1,d4d4 <pbuf_copy_partial+0xd0>
  u16_t left = 0;
    d434:	00000993          	li	s3,0
    d438:	0500006f          	j	d488 <pbuf_copy_partial+0x84>
      buf_copy_len = (u16_t)(p->len - offset);
    d43c:	00a95403          	lhu	s0,10(s2)
    d440:	40d40433          	sub	s0,s0,a3
    d444:	01041413          	slli	s0,s0,0x10
    d448:	01045413          	srli	s0,s0,0x10
      if (buf_copy_len > len) {
    d44c:	0084f463          	bgeu	s1,s0,d454 <pbuf_copy_partial+0x50>
        buf_copy_len = len;
    d450:	00048413          	mv	s0,s1
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
    d454:	00492583          	lw	a1,4(s2)
    d458:	00040613          	mv	a2,s0
    d45c:	00d585b3          	add	a1,a1,a3
    d460:	013a0533          	add	a0,s4,s3
    d464:	d60f40ef          	jal	ra,19c4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
    d468:	008989b3          	add	s3,s3,s0
    d46c:	01099993          	slli	s3,s3,0x10
    d470:	0109d993          	srli	s3,s3,0x10
      len = (u16_t)(len - buf_copy_len);
    d474:	408484b3          	sub	s1,s1,s0
    d478:	01049493          	slli	s1,s1,0x10
    d47c:	0104d493          	srli	s1,s1,0x10
      offset = 0;
    d480:	00000693          	li	a3,0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
    d484:	00092903          	lw	s2,0(s2)
    d488:	02048463          	beqz	s1,d4b0 <pbuf_copy_partial+0xac>
    d48c:	02090263          	beqz	s2,d4b0 <pbuf_copy_partial+0xac>
    if ((offset != 0) && (offset >= p->len)) {
    d490:	fa0686e3          	beqz	a3,d43c <pbuf_copy_partial+0x38>
    d494:	00a95583          	lhu	a1,10(s2)
    d498:	fab6e2e3          	bltu	a3,a1,d43c <pbuf_copy_partial+0x38>
      offset = (u16_t)(offset - p->len);
    d49c:	40b686b3          	sub	a3,a3,a1
    d4a0:	01069693          	slli	a3,a3,0x10
    d4a4:	0106d693          	srli	a3,a3,0x10
    d4a8:	fddff06f          	j	d484 <pbuf_copy_partial+0x80>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
    d4ac:	00000993          	li	s3,0
}
    d4b0:	00098513          	mv	a0,s3
    d4b4:	01c12083          	lw	ra,28(sp)
    d4b8:	01812403          	lw	s0,24(sp)
    d4bc:	01412483          	lw	s1,20(sp)
    d4c0:	01012903          	lw	s2,16(sp)
    d4c4:	00c12983          	lw	s3,12(sp)
    d4c8:	00812a03          	lw	s4,8(sp)
    d4cc:	02010113          	addi	sp,sp,32
    d4d0:	00008067          	ret
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
    d4d4:	00000993          	li	s3,0
    d4d8:	fd9ff06f          	j	d4b0 <pbuf_copy_partial+0xac>

0000d4dc <pbuf_get_contiguous>:
  LWIP_ERROR("pbuf_get_contiguous: invalid buf", (p != NULL), return NULL;);
    d4dc:	08050863          	beqz	a0,d56c <pbuf_get_contiguous+0x90>
  LWIP_ERROR("pbuf_get_contiguous: invalid dataptr", (buffer != NULL), return NULL;);
    d4e0:	06058e63          	beqz	a1,d55c <pbuf_get_contiguous+0x80>
  LWIP_ERROR("pbuf_get_contiguous: invalid dataptr", (bufsize >= len), return NULL;);
    d4e4:	08d66063          	bltu	a2,a3,d564 <pbuf_get_contiguous+0x88>
{
    d4e8:	fe010113          	addi	sp,sp,-32
    d4ec:	00112e23          	sw	ra,28(sp)
    d4f0:	00812c23          	sw	s0,24(sp)
    d4f4:	00912a23          	sw	s1,20(sp)
    d4f8:	00068413          	mv	s0,a3
    d4fc:	00058493          	mv	s1,a1
  q = pbuf_skip_const(p, offset, &out_offset);
    d500:	00e10613          	addi	a2,sp,14
    d504:	00070593          	mv	a1,a4
    d508:	988ff0ef          	jal	ra,c690 <pbuf_skip_const>
  if (q != NULL) {
    d50c:	00050e63          	beqz	a0,d528 <pbuf_get_contiguous+0x4c>
    if (q->len >= (out_offset + len)) {
    d510:	00a55703          	lhu	a4,10(a0)
    d514:	00e15683          	lhu	a3,14(sp)
    d518:	008687b3          	add	a5,a3,s0
    d51c:	02f74063          	blt	a4,a5,d53c <pbuf_get_contiguous+0x60>
      return (u8_t *)q->payload + out_offset;
    d520:	00452503          	lw	a0,4(a0)
    d524:	00d50533          	add	a0,a0,a3
}
    d528:	01c12083          	lw	ra,28(sp)
    d52c:	01812403          	lw	s0,24(sp)
    d530:	01412483          	lw	s1,20(sp)
    d534:	02010113          	addi	sp,sp,32
    d538:	00008067          	ret
    if (pbuf_copy_partial(q, buffer, len, out_offset) != len) {
    d53c:	00040613          	mv	a2,s0
    d540:	00048593          	mv	a1,s1
    d544:	ec1ff0ef          	jal	ra,d404 <pbuf_copy_partial>
    d548:	00851663          	bne	a0,s0,d554 <pbuf_get_contiguous+0x78>
    return buffer;
    d54c:	00048513          	mv	a0,s1
    d550:	fd9ff06f          	j	d528 <pbuf_get_contiguous+0x4c>
      return NULL;
    d554:	00000513          	li	a0,0
    d558:	fd1ff06f          	j	d528 <pbuf_get_contiguous+0x4c>
  LWIP_ERROR("pbuf_get_contiguous: invalid dataptr", (buffer != NULL), return NULL;);
    d55c:	00058513          	mv	a0,a1
    d560:	00008067          	ret
  LWIP_ERROR("pbuf_get_contiguous: invalid dataptr", (bufsize >= len), return NULL;);
    d564:	00000513          	li	a0,0
    d568:	00008067          	ret
}
    d56c:	00008067          	ret

0000d570 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
    d570:	ff010113          	addi	sp,sp,-16
    d574:	00112623          	sw	ra,12(sp)
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
    d578:	918ff0ef          	jal	ra,c690 <pbuf_skip_const>
  return LWIP_CONST_CAST(struct pbuf *, out);
}
    d57c:	00c12083          	lw	ra,12(sp)
    d580:	01010113          	addi	sp,sp,16
    d584:	00008067          	ret

0000d588 <pbuf_take>:
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
    d588:	0c050663          	beqz	a0,d654 <pbuf_take+0xcc>
{
    d58c:	fe010113          	addi	sp,sp,-32
    d590:	00112e23          	sw	ra,28(sp)
    d594:	00812c23          	sw	s0,24(sp)
    d598:	00912a23          	sw	s1,20(sp)
    d59c:	01212823          	sw	s2,16(sp)
    d5a0:	01312623          	sw	s3,12(sp)
    d5a4:	01412423          	sw	s4,8(sp)
    d5a8:	01512223          	sw	s5,4(sp)
    d5ac:	00050493          	mv	s1,a0
    d5b0:	00058a13          	mv	s4,a1
    d5b4:	00060a93          	mv	s5,a2
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
    d5b8:	0a058263          	beqz	a1,d65c <pbuf_take+0xd4>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
    d5bc:	00855783          	lhu	a5,8(a0)
    d5c0:	0ac7e263          	bltu	a5,a2,d664 <pbuf_take+0xdc>
  size_t total_copy_len = len;
    d5c4:	00060913          	mv	s2,a2
  size_t copied_total = 0;
    d5c8:	00000993          	li	s3,0
    d5cc:	0300006f          	j	d5fc <pbuf_take+0x74>
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
    d5d0:	0001e537          	lui	a0,0x1e
    d5d4:	bfc50513          	addi	a0,a0,-1028 # 1dbfc <altcp_tcp_functions+0x4c4>
    d5d8:	8e4ff0ef          	jal	ra,c6bc <bsp_printf>
    d5dc:	0280006f          	j	d604 <pbuf_take+0x7c>
    if (buf_copy_len > p->len) {
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
    d5e0:	00040613          	mv	a2,s0
    d5e4:	013a05b3          	add	a1,s4,s3
    d5e8:	0044a503          	lw	a0,4(s1)
    d5ec:	bd8f40ef          	jal	ra,19c4 <memcpy>
    total_copy_len -= buf_copy_len;
    d5f0:	40890933          	sub	s2,s2,s0
    copied_total += buf_copy_len;
    d5f4:	008989b3          	add	s3,s3,s0
  for (p = buf; total_copy_len != 0; p = p->next) {
    d5f8:	0004a483          	lw	s1,0(s1)
    d5fc:	00090c63          	beqz	s2,d614 <pbuf_take+0x8c>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
    d600:	fc0488e3          	beqz	s1,d5d0 <pbuf_take+0x48>
    if (buf_copy_len > p->len) {
    d604:	00a4d403          	lhu	s0,10(s1)
    d608:	fd246ce3          	bltu	s0,s2,d5e0 <pbuf_take+0x58>
    buf_copy_len = total_copy_len;
    d60c:	00090413          	mv	s0,s2
    d610:	fd1ff06f          	j	d5e0 <pbuf_take+0x58>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
    d614:	03599663          	bne	s3,s5,d640 <pbuf_take+0xb8>
  return ERR_OK;
    d618:	00000513          	li	a0,0
}
    d61c:	01c12083          	lw	ra,28(sp)
    d620:	01812403          	lw	s0,24(sp)
    d624:	01412483          	lw	s1,20(sp)
    d628:	01012903          	lw	s2,16(sp)
    d62c:	00c12983          	lw	s3,12(sp)
    d630:	00812a03          	lw	s4,8(sp)
    d634:	00412a83          	lw	s5,4(sp)
    d638:	02010113          	addi	sp,sp,32
    d63c:	00008067          	ret
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
    d640:	0001e537          	lui	a0,0x1e
    d644:	c1450513          	addi	a0,a0,-1004 # 1dc14 <altcp_tcp_functions+0x4dc>
    d648:	874ff0ef          	jal	ra,c6bc <bsp_printf>
  return ERR_OK;
    d64c:	00000513          	li	a0,0
    d650:	fcdff06f          	j	d61c <pbuf_take+0x94>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
    d654:	ff000513          	li	a0,-16
}
    d658:	00008067          	ret
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
    d65c:	ff000513          	li	a0,-16
    d660:	fbdff06f          	j	d61c <pbuf_take+0x94>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
    d664:	fff00513          	li	a0,-1
    d668:	fb5ff06f          	j	d61c <pbuf_take+0x94>

0000d66c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
    d66c:	fd010113          	addi	sp,sp,-48
    d670:	02112623          	sw	ra,44(sp)
    d674:	02812423          	sw	s0,40(sp)
    d678:	02912223          	sw	s1,36(sp)
    d67c:	03212023          	sw	s2,32(sp)
    d680:	01312e23          	sw	s3,28(sp)
    d684:	00058993          	mv	s3,a1
    d688:	00060413          	mv	s0,a2
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
    d68c:	00e10613          	addi	a2,sp,14
    d690:	00068593          	mv	a1,a3
    d694:	eddff0ef          	jal	ra,d570 <pbuf_skip>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
    d698:	0a050463          	beqz	a0,d740 <pbuf_take_at+0xd4>
    d69c:	00050913          	mv	s2,a0
    d6a0:	00855683          	lhu	a3,8(a0)
    d6a4:	00e15783          	lhu	a5,14(sp)
    d6a8:	00040493          	mv	s1,s0
    d6ac:	00878733          	add	a4,a5,s0
    d6b0:	08e6cc63          	blt	a3,a4,d748 <pbuf_take_at+0xdc>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    d6b4:	00a55703          	lhu	a4,10(a0)
    d6b8:	02e7f063          	bgeu	a5,a4,d6d8 <pbuf_take_at+0x6c>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
    d6bc:	00a95783          	lhu	a5,10(s2)
    d6c0:	00e15703          	lhu	a4,14(sp)
    d6c4:	40e786b3          	sub	a3,a5,a4
    d6c8:	0296d063          	bge	a3,s1,d6e8 <pbuf_take_at+0x7c>
    d6cc:	01069493          	slli	s1,a3,0x10
    d6d0:	0104d493          	srli	s1,s1,0x10
    d6d4:	0180006f          	j	d6ec <pbuf_take_at+0x80>
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    d6d8:	0001e537          	lui	a0,0x1e
    d6dc:	c2c50513          	addi	a0,a0,-980 # 1dc2c <altcp_tcp_functions+0x4f4>
    d6e0:	fddfe0ef          	jal	ra,c6bc <bsp_printf>
    d6e4:	fd9ff06f          	j	d6bc <pbuf_take_at+0x50>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
    d6e8:	00040493          	mv	s1,s0
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
    d6ec:	00492503          	lw	a0,4(s2)
    d6f0:	00048613          	mv	a2,s1
    d6f4:	00098593          	mv	a1,s3
    d6f8:	00e50533          	add	a0,a0,a4
    d6fc:	ac8f40ef          	jal	ra,19c4 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    d700:	40940633          	sub	a2,s0,s1
    d704:	01061613          	slli	a2,a2,0x10
    d708:	01065613          	srli	a2,a2,0x10
    src_ptr += first_copy_len;
    d70c:	009985b3          	add	a1,s3,s1
    if (remaining_len > 0) {
    d710:	02061263          	bnez	a2,d734 <pbuf_take_at+0xc8>
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
    d714:	00000513          	li	a0,0
  }
  return ERR_MEM;
}
    d718:	02c12083          	lw	ra,44(sp)
    d71c:	02812403          	lw	s0,40(sp)
    d720:	02412483          	lw	s1,36(sp)
    d724:	02012903          	lw	s2,32(sp)
    d728:	01c12983          	lw	s3,28(sp)
    d72c:	03010113          	addi	sp,sp,48
    d730:	00008067          	ret
      return pbuf_take(q->next, src_ptr, remaining_len);
    d734:	00092503          	lw	a0,0(s2)
    d738:	e51ff0ef          	jal	ra,d588 <pbuf_take>
    d73c:	fddff06f          	j	d718 <pbuf_take_at+0xac>
  return ERR_MEM;
    d740:	fff00513          	li	a0,-1
    d744:	fd5ff06f          	j	d718 <pbuf_take_at+0xac>
    d748:	fff00513          	li	a0,-1
    d74c:	fcdff06f          	j	d718 <pbuf_take_at+0xac>

0000d750 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
    d750:	ff010113          	addi	sp,sp,-16
    d754:	00112623          	sw	ra,12(sp)
    d758:	00812423          	sw	s0,8(sp)
    d75c:	00912223          	sw	s1,4(sp)
    d760:	00060493          	mv	s1,a2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
    d764:	00058613          	mv	a2,a1
    d768:	0084d583          	lhu	a1,8(s1)
    d76c:	cfcff0ef          	jal	ra,cc68 <pbuf_alloc>
    d770:	00050413          	mv	s0,a0
  if (q == NULL) {
    d774:	00050863          	beqz	a0,d784 <pbuf_clone+0x34>
    return NULL;
  }
  err = pbuf_copy(q, p);
    d778:	00048593          	mv	a1,s1
    d77c:	c5dff0ef          	jal	ra,d3d8 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
    d780:	00051e63          	bnez	a0,d79c <pbuf_clone+0x4c>
  return q;
}
    d784:	00040513          	mv	a0,s0
    d788:	00c12083          	lw	ra,12(sp)
    d78c:	00812403          	lw	s0,8(sp)
    d790:	00412483          	lw	s1,4(sp)
    d794:	01010113          	addi	sp,sp,16
    d798:	00008067          	ret
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
    d79c:	0001e537          	lui	a0,0x1e
    d7a0:	c4450513          	addi	a0,a0,-956 # 1dc44 <altcp_tcp_functions+0x50c>
    d7a4:	f19fe0ef          	jal	ra,c6bc <bsp_printf>
    d7a8:	fddff06f          	j	d784 <pbuf_clone+0x34>

0000d7ac <pbuf_coalesce>:
{
    d7ac:	ff010113          	addi	sp,sp,-16
    d7b0:	00112623          	sw	ra,12(sp)
    d7b4:	00812423          	sw	s0,8(sp)
    d7b8:	00912223          	sw	s1,4(sp)
    d7bc:	00050413          	mv	s0,a0
  if (p->next == NULL) {
    d7c0:	00052783          	lw	a5,0(a0)
    d7c4:	02078463          	beqz	a5,d7ec <pbuf_coalesce+0x40>
    d7c8:	00058513          	mv	a0,a1
  q = pbuf_clone(layer, PBUF_RAM, p);
    d7cc:	00040613          	mv	a2,s0
    d7d0:	28000593          	li	a1,640
    d7d4:	f7dff0ef          	jal	ra,d750 <pbuf_clone>
    d7d8:	00050493          	mv	s1,a0
  if (q == NULL) {
    d7dc:	00050863          	beqz	a0,d7ec <pbuf_coalesce+0x40>
  pbuf_free(p);
    d7e0:	00040513          	mv	a0,s0
    d7e4:	b6cff0ef          	jal	ra,cb50 <pbuf_free>
  return q;
    d7e8:	00048413          	mv	s0,s1
}
    d7ec:	00040513          	mv	a0,s0
    d7f0:	00c12083          	lw	ra,12(sp)
    d7f4:	00812403          	lw	s0,8(sp)
    d7f8:	00412483          	lw	s1,4(sp)
    d7fc:	01010113          	addi	sp,sp,16
    d800:	00008067          	ret

0000d804 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
    d804:	fe010113          	addi	sp,sp,-32
    d808:	00112e23          	sw	ra,28(sp)
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
    d80c:	00e10613          	addi	a2,sp,14
    d810:	e81fe0ef          	jal	ra,c690 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    d814:	02050463          	beqz	a0,d83c <pbuf_try_get_at+0x38>
    d818:	00a55783          	lhu	a5,10(a0)
    d81c:	00e15703          	lhu	a4,14(sp)
    d820:	02f77263          	bgeu	a4,a5,d844 <pbuf_try_get_at+0x40>
    return ((u8_t *)q->payload)[q_idx];
    d824:	00452783          	lw	a5,4(a0)
    d828:	00e787b3          	add	a5,a5,a4
    d82c:	0007c503          	lbu	a0,0(a5)
  }
  return -1;
}
    d830:	01c12083          	lw	ra,28(sp)
    d834:	02010113          	addi	sp,sp,32
    d838:	00008067          	ret
  return -1;
    d83c:	fff00513          	li	a0,-1
    d840:	ff1ff06f          	j	d830 <pbuf_try_get_at+0x2c>
    d844:	fff00513          	li	a0,-1
    d848:	fe9ff06f          	j	d830 <pbuf_try_get_at+0x2c>

0000d84c <pbuf_get_at>:
{
    d84c:	ff010113          	addi	sp,sp,-16
    d850:	00112623          	sw	ra,12(sp)
  int ret = pbuf_try_get_at(p, offset);
    d854:	fb1ff0ef          	jal	ra,d804 <pbuf_try_get_at>
  if (ret >= 0) {
    d858:	00055a63          	bgez	a0,d86c <pbuf_get_at+0x20>
  return 0;
    d85c:	00000513          	li	a0,0
}
    d860:	00c12083          	lw	ra,12(sp)
    d864:	01010113          	addi	sp,sp,16
    d868:	00008067          	ret
    return (u8_t)ret;
    d86c:	0ff57513          	andi	a0,a0,255
    d870:	ff1ff06f          	j	d860 <pbuf_get_at+0x14>

0000d874 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
    d874:	fe010113          	addi	sp,sp,-32
    d878:	00112e23          	sw	ra,28(sp)
    d87c:	00812c23          	sw	s0,24(sp)
    d880:	00060413          	mv	s0,a2
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
    d884:	00e10613          	addi	a2,sp,14
    d888:	ce9ff0ef          	jal	ra,d570 <pbuf_skip>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    d88c:	00050e63          	beqz	a0,d8a8 <pbuf_put_at+0x34>
    d890:	00a55703          	lhu	a4,10(a0)
    d894:	00e15783          	lhu	a5,14(sp)
    d898:	00e7f863          	bgeu	a5,a4,d8a8 <pbuf_put_at+0x34>
    ((u8_t *)q->payload)[q_idx] = data;
    d89c:	00452703          	lw	a4,4(a0)
    d8a0:	00f707b3          	add	a5,a4,a5
    d8a4:	00878023          	sb	s0,0(a5)
  }
}
    d8a8:	01c12083          	lw	ra,28(sp)
    d8ac:	01812403          	lw	s0,24(sp)
    d8b0:	02010113          	addi	sp,sp,32
    d8b4:	00008067          	ret

0000d8b8 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
    d8b8:	fe010113          	addi	sp,sp,-32
    d8bc:	00112e23          	sw	ra,28(sp)
    d8c0:	00812c23          	sw	s0,24(sp)
    d8c4:	00912a23          	sw	s1,20(sp)
    d8c8:	01212823          	sw	s2,16(sp)
    d8cc:	01312623          	sw	s3,12(sp)
    d8d0:	01412423          	sw	s4,8(sp)
    d8d4:	00050913          	mv	s2,a0
    d8d8:	00058493          	mv	s1,a1
    d8dc:	00060a13          	mv	s4,a2
    d8e0:	00068993          	mv	s3,a3
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
    d8e4:	00855703          	lhu	a4,8(a0)
    d8e8:	00d587b3          	add	a5,a1,a3
    d8ec:	0af74663          	blt	a4,a5,d998 <pbuf_memcmp+0xe0>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    d8f0:	04090663          	beqz	s2,d93c <pbuf_memcmp+0x84>
    d8f4:	00a95783          	lhu	a5,10(s2)
    d8f8:	00f4ec63          	bltu	s1,a5,d910 <pbuf_memcmp+0x58>
    start = (u16_t)(start - q->len);
    d8fc:	40f484b3          	sub	s1,s1,a5
    d900:	01049493          	slli	s1,s1,0x10
    d904:	0104d493          	srli	s1,s1,0x10
    q = q->next;
    d908:	00092903          	lw	s2,0(s2)
    d90c:	fe5ff06f          	j	d8f0 <pbuf_memcmp+0x38>
    d910:	00000413          	li	s0,0
    d914:	02c0006f          	j	d940 <pbuf_memcmp+0x88>
  for (i = 0; i < n; i++) {
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    d918:	00040513          	mv	a0,s0
    d91c:	000107b7          	lui	a5,0x10
    d920:	ffe78793          	addi	a5,a5,-2 # fffe <tcp_input+0x182>
    d924:	0087f463          	bgeu	a5,s0,d92c <pbuf_memcmp+0x74>
    d928:	ffe00513          	li	a0,-2
    d92c:	00150513          	addi	a0,a0,1
    d930:	01051513          	slli	a0,a0,0x10
    d934:	01055513          	srli	a0,a0,0x10
    d938:	0400006f          	j	d978 <pbuf_memcmp+0xc0>
    d93c:	00000413          	li	s0,0
  for (i = 0; i < n; i++) {
    d940:	03347a63          	bgeu	s0,s3,d974 <pbuf_memcmp+0xbc>
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
    d944:	008485b3          	add	a1,s1,s0
    d948:	01059593          	slli	a1,a1,0x10
    d94c:	0105d593          	srli	a1,a1,0x10
    d950:	00090513          	mv	a0,s2
    d954:	ef9ff0ef          	jal	ra,d84c <pbuf_get_at>
    u8_t b = ((const u8_t *)s2)[i];
    d958:	008a07b3          	add	a5,s4,s0
    d95c:	0007c783          	lbu	a5,0(a5)
    if (a != b) {
    d960:	faf51ce3          	bne	a0,a5,d918 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
    d964:	00140413          	addi	s0,s0,1
    d968:	01041413          	slli	s0,s0,0x10
    d96c:	01045413          	srli	s0,s0,0x10
    d970:	fd1ff06f          	j	d940 <pbuf_memcmp+0x88>
    }
  }
  return 0;
    d974:	00000513          	li	a0,0
}
    d978:	01c12083          	lw	ra,28(sp)
    d97c:	01812403          	lw	s0,24(sp)
    d980:	01412483          	lw	s1,20(sp)
    d984:	01012903          	lw	s2,16(sp)
    d988:	00c12983          	lw	s3,12(sp)
    d98c:	00812a03          	lw	s4,8(sp)
    d990:	02010113          	addi	sp,sp,32
    d994:	00008067          	ret
    return 0xffff;
    d998:	00010537          	lui	a0,0x10
    d99c:	fff50513          	addi	a0,a0,-1 # ffff <tcp_input+0x183>
    d9a0:	fd9ff06f          	j	d978 <pbuf_memcmp+0xc0>

0000d9a4 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
    d9a4:	fe010113          	addi	sp,sp,-32
    d9a8:	00112e23          	sw	ra,28(sp)
    d9ac:	00812c23          	sw	s0,24(sp)
    d9b0:	00912a23          	sw	s1,20(sp)
    d9b4:	01212823          	sw	s2,16(sp)
    d9b8:	01312623          	sw	s3,12(sp)
    d9bc:	01412423          	sw	s4,8(sp)
    d9c0:	00050993          	mv	s3,a0
    d9c4:	00058a13          	mv	s4,a1
    d9c8:	00060913          	mv	s2,a2
    d9cc:	00068413          	mv	s0,a3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
    d9d0:	00855783          	lhu	a5,8(a0)
    d9d4:	40c784b3          	sub	s1,a5,a2
    d9d8:	01049493          	slli	s1,s1,0x10
    d9dc:	0104d493          	srli	s1,s1,0x10
  if (p->tot_len >= mem_len + start_offset) {
    d9e0:	00d60733          	add	a4,a2,a3
    d9e4:	02e7c863          	blt	a5,a4,da14 <pbuf_memfind+0x70>
    for (i = start_offset; i <= max_cmp_start; i++) {
    d9e8:	0484ea63          	bltu	s1,s0,da3c <pbuf_memfind+0x98>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
    d9ec:	00090693          	mv	a3,s2
    d9f0:	000a0613          	mv	a2,s4
    d9f4:	00040593          	mv	a1,s0
    d9f8:	00098513          	mv	a0,s3
    d9fc:	ebdff0ef          	jal	ra,d8b8 <pbuf_memcmp>
      if (plus == 0) {
    da00:	04050463          	beqz	a0,da48 <pbuf_memfind+0xa4>
    for (i = start_offset; i <= max_cmp_start; i++) {
    da04:	00140413          	addi	s0,s0,1
    da08:	01041413          	slli	s0,s0,0x10
    da0c:	01045413          	srli	s0,s0,0x10
    da10:	fd9ff06f          	j	d9e8 <pbuf_memfind+0x44>
        return i;
      }
    }
  }
  return 0xFFFF;
    da14:	00010537          	lui	a0,0x10
    da18:	fff50513          	addi	a0,a0,-1 # ffff <tcp_input+0x183>
}
    da1c:	01c12083          	lw	ra,28(sp)
    da20:	01812403          	lw	s0,24(sp)
    da24:	01412483          	lw	s1,20(sp)
    da28:	01012903          	lw	s2,16(sp)
    da2c:	00c12983          	lw	s3,12(sp)
    da30:	00812a03          	lw	s4,8(sp)
    da34:	02010113          	addi	sp,sp,32
    da38:	00008067          	ret
  return 0xFFFF;
    da3c:	00010537          	lui	a0,0x10
    da40:	fff50513          	addi	a0,a0,-1 # ffff <tcp_input+0x183>
    da44:	fd9ff06f          	j	da1c <pbuf_memfind+0x78>
        return i;
    da48:	00040513          	mv	a0,s0
    da4c:	fd1ff06f          	j	da1c <pbuf_memfind+0x78>

0000da50 <pbuf_strstr>:
 */
u16_t
pbuf_strstr(const struct pbuf *p, const char *substr)
{
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
    da50:	06058a63          	beqz	a1,dac4 <pbuf_strstr+0x74>
{
    da54:	ff010113          	addi	sp,sp,-16
    da58:	00112623          	sw	ra,12(sp)
    da5c:	00812423          	sw	s0,8(sp)
    da60:	00912223          	sw	s1,4(sp)
    da64:	00050493          	mv	s1,a0
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
    da68:	0005c703          	lbu	a4,0(a1)
    da6c:	06070263          	beqz	a4,dad0 <pbuf_strstr+0x80>
    da70:	00855503          	lhu	a0,8(a0)
    da74:	00010737          	lui	a4,0x10
    da78:	fff70713          	addi	a4,a4,-1 # ffff <tcp_input+0x183>
    da7c:	02e50a63          	beq	a0,a4,dab0 <pbuf_strstr+0x60>
    da80:	00058413          	mv	s0,a1
    return 0xFFFF;
  }
  substr_len = strlen(substr);
    da84:	00058513          	mv	a0,a1
    da88:	b24f40ef          	jal	ra,1dac <strlen>
  if (substr_len >= 0xFFFF) {
    da8c:	000107b7          	lui	a5,0x10
    da90:	ffe78793          	addi	a5,a5,-2 # fffe <tcp_input+0x182>
    da94:	04a7e463          	bltu	a5,a0,dadc <pbuf_strstr+0x8c>
    return 0xFFFF;
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
    da98:	00000693          	li	a3,0
    da9c:	01051613          	slli	a2,a0,0x10
    daa0:	01065613          	srli	a2,a2,0x10
    daa4:	00040593          	mv	a1,s0
    daa8:	00048513          	mv	a0,s1
    daac:	ef9ff0ef          	jal	ra,d9a4 <pbuf_memfind>
}
    dab0:	00c12083          	lw	ra,12(sp)
    dab4:	00812403          	lw	s0,8(sp)
    dab8:	00412483          	lw	s1,4(sp)
    dabc:	01010113          	addi	sp,sp,16
    dac0:	00008067          	ret
    return 0xFFFF;
    dac4:	00010537          	lui	a0,0x10
    dac8:	fff50513          	addi	a0,a0,-1 # ffff <tcp_input+0x183>
}
    dacc:	00008067          	ret
    return 0xFFFF;
    dad0:	00010537          	lui	a0,0x10
    dad4:	fff50513          	addi	a0,a0,-1 # ffff <tcp_input+0x183>
    dad8:	fd9ff06f          	j	dab0 <pbuf_strstr+0x60>
    return 0xFFFF;
    dadc:	00010537          	lui	a0,0x10
    dae0:	fff50513          	addi	a0,a0,-1 # ffff <tcp_input+0x183>
    dae4:	fcdff06f          	j	dab0 <pbuf_strstr+0x60>

0000dae8 <uart_writeAvailability>:
        return *((volatile u32*) address);
    dae8:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
    daec:	01055513          	srli	a0,a0,0x10
    }
    daf0:	0ff57513          	andi	a0,a0,255
    daf4:	00008067          	ret

0000daf8 <uart_write>:
    static void uart_write(u32 reg, char data){
    daf8:	ff010113          	addi	sp,sp,-16
    dafc:	00112623          	sw	ra,12(sp)
    db00:	00812423          	sw	s0,8(sp)
    db04:	00912223          	sw	s1,4(sp)
    db08:	00050413          	mv	s0,a0
    db0c:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
    db10:	00040513          	mv	a0,s0
    db14:	fd5ff0ef          	jal	ra,dae8 <uart_writeAvailability>
    db18:	fe050ce3          	beqz	a0,db10 <uart_write+0x18>
        *((volatile u32*) address) = data;
    db1c:	00942023          	sw	s1,0(s0)
    }
    db20:	00c12083          	lw	ra,12(sp)
    db24:	00812403          	lw	s0,8(sp)
    db28:	00412483          	lw	s1,4(sp)
    db2c:	01010113          	addi	sp,sp,16
    db30:	00008067          	ret

0000db34 <bsp_printHex>:
    {
    db34:	ff010113          	addi	sp,sp,-16
    db38:	00112623          	sw	ra,12(sp)
    db3c:	00812423          	sw	s0,8(sp)
    db40:	00912223          	sw	s1,4(sp)
    db44:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    db48:	01c00413          	li	s0,28
    db4c:	0280006f          	j	db74 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
    db50:	0084d7b3          	srl	a5,s1,s0
    db54:	00f7f713          	andi	a4,a5,15
    db58:	0001c7b7          	lui	a5,0x1c
    db5c:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
    db60:	00e787b3          	add	a5,a5,a4
    db64:	0007c583          	lbu	a1,0(a5)
    db68:	f8010537          	lui	a0,0xf8010
    db6c:	f8dff0ef          	jal	ra,daf8 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
    db70:	ffc40413          	addi	s0,s0,-4
    db74:	fc045ee3          	bgez	s0,db50 <bsp_printHex+0x1c>
    }
    db78:	00c12083          	lw	ra,12(sp)
    db7c:	00812403          	lw	s0,8(sp)
    db80:	00412483          	lw	s1,4(sp)
    db84:	01010113          	addi	sp,sp,16
    db88:	00008067          	ret

0000db8c <bsp_printHex_lower>:
        {
    db8c:	ff010113          	addi	sp,sp,-16
    db90:	00112623          	sw	ra,12(sp)
    db94:	00812423          	sw	s0,8(sp)
    db98:	00912223          	sw	s1,4(sp)
    db9c:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    dba0:	01c00413          	li	s0,28
    dba4:	0280006f          	j	dbcc <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
    dba8:	0084d7b3          	srl	a5,s1,s0
    dbac:	00f7f713          	andi	a4,a5,15
    dbb0:	0001c7b7          	lui	a5,0x1c
    dbb4:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
    dbb8:	00e787b3          	add	a5,a5,a4
    dbbc:	0007c583          	lbu	a1,0(a5)
    dbc0:	f8010537          	lui	a0,0xf8010
    dbc4:	f35ff0ef          	jal	ra,daf8 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
    dbc8:	ffc40413          	addi	s0,s0,-4
    dbcc:	fc045ee3          	bgez	s0,dba8 <bsp_printHex_lower+0x1c>
        }
    dbd0:	00c12083          	lw	ra,12(sp)
    dbd4:	00812403          	lw	s0,8(sp)
    dbd8:	00412483          	lw	s1,4(sp)
    dbdc:	01010113          	addi	sp,sp,16
    dbe0:	00008067          	ret

0000dbe4 <bsp_printf_c>:
    {
    dbe4:	ff010113          	addi	sp,sp,-16
    dbe8:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
    dbec:	0ff57593          	andi	a1,a0,255
    dbf0:	f8010537          	lui	a0,0xf8010
    dbf4:	f05ff0ef          	jal	ra,daf8 <uart_write>
    }
    dbf8:	00c12083          	lw	ra,12(sp)
    dbfc:	01010113          	addi	sp,sp,16
    dc00:	00008067          	ret

0000dc04 <bsp_printf_s>:
    {
    dc04:	ff010113          	addi	sp,sp,-16
    dc08:	00112623          	sw	ra,12(sp)
    dc0c:	00812423          	sw	s0,8(sp)
    dc10:	00050413          	mv	s0,a0
        while (*p)
    dc14:	00044583          	lbu	a1,0(s0)
    dc18:	00058a63          	beqz	a1,dc2c <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
    dc1c:	00140413          	addi	s0,s0,1
    dc20:	f8010537          	lui	a0,0xf8010
    dc24:	ed5ff0ef          	jal	ra,daf8 <uart_write>
    dc28:	fedff06f          	j	dc14 <bsp_printf_s+0x10>
    }
    dc2c:	00c12083          	lw	ra,12(sp)
    dc30:	00812403          	lw	s0,8(sp)
    dc34:	01010113          	addi	sp,sp,16
    dc38:	00008067          	ret

0000dc3c <bsp_printf_d>:
    {
    dc3c:	fd010113          	addi	sp,sp,-48
    dc40:	02112623          	sw	ra,44(sp)
    dc44:	02812423          	sw	s0,40(sp)
    dc48:	02912223          	sw	s1,36(sp)
    dc4c:	00050493          	mv	s1,a0
        if (val < 0) {
    dc50:	00054663          	bltz	a0,dc5c <bsp_printf_d+0x20>
    {
    dc54:	00010413          	mv	s0,sp
    dc58:	02c0006f          	j	dc84 <bsp_printf_d+0x48>
            bsp_printf_c('-');
    dc5c:	02d00513          	li	a0,45
    dc60:	f85ff0ef          	jal	ra,dbe4 <bsp_printf_c>
            val = -val;
    dc64:	409004b3          	neg	s1,s1
    dc68:	fedff06f          	j	dc54 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
    dc6c:	00a00713          	li	a4,10
    dc70:	02e4e7b3          	rem	a5,s1,a4
    dc74:	03078793          	addi	a5,a5,48
    dc78:	00f40023          	sb	a5,0(s0)
            val = val / 10;
    dc7c:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
    dc80:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
    dc84:	fe0494e3          	bnez	s1,dc6c <bsp_printf_d+0x30>
    dc88:	00010793          	mv	a5,sp
    dc8c:	fef400e3          	beq	s0,a5,dc6c <bsp_printf_d+0x30>
    dc90:	0100006f          	j	dca0 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
    dc94:	fff40413          	addi	s0,s0,-1
    dc98:	00044503          	lbu	a0,0(s0)
    dc9c:	f49ff0ef          	jal	ra,dbe4 <bsp_printf_c>
        while (p != buffer)
    dca0:	00010793          	mv	a5,sp
    dca4:	fef418e3          	bne	s0,a5,dc94 <bsp_printf_d+0x58>
    }
    dca8:	02c12083          	lw	ra,44(sp)
    dcac:	02812403          	lw	s0,40(sp)
    dcb0:	02412483          	lw	s1,36(sp)
    dcb4:	03010113          	addi	sp,sp,48
    dcb8:	00008067          	ret

0000dcbc <bsp_printf_x>:
    {
    dcbc:	ff010113          	addi	sp,sp,-16
    dcc0:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
    dcc4:	00000713          	li	a4,0
    dcc8:	00700793          	li	a5,7
    dccc:	02e7c063          	blt	a5,a4,dcec <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    dcd0:	00271693          	slli	a3,a4,0x2
    dcd4:	ff000793          	li	a5,-16
    dcd8:	00d797b3          	sll	a5,a5,a3
    dcdc:	00f577b3          	and	a5,a0,a5
    dce0:	00078663          	beqz	a5,dcec <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
    dce4:	00170713          	addi	a4,a4,1
    dce8:	fe1ff06f          	j	dcc8 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
    dcec:	ea1ff0ef          	jal	ra,db8c <bsp_printHex_lower>
    }
    dcf0:	00c12083          	lw	ra,12(sp)
    dcf4:	01010113          	addi	sp,sp,16
    dcf8:	00008067          	ret

0000dcfc <bsp_printf_X>:
        {
    dcfc:	ff010113          	addi	sp,sp,-16
    dd00:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
    dd04:	00000713          	li	a4,0
    dd08:	00700793          	li	a5,7
    dd0c:	02e7c063          	blt	a5,a4,dd2c <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
    dd10:	00271693          	slli	a3,a4,0x2
    dd14:	ff000793          	li	a5,-16
    dd18:	00d797b3          	sll	a5,a5,a3
    dd1c:	00f577b3          	and	a5,a0,a5
    dd20:	00078663          	beqz	a5,dd2c <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
    dd24:	00170713          	addi	a4,a4,1
    dd28:	fe1ff06f          	j	dd08 <bsp_printf_X+0xc>
            bsp_printHex(val);
    dd2c:	e09ff0ef          	jal	ra,db34 <bsp_printHex>
        }
    dd30:	00c12083          	lw	ra,12(sp)
    dd34:	01010113          	addi	sp,sp,16
    dd38:	00008067          	ret

0000dd3c <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
    dd3c:	9241d783          	lhu	a5,-1756(gp) # 1faf4 <tcp_optidx>
    dd40:	00178693          	addi	a3,a5,1
    dd44:	92d19223          	sh	a3,-1756(gp) # 1faf4 <tcp_optidx>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
    dd48:	9281a703          	lw	a4,-1752(gp) # 1faf8 <tcphdr_opt2>
    dd4c:	00070663          	beqz	a4,dd58 <tcp_get_next_optbyte+0x1c>
    dd50:	92c1d683          	lhu	a3,-1748(gp) # 1fafc <tcphdr_opt1len>
    dd54:	00d7fa63          	bgeu	a5,a3,dd68 <tcp_get_next_optbyte+0x2c>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    dd58:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
    return opts[optidx];
    dd5c:	00f707b3          	add	a5,a4,a5
    dd60:	0147c503          	lbu	a0,20(a5)
    dd64:	00008067          	ret
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
    dd68:	0ff7f793          	andi	a5,a5,255
    dd6c:	0ff6f693          	andi	a3,a3,255
    dd70:	40d787b3          	sub	a5,a5,a3
    dd74:	0ff7f793          	andi	a5,a5,255
    return tcphdr_opt2[idx];
    dd78:	00f707b3          	add	a5,a4,a5
    dd7c:	0007c503          	lbu	a0,0(a5)
  }
}
    dd80:	00008067          	ret

0000dd84 <bsp_printf>:
    {
    dd84:	fc010113          	addi	sp,sp,-64
    dd88:	00112e23          	sw	ra,28(sp)
    dd8c:	00812c23          	sw	s0,24(sp)
    dd90:	00912a23          	sw	s1,20(sp)
    dd94:	00050493          	mv	s1,a0
    dd98:	02b12223          	sw	a1,36(sp)
    dd9c:	02c12423          	sw	a2,40(sp)
    dda0:	02d12623          	sw	a3,44(sp)
    dda4:	02e12823          	sw	a4,48(sp)
    dda8:	02f12a23          	sw	a5,52(sp)
    ddac:	03012c23          	sw	a6,56(sp)
    ddb0:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
    ddb4:	02410793          	addi	a5,sp,36
    ddb8:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
    ddbc:	00000413          	li	s0,0
    ddc0:	01c0006f          	j	dddc <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
    ddc4:	00c12783          	lw	a5,12(sp)
    ddc8:	00478713          	addi	a4,a5,4
    ddcc:	00e12623          	sw	a4,12(sp)
    ddd0:	0007a503          	lw	a0,0(a5)
    ddd4:	e11ff0ef          	jal	ra,dbe4 <bsp_printf_c>
        for (i = 0; format[i]; i++)
    ddd8:	00140413          	addi	s0,s0,1
    dddc:	008487b3          	add	a5,s1,s0
    dde0:	0007c503          	lbu	a0,0(a5)
    dde4:	0c050263          	beqz	a0,dea8 <bsp_printf+0x124>
            if (format[i] == '%') {
    dde8:	02500793          	li	a5,37
    ddec:	06f50663          	beq	a0,a5,de58 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
    ddf0:	df5ff0ef          	jal	ra,dbe4 <bsp_printf_c>
    ddf4:	fe5ff06f          	j	ddd8 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
    ddf8:	00c12783          	lw	a5,12(sp)
    ddfc:	00478713          	addi	a4,a5,4
    de00:	00e12623          	sw	a4,12(sp)
    de04:	0007a503          	lw	a0,0(a5)
    de08:	dfdff0ef          	jal	ra,dc04 <bsp_printf_s>
                        break;
    de0c:	fcdff06f          	j	ddd8 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
    de10:	00c12783          	lw	a5,12(sp)
    de14:	00478713          	addi	a4,a5,4
    de18:	00e12623          	sw	a4,12(sp)
    de1c:	0007a503          	lw	a0,0(a5)
    de20:	e1dff0ef          	jal	ra,dc3c <bsp_printf_d>
                        break;
    de24:	fb5ff06f          	j	ddd8 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
    de28:	00c12783          	lw	a5,12(sp)
    de2c:	00478713          	addi	a4,a5,4
    de30:	00e12623          	sw	a4,12(sp)
    de34:	0007a503          	lw	a0,0(a5)
    de38:	ec5ff0ef          	jal	ra,dcfc <bsp_printf_X>
                        break;
    de3c:	f9dff06f          	j	ddd8 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
    de40:	00c12783          	lw	a5,12(sp)
    de44:	00478713          	addi	a4,a5,4
    de48:	00e12623          	sw	a4,12(sp)
    de4c:	0007a503          	lw	a0,0(a5)
    de50:	e6dff0ef          	jal	ra,dcbc <bsp_printf_x>
                        break;
    de54:	f85ff06f          	j	ddd8 <bsp_printf+0x54>
                while (format[++i]) {
    de58:	00140413          	addi	s0,s0,1
    de5c:	008487b3          	add	a5,s1,s0
    de60:	0007c783          	lbu	a5,0(a5)
    de64:	f6078ae3          	beqz	a5,ddd8 <bsp_printf+0x54>
                    if (format[i] == 'c') {
    de68:	06300713          	li	a4,99
    de6c:	f4e78ce3          	beq	a5,a4,ddc4 <bsp_printf+0x40>
                    else if (format[i] == 's') {
    de70:	07300713          	li	a4,115
    de74:	f8e782e3          	beq	a5,a4,ddf8 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
    de78:	06400713          	li	a4,100
    de7c:	f8e78ae3          	beq	a5,a4,de10 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
    de80:	05800713          	li	a4,88
    de84:	fae782e3          	beq	a5,a4,de28 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
    de88:	07800713          	li	a4,120
    de8c:	fae78ae3          	beq	a5,a4,de40 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
    de90:	06600713          	li	a4,102
    de94:	fce792e3          	bne	a5,a4,de58 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
    de98:	0001c537          	lui	a0,0x1c
    de9c:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
    dea0:	d65ff0ef          	jal	ra,dc04 <bsp_printf_s>
                        break;
    dea4:	f35ff06f          	j	ddd8 <bsp_printf+0x54>
    }
    dea8:	01c12083          	lw	ra,28(sp)
    deac:	01812403          	lw	s0,24(sp)
    deb0:	01412483          	lw	s1,20(sp)
    deb4:	04010113          	addi	sp,sp,64
    deb8:	00008067          	ret

0000debc <tcp_timewait_input>:
  if (flags & TCP_RST) {
    debc:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    dec0:	0047f793          	andi	a5,a5,4
    dec4:	0e079463          	bnez	a5,dfac <tcp_timewait_input+0xf0>
{
    dec8:	ff010113          	addi	sp,sp,-16
    decc:	00112623          	sw	ra,12(sp)
    ded0:	00812423          	sw	s0,8(sp)
    ded4:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
    ded8:	04050463          	beqz	a0,df20 <tcp_timewait_input+0x64>
  if (flags & TCP_SYN) {
    dedc:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    dee0:	0027f713          	andi	a4,a5,2
    dee4:	08070c63          	beqz	a4,df7c <tcp_timewait_input+0xc0>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
    dee8:	9201a603          	lw	a2,-1760(gp) # 1faf0 <seqno>
    deec:	02842783          	lw	a5,40(s0)
    def0:	40f60733          	sub	a4,a2,a5
    def4:	00074a63          	bltz	a4,df08 <tcp_timewait_input+0x4c>
    def8:	02c45703          	lhu	a4,44(s0)
    defc:	00e787b3          	add	a5,a5,a4
    df00:	40f607b3          	sub	a5,a2,a5
    df04:	02f05663          	blez	a5,df30 <tcp_timewait_input+0x74>
  if ((tcplen > 0)) {
    df08:	9161d783          	lhu	a5,-1770(gp) # 1fae6 <tcplen>
    df0c:	08079463          	bnez	a5,df94 <tcp_timewait_input+0xd8>
}
    df10:	00c12083          	lw	ra,12(sp)
    df14:	00812403          	lw	s0,8(sp)
    df18:	01010113          	addi	sp,sp,16
    df1c:	00008067          	ret
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
    df20:	0001e537          	lui	a0,0x1e
    df24:	c8050513          	addi	a0,a0,-896 # 1dc80 <altcp_tcp_functions+0x548>
    df28:	e5dff0ef          	jal	ra,dd84 <bsp_printf>
    df2c:	fb1ff06f          	j	dedc <tcp_timewait_input+0x20>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    df30:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
    df34:	00074803          	lbu	a6,0(a4)
    df38:	00174683          	lbu	a3,1(a4)
    df3c:	00869693          	slli	a3,a3,0x8
    df40:	00274503          	lbu	a0,2(a4)
    df44:	00374783          	lbu	a5,3(a4)
    df48:	00879793          	slli	a5,a5,0x8
    df4c:	9161d583          	lhu	a1,-1770(gp) # 1fae6 <tcplen>
    df50:	0106e833          	or	a6,a3,a6
    df54:	00a7e7b3          	or	a5,a5,a0
    df58:	00022737          	lui	a4,0x22
    df5c:	ef470713          	addi	a4,a4,-268 # 21ef4 <ip_data+0x10>
    df60:	000226b7          	lui	a3,0x22
    df64:	ef868693          	addi	a3,a3,-264 # 21ef8 <ip_data+0x14>
    df68:	00c58633          	add	a2,a1,a2
    df6c:	91c1a583          	lw	a1,-1764(gp) # 1faec <ackno>
    df70:	00040513          	mv	a0,s0
    df74:	b29fa0ef          	jal	ra,8a9c <tcp_rst>
      return;
    df78:	f99ff06f          	j	df10 <tcp_timewait_input+0x54>
  } else if (flags & TCP_FIN) {
    df7c:	0017f793          	andi	a5,a5,1
    df80:	f80784e3          	beqz	a5,df08 <tcp_timewait_input+0x4c>
    pcb->tmr = tcp_ticks;
    df84:	000227b7          	lui	a5,0x22
    df88:	f047a783          	lw	a5,-252(a5) # 21f04 <tcp_ticks>
    df8c:	02f42223          	sw	a5,36(s0)
    df90:	f79ff06f          	j	df08 <tcp_timewait_input+0x4c>
    tcp_ack_now(pcb);
    df94:	01e45783          	lhu	a5,30(s0)
    df98:	0027e793          	ori	a5,a5,2
    df9c:	00f41f23          	sh	a5,30(s0)
    tcp_output(pcb);
    dfa0:	00040513          	mv	a0,s0
    dfa4:	ca5fa0ef          	jal	ra,8c48 <tcp_output>
    dfa8:	f69ff06f          	j	df10 <tcp_timewait_input+0x54>
    dfac:	00008067          	ret

0000dfb0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
    dfb0:	ff010113          	addi	sp,sp,-16
    dfb4:	00112623          	sw	ra,12(sp)
    dfb8:	00812423          	sw	s0,8(sp)
    dfbc:	00912223          	sw	s1,4(sp)
    dfc0:	00050413          	mv	s0,a0
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
    dfc4:	0a050063          	beqz	a0,e064 <tcp_parseopt+0xb4>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    dfc8:	92e1d783          	lhu	a5,-1746(gp) # 1fafe <tcphdr_optlen>
    dfcc:	0c078463          	beqz	a5,e094 <tcp_parseopt+0xe4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
    dfd0:	92019223          	sh	zero,-1756(gp) # 1faf4 <tcp_optidx>
    dfd4:	9241d703          	lhu	a4,-1756(gp) # 1faf4 <tcp_optidx>
    dfd8:	92e1d783          	lhu	a5,-1746(gp) # 1fafe <tcphdr_optlen>
    dfdc:	0af77c63          	bgeu	a4,a5,e094 <tcp_parseopt+0xe4>
      u8_t opt = tcp_get_next_optbyte();
    dfe0:	d5dff0ef          	jal	ra,dd3c <tcp_get_next_optbyte>
      switch (opt) {
    dfe4:	00100793          	li	a5,1
    dfe8:	fef506e3          	beq	a0,a5,dfd4 <tcp_parseopt+0x24>
    dfec:	01851793          	slli	a5,a0,0x18
    dff0:	4187d793          	srai	a5,a5,0x18
    dff4:	0a078063          	beqz	a5,e094 <tcp_parseopt+0xe4>
    dff8:	00200793          	li	a5,2
    dffc:	06f51c63          	bne	a0,a5,e074 <tcp_parseopt+0xc4>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
    e000:	d3dff0ef          	jal	ra,dd3c <tcp_get_next_optbyte>
    e004:	00400793          	li	a5,4
    e008:	08f51663          	bne	a0,a5,e094 <tcp_parseopt+0xe4>
    e00c:	9241d783          	lhu	a5,-1756(gp) # 1faf4 <tcp_optidx>
    e010:	00178793          	addi	a5,a5,1
    e014:	92e1d703          	lhu	a4,-1746(gp) # 1fafe <tcphdr_optlen>
    e018:	06e7de63          	bge	a5,a4,e094 <tcp_parseopt+0xe4>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
    e01c:	d21ff0ef          	jal	ra,dd3c <tcp_get_next_optbyte>
    e020:	01051493          	slli	s1,a0,0x10
    e024:	0104d493          	srli	s1,s1,0x10
    e028:	00849493          	slli	s1,s1,0x8
    e02c:	01049493          	slli	s1,s1,0x10
    e030:	0104d493          	srli	s1,s1,0x10
          mss |= tcp_get_next_optbyte();
    e034:	d09ff0ef          	jal	ra,dd3c <tcp_get_next_optbyte>
    e038:	01051513          	slli	a0,a0,0x10
    e03c:	01055513          	srli	a0,a0,0x10
    e040:	009564b3          	or	s1,a0,s1
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
    e044:	fff48793          	addi	a5,s1,-1
    e048:	01079793          	slli	a5,a5,0x10
    e04c:	0107d793          	srli	a5,a5,0x10
    e050:	5b300713          	li	a4,1459
    e054:	00f77463          	bgeu	a4,a5,e05c <tcp_parseopt+0xac>
    e058:	5b400493          	li	s1,1460
    e05c:	02941b23          	sh	s1,54(s0)
          break;
    e060:	f75ff06f          	j	dfd4 <tcp_parseopt+0x24>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
    e064:	0001e537          	lui	a0,0x1e
    e068:	ca050513          	addi	a0,a0,-864 # 1dca0 <altcp_tcp_functions+0x568>
    e06c:	d19ff0ef          	jal	ra,dd84 <bsp_printf>
    e070:	f59ff06f          	j	dfc8 <tcp_parseopt+0x18>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
    e074:	cc9ff0ef          	jal	ra,dd3c <tcp_get_next_optbyte>
          if (data < 2) {
    e078:	00100793          	li	a5,1
    e07c:	00a7fc63          	bgeu	a5,a0,e094 <tcp_parseopt+0xe4>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
    e080:	9241d703          	lhu	a4,-1756(gp) # 1faf4 <tcp_optidx>
    e084:	00e50533          	add	a0,a0,a4
    e088:	ffe50513          	addi	a0,a0,-2
    e08c:	92a19223          	sh	a0,-1756(gp) # 1faf4 <tcp_optidx>
    e090:	f45ff06f          	j	dfd4 <tcp_parseopt+0x24>
      }
    }
  }
}
    e094:	00c12083          	lw	ra,12(sp)
    e098:	00812403          	lw	s0,8(sp)
    e09c:	00412483          	lw	s1,4(sp)
    e0a0:	01010113          	addi	sp,sp,16
    e0a4:	00008067          	ret

0000e0a8 <tcp_listen_input>:
  if (flags & TCP_RST) {
    e0a8:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    e0ac:	0047f793          	andi	a5,a5,4
    e0b0:	22079c63          	bnez	a5,e2e8 <tcp_listen_input+0x240>
{
    e0b4:	fe010113          	addi	sp,sp,-32
    e0b8:	00112e23          	sw	ra,28(sp)
    e0bc:	00812c23          	sw	s0,24(sp)
    e0c0:	00912a23          	sw	s1,20(sp)
    e0c4:	01212823          	sw	s2,16(sp)
    e0c8:	01312623          	sw	s3,12(sp)
    e0cc:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
    e0d0:	16050063          	beqz	a0,e230 <tcp_listen_input+0x188>
  if (flags & TCP_ACK) {
    e0d4:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    e0d8:	0107f713          	andi	a4,a5,16
    e0dc:	16071263          	bnez	a4,e240 <tcp_listen_input+0x198>
  } else if (flags & TCP_SYN) {
    e0e0:	0027f793          	andi	a5,a5,2
    e0e4:	1a078463          	beqz	a5,e28c <tcp_listen_input+0x1e4>
    if (pcb->accepts_pending >= pcb->backlog) {
    e0e8:	02144703          	lbu	a4,33(s0)
    e0ec:	02044783          	lbu	a5,32(s0)
    e0f0:	18f77e63          	bgeu	a4,a5,e28c <tcp_listen_input+0x1e4>
    npcb = tcp_alloc(pcb->prio);
    e0f4:	01844503          	lbu	a0,24(s0)
    e0f8:	0b0050ef          	jal	ra,131a8 <tcp_alloc>
    e0fc:	00050493          	mv	s1,a0
    if (npcb == NULL) {
    e100:	1a050463          	beqz	a0,e2a8 <tcp_listen_input+0x200>
    pcb->accepts_pending++;
    e104:	02144783          	lbu	a5,33(s0)
    e108:	00178793          	addi	a5,a5,1
    e10c:	02f400a3          	sb	a5,33(s0)
    tcp_set_flags(npcb, TF_BACKLOGPEND);
    e110:	01e55783          	lhu	a5,30(a0)
    e114:	2007e793          	ori	a5,a5,512
    e118:	00f51f23          	sh	a5,30(a0)
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
    e11c:	000227b7          	lui	a5,0x22
    e120:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
    e124:	0147a703          	lw	a4,20(a5)
    e128:	00e52023          	sw	a4,0(a0)
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
    e12c:	0107a783          	lw	a5,16(a5)
    e130:	00f52223          	sw	a5,4(a0)
    npcb->local_port = pcb->local_port;
    e134:	01a45783          	lhu	a5,26(s0)
    e138:	00f51d23          	sh	a5,26(a0)
    npcb->remote_port = tcphdr->src;
    e13c:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
    e140:	00074683          	lbu	a3,0(a4)
    e144:	00174783          	lbu	a5,1(a4)
    e148:	00879793          	slli	a5,a5,0x8
    e14c:	00d7e7b3          	or	a5,a5,a3
    e150:	00f51e23          	sh	a5,28(a0)
    npcb->state = SYN_RCVD;
    e154:	00300793          	li	a5,3
    e158:	00f52a23          	sw	a5,20(a0)
    npcb->rcv_nxt = seqno + 1;
    e15c:	9201a783          	lw	a5,-1760(gp) # 1faf0 <seqno>
    e160:	00178793          	addi	a5,a5,1
    e164:	02f52423          	sw	a5,40(a0)
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
    e168:	02f52823          	sw	a5,48(a0)
    iss = tcp_next_iss(npcb);
    e16c:	714040ef          	jal	ra,12880 <tcp_next_iss>
    npcb->snd_wl2 = iss;
    e170:	04a4ae23          	sw	a0,92(s1)
    npcb->snd_nxt = iss;
    e174:	04a4aa23          	sw	a0,84(s1)
    npcb->lastack = iss;
    e178:	04a4a423          	sw	a0,72(s1)
    npcb->snd_lbb = iss;
    e17c:	06a4a023          	sw	a0,96(s1)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
    e180:	9201a783          	lw	a5,-1760(gp) # 1faf0 <seqno>
    e184:	fff78793          	addi	a5,a5,-1
    e188:	04f4ac23          	sw	a5,88(s1)
    npcb->callback_arg = pcb->callback_arg;
    e18c:	01042783          	lw	a5,16(s0)
    e190:	00f4a823          	sw	a5,16(s1)
    npcb->listener = pcb;
    e194:	0884a023          	sw	s0,128(s1)
    npcb->so_options = pcb->so_options & SOF_INHERITED;
    e198:	00944783          	lbu	a5,9(s0)
    e19c:	00c7f793          	andi	a5,a5,12
    e1a0:	00f484a3          	sb	a5,9(s1)
    npcb->netif_idx = pcb->netif_idx;
    e1a4:	00844783          	lbu	a5,8(s0)
    e1a8:	00f48423          	sb	a5,8(s1)
    TCP_REG_ACTIVE(npcb);
    e1ac:	000227b7          	lui	a5,0x22
    e1b0:	f007a703          	lw	a4,-256(a5) # 21f00 <tcp_active_pcbs>
    e1b4:	00e4a623          	sw	a4,12(s1)
    e1b8:	f097a023          	sw	s1,-256(a5)
    e1bc:	52c030ef          	jal	ra,116e8 <tcp_timer_needed>
    e1c0:	000227b7          	lui	a5,0x22
    e1c4:	00100713          	li	a4,1
    e1c8:	eee78e23          	sb	a4,-260(a5) # 21efc <tcp_active_pcbs_changed>
    tcp_parseopt(npcb);
    e1cc:	00048513          	mv	a0,s1
    e1d0:	de1ff0ef          	jal	ra,dfb0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
    e1d4:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
    e1d8:	00e74683          	lbu	a3,14(a4)
    e1dc:	00f74783          	lbu	a5,15(a4)
    e1e0:	00879793          	slli	a5,a5,0x8
    e1e4:	00d7e7b3          	or	a5,a5,a3
    e1e8:	06f49223          	sh	a5,100(s1)
    npcb->snd_wnd_max = npcb->snd_wnd;
    e1ec:	06f49323          	sh	a5,102(s1)
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
    e1f0:	0364d903          	lhu	s2,54(s1)
    e1f4:	00448413          	addi	s0,s1,4
    e1f8:	00040513          	mv	a0,s0
    e1fc:	4e4080ef          	jal	ra,166e0 <ip4_route>
    e200:	00040613          	mv	a2,s0
    e204:	00050593          	mv	a1,a0
    e208:	00090513          	mv	a0,s2
    e20c:	6b0040ef          	jal	ra,128bc <tcp_eff_send_mss_netif>
    e210:	02a49b23          	sh	a0,54(s1)
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
    e214:	01200593          	li	a1,18
    e218:	00048513          	mv	a0,s1
    e21c:	a98fa0ef          	jal	ra,84b4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
    e220:	0a051c63          	bnez	a0,e2d8 <tcp_listen_input+0x230>
    tcp_output(npcb);
    e224:	00048513          	mv	a0,s1
    e228:	a21fa0ef          	jal	ra,8c48 <tcp_output>
    e22c:	0600006f          	j	e28c <tcp_listen_input+0x1e4>
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
    e230:	0001e537          	lui	a0,0x1e
    e234:	cbc50513          	addi	a0,a0,-836 # 1dcbc <altcp_tcp_functions+0x584>
    e238:	b4dff0ef          	jal	ra,dd84 <bsp_printf>
    e23c:	e99ff06f          	j	e0d4 <tcp_listen_input+0x2c>
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    e240:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
    e244:	00074803          	lbu	a6,0(a4)
    e248:	00174683          	lbu	a3,1(a4)
    e24c:	00869693          	slli	a3,a3,0x8
    e250:	00274503          	lbu	a0,2(a4)
    e254:	00374783          	lbu	a5,3(a4)
    e258:	00879793          	slli	a5,a5,0x8
    e25c:	9161d583          	lhu	a1,-1770(gp) # 1fae6 <tcplen>
    e260:	9201a603          	lw	a2,-1760(gp) # 1faf0 <seqno>
    e264:	0106e833          	or	a6,a3,a6
    e268:	00a7e7b3          	or	a5,a5,a0
    e26c:	00022737          	lui	a4,0x22
    e270:	ef470713          	addi	a4,a4,-268 # 21ef4 <ip_data+0x10>
    e274:	000226b7          	lui	a3,0x22
    e278:	ef868693          	addi	a3,a3,-264 # 21ef8 <ip_data+0x14>
    e27c:	00c58633          	add	a2,a1,a2
    e280:	91c1a583          	lw	a1,-1764(gp) # 1faec <ackno>
    e284:	00040513          	mv	a0,s0
    e288:	815fa0ef          	jal	ra,8a9c <tcp_rst>
}
    e28c:	01c12083          	lw	ra,28(sp)
    e290:	01812403          	lw	s0,24(sp)
    e294:	01412483          	lw	s1,20(sp)
    e298:	01012903          	lw	s2,16(sp)
    e29c:	00c12983          	lw	s3,12(sp)
    e2a0:	02010113          	addi	sp,sp,32
    e2a4:	00008067          	ret
      TCP_STATS_INC(tcp.memerr);
    e2a8:	000227b7          	lui	a5,0x22
    e2ac:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    e2b0:	0b87d703          	lhu	a4,184(a5)
    e2b4:	00170713          	addi	a4,a4,1
    e2b8:	0ae79c23          	sh	a4,184(a5)
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
    e2bc:	01c42783          	lw	a5,28(s0)
    e2c0:	fc0786e3          	beqz	a5,e28c <tcp_listen_input+0x1e4>
    e2c4:	fff00613          	li	a2,-1
    e2c8:	00000593          	li	a1,0
    e2cc:	01042503          	lw	a0,16(s0)
    e2d0:	000780e7          	jalr	a5
      return;
    e2d4:	fb9ff06f          	j	e28c <tcp_listen_input+0x1e4>
      tcp_abandon(npcb, 0);
    e2d8:	00000593          	li	a1,0
    e2dc:	00048513          	mv	a0,s1
    e2e0:	255040ef          	jal	ra,12d34 <tcp_abandon>
      return;
    e2e4:	fa9ff06f          	j	e28c <tcp_listen_input+0x1e4>
    e2e8:	00008067          	ret

0000e2ec <tcp_free_acked_segments>:
{
    e2ec:	fe010113          	addi	sp,sp,-32
    e2f0:	00112e23          	sw	ra,28(sp)
    e2f4:	00812c23          	sw	s0,24(sp)
    e2f8:	00912a23          	sw	s1,20(sp)
    e2fc:	01212823          	sw	s2,16(sp)
    e300:	01312623          	sw	s3,12(sp)
    e304:	01412423          	sw	s4,8(sp)
    e308:	00050913          	mv	s2,a0
    e30c:	00058413          	mv	s0,a1
    e310:	00068993          	mv	s3,a3
  while (seg_list != NULL &&
    e314:	0180006f          	j	e32c <tcp_free_acked_segments+0x40>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
    e318:	0001e537          	lui	a0,0x1e
    e31c:	cdc50513          	addi	a0,a0,-804 # 1dcdc <altcp_tcp_functions+0x5a4>
    e320:	a65ff0ef          	jal	ra,dd84 <bsp_printf>
    e324:	0940006f          	j	e3b8 <tcp_free_acked_segments+0xcc>
{
    e328:	000a0413          	mv	s0,s4
  while (seg_list != NULL &&
    e32c:	0c040c63          	beqz	s0,e404 <tcp_free_acked_segments+0x118>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
    e330:	00c42703          	lw	a4,12(s0)
    e334:	00474783          	lbu	a5,4(a4)
    e338:	00574503          	lbu	a0,5(a4)
    e33c:	00851513          	slli	a0,a0,0x8
    e340:	00f56533          	or	a0,a0,a5
    e344:	00674783          	lbu	a5,6(a4)
    e348:	01079793          	slli	a5,a5,0x10
    e34c:	00a7e7b3          	or	a5,a5,a0
    e350:	00774503          	lbu	a0,7(a4)
    e354:	01851513          	slli	a0,a0,0x18
    e358:	00f56533          	or	a0,a0,a5
    e35c:	934fc0ef          	jal	ra,a490 <lwip_htonl>
    e360:	00050493          	mv	s1,a0
    e364:	00845a03          	lhu	s4,8(s0)
    e368:	00c42783          	lw	a5,12(s0)
    e36c:	00c7c503          	lbu	a0,12(a5)
    e370:	00d7c783          	lbu	a5,13(a5)
    e374:	00879793          	slli	a5,a5,0x8
    e378:	00a7e533          	or	a0,a5,a0
    e37c:	8fcfc0ef          	jal	ra,a478 <lwip_htons>
    e380:	00357513          	andi	a0,a0,3
    e384:	06050c63          	beqz	a0,e3fc <tcp_free_acked_segments+0x110>
    e388:	00100793          	li	a5,1
    e38c:	00fa0a33          	add	s4,s4,a5
    e390:	014484b3          	add	s1,s1,s4
    e394:	91c1a783          	lw	a5,-1764(gp) # 1faec <ackno>
    e398:	40f484b3          	sub	s1,s1,a5
  while (seg_list != NULL &&
    e39c:	06904463          	bgtz	s1,e404 <tcp_free_acked_segments+0x118>
    seg_list = seg_list->next;
    e3a0:	00042a03          	lw	s4,0(s0)
    clen = pbuf_clen(next->p);
    e3a4:	00442503          	lw	a0,4(s0)
    e3a8:	c95fe0ef          	jal	ra,d03c <pbuf_clen>
    e3ac:	00050493          	mv	s1,a0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
    e3b0:	06a95783          	lhu	a5,106(s2)
    e3b4:	f6a7e2e3          	bltu	a5,a0,e318 <tcp_free_acked_segments+0x2c>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    e3b8:	06a95503          	lhu	a0,106(s2)
    e3bc:	40950533          	sub	a0,a0,s1
    e3c0:	06a91523          	sh	a0,106(s2)
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
    e3c4:	00845783          	lhu	a5,8(s0)
    e3c8:	9181d683          	lhu	a3,-1768(gp) # 1fae8 <recv_acked>
    e3cc:	00d787b3          	add	a5,a5,a3
    e3d0:	90f19c23          	sh	a5,-1768(gp) # 1fae8 <recv_acked>
    tcp_seg_free(next);
    e3d4:	00040513          	mv	a0,s0
    e3d8:	23c040ef          	jal	ra,12614 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
    e3dc:	06a95783          	lhu	a5,106(s2)
    e3e0:	f40784e3          	beqz	a5,e328 <tcp_free_acked_segments+0x3c>
      LWIP_ASSERT("tcp_receive: valid queue length",
    e3e4:	f40a12e3          	bnez	s4,e328 <tcp_free_acked_segments+0x3c>
    e3e8:	f40990e3          	bnez	s3,e328 <tcp_free_acked_segments+0x3c>
    e3ec:	0001e537          	lui	a0,0x1e
    e3f0:	d0450513          	addi	a0,a0,-764 # 1dd04 <altcp_tcp_functions+0x5cc>
    e3f4:	991ff0ef          	jal	ra,dd84 <bsp_printf>
    e3f8:	f31ff06f          	j	e328 <tcp_free_acked_segments+0x3c>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
    e3fc:	00000793          	li	a5,0
    e400:	f8dff06f          	j	e38c <tcp_free_acked_segments+0xa0>
}
    e404:	00040513          	mv	a0,s0
    e408:	01c12083          	lw	ra,28(sp)
    e40c:	01812403          	lw	s0,24(sp)
    e410:	01412483          	lw	s1,20(sp)
    e414:	01012903          	lw	s2,16(sp)
    e418:	00c12983          	lw	s3,12(sp)
    e41c:	00812a03          	lw	s4,8(sp)
    e420:	02010113          	addi	sp,sp,32
    e424:	00008067          	ret

0000e428 <tcp_oos_insert_segment>:
{
    e428:	ff010113          	addi	sp,sp,-16
    e42c:	00112623          	sw	ra,12(sp)
    e430:	00812423          	sw	s0,8(sp)
    e434:	00912223          	sw	s1,4(sp)
    e438:	01212023          	sw	s2,0(sp)
    e43c:	00050493          	mv	s1,a0
    e440:	00058413          	mv	s0,a1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
    e444:	04050663          	beqz	a0,e490 <tcp_oos_insert_segment+0x68>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    e448:	00c4a783          	lw	a5,12(s1)
    e44c:	00c7c503          	lbu	a0,12(a5)
    e450:	00d7c783          	lbu	a5,13(a5)
    e454:	00879793          	slli	a5,a5,0x8
    e458:	00a7e533          	or	a0,a5,a0
    e45c:	81cfc0ef          	jal	ra,a478 <lwip_htons>
    e460:	00157513          	andi	a0,a0,1
    e464:	08050263          	beqz	a0,e4e8 <tcp_oos_insert_segment+0xc0>
    tcp_segs_free(next);
    e468:	00040513          	mv	a0,s0
    e46c:	1e8040ef          	jal	ra,12654 <tcp_segs_free>
    next = NULL;
    e470:	00000413          	li	s0,0
  cseg->next = next;
    e474:	0084a023          	sw	s0,0(s1)
}
    e478:	00c12083          	lw	ra,12(sp)
    e47c:	00812403          	lw	s0,8(sp)
    e480:	00412483          	lw	s1,4(sp)
    e484:	00012903          	lw	s2,0(sp)
    e488:	01010113          	addi	sp,sp,16
    e48c:	00008067          	ret
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
    e490:	0001e537          	lui	a0,0x1e
    e494:	d2450513          	addi	a0,a0,-732 # 1dd24 <altcp_tcp_functions+0x5ec>
    e498:	8edff0ef          	jal	ra,dd84 <bsp_printf>
    e49c:	fadff06f          	j	e448 <tcp_oos_insert_segment+0x20>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
    e4a0:	00c4a783          	lw	a5,12(s1)
    e4a4:	00c7c503          	lbu	a0,12(a5)
    e4a8:	00d7c903          	lbu	s2,13(a5)
    e4ac:	00891913          	slli	s2,s2,0x8
    e4b0:	00a96933          	or	s2,s2,a0
    e4b4:	00100513          	li	a0,1
    e4b8:	fc1fb0ef          	jal	ra,a478 <lwip_htons>
    e4bc:	00c4a783          	lw	a5,12(s1)
    e4c0:	00a96533          	or	a0,s2,a0
    e4c4:	01051513          	slli	a0,a0,0x10
    e4c8:	01055513          	srli	a0,a0,0x10
    e4cc:	00a78623          	sb	a0,12(a5)
    e4d0:	00855513          	srli	a0,a0,0x8
    e4d4:	00a786a3          	sb	a0,13(a5)
      next = next->next;
    e4d8:	00042903          	lw	s2,0(s0)
      tcp_seg_free(old_seg);
    e4dc:	00040513          	mv	a0,s0
    e4e0:	134040ef          	jal	ra,12614 <tcp_seg_free>
      next = next->next;
    e4e4:	00090413          	mv	s0,s2
    while (next &&
    e4e8:	06040663          	beqz	s0,e554 <tcp_oos_insert_segment+0x12c>
           TCP_SEQ_GEQ((seqno + cseg->len),
    e4ec:	0084d783          	lhu	a5,8(s1)
    e4f0:	9201a683          	lw	a3,-1760(gp) # 1faf0 <seqno>
    e4f4:	00d786b3          	add	a3,a5,a3
    e4f8:	00c42703          	lw	a4,12(s0)
    e4fc:	00474783          	lbu	a5,4(a4)
    e500:	00574603          	lbu	a2,5(a4)
    e504:	00861613          	slli	a2,a2,0x8
    e508:	00f66633          	or	a2,a2,a5
    e50c:	00674783          	lbu	a5,6(a4)
    e510:	01079793          	slli	a5,a5,0x10
    e514:	00c7e633          	or	a2,a5,a2
    e518:	00774783          	lbu	a5,7(a4)
    e51c:	01879793          	slli	a5,a5,0x18
    e520:	00c7e7b3          	or	a5,a5,a2
    e524:	00845603          	lhu	a2,8(s0)
    e528:	00c787b3          	add	a5,a5,a2
    e52c:	40f687b3          	sub	a5,a3,a5
    while (next &&
    e530:	0207c263          	bltz	a5,e554 <tcp_oos_insert_segment+0x12c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
    e534:	00c74503          	lbu	a0,12(a4)
    e538:	00d74783          	lbu	a5,13(a4)
    e53c:	00879793          	slli	a5,a5,0x8
    e540:	00a7e533          	or	a0,a5,a0
    e544:	f35fb0ef          	jal	ra,a478 <lwip_htons>
    e548:	00157513          	andi	a0,a0,1
    e54c:	f80506e3          	beqz	a0,e4d8 <tcp_oos_insert_segment+0xb0>
    e550:	f51ff06f          	j	e4a0 <tcp_oos_insert_segment+0x78>
    if (next &&
    e554:	f20400e3          	beqz	s0,e474 <tcp_oos_insert_segment+0x4c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
    e558:	0084d703          	lhu	a4,8(s1)
    e55c:	9201a583          	lw	a1,-1760(gp) # 1faf0 <seqno>
    e560:	00b70733          	add	a4,a4,a1
    e564:	00c42603          	lw	a2,12(s0)
    e568:	00464783          	lbu	a5,4(a2)
    e56c:	00564683          	lbu	a3,5(a2)
    e570:	00869693          	slli	a3,a3,0x8
    e574:	00f6e6b3          	or	a3,a3,a5
    e578:	00664783          	lbu	a5,6(a2)
    e57c:	01079793          	slli	a5,a5,0x10
    e580:	00d7e6b3          	or	a3,a5,a3
    e584:	00764783          	lbu	a5,7(a2)
    e588:	01879793          	slli	a5,a5,0x18
    e58c:	00d7e7b3          	or	a5,a5,a3
    e590:	40f70733          	sub	a4,a4,a5
    if (next &&
    e594:	eee050e3          	blez	a4,e474 <tcp_oos_insert_segment+0x4c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
    e598:	40b787b3          	sub	a5,a5,a1
    e59c:	01079593          	slli	a1,a5,0x10
    e5a0:	0105d593          	srli	a1,a1,0x10
    e5a4:	00b49423          	sh	a1,8(s1)
      pbuf_realloc(cseg->p, cseg->len);
    e5a8:	0044a503          	lw	a0,4(s1)
    e5ac:	919fe0ef          	jal	ra,cec4 <pbuf_realloc>
    e5b0:	ec5ff06f          	j	e474 <tcp_oos_insert_segment+0x4c>

0000e5b4 <tcp_receive>:
{
    e5b4:	fe010113          	addi	sp,sp,-32
    e5b8:	00112e23          	sw	ra,28(sp)
    e5bc:	00812c23          	sw	s0,24(sp)
    e5c0:	00912a23          	sw	s1,20(sp)
    e5c4:	01212823          	sw	s2,16(sp)
    e5c8:	01312623          	sw	s3,12(sp)
    e5cc:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
    e5d0:	14050463          	beqz	a0,e718 <tcp_receive+0x164>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
    e5d4:	01442703          	lw	a4,20(s0)
    e5d8:	00300793          	li	a5,3
    e5dc:	14e7f663          	bgeu	a5,a4,e728 <tcp_receive+0x174>
  if (flags & TCP_ACK) {
    e5e0:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    e5e4:	0107f793          	andi	a5,a5,16
    e5e8:	0a078c63          	beqz	a5,e6a0 <tcp_receive+0xec>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
    e5ec:	06445603          	lhu	a2,100(s0)
    e5f0:	05c42783          	lw	a5,92(s0)
    e5f4:	00f60533          	add	a0,a2,a5
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
    e5f8:	05842683          	lw	a3,88(s0)
    e5fc:	9201a703          	lw	a4,-1760(gp) # 1faf0 <seqno>
    e600:	40e685b3          	sub	a1,a3,a4
    e604:	0205c463          	bltz	a1,e62c <tcp_receive+0x78>
    e608:	12e68863          	beq	a3,a4,e738 <tcp_receive+0x184>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
    e60c:	91c1a683          	lw	a3,-1764(gp) # 1faec <ackno>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
    e610:	04d79663          	bne	a5,a3,e65c <tcp_receive+0xa8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
    e614:	9301a683          	lw	a3,-1744(gp) # 1fb00 <tcphdr>
    e618:	00e6c583          	lbu	a1,14(a3)
    e61c:	00f6c783          	lbu	a5,15(a3)
    e620:	00879793          	slli	a5,a5,0x8
    e624:	00b7e7b3          	or	a5,a5,a1
    e628:	02f67a63          	bgeu	a2,a5,e65c <tcp_receive+0xa8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
    e62c:	9301a683          	lw	a3,-1744(gp) # 1fb00 <tcphdr>
    e630:	00e6c603          	lbu	a2,14(a3)
    e634:	00f6c783          	lbu	a5,15(a3)
    e638:	00879793          	slli	a5,a5,0x8
    e63c:	00c7e7b3          	or	a5,a5,a2
    e640:	06f41223          	sh	a5,100(s0)
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
    e644:	06645683          	lhu	a3,102(s0)
    e648:	00f6f463          	bgeu	a3,a5,e650 <tcp_receive+0x9c>
        pcb->snd_wnd_max = pcb->snd_wnd;
    e64c:	06f41323          	sh	a5,102(s0)
      pcb->snd_wl1 = seqno;
    e650:	04e42c23          	sw	a4,88(s0)
      pcb->snd_wl2 = ackno;
    e654:	91c1a783          	lw	a5,-1764(gp) # 1faec <ackno>
    e658:	04f42e23          	sw	a5,92(s0)
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
    e65c:	91c1a703          	lw	a4,-1764(gp) # 1faec <ackno>
    e660:	04842683          	lw	a3,72(s0)
    e664:	40d707b3          	sub	a5,a4,a3
    e668:	0ef05063          	blez	a5,e748 <tcp_receive+0x194>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
    e66c:	fff78793          	addi	a5,a5,-1
    e670:	0007c863          	bltz	a5,e680 <tcp_receive+0xcc>
    e674:	05442783          	lw	a5,84(s0)
    e678:	40f707b3          	sub	a5,a4,a5
    e67c:	14f05a63          	blez	a5,e7d0 <tcp_receive+0x21c>
      tcp_send_empty_ack(pcb);
    e680:	00040513          	mv	a0,s0
    e684:	d08fa0ef          	jal	ra,8b8c <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
    e688:	03842783          	lw	a5,56(s0)
    e68c:	00078a63          	beqz	a5,e6a0 <tcp_receive+0xec>
    e690:	03c42703          	lw	a4,60(s0)
    e694:	91c1a683          	lw	a3,-1764(gp) # 1faec <ackno>
    e698:	40d70733          	sub	a4,a4,a3
    e69c:	38074e63          	bltz	a4,ea38 <tcp_receive+0x484>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
    e6a0:	9161d783          	lhu	a5,-1770(gp) # 1fae6 <tcplen>
    e6a4:	00079463          	bnez	a5,e6ac <tcp_receive+0xf8>
    e6a8:	6e90006f          	j	f590 <tcp_receive+0xfdc>
    e6ac:	01442683          	lw	a3,20(s0)
    e6b0:	00600713          	li	a4,6
    e6b4:	00d77463          	bgeu	a4,a3,e6bc <tcp_receive+0x108>
    e6b8:	6d90006f          	j	f590 <tcp_receive+0xfdc>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
    e6bc:	02842683          	lw	a3,40(s0)
    e6c0:	9201a703          	lw	a4,-1760(gp) # 1faf0 <seqno>
    e6c4:	40e68933          	sub	s2,a3,a4
    e6c8:	fff90613          	addi	a2,s2,-1
    e6cc:	00064a63          	bltz	a2,e6e0 <tcp_receive+0x12c>
    e6d0:	00e787b3          	add	a5,a5,a4
    e6d4:	40f687b3          	sub	a5,a3,a5
    e6d8:	00178793          	addi	a5,a5,1
    e6dc:	40f05663          	blez	a5,eae8 <tcp_receive+0x534>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
    e6e0:	40d70733          	sub	a4,a4,a3
    e6e4:	4e074463          	bltz	a4,ebcc <tcp_receive+0x618>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
    e6e8:	9201a583          	lw	a1,-1760(gp) # 1faf0 <seqno>
    e6ec:	02842703          	lw	a4,40(s0)
    e6f0:	40e587b3          	sub	a5,a1,a4
    e6f4:	0007cc63          	bltz	a5,e70c <tcp_receive+0x158>
    e6f8:	02c45783          	lhu	a5,44(s0)
    e6fc:	00f707b3          	add	a5,a4,a5
    e700:	40f587b3          	sub	a5,a1,a5
    e704:	00178793          	addi	a5,a5,1
    e708:	4cf05a63          	blez	a5,ebdc <tcp_receive+0x628>
      tcp_send_empty_ack(pcb);
    e70c:	00040513          	mv	a0,s0
    e710:	c7cfa0ef          	jal	ra,8b8c <tcp_send_empty_ack>
    e714:	6ad0006f          	j	f5c0 <tcp_receive+0x100c>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
    e718:	0001e537          	lui	a0,0x1e
    e71c:	d4c50513          	addi	a0,a0,-692 # 1dd4c <altcp_tcp_functions+0x614>
    e720:	e64ff0ef          	jal	ra,dd84 <bsp_printf>
    e724:	eb1ff06f          	j	e5d4 <tcp_receive+0x20>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
    e728:	0001e537          	lui	a0,0x1e
    e72c:	d6850513          	addi	a0,a0,-664 # 1dd68 <altcp_tcp_functions+0x630>
    e730:	e54ff0ef          	jal	ra,dd84 <bsp_printf>
    e734:	eadff06f          	j	e5e0 <tcp_receive+0x2c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
    e738:	91c1a683          	lw	a3,-1764(gp) # 1faec <ackno>
    e73c:	40d786b3          	sub	a3,a5,a3
    e740:	ec06d6e3          	bgez	a3,e60c <tcp_receive+0x58>
    e744:	ee9ff06f          	j	e62c <tcp_receive+0x78>
      if (tcplen == 0) {
    e748:	9161d783          	lhu	a5,-1770(gp) # 1fae6 <tcplen>
    e74c:	00079a63          	bnez	a5,e760 <tcp_receive+0x1ac>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
    e750:	05c42783          	lw	a5,92(s0)
    e754:	06445603          	lhu	a2,100(s0)
    e758:	00c787b3          	add	a5,a5,a2
    e75c:	00a78663          	beq	a5,a0,e768 <tcp_receive+0x1b4>
        pcb->dupacks = 0;
    e760:	040403a3          	sb	zero,71(s0)
    e764:	f25ff06f          	j	e688 <tcp_receive+0xd4>
          if (pcb->rtime >= 0) {
    e768:	03441783          	lh	a5,52(s0)
    e76c:	fe07cae3          	bltz	a5,e760 <tcp_receive+0x1ac>
            if (pcb->lastack == ackno) {
    e770:	fed718e3          	bne	a4,a3,e760 <tcp_receive+0x1ac>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
    e774:	04744783          	lbu	a5,71(s0)
    e778:	0ff00713          	li	a4,255
    e77c:	00e78663          	beq	a5,a4,e788 <tcp_receive+0x1d4>
                ++pcb->dupacks;
    e780:	00178793          	addi	a5,a5,1
    e784:	04f403a3          	sb	a5,71(s0)
              if (pcb->dupacks > 3) {
    e788:	04744783          	lbu	a5,71(s0)
    e78c:	00300713          	li	a4,3
    e790:	02f77063          	bgeu	a4,a5,e7b0 <tcp_receive+0x1fc>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
    e794:	04c45683          	lhu	a3,76(s0)
    e798:	03645703          	lhu	a4,54(s0)
    e79c:	00e68733          	add	a4,a3,a4
    e7a0:	01071713          	slli	a4,a4,0x10
    e7a4:	01075713          	srli	a4,a4,0x10
    e7a8:	00d76e63          	bltu	a4,a3,e7c4 <tcp_receive+0x210>
    e7ac:	04e41623          	sh	a4,76(s0)
              if (pcb->dupacks >= 3) {
    e7b0:	00200713          	li	a4,2
    e7b4:	ecf77ae3          	bgeu	a4,a5,e688 <tcp_receive+0xd4>
                tcp_rexmit_fast(pcb);
    e7b8:	00040513          	mv	a0,s0
    e7bc:	a30fa0ef          	jal	ra,89ec <tcp_rexmit_fast>
      if (!found_dupack) {
    e7c0:	ec9ff06f          	j	e688 <tcp_receive+0xd4>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
    e7c4:	fff00713          	li	a4,-1
    e7c8:	04e41623          	sh	a4,76(s0)
    e7cc:	fe5ff06f          	j	e7b0 <tcp_receive+0x1fc>
      if (pcb->flags & TF_INFR) {
    e7d0:	01e45783          	lhu	a5,30(s0)
    e7d4:	0047f613          	andi	a2,a5,4
    e7d8:	00060c63          	beqz	a2,e7f0 <tcp_receive+0x23c>
        tcp_clear_flags(pcb, TF_INFR);
    e7dc:	ffb7f793          	andi	a5,a5,-5
    e7e0:	00f41f23          	sh	a5,30(s0)
        pcb->cwnd = pcb->ssthresh;
    e7e4:	04e45783          	lhu	a5,78(s0)
    e7e8:	04f41623          	sh	a5,76(s0)
        pcb->bytes_acked = 0;
    e7ec:	06041723          	sh	zero,110(s0)
      pcb->nrtx = 0;
    e7f0:	04040323          	sb	zero,70(s0)
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
    e7f4:	04041603          	lh	a2,64(s0)
    e7f8:	04245783          	lhu	a5,66(s0)
    e7fc:	40365613          	srai	a2,a2,0x3
    e800:	00c787b3          	add	a5,a5,a2
    e804:	04f41223          	sh	a5,68(s0)
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
    e808:	01071793          	slli	a5,a4,0x10
    e80c:	0107d793          	srli	a5,a5,0x10
    e810:	01069693          	slli	a3,a3,0x10
    e814:	0106d693          	srli	a3,a3,0x10
    e818:	40d786b3          	sub	a3,a5,a3
    e81c:	01069693          	slli	a3,a3,0x10
    e820:	0106d693          	srli	a3,a3,0x10
      pcb->dupacks = 0;
    e824:	040403a3          	sb	zero,71(s0)
      pcb->lastack = ackno;
    e828:	04e42423          	sw	a4,72(s0)
      if (pcb->state >= ESTABLISHED) {
    e82c:	01442703          	lw	a4,20(s0)
    e830:	00300793          	li	a5,3
    e834:	06e7f063          	bgeu	a5,a4,e894 <tcp_receive+0x2e0>
        if (pcb->cwnd < pcb->ssthresh) {
    e838:	04c45703          	lhu	a4,76(s0)
    e83c:	04e45783          	lhu	a5,78(s0)
    e840:	12f77863          	bgeu	a4,a5,e970 <tcp_receive+0x3bc>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
    e844:	01e45783          	lhu	a5,30(s0)
    e848:	00001637          	lui	a2,0x1
    e84c:	80060613          	addi	a2,a2,-2048 # 800 <regnum_t6+0x7e1>
    e850:	00c7f7b3          	and	a5,a5,a2
    e854:	10078463          	beqz	a5,e95c <tcp_receive+0x3a8>
    e858:	00100793          	li	a5,1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
    e85c:	03645603          	lhu	a2,54(s0)
    e860:	02f60633          	mul	a2,a2,a5
    e864:	01061613          	slli	a2,a2,0x10
    e868:	01065613          	srli	a2,a2,0x10
    e86c:	00060793          	mv	a5,a2
    e870:	00c6f463          	bgeu	a3,a2,e878 <tcp_receive+0x2c4>
    e874:	00068793          	mv	a5,a3
    e878:	01079793          	slli	a5,a5,0x10
    e87c:	0107d793          	srli	a5,a5,0x10
          TCP_WND_INC(pcb->cwnd, increase);
    e880:	00f707b3          	add	a5,a4,a5
    e884:	01079793          	slli	a5,a5,0x10
    e888:	0107d793          	srli	a5,a5,0x10
    e88c:	0ce7ec63          	bltu	a5,a4,e964 <tcp_receive+0x3b0>
    e890:	04f41623          	sh	a5,76(s0)
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
    e894:	07042683          	lw	a3,112(s0)
    e898:	0001e637          	lui	a2,0x1e
    e89c:	d8460613          	addi	a2,a2,-636 # 1dd84 <altcp_tcp_functions+0x64c>
    e8a0:	07442583          	lw	a1,116(s0)
    e8a4:	00040513          	mv	a0,s0
    e8a8:	a45ff0ef          	jal	ra,e2ec <tcp_free_acked_segments>
    e8ac:	00050693          	mv	a3,a0
    e8b0:	06a42a23          	sw	a0,116(s0)
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
    e8b4:	0001e637          	lui	a2,0x1e
    e8b8:	d8c60613          	addi	a2,a2,-628 # 1dd8c <altcp_tcp_functions+0x654>
    e8bc:	07042583          	lw	a1,112(s0)
    e8c0:	00040513          	mv	a0,s0
    e8c4:	a29ff0ef          	jal	ra,e2ec <tcp_free_acked_segments>
    e8c8:	06a42823          	sw	a0,112(s0)
      if (pcb->unacked == NULL) {
    e8cc:	07442683          	lw	a3,116(s0)
    e8d0:	0e068e63          	beqz	a3,e9cc <tcp_receive+0x418>
        pcb->rtime = 0;
    e8d4:	02041a23          	sh	zero,52(s0)
      pcb->polltmr = 0;
    e8d8:	02040023          	sb	zero,32(s0)
      if (pcb->unsent == NULL) {
    e8dc:	0e050e63          	beqz	a0,e9d8 <tcp_receive+0x424>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
    e8e0:	06845783          	lhu	a5,104(s0)
    e8e4:	9181d703          	lhu	a4,-1768(gp) # 1fae8 <recv_acked>
    e8e8:	00e787b3          	add	a5,a5,a4
    e8ec:	06f41423          	sh	a5,104(s0)
      if (pcb->flags & TF_RTO) {
    e8f0:	01e45783          	lhu	a5,30(s0)
    e8f4:	00001737          	lui	a4,0x1
    e8f8:	80070713          	addi	a4,a4,-2048 # 800 <regnum_t6+0x7e1>
    e8fc:	00e7f7b3          	and	a5,a5,a4
    e900:	d80784e3          	beqz	a5,e688 <tcp_receive+0xd4>
        if (pcb->unacked == NULL) {
    e904:	0c068e63          	beqz	a3,e9e0 <tcp_receive+0x42c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
    e908:	05042483          	lw	s1,80(s0)
    e90c:	00c6a703          	lw	a4,12(a3)
    e910:	00474503          	lbu	a0,4(a4)
    e914:	00574783          	lbu	a5,5(a4)
    e918:	00879793          	slli	a5,a5,0x8
    e91c:	00a7e533          	or	a0,a5,a0
    e920:	00674783          	lbu	a5,6(a4)
    e924:	01079793          	slli	a5,a5,0x10
    e928:	00a7e7b3          	or	a5,a5,a0
    e92c:	00774503          	lbu	a0,7(a4)
    e930:	01851513          	slli	a0,a0,0x18
    e934:	00f56533          	or	a0,a0,a5
    e938:	b59fb0ef          	jal	ra,a490 <lwip_htonl>
    e93c:	40a48533          	sub	a0,s1,a0
    e940:	d4a044e3          	bgtz	a0,e688 <tcp_receive+0xd4>
          tcp_clear_flags(pcb, TF_RTO);
    e944:	01e45783          	lhu	a5,30(s0)
    e948:	fffff737          	lui	a4,0xfffff
    e94c:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__freertos_irq_stack_top+0xfffda8cf>
    e950:	00e7f7b3          	and	a5,a5,a4
    e954:	00f41f23          	sh	a5,30(s0)
    e958:	d31ff06f          	j	e688 <tcp_receive+0xd4>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
    e95c:	00200793          	li	a5,2
    e960:	efdff06f          	j	e85c <tcp_receive+0x2a8>
          TCP_WND_INC(pcb->cwnd, increase);
    e964:	fff00793          	li	a5,-1
    e968:	04f41623          	sh	a5,76(s0)
    e96c:	f29ff06f          	j	e894 <tcp_receive+0x2e0>
          TCP_WND_INC(pcb->bytes_acked, acked);
    e970:	06e45783          	lhu	a5,110(s0)
    e974:	00d786b3          	add	a3,a5,a3
    e978:	01069693          	slli	a3,a3,0x10
    e97c:	0106d693          	srli	a3,a3,0x10
    e980:	02f6ea63          	bltu	a3,a5,e9b4 <tcp_receive+0x400>
    e984:	06d41723          	sh	a3,110(s0)
          if (pcb->bytes_acked >= pcb->cwnd) {
    e988:	06e45783          	lhu	a5,110(s0)
    e98c:	f0e7e4e3          	bltu	a5,a4,e894 <tcp_receive+0x2e0>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
    e990:	40e787b3          	sub	a5,a5,a4
    e994:	06f41723          	sh	a5,110(s0)
            TCP_WND_INC(pcb->cwnd, pcb->mss);
    e998:	03645783          	lhu	a5,54(s0)
    e99c:	00f707b3          	add	a5,a4,a5
    e9a0:	01079793          	slli	a5,a5,0x10
    e9a4:	0107d793          	srli	a5,a5,0x10
    e9a8:	00e7ec63          	bltu	a5,a4,e9c0 <tcp_receive+0x40c>
    e9ac:	04f41623          	sh	a5,76(s0)
    e9b0:	ee5ff06f          	j	e894 <tcp_receive+0x2e0>
          TCP_WND_INC(pcb->bytes_acked, acked);
    e9b4:	fff00793          	li	a5,-1
    e9b8:	06f41723          	sh	a5,110(s0)
    e9bc:	fcdff06f          	j	e988 <tcp_receive+0x3d4>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
    e9c0:	fff00793          	li	a5,-1
    e9c4:	04f41623          	sh	a5,76(s0)
    e9c8:	ecdff06f          	j	e894 <tcp_receive+0x2e0>
        pcb->rtime = -1;
    e9cc:	fff00793          	li	a5,-1
    e9d0:	02f41a23          	sh	a5,52(s0)
    e9d4:	f05ff06f          	j	e8d8 <tcp_receive+0x324>
        pcb->unsent_oversize = 0;
    e9d8:	06041623          	sh	zero,108(s0)
    e9dc:	f05ff06f          	j	e8e0 <tcp_receive+0x32c>
          if ((pcb->unsent == NULL) ||
    e9e0:	04050063          	beqz	a0,ea20 <tcp_receive+0x46c>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
    e9e4:	05042483          	lw	s1,80(s0)
    e9e8:	00c52683          	lw	a3,12(a0)
    e9ec:	0046c703          	lbu	a4,4(a3)
    e9f0:	0056c783          	lbu	a5,5(a3)
    e9f4:	00879793          	slli	a5,a5,0x8
    e9f8:	00e7e733          	or	a4,a5,a4
    e9fc:	0066c783          	lbu	a5,6(a3)
    ea00:	01079793          	slli	a5,a5,0x10
    ea04:	00e7e7b3          	or	a5,a5,a4
    ea08:	0076c503          	lbu	a0,7(a3)
    ea0c:	01851513          	slli	a0,a0,0x18
    ea10:	00f56533          	or	a0,a0,a5
    ea14:	a7dfb0ef          	jal	ra,a490 <lwip_htonl>
    ea18:	40a48533          	sub	a0,s1,a0
          if ((pcb->unsent == NULL) ||
    ea1c:	c6a046e3          	bgtz	a0,e688 <tcp_receive+0xd4>
            tcp_clear_flags(pcb, TF_RTO);
    ea20:	01e45783          	lhu	a5,30(s0)
    ea24:	fffff737          	lui	a4,0xfffff
    ea28:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__freertos_irq_stack_top+0xfffda8cf>
    ea2c:	00e7f7b3          	and	a5,a5,a4
    ea30:	00f41f23          	sh	a5,30(s0)
    ea34:	c55ff06f          	j	e688 <tcp_receive+0xd4>
      m = (s16_t)(tcp_ticks - pcb->rttest);
    ea38:	00022737          	lui	a4,0x22
    ea3c:	f0475503          	lhu	a0,-252(a4) # 21f04 <tcp_ticks>
    ea40:	01079693          	slli	a3,a5,0x10
    ea44:	0106d693          	srli	a3,a3,0x10
    ea48:	40d507b3          	sub	a5,a0,a3
    ea4c:	01079793          	slli	a5,a5,0x10
    ea50:	0107d793          	srli	a5,a5,0x10
      m = (s16_t)(m - (pcb->sa >> 3));
    ea54:	04041583          	lh	a1,64(s0)
    ea58:	4035d613          	srai	a2,a1,0x3
    ea5c:	01061613          	slli	a2,a2,0x10
    ea60:	01065613          	srli	a2,a2,0x10
    ea64:	40c787b3          	sub	a5,a5,a2
    ea68:	01079793          	slli	a5,a5,0x10
    ea6c:	0107d793          	srli	a5,a5,0x10
    ea70:	01079713          	slli	a4,a5,0x10
    ea74:	41075713          	srai	a4,a4,0x10
      pcb->sa = (s16_t)(pcb->sa + m);
    ea78:	01059593          	slli	a1,a1,0x10
    ea7c:	0105d593          	srli	a1,a1,0x10
    ea80:	00b787b3          	add	a5,a5,a1
    ea84:	01079793          	slli	a5,a5,0x10
    ea88:	4107d793          	srai	a5,a5,0x10
    ea8c:	04f41023          	sh	a5,64(s0)
      if (m < 0) {
    ea90:	04074263          	bltz	a4,ead4 <tcp_receive+0x520>
      m = (s16_t)(m - (pcb->sv >> 2));
    ea94:	04241683          	lh	a3,66(s0)
    ea98:	4026d613          	srai	a2,a3,0x2
    ea9c:	40c70733          	sub	a4,a4,a2
    eaa0:	01071713          	slli	a4,a4,0x10
    eaa4:	01075713          	srli	a4,a4,0x10
      pcb->sv = (s16_t)(pcb->sv + m);
    eaa8:	01069693          	slli	a3,a3,0x10
    eaac:	0106d693          	srli	a3,a3,0x10
    eab0:	00d70733          	add	a4,a4,a3
    eab4:	01071713          	slli	a4,a4,0x10
    eab8:	01075713          	srli	a4,a4,0x10
    eabc:	04e41123          	sh	a4,66(s0)
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
    eac0:	4037d793          	srai	a5,a5,0x3
    eac4:	00f707b3          	add	a5,a4,a5
    eac8:	04f41223          	sh	a5,68(s0)
      pcb->rttest = 0;
    eacc:	02042c23          	sw	zero,56(s0)
    ead0:	bd1ff06f          	j	e6a0 <tcp_receive+0xec>
        m = (s16_t) - m;
    ead4:	40a686b3          	sub	a3,a3,a0
    ead8:	00d606b3          	add	a3,a2,a3
    eadc:	01069713          	slli	a4,a3,0x10
    eae0:	41075713          	srai	a4,a4,0x10
    eae4:	fb1ff06f          	j	ea94 <tcp_receive+0x4e0>
      struct pbuf *p = inseg.p;
    eae8:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    eaec:	0047a483          	lw	s1,4(a5)
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
    eaf0:	06048863          	beqz	s1,eb60 <tcp_receive+0x5ac>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
    eaf4:	000107b7          	lui	a5,0x10
    eaf8:	ffe78793          	addi	a5,a5,-2 # fffe <tcp_input+0x182>
    eafc:	0727ea63          	bltu	a5,s2,eb70 <tcp_receive+0x5bc>
      off = (u16_t)off32;
    eb00:	01091913          	slli	s2,s2,0x10
    eb04:	01095913          	srli	s2,s2,0x10
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
    eb08:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    eb0c:	0047a783          	lw	a5,4(a5)
    eb10:	0087d783          	lhu	a5,8(a5)
    eb14:	0727e663          	bltu	a5,s2,eb80 <tcp_receive+0x5cc>
      inseg.len -= off;
    eb18:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    eb1c:	0087d703          	lhu	a4,8(a5)
    eb20:	41270733          	sub	a4,a4,s2
    eb24:	00e79423          	sh	a4,8(a5)
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
    eb28:	0047a783          	lw	a5,4(a5)
    eb2c:	0087d783          	lhu	a5,8(a5)
    eb30:	412787b3          	sub	a5,a5,s2
    eb34:	01079793          	slli	a5,a5,0x10
    eb38:	0107d793          	srli	a5,a5,0x10
      while (p->len < off) {
    eb3c:	00a4d583          	lhu	a1,10(s1)
    eb40:	0525f863          	bgeu	a1,s2,eb90 <tcp_receive+0x5dc>
        off -= p->len;
    eb44:	40b905b3          	sub	a1,s2,a1
    eb48:	01059913          	slli	s2,a1,0x10
    eb4c:	01095913          	srli	s2,s2,0x10
        p->tot_len = new_tot_len;
    eb50:	00f49423          	sh	a5,8(s1)
        p->len = 0;
    eb54:	00049523          	sh	zero,10(s1)
        p = p->next;
    eb58:	0004a483          	lw	s1,0(s1)
    eb5c:	fe1ff06f          	j	eb3c <tcp_receive+0x588>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
    eb60:	0001e537          	lui	a0,0x1e
    eb64:	d9450513          	addi	a0,a0,-620 # 1dd94 <altcp_tcp_functions+0x65c>
    eb68:	a1cff0ef          	jal	ra,dd84 <bsp_printf>
    eb6c:	f89ff06f          	j	eaf4 <tcp_receive+0x540>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
    eb70:	0001e537          	lui	a0,0x1e
    eb74:	da450513          	addi	a0,a0,-604 # 1dda4 <altcp_tcp_functions+0x66c>
    eb78:	a0cff0ef          	jal	ra,dd84 <bsp_printf>
    eb7c:	f85ff06f          	j	eb00 <tcp_receive+0x54c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
    eb80:	0001e537          	lui	a0,0x1e
    eb84:	db450513          	addi	a0,a0,-588 # 1ddb4 <altcp_tcp_functions+0x67c>
    eb88:	9fcff0ef          	jal	ra,dd84 <bsp_printf>
    eb8c:	f8dff06f          	j	eb18 <tcp_receive+0x564>
      pbuf_remove_header(p, off);
    eb90:	00090593          	mv	a1,s2
    eb94:	00048513          	mv	a0,s1
    eb98:	eb5fd0ef          	jal	ra,ca4c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    eb9c:	02842783          	lw	a5,40(s0)
    eba0:	92f1a023          	sw	a5,-1760(gp) # 1faf0 <seqno>
    eba4:	a1818713          	addi	a4,gp,-1512 # 1fbe8 <inseg>
    eba8:	00c72703          	lw	a4,12(a4)
    ebac:	00f70223          	sb	a5,4(a4)
    ebb0:	0087d693          	srli	a3,a5,0x8
    ebb4:	00d702a3          	sb	a3,5(a4)
    ebb8:	0107d693          	srli	a3,a5,0x10
    ebbc:	00d70323          	sb	a3,6(a4)
    ebc0:	0187d793          	srli	a5,a5,0x18
    ebc4:	00f703a3          	sb	a5,7(a4)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
    ebc8:	b21ff06f          	j	e6e8 <tcp_receive+0x134>
        tcp_ack_now(pcb);
    ebcc:	01e45783          	lhu	a5,30(s0)
    ebd0:	0027e793          	ori	a5,a5,2
    ebd4:	00f41f23          	sh	a5,30(s0)
    ebd8:	b11ff06f          	j	e6e8 <tcp_receive+0x134>
      if (pcb->rcv_nxt == seqno) {
    ebdc:	00e58a63          	beq	a1,a4,ebf0 <tcp_receive+0x63c>
        if (pcb->ooseq == NULL) {
    ebe0:	07842483          	lw	s1,120(s0)
    ebe4:	64048463          	beqz	s1,f22c <tcp_receive+0xc78>
          struct tcp_seg *next, *prev = NULL;
    ebe8:	00000913          	li	s2,0
    ebec:	6ac0006f          	j	f298 <tcp_receive+0xce4>
        tcplen = TCP_TCPLEN(&inseg);
    ebf0:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    ebf4:	0087d483          	lhu	s1,8(a5)
    ebf8:	00c7a783          	lw	a5,12(a5)
    ebfc:	00c7c503          	lbu	a0,12(a5)
    ec00:	00d7c783          	lbu	a5,13(a5)
    ec04:	00879793          	slli	a5,a5,0x8
    ec08:	00a7e533          	or	a0,a5,a0
    ec0c:	86dfb0ef          	jal	ra,a478 <lwip_htons>
    ec10:	00357513          	andi	a0,a0,3
    ec14:	04050a63          	beqz	a0,ec68 <tcp_receive+0x6b4>
    ec18:	00100793          	li	a5,1
    ec1c:	00f487b3          	add	a5,s1,a5
    ec20:	01079793          	slli	a5,a5,0x10
    ec24:	0107d793          	srli	a5,a5,0x10
    ec28:	90f19b23          	sh	a5,-1770(gp) # 1fae6 <tcplen>
        if (tcplen > pcb->rcv_wnd) {
    ec2c:	02c45703          	lhu	a4,44(s0)
    ec30:	04f76063          	bltu	a4,a5,ec70 <tcp_receive+0x6bc>
        if (pcb->ooseq != NULL) {
    ec34:	07842783          	lw	a5,120(s0)
    ec38:	18078263          	beqz	a5,edbc <tcp_receive+0x808>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    ec3c:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    ec40:	00c7a783          	lw	a5,12(a5)
    ec44:	00c7c503          	lbu	a0,12(a5)
    ec48:	00d7c783          	lbu	a5,13(a5)
    ec4c:	00879793          	slli	a5,a5,0x8
    ec50:	00a7e533          	or	a0,a5,a0
    ec54:	825fb0ef          	jal	ra,a478 <lwip_htons>
    ec58:	00157513          	andi	a0,a0,1
    ec5c:	14051c63          	bnez	a0,edb4 <tcp_receive+0x800>
            struct tcp_seg *next = pcb->ooseq;
    ec60:	07842483          	lw	s1,120(s0)
            while (next &&
    ec64:	1f40006f          	j	ee58 <tcp_receive+0x8a4>
        tcplen = TCP_TCPLEN(&inseg);
    ec68:	00000793          	li	a5,0
    ec6c:	fb1ff06f          	j	ec1c <tcp_receive+0x668>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    ec70:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    ec74:	00c7a783          	lw	a5,12(a5)
    ec78:	00c7c503          	lbu	a0,12(a5)
    ec7c:	00d7c783          	lbu	a5,13(a5)
    ec80:	00879793          	slli	a5,a5,0x8
    ec84:	00a7e533          	or	a0,a5,a0
    ec88:	ff0fb0ef          	jal	ra,a478 <lwip_htons>
    ec8c:	00157513          	andi	a0,a0,1
    ec90:	0a051863          	bnez	a0,ed40 <tcp_receive+0x78c>
          inseg.len = (u16_t)pcb->rcv_wnd;
    ec94:	02c45703          	lhu	a4,44(s0)
    ec98:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    ec9c:	00e79423          	sh	a4,8(a5)
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
    eca0:	00c7a783          	lw	a5,12(a5)
    eca4:	00c7c503          	lbu	a0,12(a5)
    eca8:	00d7c783          	lbu	a5,13(a5)
    ecac:	00879793          	slli	a5,a5,0x8
    ecb0:	00a7e533          	or	a0,a5,a0
    ecb4:	fc4fb0ef          	jal	ra,a478 <lwip_htons>
    ecb8:	00257513          	andi	a0,a0,2
    ecbc:	00050a63          	beqz	a0,ecd0 <tcp_receive+0x71c>
            inseg.len -= 1;
    ecc0:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    ecc4:	0087d703          	lhu	a4,8(a5)
    ecc8:	fff70713          	addi	a4,a4,-1
    eccc:	00e79423          	sh	a4,8(a5)
          pbuf_realloc(inseg.p, inseg.len);
    ecd0:	a1818913          	addi	s2,gp,-1512 # 1fbe8 <inseg>
    ecd4:	00895583          	lhu	a1,8(s2)
    ecd8:	00492503          	lw	a0,4(s2)
    ecdc:	9e8fe0ef          	jal	ra,cec4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
    ece0:	00895483          	lhu	s1,8(s2)
    ece4:	00c92783          	lw	a5,12(s2)
    ece8:	00c7c503          	lbu	a0,12(a5)
    ecec:	00d7c783          	lbu	a5,13(a5)
    ecf0:	00879793          	slli	a5,a5,0x8
    ecf4:	00a7e533          	or	a0,a5,a0
    ecf8:	f80fb0ef          	jal	ra,a478 <lwip_htons>
    ecfc:	00357513          	andi	a0,a0,3
    ed00:	0a050063          	beqz	a0,eda0 <tcp_receive+0x7ec>
    ed04:	00100793          	li	a5,1
    ed08:	00f487b3          	add	a5,s1,a5
    ed0c:	01079793          	slli	a5,a5,0x10
    ed10:	0107d793          	srli	a5,a5,0x10
    ed14:	90f19b23          	sh	a5,-1770(gp) # 1fae6 <tcplen>
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
    ed18:	9201a703          	lw	a4,-1760(gp) # 1faf0 <seqno>
    ed1c:	00e787b3          	add	a5,a5,a4
    ed20:	02842703          	lw	a4,40(s0)
    ed24:	02c45683          	lhu	a3,44(s0)
    ed28:	00d70733          	add	a4,a4,a3
    ed2c:	f0e784e3          	beq	a5,a4,ec34 <tcp_receive+0x680>
    ed30:	0001e537          	lui	a0,0x1e
    ed34:	dc450513          	addi	a0,a0,-572 # 1ddc4 <altcp_tcp_functions+0x68c>
    ed38:	84cff0ef          	jal	ra,dd84 <bsp_printf>
    ed3c:	ef9ff06f          	j	ec34 <tcp_receive+0x680>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
    ed40:	a1818913          	addi	s2,gp,-1512 # 1fbe8 <inseg>
    ed44:	00c92783          	lw	a5,12(s2)
    ed48:	00c7c703          	lbu	a4,12(a5)
    ed4c:	00d7c503          	lbu	a0,13(a5)
    ed50:	00851513          	slli	a0,a0,0x8
    ed54:	00e56533          	or	a0,a0,a4
    ed58:	01051493          	slli	s1,a0,0x10
    ed5c:	4104d493          	srai	s1,s1,0x10
    ed60:	ffffc7b7          	lui	a5,0xffffc
    ed64:	0ff78793          	addi	a5,a5,255 # ffffc0ff <__freertos_irq_stack_top+0xfffd71cf>
    ed68:	00f4f4b3          	and	s1,s1,a5
    ed6c:	f0cfb0ef          	jal	ra,a478 <lwip_htons>
    ed70:	03e57513          	andi	a0,a0,62
    ed74:	f04fb0ef          	jal	ra,a478 <lwip_htons>
    ed78:	01051793          	slli	a5,a0,0x10
    ed7c:	4107d793          	srai	a5,a5,0x10
    ed80:	00c92703          	lw	a4,12(s2)
    ed84:	00f4e7b3          	or	a5,s1,a5
    ed88:	01079793          	slli	a5,a5,0x10
    ed8c:	0107d793          	srli	a5,a5,0x10
    ed90:	00f70623          	sb	a5,12(a4)
    ed94:	0087d793          	srli	a5,a5,0x8
    ed98:	00f706a3          	sb	a5,13(a4)
    ed9c:	ef9ff06f          	j	ec94 <tcp_receive+0x6e0>
          tcplen = TCP_TCPLEN(&inseg);
    eda0:	00000793          	li	a5,0
    eda4:	f65ff06f          	j	ed08 <tcp_receive+0x754>
              pcb->ooseq = pcb->ooseq->next;
    eda8:	00052783          	lw	a5,0(a0)
    edac:	06f42c23          	sw	a5,120(s0)
              tcp_seg_free(old_ooseq);
    edb0:	065030ef          	jal	ra,12614 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
    edb4:	07842503          	lw	a0,120(s0)
    edb8:	fe0518e3          	bnez	a0,eda8 <tcp_receive+0x7f4>
        pcb->rcv_nxt = seqno + tcplen;
    edbc:	9161d703          	lhu	a4,-1770(gp) # 1fae6 <tcplen>
    edc0:	9201a783          	lw	a5,-1760(gp) # 1faf0 <seqno>
    edc4:	00f707b3          	add	a5,a4,a5
    edc8:	02f42423          	sw	a5,40(s0)
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
    edcc:	02c45783          	lhu	a5,44(s0)
    edd0:	28e7ee63          	bltu	a5,a4,f06c <tcp_receive+0xab8>
        pcb->rcv_wnd -= tcplen;
    edd4:	02c45783          	lhu	a5,44(s0)
    edd8:	9161d703          	lhu	a4,-1770(gp) # 1fae6 <tcplen>
    eddc:	40e787b3          	sub	a5,a5,a4
    ede0:	02f41623          	sh	a5,44(s0)
        tcp_update_rcv_ann_wnd(pcb);
    ede4:	00040513          	mv	a0,s0
    ede8:	678030ef          	jal	ra,12460 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
    edec:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    edf0:	0047a783          	lw	a5,4(a5)
    edf4:	0087d703          	lhu	a4,8(a5)
    edf8:	00070863          	beqz	a4,ee08 <tcp_receive+0x854>
          recv_data = inseg.p;
    edfc:	90f1a823          	sw	a5,-1776(gp) # 1fae0 <recv_data>
          inseg.p = NULL;
    ee00:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    ee04:	0007a223          	sw	zero,4(a5)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    ee08:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    ee0c:	00c7a783          	lw	a5,12(a5)
    ee10:	00c7c503          	lbu	a0,12(a5)
    ee14:	00d7c783          	lbu	a5,13(a5)
    ee18:	00879793          	slli	a5,a5,0x8
    ee1c:	00a7e533          	or	a0,a5,a0
    ee20:	e58fb0ef          	jal	ra,a478 <lwip_htons>
    ee24:	00157513          	andi	a0,a0,1
    ee28:	2c050663          	beqz	a0,f0f4 <tcp_receive+0xb40>
          recv_flags |= TF_GOT_FIN;
    ee2c:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
    ee30:	0207e793          	ori	a5,a5,32
    ee34:	90f18a23          	sb	a5,-1772(gp) # 1fae4 <recv_flags>
    ee38:	2bc0006f          	j	f0f4 <tcp_receive+0xb40>
                tcplen = TCP_TCPLEN(&inseg);
    ee3c:	00000793          	li	a5,0
    ee40:	00f90933          	add	s2,s2,a5
    ee44:	91219b23          	sh	s2,-1770(gp) # 1fae6 <tcplen>
              next = next->next;
    ee48:	0004a903          	lw	s2,0(s1)
              tcp_seg_free(tmp);
    ee4c:	00048513          	mv	a0,s1
    ee50:	7c4030ef          	jal	ra,12614 <tcp_seg_free>
              next = next->next;
    ee54:	00090493          	mv	s1,s2
            while (next &&
    ee58:	0e048a63          	beqz	s1,ef4c <tcp_receive+0x998>
                   TCP_SEQ_GEQ(seqno + tcplen,
    ee5c:	9161d783          	lhu	a5,-1770(gp) # 1fae6 <tcplen>
    ee60:	9201a683          	lw	a3,-1760(gp) # 1faf0 <seqno>
    ee64:	00d786b3          	add	a3,a5,a3
    ee68:	00c4a703          	lw	a4,12(s1)
    ee6c:	00474783          	lbu	a5,4(a4)
    ee70:	00574603          	lbu	a2,5(a4)
    ee74:	00861613          	slli	a2,a2,0x8
    ee78:	00f66633          	or	a2,a2,a5
    ee7c:	00674783          	lbu	a5,6(a4)
    ee80:	01079793          	slli	a5,a5,0x10
    ee84:	00c7e633          	or	a2,a5,a2
    ee88:	00774783          	lbu	a5,7(a4)
    ee8c:	01879793          	slli	a5,a5,0x18
    ee90:	00c7e7b3          	or	a5,a5,a2
    ee94:	0084d603          	lhu	a2,8(s1)
    ee98:	00c787b3          	add	a5,a5,a2
    ee9c:	40f687b3          	sub	a5,a3,a5
            while (next &&
    eea0:	0a07c663          	bltz	a5,ef4c <tcp_receive+0x998>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
    eea4:	00c74503          	lbu	a0,12(a4)
    eea8:	00d74783          	lbu	a5,13(a4)
    eeac:	00879793          	slli	a5,a5,0x8
    eeb0:	00a7e533          	or	a0,a5,a0
    eeb4:	dc4fb0ef          	jal	ra,a478 <lwip_htons>
    eeb8:	00157513          	andi	a0,a0,1
    eebc:	f80506e3          	beqz	a0,ee48 <tcp_receive+0x894>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
    eec0:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    eec4:	00c7a783          	lw	a5,12(a5)
    eec8:	00c7c503          	lbu	a0,12(a5)
    eecc:	00d7c783          	lbu	a5,13(a5)
    eed0:	00879793          	slli	a5,a5,0x8
    eed4:	00a7e533          	or	a0,a5,a0
    eed8:	da0fb0ef          	jal	ra,a478 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
    eedc:	00257513          	andi	a0,a0,2
    eee0:	f60514e3          	bnez	a0,ee48 <tcp_receive+0x894>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
    eee4:	a1818993          	addi	s3,gp,-1512 # 1fbe8 <inseg>
    eee8:	00c9a783          	lw	a5,12(s3)
    eeec:	00c7c703          	lbu	a4,12(a5)
    eef0:	00d7c903          	lbu	s2,13(a5)
    eef4:	00891913          	slli	s2,s2,0x8
    eef8:	00e96933          	or	s2,s2,a4
    eefc:	00100513          	li	a0,1
    ef00:	d78fb0ef          	jal	ra,a478 <lwip_htons>
    ef04:	00c9a703          	lw	a4,12(s3)
    ef08:	00a967b3          	or	a5,s2,a0
    ef0c:	01079793          	slli	a5,a5,0x10
    ef10:	0107d793          	srli	a5,a5,0x10
    ef14:	00f70623          	sb	a5,12(a4)
    ef18:	0087d793          	srli	a5,a5,0x8
    ef1c:	00f706a3          	sb	a5,13(a4)
                tcplen = TCP_TCPLEN(&inseg);
    ef20:	0089d903          	lhu	s2,8(s3)
    ef24:	00c9a783          	lw	a5,12(s3)
    ef28:	00c7c503          	lbu	a0,12(a5)
    ef2c:	00d7c783          	lbu	a5,13(a5)
    ef30:	00879793          	slli	a5,a5,0x8
    ef34:	00a7e533          	or	a0,a5,a0
    ef38:	d40fb0ef          	jal	ra,a478 <lwip_htons>
    ef3c:	00357513          	andi	a0,a0,3
    ef40:	ee050ee3          	beqz	a0,ee3c <tcp_receive+0x888>
    ef44:	00100793          	li	a5,1
    ef48:	ef9ff06f          	j	ee40 <tcp_receive+0x88c>
            if (next &&
    ef4c:	04048263          	beqz	s1,ef90 <tcp_receive+0x9dc>
                TCP_SEQ_GT(seqno + tcplen,
    ef50:	9201a583          	lw	a1,-1760(gp) # 1faf0 <seqno>
    ef54:	9161d703          	lhu	a4,-1770(gp) # 1fae6 <tcplen>
    ef58:	00b70733          	add	a4,a4,a1
    ef5c:	00c4a603          	lw	a2,12(s1)
    ef60:	00464783          	lbu	a5,4(a2)
    ef64:	00564683          	lbu	a3,5(a2)
    ef68:	00869693          	slli	a3,a3,0x8
    ef6c:	00f6e6b3          	or	a3,a3,a5
    ef70:	00664783          	lbu	a5,6(a2)
    ef74:	01079793          	slli	a5,a5,0x10
    ef78:	00d7e6b3          	or	a3,a5,a3
    ef7c:	00764783          	lbu	a5,7(a2)
    ef80:	01879793          	slli	a5,a5,0x18
    ef84:	00d7e7b3          	or	a5,a5,a3
    ef88:	40f70733          	sub	a4,a4,a5
            if (next &&
    ef8c:	00e04663          	bgtz	a4,ef98 <tcp_receive+0x9e4>
            pcb->ooseq = next;
    ef90:	06942c23          	sw	s1,120(s0)
    ef94:	e29ff06f          	j	edbc <tcp_receive+0x808>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
    ef98:	40b787b3          	sub	a5,a5,a1
    ef9c:	a1818713          	addi	a4,gp,-1512 # 1fbe8 <inseg>
    efa0:	00f71423          	sh	a5,8(a4)
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
    efa4:	00c72783          	lw	a5,12(a4)
    efa8:	00c7c503          	lbu	a0,12(a5)
    efac:	00d7c783          	lbu	a5,13(a5)
    efb0:	00879793          	slli	a5,a5,0x8
    efb4:	00a7e533          	or	a0,a5,a0
    efb8:	cc0fb0ef          	jal	ra,a478 <lwip_htons>
    efbc:	00257513          	andi	a0,a0,2
    efc0:	00050a63          	beqz	a0,efd4 <tcp_receive+0xa20>
                inseg.len -= 1;
    efc4:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    efc8:	0087d703          	lhu	a4,8(a5)
    efcc:	fff70713          	addi	a4,a4,-1
    efd0:	00e79423          	sh	a4,8(a5)
              pbuf_realloc(inseg.p, inseg.len);
    efd4:	a1818993          	addi	s3,gp,-1512 # 1fbe8 <inseg>
    efd8:	0089d583          	lhu	a1,8(s3)
    efdc:	0049a503          	lw	a0,4(s3)
    efe0:	ee5fd0ef          	jal	ra,cec4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
    efe4:	0089d903          	lhu	s2,8(s3)
    efe8:	00c9a783          	lw	a5,12(s3)
    efec:	00c7c503          	lbu	a0,12(a5)
    eff0:	00d7c783          	lbu	a5,13(a5)
    eff4:	00879793          	slli	a5,a5,0x8
    eff8:	00a7e533          	or	a0,a5,a0
    effc:	c7cfb0ef          	jal	ra,a478 <lwip_htons>
    f000:	00357513          	andi	a0,a0,3
    f004:	06050063          	beqz	a0,f064 <tcp_receive+0xab0>
    f008:	00100793          	li	a5,1
    f00c:	00f907b3          	add	a5,s2,a5
    f010:	01079793          	slli	a5,a5,0x10
    f014:	0107d793          	srli	a5,a5,0x10
    f018:	90f19b23          	sh	a5,-1770(gp) # 1fae6 <tcplen>
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
    f01c:	9201a703          	lw	a4,-1760(gp) # 1faf0 <seqno>
    f020:	00e787b3          	add	a5,a5,a4
    f024:	00c4a603          	lw	a2,12(s1)
    f028:	00464703          	lbu	a4,4(a2)
    f02c:	00564683          	lbu	a3,5(a2)
    f030:	00869693          	slli	a3,a3,0x8
    f034:	00e6e6b3          	or	a3,a3,a4
    f038:	00664703          	lbu	a4,6(a2)
    f03c:	01071713          	slli	a4,a4,0x10
    f040:	00d766b3          	or	a3,a4,a3
    f044:	00764703          	lbu	a4,7(a2)
    f048:	01871713          	slli	a4,a4,0x18
    f04c:	00d76733          	or	a4,a4,a3
    f050:	f4e780e3          	beq	a5,a4,ef90 <tcp_receive+0x9dc>
    f054:	0001e537          	lui	a0,0x1e
    f058:	dfc50513          	addi	a0,a0,-516 # 1ddfc <altcp_tcp_functions+0x6c4>
    f05c:	d29fe0ef          	jal	ra,dd84 <bsp_printf>
    f060:	f31ff06f          	j	ef90 <tcp_receive+0x9dc>
              tcplen = TCP_TCPLEN(&inseg);
    f064:	00000793          	li	a5,0
    f068:	fa5ff06f          	j	f00c <tcp_receive+0xa58>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
    f06c:	0001e537          	lui	a0,0x1e
    f070:	e3850513          	addi	a0,a0,-456 # 1de38 <altcp_tcp_functions+0x700>
    f074:	d11fe0ef          	jal	ra,dd84 <bsp_printf>
    f078:	d5dff06f          	j	edd4 <tcp_receive+0x820>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
    f07c:	00000793          	li	a5,0
    f080:	0d80006f          	j	f158 <tcp_receive+0xba4>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
    f084:	00000793          	li	a5,0
    f088:	10c0006f          	j	f194 <tcp_receive+0xbe0>
    f08c:	0001e537          	lui	a0,0x1e
    f090:	e5850513          	addi	a0,a0,-424 # 1de58 <altcp_tcp_functions+0x720>
    f094:	cf1fe0ef          	jal	ra,dd84 <bsp_printf>
    f098:	1040006f          	j	f19c <tcp_receive+0xbe8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
    f09c:	00000793          	li	a5,0
    f0a0:	1240006f          	j	f1c4 <tcp_receive+0xc10>
              recv_data = cseg->p;
    f0a4:	90b1a823          	sw	a1,-1776(gp) # 1fae0 <recv_data>
            cseg->p = NULL;
    f0a8:	0004a223          	sw	zero,4(s1)
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    f0ac:	00c4a783          	lw	a5,12(s1)
    f0b0:	00c7c503          	lbu	a0,12(a5)
    f0b4:	00d7c783          	lbu	a5,13(a5)
    f0b8:	00879793          	slli	a5,a5,0x8
    f0bc:	00a7e533          	or	a0,a5,a0
    f0c0:	bb8fb0ef          	jal	ra,a478 <lwip_htons>
    f0c4:	00157513          	andi	a0,a0,1
    f0c8:	00050e63          	beqz	a0,f0e4 <tcp_receive+0xb30>
            recv_flags |= TF_GOT_FIN;
    f0cc:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
    f0d0:	0207e793          	ori	a5,a5,32
    f0d4:	90f18a23          	sb	a5,-1772(gp) # 1fae4 <recv_flags>
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
    f0d8:	01442703          	lw	a4,20(s0)
    f0dc:	00400793          	li	a5,4
    f0e0:	10f70c63          	beq	a4,a5,f1f8 <tcp_receive+0xc44>
          pcb->ooseq = cseg->next;
    f0e4:	0004a783          	lw	a5,0(s1)
    f0e8:	06f42c23          	sw	a5,120(s0)
          tcp_seg_free(cseg);
    f0ec:	00048513          	mv	a0,s1
    f0f0:	524030ef          	jal	ra,12614 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
    f0f4:	07842483          	lw	s1,120(s0)
    f0f8:	10048663          	beqz	s1,f204 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
    f0fc:	00c4a703          	lw	a4,12(s1)
    f100:	00474783          	lbu	a5,4(a4)
    f104:	00574683          	lbu	a3,5(a4)
    f108:	00869693          	slli	a3,a3,0x8
    f10c:	00f6e6b3          	or	a3,a3,a5
    f110:	00674783          	lbu	a5,6(a4)
    f114:	01079793          	slli	a5,a5,0x10
    f118:	00d7e6b3          	or	a3,a5,a3
    f11c:	00774783          	lbu	a5,7(a4)
    f120:	01879793          	slli	a5,a5,0x18
    f124:	00d7e7b3          	or	a5,a5,a3
    f128:	02842683          	lw	a3,40(s0)
        while (pcb->ooseq != NULL &&
    f12c:	0cd79c63          	bne	a5,a3,f204 <tcp_receive+0xc50>
          seqno = pcb->ooseq->tcphdr->seqno;
    f130:	92f1a023          	sw	a5,-1760(gp) # 1faf0 <seqno>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
    f134:	0084d903          	lhu	s2,8(s1)
    f138:	00c74503          	lbu	a0,12(a4)
    f13c:	00d74783          	lbu	a5,13(a4)
    f140:	00879793          	slli	a5,a5,0x8
    f144:	00a7e533          	or	a0,a5,a0
    f148:	b30fb0ef          	jal	ra,a478 <lwip_htons>
    f14c:	00357513          	andi	a0,a0,3
    f150:	f20506e3          	beqz	a0,f07c <tcp_receive+0xac8>
    f154:	00100793          	li	a5,1
    f158:	00f90933          	add	s2,s2,a5
    f15c:	02842783          	lw	a5,40(s0)
    f160:	012787b3          	add	a5,a5,s2
    f164:	02f42423          	sw	a5,40(s0)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
    f168:	02c45983          	lhu	s3,44(s0)
    f16c:	0084d903          	lhu	s2,8(s1)
    f170:	00c4a783          	lw	a5,12(s1)
    f174:	00c7c503          	lbu	a0,12(a5)
    f178:	00d7c783          	lbu	a5,13(a5)
    f17c:	00879793          	slli	a5,a5,0x8
    f180:	00a7e533          	or	a0,a5,a0
    f184:	af4fb0ef          	jal	ra,a478 <lwip_htons>
    f188:	00357513          	andi	a0,a0,3
    f18c:	ee050ce3          	beqz	a0,f084 <tcp_receive+0xad0>
    f190:	00100793          	li	a5,1
    f194:	00f90933          	add	s2,s2,a5
    f198:	ef29eae3          	bltu	s3,s2,f08c <tcp_receive+0xad8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
    f19c:	0084d903          	lhu	s2,8(s1)
    f1a0:	00c4a783          	lw	a5,12(s1)
    f1a4:	00c7c503          	lbu	a0,12(a5)
    f1a8:	00d7c783          	lbu	a5,13(a5)
    f1ac:	00879793          	slli	a5,a5,0x8
    f1b0:	00a7e533          	or	a0,a5,a0
    f1b4:	ac4fb0ef          	jal	ra,a478 <lwip_htons>
    f1b8:	00357513          	andi	a0,a0,3
    f1bc:	ee0500e3          	beqz	a0,f09c <tcp_receive+0xae8>
    f1c0:	00100793          	li	a5,1
    f1c4:	00f90933          	add	s2,s2,a5
    f1c8:	02c45783          	lhu	a5,44(s0)
    f1cc:	412787b3          	sub	a5,a5,s2
    f1d0:	02f41623          	sh	a5,44(s0)
          tcp_update_rcv_ann_wnd(pcb);
    f1d4:	00040513          	mv	a0,s0
    f1d8:	288030ef          	jal	ra,12460 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
    f1dc:	0044a583          	lw	a1,4(s1)
    f1e0:	0085d783          	lhu	a5,8(a1)
    f1e4:	ec0784e3          	beqz	a5,f0ac <tcp_receive+0xaf8>
            if (recv_data) {
    f1e8:	9101a503          	lw	a0,-1776(gp) # 1fae0 <recv_data>
    f1ec:	ea050ce3          	beqz	a0,f0a4 <tcp_receive+0xaf0>
              pbuf_cat(recv_data, cseg->p);
    f1f0:	eadfd0ef          	jal	ra,d09c <pbuf_cat>
    f1f4:	eb5ff06f          	j	f0a8 <tcp_receive+0xaf4>
              pcb->state = CLOSE_WAIT;
    f1f8:	00700793          	li	a5,7
    f1fc:	00f42a23          	sw	a5,20(s0)
    f200:	ee5ff06f          	j	f0e4 <tcp_receive+0xb30>
        tcp_ack(pcb);
    f204:	01e45783          	lhu	a5,30(s0)
    f208:	0017f713          	andi	a4,a5,1
    f20c:	00070a63          	beqz	a4,f220 <tcp_receive+0xc6c>
    f210:	ffe7f793          	andi	a5,a5,-2
    f214:	0027e793          	ori	a5,a5,2
    f218:	00f41f23          	sh	a5,30(s0)
    f21c:	3a40006f          	j	f5c0 <tcp_receive+0x100c>
    f220:	0017e793          	ori	a5,a5,1
    f224:	00f41f23          	sh	a5,30(s0)
    f228:	3980006f          	j	f5c0 <tcp_receive+0x100c>
          pcb->ooseq = tcp_seg_copy(&inseg);
    f22c:	a1818513          	addi	a0,gp,-1512 # 1fbe8 <inseg>
    f230:	464030ef          	jal	ra,12694 <tcp_seg_copy>
    f234:	06a42c23          	sw	a0,120(s0)
    f238:	0140006f          	j	f24c <tcp_receive+0xc98>
              if (inseg.len > next->len) {
    f23c:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
    f240:	0087d703          	lhu	a4,8(a5)
    f244:	0084d783          	lhu	a5,8(s1)
    f248:	00e7e863          	bltu	a5,a4,f258 <tcp_receive+0xca4>
        tcp_send_empty_ack(pcb);
    f24c:	00040513          	mv	a0,s0
    f250:	93df90ef          	jal	ra,8b8c <tcp_send_empty_ack>
    f254:	36c0006f          	j	f5c0 <tcp_receive+0x100c>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
    f258:	a1818513          	addi	a0,gp,-1512 # 1fbe8 <inseg>
    f25c:	438030ef          	jal	ra,12694 <tcp_seg_copy>
                if (cseg != NULL) {
    f260:	fe0506e3          	beqz	a0,f24c <tcp_receive+0xc98>
                  if (prev != NULL) {
    f264:	00090a63          	beqz	s2,f278 <tcp_receive+0xcc4>
                    prev->next = cseg;
    f268:	00a92023          	sw	a0,0(s2)
                  tcp_oos_insert_segment(cseg, next);
    f26c:	00048593          	mv	a1,s1
    f270:	9b8ff0ef          	jal	ra,e428 <tcp_oos_insert_segment>
    f274:	fd9ff06f          	j	f24c <tcp_receive+0xc98>
                    pcb->ooseq = cseg;
    f278:	06a42c23          	sw	a0,120(s0)
    f27c:	ff1ff06f          	j	f26c <tcp_receive+0xcb8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
    f280:	40f58733          	sub	a4,a1,a5
    f284:	0e074a63          	bltz	a4,f378 <tcp_receive+0xdc4>
              if (next->next == NULL &&
    f288:	0004a703          	lw	a4,0(s1)
    f28c:	00048913          	mv	s2,s1
    f290:	12070063          	beqz	a4,f3b0 <tcp_receive+0xdfc>
    f294:	00070493          	mv	s1,a4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
    f298:	fa048ae3          	beqz	s1,f24c <tcp_receive+0xc98>
            if (seqno == next->tcphdr->seqno) {
    f29c:	00c4a683          	lw	a3,12(s1)
    f2a0:	0046c783          	lbu	a5,4(a3)
    f2a4:	0056c703          	lbu	a4,5(a3)
    f2a8:	00871713          	slli	a4,a4,0x8
    f2ac:	00f76733          	or	a4,a4,a5
    f2b0:	0066c783          	lbu	a5,6(a3)
    f2b4:	01079793          	slli	a5,a5,0x10
    f2b8:	00e7e733          	or	a4,a5,a4
    f2bc:	0076c783          	lbu	a5,7(a3)
    f2c0:	01879793          	slli	a5,a5,0x18
    f2c4:	00e7e7b3          	or	a5,a5,a4
    f2c8:	f6f58ae3          	beq	a1,a5,f23c <tcp_receive+0xc88>
              if (prev == NULL) {
    f2cc:	fa090ae3          	beqz	s2,f280 <tcp_receive+0xccc>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
    f2d0:	00c92503          	lw	a0,12(s2)
    f2d4:	00454703          	lbu	a4,4(a0)
    f2d8:	00554603          	lbu	a2,5(a0)
    f2dc:	00861613          	slli	a2,a2,0x8
    f2e0:	00e66633          	or	a2,a2,a4
    f2e4:	00654703          	lbu	a4,6(a0)
    f2e8:	01071713          	slli	a4,a4,0x10
    f2ec:	00c76633          	or	a2,a4,a2
    f2f0:	00754703          	lbu	a4,7(a0)
    f2f4:	01871713          	slli	a4,a4,0x18
    f2f8:	00c76733          	or	a4,a4,a2
    f2fc:	40e58733          	sub	a4,a1,a4
    f300:	fff70713          	addi	a4,a4,-1
    f304:	f80742e3          	bltz	a4,f288 <tcp_receive+0xcd4>
    f308:	40f58733          	sub	a4,a1,a5
    f30c:	00170713          	addi	a4,a4,1
    f310:	f6e04ce3          	bgtz	a4,f288 <tcp_receive+0xcd4>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
    f314:	a1818513          	addi	a0,gp,-1512 # 1fbe8 <inseg>
    f318:	37c030ef          	jal	ra,12694 <tcp_seg_copy>
    f31c:	00050993          	mv	s3,a0
                  if (cseg != NULL) {
    f320:	f20506e3          	beqz	a0,f24c <tcp_receive+0xc98>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
    f324:	00c92683          	lw	a3,12(s2)
    f328:	0046c783          	lbu	a5,4(a3)
    f32c:	0056c703          	lbu	a4,5(a3)
    f330:	00871713          	slli	a4,a4,0x8
    f334:	00f76733          	or	a4,a4,a5
    f338:	0066c783          	lbu	a5,6(a3)
    f33c:	01079793          	slli	a5,a5,0x10
    f340:	00e7e733          	or	a4,a5,a4
    f344:	0076c783          	lbu	a5,7(a3)
    f348:	01879793          	slli	a5,a5,0x18
    f34c:	00e7e7b3          	or	a5,a5,a4
    f350:	00895703          	lhu	a4,8(s2)
    f354:	00e78733          	add	a4,a5,a4
    f358:	9201a683          	lw	a3,-1760(gp) # 1faf0 <seqno>
    f35c:	40d70733          	sub	a4,a4,a3
    f360:	02e04a63          	bgtz	a4,f394 <tcp_receive+0xde0>
                    prev->next = cseg;
    f364:	01392023          	sw	s3,0(s2)
                    tcp_oos_insert_segment(cseg, next);
    f368:	00048593          	mv	a1,s1
    f36c:	00098513          	mv	a0,s3
    f370:	8b8ff0ef          	jal	ra,e428 <tcp_oos_insert_segment>
    f374:	ed9ff06f          	j	f24c <tcp_receive+0xc98>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
    f378:	a1818513          	addi	a0,gp,-1512 # 1fbe8 <inseg>
    f37c:	318030ef          	jal	ra,12694 <tcp_seg_copy>
                  if (cseg != NULL) {
    f380:	ec0506e3          	beqz	a0,f24c <tcp_receive+0xc98>
                    pcb->ooseq = cseg;
    f384:	06a42c23          	sw	a0,120(s0)
                    tcp_oos_insert_segment(cseg, next);
    f388:	00048593          	mv	a1,s1
    f38c:	89cff0ef          	jal	ra,e428 <tcp_oos_insert_segment>
    f390:	ebdff06f          	j	f24c <tcp_receive+0xc98>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
    f394:	40f687b3          	sub	a5,a3,a5
    f398:	01079593          	slli	a1,a5,0x10
    f39c:	0105d593          	srli	a1,a1,0x10
    f3a0:	00b91423          	sh	a1,8(s2)
                      pbuf_realloc(prev->p, prev->len);
    f3a4:	00492503          	lw	a0,4(s2)
    f3a8:	b1dfd0ef          	jal	ra,cec4 <pbuf_realloc>
    f3ac:	fb9ff06f          	j	f364 <tcp_receive+0xdb0>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
    f3b0:	40f587b3          	sub	a5,a1,a5
              if (next->next == NULL &&
    f3b4:	00f04663          	bgtz	a5,f3c0 <tcp_receive+0xe0c>
    f3b8:	00070493          	mv	s1,a4
    f3bc:	eddff06f          	j	f298 <tcp_receive+0xce4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
    f3c0:	00c6c503          	lbu	a0,12(a3)
    f3c4:	00d6c783          	lbu	a5,13(a3)
    f3c8:	00879793          	slli	a5,a5,0x8
    f3cc:	00a7e533          	or	a0,a5,a0
    f3d0:	8a8fb0ef          	jal	ra,a478 <lwip_htons>
    f3d4:	00157513          	andi	a0,a0,1
    f3d8:	e6051ae3          	bnez	a0,f24c <tcp_receive+0xc98>
                next->next = tcp_seg_copy(&inseg);
    f3dc:	a1818513          	addi	a0,gp,-1512 # 1fbe8 <inseg>
    f3e0:	2b4030ef          	jal	ra,12694 <tcp_seg_copy>
    f3e4:	00a4a023          	sw	a0,0(s1)
                if (next->next != NULL) {
    f3e8:	e60502e3          	beqz	a0,f24c <tcp_receive+0xc98>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
    f3ec:	00c4a703          	lw	a4,12(s1)
    f3f0:	00474583          	lbu	a1,4(a4)
    f3f4:	00574783          	lbu	a5,5(a4)
    f3f8:	00879793          	slli	a5,a5,0x8
    f3fc:	00b7e7b3          	or	a5,a5,a1
    f400:	00674583          	lbu	a1,6(a4)
    f404:	01059593          	slli	a1,a1,0x10
    f408:	00f5e5b3          	or	a1,a1,a5
    f40c:	00774783          	lbu	a5,7(a4)
    f410:	01879793          	slli	a5,a5,0x18
    f414:	00b7e5b3          	or	a1,a5,a1
    f418:	0084d703          	lhu	a4,8(s1)
    f41c:	00e58733          	add	a4,a1,a4
    f420:	9201a783          	lw	a5,-1760(gp) # 1faf0 <seqno>
    f424:	40f70733          	sub	a4,a4,a5
    f428:	0ee04063          	bgtz	a4,f508 <tcp_receive+0xf54>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
    f42c:	9161d783          	lhu	a5,-1770(gp) # 1fae6 <tcplen>
    f430:	9201a703          	lw	a4,-1760(gp) # 1faf0 <seqno>
    f434:	00e787b3          	add	a5,a5,a4
    f438:	02842703          	lw	a4,40(s0)
    f43c:	02c45683          	lhu	a3,44(s0)
    f440:	00d70733          	add	a4,a4,a3
    f444:	40e787b3          	sub	a5,a5,a4
    f448:	e0f052e3          	blez	a5,f24c <tcp_receive+0xc98>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
    f44c:	0004a783          	lw	a5,0(s1)
    f450:	00c7a783          	lw	a5,12(a5)
    f454:	00c7c503          	lbu	a0,12(a5)
    f458:	00d7c783          	lbu	a5,13(a5)
    f45c:	00879793          	slli	a5,a5,0x8
    f460:	00a7e533          	or	a0,a5,a0
    f464:	814fb0ef          	jal	ra,a478 <lwip_htons>
    f468:	00157513          	andi	a0,a0,1
    f46c:	0a051c63          	bnez	a0,f524 <tcp_receive+0xf70>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
    f470:	02842703          	lw	a4,40(s0)
    f474:	02c45783          	lhu	a5,44(s0)
    f478:	00e787b3          	add	a5,a5,a4
    f47c:	01079793          	slli	a5,a5,0x10
    f480:	0107d793          	srli	a5,a5,0x10
    f484:	0004a703          	lw	a4,0(s1)
    f488:	9201a683          	lw	a3,-1760(gp) # 1faf0 <seqno>
    f48c:	40d787b3          	sub	a5,a5,a3
    f490:	00f71423          	sh	a5,8(a4)
                    pbuf_realloc(next->next->p, next->next->len);
    f494:	0004a783          	lw	a5,0(s1)
    f498:	0087d583          	lhu	a1,8(a5)
    f49c:	0047a503          	lw	a0,4(a5)
    f4a0:	a25fd0ef          	jal	ra,cec4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
    f4a4:	0004a783          	lw	a5,0(s1)
    f4a8:	0087d483          	lhu	s1,8(a5)
    f4ac:	00c7a783          	lw	a5,12(a5)
    f4b0:	00c7c503          	lbu	a0,12(a5)
    f4b4:	00d7c783          	lbu	a5,13(a5)
    f4b8:	00879793          	slli	a5,a5,0x8
    f4bc:	00a7e533          	or	a0,a5,a0
    f4c0:	fb9fa0ef          	jal	ra,a478 <lwip_htons>
    f4c4:	00357513          	andi	a0,a0,3
    f4c8:	0c050063          	beqz	a0,f588 <tcp_receive+0xfd4>
    f4cc:	00100793          	li	a5,1
    f4d0:	00f487b3          	add	a5,s1,a5
    f4d4:	01079793          	slli	a5,a5,0x10
    f4d8:	0107d793          	srli	a5,a5,0x10
    f4dc:	90f19b23          	sh	a5,-1770(gp) # 1fae6 <tcplen>
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
    f4e0:	9201a703          	lw	a4,-1760(gp) # 1faf0 <seqno>
    f4e4:	00e787b3          	add	a5,a5,a4
    f4e8:	02842703          	lw	a4,40(s0)
    f4ec:	02c45683          	lhu	a3,44(s0)
    f4f0:	00d70733          	add	a4,a4,a3
    f4f4:	d4e78ce3          	beq	a5,a4,f24c <tcp_receive+0xc98>
    f4f8:	0001e537          	lui	a0,0x1e
    f4fc:	dc450513          	addi	a0,a0,-572 # 1ddc4 <altcp_tcp_functions+0x68c>
    f500:	885fe0ef          	jal	ra,dd84 <bsp_printf>
    f504:	d49ff06f          	j	f24c <tcp_receive+0xc98>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
    f508:	40b787b3          	sub	a5,a5,a1
    f50c:	01079593          	slli	a1,a5,0x10
    f510:	0105d593          	srli	a1,a1,0x10
    f514:	00b49423          	sh	a1,8(s1)
                    pbuf_realloc(next->p, next->len);
    f518:	0044a503          	lw	a0,4(s1)
    f51c:	9a9fd0ef          	jal	ra,cec4 <pbuf_realloc>
    f520:	f0dff06f          	j	f42c <tcp_receive+0xe78>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
    f524:	0004a783          	lw	a5,0(s1)
    f528:	00c7a783          	lw	a5,12(a5)
    f52c:	00c7c703          	lbu	a4,12(a5)
    f530:	00d7c503          	lbu	a0,13(a5)
    f534:	00851513          	slli	a0,a0,0x8
    f538:	00e56533          	or	a0,a0,a4
    f53c:	01051913          	slli	s2,a0,0x10
    f540:	41095913          	srai	s2,s2,0x10
    f544:	ffffc7b7          	lui	a5,0xffffc
    f548:	0ff78793          	addi	a5,a5,255 # ffffc0ff <__freertos_irq_stack_top+0xfffd71cf>
    f54c:	00f97933          	and	s2,s2,a5
    f550:	f29fa0ef          	jal	ra,a478 <lwip_htons>
    f554:	03e57513          	andi	a0,a0,62
    f558:	f21fa0ef          	jal	ra,a478 <lwip_htons>
    f55c:	01051793          	slli	a5,a0,0x10
    f560:	4107d793          	srai	a5,a5,0x10
    f564:	0004a703          	lw	a4,0(s1)
    f568:	00c72703          	lw	a4,12(a4)
    f56c:	00f967b3          	or	a5,s2,a5
    f570:	01079793          	slli	a5,a5,0x10
    f574:	0107d793          	srli	a5,a5,0x10
    f578:	00f70623          	sb	a5,12(a4)
    f57c:	0087d793          	srli	a5,a5,0x8
    f580:	00f706a3          	sb	a5,13(a4)
    f584:	eedff06f          	j	f470 <tcp_receive+0xebc>
                    tcplen = TCP_TCPLEN(next->next);
    f588:	00000793          	li	a5,0
    f58c:	f45ff06f          	j	f4d0 <tcp_receive+0xf1c>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
    f590:	9201a783          	lw	a5,-1760(gp) # 1faf0 <seqno>
    f594:	02842703          	lw	a4,40(s0)
    f598:	40e786b3          	sub	a3,a5,a4
    f59c:	0006cc63          	bltz	a3,f5b4 <tcp_receive+0x1000>
    f5a0:	02c45683          	lhu	a3,44(s0)
    f5a4:	00d70733          	add	a4,a4,a3
    f5a8:	40e787b3          	sub	a5,a5,a4
    f5ac:	00178793          	addi	a5,a5,1
    f5b0:	00f05863          	blez	a5,f5c0 <tcp_receive+0x100c>
      tcp_ack_now(pcb);
    f5b4:	01e45783          	lhu	a5,30(s0)
    f5b8:	0027e793          	ori	a5,a5,2
    f5bc:	00f41f23          	sh	a5,30(s0)
}
    f5c0:	01c12083          	lw	ra,28(sp)
    f5c4:	01812403          	lw	s0,24(sp)
    f5c8:	01412483          	lw	s1,20(sp)
    f5cc:	01012903          	lw	s2,16(sp)
    f5d0:	00c12983          	lw	s3,12(sp)
    f5d4:	02010113          	addi	sp,sp,32
    f5d8:	00008067          	ret

0000f5dc <tcp_process>:
{
    f5dc:	ff010113          	addi	sp,sp,-16
    f5e0:	00112623          	sw	ra,12(sp)
    f5e4:	00812423          	sw	s0,8(sp)
    f5e8:	00912223          	sw	s1,4(sp)
    f5ec:	01212023          	sw	s2,0(sp)
    f5f0:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
    f5f4:	04050863          	beqz	a0,f644 <tcp_process+0x68>
  if (flags & TCP_RST) {
    f5f8:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    f5fc:	0047f713          	andi	a4,a5,4
    f600:	0a070a63          	beqz	a4,f6b4 <tcp_process+0xd8>
    if (pcb->state == SYN_SENT) {
    f604:	01442683          	lw	a3,20(s0)
    f608:	00200793          	li	a5,2
    f60c:	04f68463          	beq	a3,a5,f654 <tcp_process+0x78>
      if (seqno == pcb->rcv_nxt) {
    f610:	02842703          	lw	a4,40(s0)
    f614:	9201a783          	lw	a5,-1760(gp) # 1faf0 <seqno>
    f618:	06f70463          	beq	a4,a5,f680 <tcp_process+0xa4>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
    f61c:	40e786b3          	sub	a3,a5,a4
    f620:	0406c063          	bltz	a3,f660 <tcp_process+0x84>
    f624:	02c45683          	lhu	a3,44(s0)
    f628:	00d70733          	add	a4,a4,a3
    f62c:	40e787b3          	sub	a5,a5,a4
    f630:	02f04863          	bgtz	a5,f660 <tcp_process+0x84>
        tcp_ack_now(pcb);
    f634:	01e45783          	lhu	a5,30(s0)
    f638:	0027e793          	ori	a5,a5,2
    f63c:	00f41f23          	sh	a5,30(s0)
    if (acceptable) {
    f640:	0200006f          	j	f660 <tcp_process+0x84>
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
    f644:	0001e537          	lui	a0,0x1e
    f648:	e8050513          	addi	a0,a0,-384 # 1de80 <altcp_tcp_functions+0x748>
    f64c:	f38fe0ef          	jal	ra,dd84 <bsp_printf>
    f650:	fa9ff06f          	j	f5f8 <tcp_process+0x1c>
      if (ackno == pcb->snd_nxt) {
    f654:	05442703          	lw	a4,84(s0)
    f658:	91c1a783          	lw	a5,-1764(gp) # 1faec <ackno>
    f65c:	02f70263          	beq	a4,a5,f680 <tcp_process+0xa4>
      return ERR_OK;
    f660:	00000493          	li	s1,0
}
    f664:	00048513          	mv	a0,s1
    f668:	00c12083          	lw	ra,12(sp)
    f66c:	00812403          	lw	s0,8(sp)
    f670:	00412483          	lw	s1,4(sp)
    f674:	00012903          	lw	s2,0(sp)
    f678:	01010113          	addi	sp,sp,16
    f67c:	00008067          	ret
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
    f680:	02068263          	beqz	a3,f6a4 <tcp_process+0xc8>
      recv_flags |= TF_RESET;
    f684:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
    f688:	0087e793          	ori	a5,a5,8
    f68c:	90f18a23          	sb	a5,-1772(gp) # 1fae4 <recv_flags>
      tcp_clear_flags(pcb, TF_ACK_DELAY);
    f690:	01e45783          	lhu	a5,30(s0)
    f694:	ffe7f793          	andi	a5,a5,-2
    f698:	00f41f23          	sh	a5,30(s0)
      return ERR_RST;
    f69c:	ff200493          	li	s1,-14
    f6a0:	fc5ff06f          	j	f664 <tcp_process+0x88>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
    f6a4:	0001e537          	lui	a0,0x1e
    f6a8:	e9c50513          	addi	a0,a0,-356 # 1de9c <altcp_tcp_functions+0x764>
    f6ac:	ed8fe0ef          	jal	ra,dd84 <bsp_printf>
    f6b0:	fd5ff06f          	j	f684 <tcp_process+0xa8>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
    f6b4:	0027f793          	andi	a5,a5,2
    f6b8:	00078a63          	beqz	a5,f6cc <tcp_process+0xf0>
    f6bc:	01442783          	lw	a5,20(s0)
    f6c0:	ffe78793          	addi	a5,a5,-2
    f6c4:	00100713          	li	a4,1
    f6c8:	04f76863          	bltu	a4,a5,f718 <tcp_process+0x13c>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
    f6cc:	01e45783          	lhu	a5,30(s0)
    f6d0:	0107f793          	andi	a5,a5,16
    f6d4:	00079863          	bnez	a5,f6e4 <tcp_process+0x108>
    pcb->tmr = tcp_ticks;
    f6d8:	000227b7          	lui	a5,0x22
    f6dc:	f047a783          	lw	a5,-252(a5) # 21f04 <tcp_ticks>
    f6e0:	02f42223          	sw	a5,36(s0)
  pcb->keep_cnt_sent = 0;
    f6e4:	08040fa3          	sb	zero,159(s0)
  pcb->persist_probe = 0;
    f6e8:	08040f23          	sb	zero,158(s0)
  tcp_parseopt(pcb);
    f6ec:	00040513          	mv	a0,s0
    f6f0:	8c1fe0ef          	jal	ra,dfb0 <tcp_parseopt>
  switch (pcb->state) {
    f6f4:	01442783          	lw	a5,20(s0)
    f6f8:	00900713          	li	a4,9
    f6fc:	6cf76663          	bltu	a4,a5,fdc8 <tcp_process+0x7ec>
    f700:	00279793          	slli	a5,a5,0x2
    f704:	0001e737          	lui	a4,0x1e
    f708:	c5870713          	addi	a4,a4,-936 # 1dc58 <altcp_tcp_functions+0x520>
    f70c:	00e787b3          	add	a5,a5,a4
    f710:	0007a783          	lw	a5,0(a5)
    f714:	00078067          	jr	a5
    tcp_ack_now(pcb);
    f718:	01e45783          	lhu	a5,30(s0)
    f71c:	0027e793          	ori	a5,a5,2
    f720:	00f41f23          	sh	a5,30(s0)
    return ERR_OK;
    f724:	00000493          	li	s1,0
    f728:	f3dff06f          	j	f664 <tcp_process+0x88>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
    f72c:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    f730:	0127f693          	andi	a3,a5,18
    f734:	01200713          	li	a4,18
    f738:	00e68a63          	beq	a3,a4,f74c <tcp_process+0x170>
      else if (flags & TCP_ACK) {
    f73c:	0107f793          	andi	a5,a5,16
    f740:	18079663          	bnez	a5,f8cc <tcp_process+0x2f0>
  return ERR_OK;
    f744:	00000493          	li	s1,0
    f748:	f1dff06f          	j	f664 <tcp_process+0x88>
          && (ackno == pcb->lastack + 1)) {
    f74c:	04842703          	lw	a4,72(s0)
    f750:	00170713          	addi	a4,a4,1
    f754:	91c1a683          	lw	a3,-1764(gp) # 1faec <ackno>
    f758:	fed712e3          	bne	a4,a3,f73c <tcp_process+0x160>
        pcb->rcv_nxt = seqno + 1;
    f75c:	9201a703          	lw	a4,-1760(gp) # 1faf0 <seqno>
    f760:	00170793          	addi	a5,a4,1
    f764:	02f42423          	sw	a5,40(s0)
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
    f768:	02f42823          	sw	a5,48(s0)
        pcb->lastack = ackno;
    f76c:	04d42423          	sw	a3,72(s0)
        pcb->snd_wnd = tcphdr->wnd;
    f770:	9301a783          	lw	a5,-1744(gp) # 1fb00 <tcphdr>
    f774:	00e7c683          	lbu	a3,14(a5)
    f778:	00f7c783          	lbu	a5,15(a5)
    f77c:	00879793          	slli	a5,a5,0x8
    f780:	00d7e7b3          	or	a5,a5,a3
    f784:	06f41223          	sh	a5,100(s0)
        pcb->snd_wnd_max = pcb->snd_wnd;
    f788:	06f41323          	sh	a5,102(s0)
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
    f78c:	fff70713          	addi	a4,a4,-1
    f790:	04e42c23          	sw	a4,88(s0)
        pcb->state = ESTABLISHED;
    f794:	00400793          	li	a5,4
    f798:	00f42a23          	sw	a5,20(s0)
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
    f79c:	03645903          	lhu	s2,54(s0)
    f7a0:	00440493          	addi	s1,s0,4
    f7a4:	00048513          	mv	a0,s1
    f7a8:	739060ef          	jal	ra,166e0 <ip4_route>
    f7ac:	00048613          	mv	a2,s1
    f7b0:	00050593          	mv	a1,a0
    f7b4:	00090513          	mv	a0,s2
    f7b8:	104030ef          	jal	ra,128bc <tcp_eff_send_mss_netif>
    f7bc:	02a41b23          	sh	a0,54(s0)
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
    f7c0:	00251613          	slli	a2,a0,0x2
    f7c4:	00151713          	slli	a4,a0,0x1
    f7c8:	00070693          	mv	a3,a4
    f7cc:	000017b7          	lui	a5,0x1
    f7d0:	11c78793          	addi	a5,a5,284 # 111c <malloc+0x8>
    f7d4:	00f77463          	bgeu	a4,a5,f7dc <tcp_process+0x200>
    f7d8:	00078693          	mv	a3,a5
    f7dc:	08d67463          	bgeu	a2,a3,f864 <tcp_process+0x288>
    f7e0:	00251793          	slli	a5,a0,0x2
    f7e4:	01079793          	slli	a5,a5,0x10
    f7e8:	0107d793          	srli	a5,a5,0x10
    f7ec:	04f41623          	sh	a5,76(s0)
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
    f7f0:	06a45783          	lhu	a5,106(s0)
    f7f4:	08078c63          	beqz	a5,f88c <tcp_process+0x2b0>
        --pcb->snd_queuelen;
    f7f8:	06a45783          	lhu	a5,106(s0)
    f7fc:	fff78793          	addi	a5,a5,-1
    f800:	06f41523          	sh	a5,106(s0)
        rseg = pcb->unacked;
    f804:	07442483          	lw	s1,116(s0)
        if (rseg == NULL) {
    f808:	08048a63          	beqz	s1,f89c <tcp_process+0x2c0>
          pcb->unacked = rseg->next;
    f80c:	0004a783          	lw	a5,0(s1)
    f810:	06f42a23          	sw	a5,116(s0)
        tcp_seg_free(rseg);
    f814:	00048513          	mv	a0,s1
    f818:	5fd020ef          	jal	ra,12614 <tcp_seg_free>
        if (pcb->unacked == NULL) {
    f81c:	07442783          	lw	a5,116(s0)
    f820:	0a078063          	beqz	a5,f8c0 <tcp_process+0x2e4>
          pcb->rtime = 0;
    f824:	02041a23          	sh	zero,52(s0)
          pcb->nrtx = 0;
    f828:	04040323          	sb	zero,70(s0)
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
    f82c:	08c42783          	lw	a5,140(s0)
    f830:	02078063          	beqz	a5,f850 <tcp_process+0x274>
    f834:	00000613          	li	a2,0
    f838:	00040593          	mv	a1,s0
    f83c:	01042503          	lw	a0,16(s0)
    f840:	000780e7          	jalr	a5
    f844:	00050493          	mv	s1,a0
        if (err == ERR_ABRT) {
    f848:	ff300793          	li	a5,-13
    f84c:	e0f50ce3          	beq	a0,a5,f664 <tcp_process+0x88>
        tcp_ack_now(pcb);
    f850:	01e45783          	lhu	a5,30(s0)
    f854:	0027e793          	ori	a5,a5,2
    f858:	00f41f23          	sh	a5,30(s0)
  return ERR_OK;
    f85c:	00000493          	li	s1,0
        tcp_ack_now(pcb);
    f860:	e05ff06f          	j	f664 <tcp_process+0x88>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
    f864:	000017b7          	lui	a5,0x1
    f868:	11c78793          	addi	a5,a5,284 # 111c <malloc+0x8>
    f86c:	00e7fa63          	bgeu	a5,a4,f880 <tcp_process+0x2a4>
    f870:	00151793          	slli	a5,a0,0x1
    f874:	01079793          	slli	a5,a5,0x10
    f878:	0107d793          	srli	a5,a5,0x10
    f87c:	f71ff06f          	j	f7ec <tcp_process+0x210>
    f880:	000017b7          	lui	a5,0x1
    f884:	11c78793          	addi	a5,a5,284 # 111c <malloc+0x8>
    f888:	f65ff06f          	j	f7ec <tcp_process+0x210>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
    f88c:	0001e537          	lui	a0,0x1e
    f890:	ebc50513          	addi	a0,a0,-324 # 1debc <altcp_tcp_functions+0x784>
    f894:	cf0fe0ef          	jal	ra,dd84 <bsp_printf>
    f898:	f61ff06f          	j	f7f8 <tcp_process+0x21c>
          rseg = pcb->unsent;
    f89c:	07042483          	lw	s1,112(s0)
          LWIP_ASSERT("no segment to free", rseg != NULL);
    f8a0:	00048863          	beqz	s1,f8b0 <tcp_process+0x2d4>
          pcb->unsent = rseg->next;
    f8a4:	0004a783          	lw	a5,0(s1)
    f8a8:	06f42823          	sw	a5,112(s0)
    f8ac:	f69ff06f          	j	f814 <tcp_process+0x238>
          LWIP_ASSERT("no segment to free", rseg != NULL);
    f8b0:	0001e537          	lui	a0,0x1e
    f8b4:	ed450513          	addi	a0,a0,-300 # 1ded4 <altcp_tcp_functions+0x79c>
    f8b8:	cccfe0ef          	jal	ra,dd84 <bsp_printf>
    f8bc:	fe9ff06f          	j	f8a4 <tcp_process+0x2c8>
          pcb->rtime = -1;
    f8c0:	fff00793          	li	a5,-1
    f8c4:	02f41a23          	sh	a5,52(s0)
    f8c8:	f65ff06f          	j	f82c <tcp_process+0x250>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    f8cc:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
    f8d0:	00074803          	lbu	a6,0(a4)
    f8d4:	00174683          	lbu	a3,1(a4)
    f8d8:	00869693          	slli	a3,a3,0x8
    f8dc:	00274503          	lbu	a0,2(a4)
    f8e0:	00374783          	lbu	a5,3(a4)
    f8e4:	00879793          	slli	a5,a5,0x8
    f8e8:	9161d583          	lhu	a1,-1770(gp) # 1fae6 <tcplen>
    f8ec:	9201a603          	lw	a2,-1760(gp) # 1faf0 <seqno>
    f8f0:	0106e833          	or	a6,a3,a6
    f8f4:	00a7e7b3          	or	a5,a5,a0
    f8f8:	00022737          	lui	a4,0x22
    f8fc:	ef470713          	addi	a4,a4,-268 # 21ef4 <ip_data+0x10>
    f900:	000226b7          	lui	a3,0x22
    f904:	ef868693          	addi	a3,a3,-264 # 21ef8 <ip_data+0x14>
    f908:	00c58633          	add	a2,a1,a2
    f90c:	91c1a583          	lw	a1,-1764(gp) # 1faec <ackno>
    f910:	00040513          	mv	a0,s0
    f914:	988f90ef          	jal	ra,8a9c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
    f918:	04644703          	lbu	a4,70(s0)
    f91c:	00300793          	li	a5,3
    f920:	00e7f663          	bgeu	a5,a4,f92c <tcp_process+0x350>
  return ERR_OK;
    f924:	00000493          	li	s1,0
    f928:	d3dff06f          	j	f664 <tcp_process+0x88>
          pcb->rtime = 0;
    f92c:	02041a23          	sh	zero,52(s0)
          tcp_rexmit_rto(pcb);
    f930:	00040513          	mv	a0,s0
    f934:	879f90ef          	jal	ra,91ac <tcp_rexmit_rto>
  return ERR_OK;
    f938:	00000493          	li	s1,0
    f93c:	d29ff06f          	j	f664 <tcp_process+0x88>
      if (flags & TCP_ACK) {
    f940:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    f944:	0107f713          	andi	a4,a5,16
    f948:	18070463          	beqz	a4,fad0 <tcp_process+0x4f4>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
    f94c:	91c1a583          	lw	a1,-1764(gp) # 1faec <ackno>
    f950:	04842783          	lw	a5,72(s0)
    f954:	40f587b3          	sub	a5,a1,a5
    f958:	fff78793          	addi	a5,a5,-1
    f95c:	0007c863          	bltz	a5,f96c <tcp_process+0x390>
    f960:	05442783          	lw	a5,84(s0)
    f964:	40f587b3          	sub	a5,a1,a5
    f968:	04f05a63          	blez	a5,f9bc <tcp_process+0x3e0>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    f96c:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
    f970:	00074803          	lbu	a6,0(a4)
    f974:	00174683          	lbu	a3,1(a4)
    f978:	00869693          	slli	a3,a3,0x8
    f97c:	00274883          	lbu	a7,2(a4)
    f980:	00374783          	lbu	a5,3(a4)
    f984:	00879793          	slli	a5,a5,0x8
    f988:	9161d503          	lhu	a0,-1770(gp) # 1fae6 <tcplen>
    f98c:	9201a603          	lw	a2,-1760(gp) # 1faf0 <seqno>
    f990:	0106e833          	or	a6,a3,a6
    f994:	0117e7b3          	or	a5,a5,a7
    f998:	00022737          	lui	a4,0x22
    f99c:	ef470713          	addi	a4,a4,-268 # 21ef4 <ip_data+0x10>
    f9a0:	000226b7          	lui	a3,0x22
    f9a4:	ef868693          	addi	a3,a3,-264 # 21ef8 <ip_data+0x14>
    f9a8:	00c50633          	add	a2,a0,a2
    f9ac:	00040513          	mv	a0,s0
    f9b0:	8ecf90ef          	jal	ra,8a9c <tcp_rst>
  return ERR_OK;
    f9b4:	00000493          	li	s1,0
    f9b8:	cadff06f          	j	f664 <tcp_process+0x88>
          pcb->state = ESTABLISHED;
    f9bc:	00400793          	li	a5,4
    f9c0:	00f42a23          	sw	a5,20(s0)
          if (pcb->listener == NULL) {
    f9c4:	08042783          	lw	a5,128(s0)
    f9c8:	0a078c63          	beqz	a5,fa80 <tcp_process+0x4a4>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
    f9cc:	01c7a783          	lw	a5,28(a5)
    f9d0:	0a078063          	beqz	a5,fa70 <tcp_process+0x494>
            tcp_backlog_accepted(pcb);
    f9d4:	00040513          	mv	a0,s0
    f9d8:	5f8020ef          	jal	ra,11fd0 <tcp_backlog_accepted>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
    f9dc:	08042783          	lw	a5,128(s0)
    f9e0:	01c7a783          	lw	a5,28(a5)
    f9e4:	0a078863          	beqz	a5,fa94 <tcp_process+0x4b8>
    f9e8:	00000613          	li	a2,0
    f9ec:	00040593          	mv	a1,s0
    f9f0:	01042503          	lw	a0,16(s0)
    f9f4:	000780e7          	jalr	a5
    f9f8:	00050493          	mv	s1,a0
          if (err != ERR_OK) {
    f9fc:	08051463          	bnez	a0,fa84 <tcp_process+0x4a8>
          tcp_receive(pcb);
    fa00:	00040513          	mv	a0,s0
    fa04:	bb1fe0ef          	jal	ra,e5b4 <tcp_receive>
          if (recv_acked != 0) {
    fa08:	9181d783          	lhu	a5,-1768(gp) # 1fae8 <recv_acked>
    fa0c:	00078663          	beqz	a5,fa18 <tcp_process+0x43c>
            recv_acked--;
    fa10:	fff78793          	addi	a5,a5,-1
    fa14:	90f19c23          	sh	a5,-1768(gp) # 1fae8 <recv_acked>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
    fa18:	03645783          	lhu	a5,54(s0)
    fa1c:	00279593          	slli	a1,a5,0x2
    fa20:	00179693          	slli	a3,a5,0x1
    fa24:	00068613          	mv	a2,a3
    fa28:	00001737          	lui	a4,0x1
    fa2c:	11c70713          	addi	a4,a4,284 # 111c <malloc+0x8>
    fa30:	00e6f463          	bgeu	a3,a4,fa38 <tcp_process+0x45c>
    fa34:	00070613          	mv	a2,a4
    fa38:	06c5f863          	bgeu	a1,a2,faa8 <tcp_process+0x4cc>
    fa3c:	00279793          	slli	a5,a5,0x2
    fa40:	01079793          	slli	a5,a5,0x10
    fa44:	0107d793          	srli	a5,a5,0x10
    fa48:	04f41623          	sh	a5,76(s0)
          if (recv_flags & TF_GOT_FIN) {
    fa4c:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
    fa50:	0207f793          	andi	a5,a5,32
    fa54:	c00788e3          	beqz	a5,f664 <tcp_process+0x88>
            tcp_ack_now(pcb);
    fa58:	01e45783          	lhu	a5,30(s0)
    fa5c:	0027e793          	ori	a5,a5,2
    fa60:	00f41f23          	sh	a5,30(s0)
            pcb->state = CLOSE_WAIT;
    fa64:	00700793          	li	a5,7
    fa68:	00f42a23          	sw	a5,20(s0)
    fa6c:	bf9ff06f          	j	f664 <tcp_process+0x88>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
    fa70:	0001e537          	lui	a0,0x1e
    fa74:	ee850513          	addi	a0,a0,-280 # 1dee8 <altcp_tcp_functions+0x7b0>
    fa78:	b0cfe0ef          	jal	ra,dd84 <bsp_printf>
    fa7c:	f59ff06f          	j	f9d4 <tcp_process+0x3f8>
            err = ERR_VAL;
    fa80:	ffa00493          	li	s1,-6
            if (err != ERR_ABRT) {
    fa84:	ff300793          	li	a5,-13
    fa88:	00f49a63          	bne	s1,a5,fa9c <tcp_process+0x4c0>
            return ERR_ABRT;
    fa8c:	ff300493          	li	s1,-13
    fa90:	bd5ff06f          	j	f664 <tcp_process+0x88>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
    fa94:	ff000493          	li	s1,-16
    fa98:	fedff06f          	j	fa84 <tcp_process+0x4a8>
              tcp_abort(pcb);
    fa9c:	00040513          	mv	a0,s0
    faa0:	42c030ef          	jal	ra,12ecc <tcp_abort>
    faa4:	fe9ff06f          	j	fa8c <tcp_process+0x4b0>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
    faa8:	00001737          	lui	a4,0x1
    faac:	11c70713          	addi	a4,a4,284 # 111c <malloc+0x8>
    fab0:	00d77a63          	bgeu	a4,a3,fac4 <tcp_process+0x4e8>
    fab4:	00179793          	slli	a5,a5,0x1
    fab8:	01079793          	slli	a5,a5,0x10
    fabc:	0107d793          	srli	a5,a5,0x10
    fac0:	f89ff06f          	j	fa48 <tcp_process+0x46c>
    fac4:	000017b7          	lui	a5,0x1
    fac8:	11c78793          	addi	a5,a5,284 # 111c <malloc+0x8>
    facc:	f7dff06f          	j	fa48 <tcp_process+0x46c>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
    fad0:	0027f793          	andi	a5,a5,2
    fad4:	2e078e63          	beqz	a5,fdd0 <tcp_process+0x7f4>
    fad8:	02842783          	lw	a5,40(s0)
    fadc:	fff78793          	addi	a5,a5,-1
    fae0:	9201a703          	lw	a4,-1760(gp) # 1faf0 <seqno>
    fae4:	00e78663          	beq	a5,a4,faf0 <tcp_process+0x514>
  return ERR_OK;
    fae8:	00000493          	li	s1,0
    faec:	b79ff06f          	j	f664 <tcp_process+0x88>
        tcp_rexmit(pcb);
    faf0:	00040513          	mv	a0,s0
    faf4:	dc9f80ef          	jal	ra,88bc <tcp_rexmit>
  return ERR_OK;
    faf8:	00000493          	li	s1,0
    fafc:	b69ff06f          	j	f664 <tcp_process+0x88>
      tcp_receive(pcb);
    fb00:	00040513          	mv	a0,s0
    fb04:	ab1fe0ef          	jal	ra,e5b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
    fb08:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
    fb0c:	0207f793          	andi	a5,a5,32
    fb10:	2c078463          	beqz	a5,fdd8 <tcp_process+0x7fc>
        tcp_ack_now(pcb);
    fb14:	01e45783          	lhu	a5,30(s0)
    fb18:	0027e793          	ori	a5,a5,2
    fb1c:	00f41f23          	sh	a5,30(s0)
        pcb->state = CLOSE_WAIT;
    fb20:	00700793          	li	a5,7
    fb24:	00f42a23          	sw	a5,20(s0)
  return ERR_OK;
    fb28:	00000493          	li	s1,0
    fb2c:	b39ff06f          	j	f664 <tcp_process+0x88>
      tcp_receive(pcb);
    fb30:	00040513          	mv	a0,s0
    fb34:	a81fe0ef          	jal	ra,e5b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
    fb38:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
    fb3c:	0207f793          	andi	a5,a5,32
    fb40:	0a078e63          	beqz	a5,fbfc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
    fb44:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    fb48:	0107f793          	andi	a5,a5,16
    fb4c:	00078863          	beqz	a5,fb5c <tcp_process+0x580>
    fb50:	05442703          	lw	a4,84(s0)
    fb54:	91c1a783          	lw	a5,-1764(gp) # 1faec <ackno>
    fb58:	02f70063          	beq	a4,a5,fb78 <tcp_process+0x59c>
          tcp_ack_now(pcb);
    fb5c:	01e45783          	lhu	a5,30(s0)
    fb60:	0027e793          	ori	a5,a5,2
    fb64:	00f41f23          	sh	a5,30(s0)
          pcb->state = CLOSING;
    fb68:	00800793          	li	a5,8
    fb6c:	00f42a23          	sw	a5,20(s0)
  return ERR_OK;
    fb70:	00000493          	li	s1,0
    fb74:	af1ff06f          	j	f664 <tcp_process+0x88>
            pcb->unsent == NULL) {
    fb78:	07042783          	lw	a5,112(s0)
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
    fb7c:	fe0790e3          	bnez	a5,fb5c <tcp_process+0x580>
          tcp_ack_now(pcb);
    fb80:	01e45783          	lhu	a5,30(s0)
    fb84:	0027e793          	ori	a5,a5,2
    fb88:	00f41f23          	sh	a5,30(s0)
          tcp_pcb_purge(pcb);
    fb8c:	00040513          	mv	a0,s0
    fb90:	008030ef          	jal	ra,12b98 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
    fb94:	000227b7          	lui	a5,0x22
    fb98:	f007a783          	lw	a5,-256(a5) # 21f00 <tcp_active_pcbs>
    fb9c:	00878c63          	beq	a5,s0,fbb4 <tcp_process+0x5d8>
    fba0:	02078663          	beqz	a5,fbcc <tcp_process+0x5f0>
    fba4:	00c7a703          	lw	a4,12(a5)
    fba8:	00870e63          	beq	a4,s0,fbc4 <tcp_process+0x5e8>
    fbac:	00070793          	mv	a5,a4
    fbb0:	ff1ff06f          	j	fba0 <tcp_process+0x5c4>
    fbb4:	00c7a703          	lw	a4,12(a5)
    fbb8:	000227b7          	lui	a5,0x22
    fbbc:	f0e7a023          	sw	a4,-256(a5) # 21f00 <tcp_active_pcbs>
    fbc0:	00c0006f          	j	fbcc <tcp_process+0x5f0>
    fbc4:	00c42703          	lw	a4,12(s0)
    fbc8:	00e7a623          	sw	a4,12(a5)
    fbcc:	000227b7          	lui	a5,0x22
    fbd0:	00100713          	li	a4,1
    fbd4:	eee78e23          	sb	a4,-260(a5) # 21efc <tcp_active_pcbs_changed>
          pcb->state = TIME_WAIT;
    fbd8:	00a00793          	li	a5,10
    fbdc:	00f42a23          	sw	a5,20(s0)
          TCP_REG(&tcp_tw_pcbs, pcb);
    fbe0:	000227b7          	lui	a5,0x22
    fbe4:	f107a703          	lw	a4,-240(a5) # 21f10 <tcp_tw_pcbs>
    fbe8:	00e42623          	sw	a4,12(s0)
    fbec:	f087a823          	sw	s0,-240(a5)
    fbf0:	2f9010ef          	jal	ra,116e8 <tcp_timer_needed>
  return ERR_OK;
    fbf4:	00000493          	li	s1,0
          TCP_REG(&tcp_tw_pcbs, pcb);
    fbf8:	a6dff06f          	j	f664 <tcp_process+0x88>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
    fbfc:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    fc00:	0107f793          	andi	a5,a5,16
    fc04:	1c078e63          	beqz	a5,fde0 <tcp_process+0x804>
    fc08:	05442703          	lw	a4,84(s0)
    fc0c:	91c1a783          	lw	a5,-1764(gp) # 1faec <ackno>
    fc10:	00f70663          	beq	a4,a5,fc1c <tcp_process+0x640>
  return ERR_OK;
    fc14:	00000493          	li	s1,0
    fc18:	a4dff06f          	j	f664 <tcp_process+0x88>
                 pcb->unsent == NULL) {
    fc1c:	07042783          	lw	a5,112(s0)
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
    fc20:	00078663          	beqz	a5,fc2c <tcp_process+0x650>
  return ERR_OK;
    fc24:	00000493          	li	s1,0
    fc28:	a3dff06f          	j	f664 <tcp_process+0x88>
        pcb->state = FIN_WAIT_2;
    fc2c:	00600793          	li	a5,6
    fc30:	00f42a23          	sw	a5,20(s0)
  return ERR_OK;
    fc34:	00000493          	li	s1,0
    fc38:	a2dff06f          	j	f664 <tcp_process+0x88>
      tcp_receive(pcb);
    fc3c:	00040513          	mv	a0,s0
    fc40:	975fe0ef          	jal	ra,e5b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
    fc44:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
    fc48:	0207f793          	andi	a5,a5,32
    fc4c:	00079663          	bnez	a5,fc58 <tcp_process+0x67c>
  return ERR_OK;
    fc50:	00000493          	li	s1,0
    fc54:	a11ff06f          	j	f664 <tcp_process+0x88>
        tcp_ack_now(pcb);
    fc58:	01e45783          	lhu	a5,30(s0)
    fc5c:	0027e793          	ori	a5,a5,2
    fc60:	00f41f23          	sh	a5,30(s0)
        tcp_pcb_purge(pcb);
    fc64:	00040513          	mv	a0,s0
    fc68:	731020ef          	jal	ra,12b98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
    fc6c:	000227b7          	lui	a5,0x22
    fc70:	f007a783          	lw	a5,-256(a5) # 21f00 <tcp_active_pcbs>
    fc74:	00878c63          	beq	a5,s0,fc8c <tcp_process+0x6b0>
    fc78:	02078663          	beqz	a5,fca4 <tcp_process+0x6c8>
    fc7c:	00c7a703          	lw	a4,12(a5)
    fc80:	00870e63          	beq	a4,s0,fc9c <tcp_process+0x6c0>
    fc84:	00070793          	mv	a5,a4
    fc88:	ff1ff06f          	j	fc78 <tcp_process+0x69c>
    fc8c:	00c7a703          	lw	a4,12(a5)
    fc90:	000227b7          	lui	a5,0x22
    fc94:	f0e7a023          	sw	a4,-256(a5) # 21f00 <tcp_active_pcbs>
    fc98:	00c0006f          	j	fca4 <tcp_process+0x6c8>
    fc9c:	00c42703          	lw	a4,12(s0)
    fca0:	00e7a623          	sw	a4,12(a5)
    fca4:	000227b7          	lui	a5,0x22
    fca8:	00100713          	li	a4,1
    fcac:	eee78e23          	sb	a4,-260(a5) # 21efc <tcp_active_pcbs_changed>
        pcb->state = TIME_WAIT;
    fcb0:	00a00793          	li	a5,10
    fcb4:	00f42a23          	sw	a5,20(s0)
        TCP_REG(&tcp_tw_pcbs, pcb);
    fcb8:	000227b7          	lui	a5,0x22
    fcbc:	f107a703          	lw	a4,-240(a5) # 21f10 <tcp_tw_pcbs>
    fcc0:	00e42623          	sw	a4,12(s0)
    fcc4:	f087a823          	sw	s0,-240(a5)
    fcc8:	221010ef          	jal	ra,116e8 <tcp_timer_needed>
  return ERR_OK;
    fccc:	00000493          	li	s1,0
    fcd0:	995ff06f          	j	f664 <tcp_process+0x88>
      tcp_receive(pcb);
    fcd4:	00040513          	mv	a0,s0
    fcd8:	8ddfe0ef          	jal	ra,e5b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
    fcdc:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    fce0:	0107f793          	andi	a5,a5,16
    fce4:	10078263          	beqz	a5,fde8 <tcp_process+0x80c>
    fce8:	05442703          	lw	a4,84(s0)
    fcec:	91c1a783          	lw	a5,-1764(gp) # 1faec <ackno>
    fcf0:	00f70663          	beq	a4,a5,fcfc <tcp_process+0x720>
  return ERR_OK;
    fcf4:	00000493          	li	s1,0
    fcf8:	96dff06f          	j	f664 <tcp_process+0x88>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
    fcfc:	07042783          	lw	a5,112(s0)
    fd00:	00078663          	beqz	a5,fd0c <tcp_process+0x730>
  return ERR_OK;
    fd04:	00000493          	li	s1,0
    fd08:	95dff06f          	j	f664 <tcp_process+0x88>
        tcp_pcb_purge(pcb);
    fd0c:	00040513          	mv	a0,s0
    fd10:	689020ef          	jal	ra,12b98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
    fd14:	000227b7          	lui	a5,0x22
    fd18:	f007a783          	lw	a5,-256(a5) # 21f00 <tcp_active_pcbs>
    fd1c:	00878c63          	beq	a5,s0,fd34 <tcp_process+0x758>
    fd20:	02078663          	beqz	a5,fd4c <tcp_process+0x770>
    fd24:	00c7a703          	lw	a4,12(a5)
    fd28:	00870e63          	beq	a4,s0,fd44 <tcp_process+0x768>
    fd2c:	00070793          	mv	a5,a4
    fd30:	ff1ff06f          	j	fd20 <tcp_process+0x744>
    fd34:	00c7a703          	lw	a4,12(a5)
    fd38:	000227b7          	lui	a5,0x22
    fd3c:	f0e7a023          	sw	a4,-256(a5) # 21f00 <tcp_active_pcbs>
    fd40:	00c0006f          	j	fd4c <tcp_process+0x770>
    fd44:	00c42703          	lw	a4,12(s0)
    fd48:	00e7a623          	sw	a4,12(a5)
    fd4c:	000227b7          	lui	a5,0x22
    fd50:	00100713          	li	a4,1
    fd54:	eee78e23          	sb	a4,-260(a5) # 21efc <tcp_active_pcbs_changed>
        pcb->state = TIME_WAIT;
    fd58:	00a00793          	li	a5,10
    fd5c:	00f42a23          	sw	a5,20(s0)
        TCP_REG(&tcp_tw_pcbs, pcb);
    fd60:	000227b7          	lui	a5,0x22
    fd64:	f107a703          	lw	a4,-240(a5) # 21f10 <tcp_tw_pcbs>
    fd68:	00e42623          	sw	a4,12(s0)
    fd6c:	f087a823          	sw	s0,-240(a5)
    fd70:	179010ef          	jal	ra,116e8 <tcp_timer_needed>
  return ERR_OK;
    fd74:	00000493          	li	s1,0
    fd78:	8edff06f          	j	f664 <tcp_process+0x88>
      tcp_receive(pcb);
    fd7c:	00040513          	mv	a0,s0
    fd80:	835fe0ef          	jal	ra,e5b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
    fd84:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
    fd88:	0107f793          	andi	a5,a5,16
    fd8c:	06078263          	beqz	a5,fdf0 <tcp_process+0x814>
    fd90:	05442703          	lw	a4,84(s0)
    fd94:	91c1a783          	lw	a5,-1764(gp) # 1faec <ackno>
    fd98:	00f70663          	beq	a4,a5,fda4 <tcp_process+0x7c8>
  return ERR_OK;
    fd9c:	00000493          	li	s1,0
    fda0:	8c5ff06f          	j	f664 <tcp_process+0x88>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
    fda4:	07042783          	lw	a5,112(s0)
    fda8:	00078663          	beqz	a5,fdb4 <tcp_process+0x7d8>
  return ERR_OK;
    fdac:	00000493          	li	s1,0
    fdb0:	8b5ff06f          	j	f664 <tcp_process+0x88>
        recv_flags |= TF_CLOSED;
    fdb4:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
    fdb8:	0107e793          	ori	a5,a5,16
    fdbc:	90f18a23          	sb	a5,-1772(gp) # 1fae4 <recv_flags>
  return ERR_OK;
    fdc0:	00000493          	li	s1,0
    fdc4:	8a1ff06f          	j	f664 <tcp_process+0x88>
    fdc8:	00000493          	li	s1,0
    fdcc:	899ff06f          	j	f664 <tcp_process+0x88>
    fdd0:	00000493          	li	s1,0
    fdd4:	891ff06f          	j	f664 <tcp_process+0x88>
    fdd8:	00000493          	li	s1,0
    fddc:	889ff06f          	j	f664 <tcp_process+0x88>
    fde0:	00000493          	li	s1,0
    fde4:	881ff06f          	j	f664 <tcp_process+0x88>
    fde8:	00000493          	li	s1,0
    fdec:	879ff06f          	j	f664 <tcp_process+0x88>
    fdf0:	00000493          	li	s1,0
    fdf4:	871ff06f          	j	f664 <tcp_process+0x88>

0000fdf8 <tcp_input_delayed_close>:
{
    fdf8:	ff010113          	addi	sp,sp,-16
    fdfc:	00112623          	sw	ra,12(sp)
    fe00:	00812423          	sw	s0,8(sp)
    fe04:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
    fe08:	02050263          	beqz	a0,fe2c <tcp_input_delayed_close+0x34>
  if (recv_flags & TF_CLOSED) {
    fe0c:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
    fe10:	0107f793          	andi	a5,a5,16
    fe14:	02079463          	bnez	a5,fe3c <tcp_input_delayed_close+0x44>
  return 0;
    fe18:	00000513          	li	a0,0
}
    fe1c:	00c12083          	lw	ra,12(sp)
    fe20:	00812403          	lw	s0,8(sp)
    fe24:	01010113          	addi	sp,sp,16
    fe28:	00008067          	ret
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
    fe2c:	0001e537          	lui	a0,0x1e
    fe30:	f0850513          	addi	a0,a0,-248 # 1df08 <altcp_tcp_functions+0x7d0>
    fe34:	f51fd0ef          	jal	ra,dd84 <bsp_printf>
    fe38:	fd5ff06f          	j	fe0c <tcp_input_delayed_close+0x14>
    if (!(pcb->flags & TF_RXCLOSED)) {
    fe3c:	01e45783          	lhu	a5,30(s0)
    fe40:	0107f793          	andi	a5,a5,16
    fe44:	00079c63          	bnez	a5,fe5c <tcp_input_delayed_close+0x64>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
    fe48:	09442783          	lw	a5,148(s0)
    fe4c:	00078863          	beqz	a5,fe5c <tcp_input_delayed_close+0x64>
    fe50:	ff100593          	li	a1,-15
    fe54:	01042503          	lw	a0,16(s0)
    fe58:	000780e7          	jalr	a5
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
    fe5c:	00040593          	mv	a1,s0
    fe60:	00022537          	lui	a0,0x22
    fe64:	f0050513          	addi	a0,a0,-256 # 21f00 <tcp_active_pcbs>
    fe68:	5b9020ef          	jal	ra,12c20 <tcp_pcb_remove>
    tcp_free(pcb);
    fe6c:	00040513          	mv	a0,s0
    fe70:	09c020ef          	jal	ra,11f0c <tcp_free>
    return 1;
    fe74:	00100513          	li	a0,1
    fe78:	fa5ff06f          	j	fe1c <tcp_input_delayed_close+0x24>

0000fe7c <tcp_input>:
{
    fe7c:	fe010113          	addi	sp,sp,-32
    fe80:	00112e23          	sw	ra,28(sp)
    fe84:	00812c23          	sw	s0,24(sp)
    fe88:	00912a23          	sw	s1,20(sp)
    fe8c:	01212823          	sw	s2,16(sp)
    fe90:	01312623          	sw	s3,12(sp)
    fe94:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
    fe98:	06050c63          	beqz	a0,ff10 <tcp_input+0x94>
  TCP_STATS_INC(tcp.recv);
    fe9c:	000227b7          	lui	a5,0x22
    fea0:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    fea4:	0ae7d703          	lhu	a4,174(a5)
    fea8:	00170713          	addi	a4,a4,1
    feac:	0ae79723          	sh	a4,174(a5)
  tcphdr = (struct tcp_hdr *)p->payload;
    feb0:	00442703          	lw	a4,4(s0)
    feb4:	92e1a823          	sw	a4,-1744(gp) # 1fb00 <tcphdr>
  if (p->len < TCP_HLEN) {
    feb8:	00a45703          	lhu	a4,10(s0)
    febc:	01300793          	li	a5,19
    fec0:	06e7e063          	bltu	a5,a4,ff20 <tcp_input+0xa4>
    TCP_STATS_INC(tcp.lenerr);
    fec4:	000227b7          	lui	a5,0x22
    fec8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    fecc:	0b67d703          	lhu	a4,182(a5)
    fed0:	00170713          	addi	a4,a4,1
    fed4:	0ae79b23          	sh	a4,182(a5)
  TCP_STATS_INC(tcp.drop);
    fed8:	000227b7          	lui	a5,0x22
    fedc:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    fee0:	0b27d703          	lhu	a4,178(a5)
    fee4:	00170713          	addi	a4,a4,1
    fee8:	0ae79923          	sh	a4,178(a5)
  pbuf_free(p);
    feec:	00040513          	mv	a0,s0
    fef0:	c61fc0ef          	jal	ra,cb50 <pbuf_free>
}
    fef4:	01c12083          	lw	ra,28(sp)
    fef8:	01812403          	lw	s0,24(sp)
    fefc:	01412483          	lw	s1,20(sp)
    ff00:	01012903          	lw	s2,16(sp)
    ff04:	00c12983          	lw	s3,12(sp)
    ff08:	02010113          	addi	sp,sp,32
    ff0c:	00008067          	ret
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
    ff10:	0001e537          	lui	a0,0x1e
    ff14:	f3050513          	addi	a0,a0,-208 # 1df30 <altcp_tcp_functions+0x7f8>
    ff18:	e6dfd0ef          	jal	ra,dd84 <bsp_printf>
    ff1c:	f81ff06f          	j	fe9c <tcp_input+0x20>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
    ff20:	000227b7          	lui	a5,0x22
    ff24:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
    ff28:	0007a583          	lw	a1,0(a5)
    ff2c:	0147a503          	lw	a0,20(a5)
    ff30:	4f0080ef          	jal	ra,18420 <ip4_addr_isbroadcast_u32>
    ff34:	04051c63          	bnez	a0,ff8c <tcp_input+0x110>
      ip_addr_ismulticast(ip_current_dest_addr())) {
    ff38:	000227b7          	lui	a5,0x22
    ff3c:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
    ff40:	0147a783          	lw	a5,20(a5)
    ff44:	0f07f793          	andi	a5,a5,240
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
    ff48:	0e000713          	li	a4,224
    ff4c:	04e78063          	beq	a5,a4,ff8c <tcp_input+0x110>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
    ff50:	00022737          	lui	a4,0x22
    ff54:	ef870713          	addi	a4,a4,-264 # 21ef8 <ip_data+0x14>
    ff58:	000226b7          	lui	a3,0x22
    ff5c:	ef468693          	addi	a3,a3,-268 # 21ef4 <ip_data+0x10>
    ff60:	00845603          	lhu	a2,8(s0)
    ff64:	00600593          	li	a1,6
    ff68:	00040513          	mv	a0,s0
    ff6c:	4d1040ef          	jal	ra,14c3c <ip_chksum_pseudo>
    if (chksum != 0) {
    ff70:	02050a63          	beqz	a0,ffa4 <tcp_input+0x128>
      TCP_STATS_INC(tcp.chkerr);
    ff74:	000227b7          	lui	a5,0x22
    ff78:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    ff7c:	0b47d703          	lhu	a4,180(a5)
    ff80:	00170713          	addi	a4,a4,1
    ff84:	0ae79a23          	sh	a4,180(a5)
      goto dropped;
    ff88:	f51ff06f          	j	fed8 <tcp_input+0x5c>
    TCP_STATS_INC(tcp.proterr);
    ff8c:	000227b7          	lui	a5,0x22
    ff90:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
    ff94:	0bc7d703          	lhu	a4,188(a5)
    ff98:	00170713          	addi	a4,a4,1
    ff9c:	0ae79e23          	sh	a4,188(a5)
    goto dropped;
    ffa0:	f39ff06f          	j	fed8 <tcp_input+0x5c>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
    ffa4:	9301a783          	lw	a5,-1744(gp) # 1fb00 <tcphdr>
    ffa8:	00c7c503          	lbu	a0,12(a5)
    ffac:	00d7c783          	lbu	a5,13(a5)
    ffb0:	00879793          	slli	a5,a5,0x8
    ffb4:	00a7e533          	or	a0,a5,a0
    ffb8:	cc0fa0ef          	jal	ra,a478 <lwip_htons>
    ffbc:	00c55593          	srli	a1,a0,0xc
    ffc0:	0ff5f593          	andi	a1,a1,255
    ffc4:	00259593          	slli	a1,a1,0x2
    ffc8:	0ff5f593          	andi	a1,a1,255
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
    ffcc:	01300793          	li	a5,19
    ffd0:	08b7f663          	bgeu	a5,a1,1005c <tcp_input+0x1e0>
    ffd4:	01059793          	slli	a5,a1,0x10
    ffd8:	0107d793          	srli	a5,a5,0x10
    ffdc:	00845703          	lhu	a4,8(s0)
    ffe0:	06f76e63          	bltu	a4,a5,1005c <tcp_input+0x1e0>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
    ffe4:	fec78713          	addi	a4,a5,-20
    ffe8:	01071713          	slli	a4,a4,0x10
    ffec:	01075713          	srli	a4,a4,0x10
    fff0:	92e19723          	sh	a4,-1746(gp) # 1fafe <tcphdr_optlen>
  tcphdr_opt2 = NULL;
    fff4:	9201a423          	sw	zero,-1752(gp) # 1faf8 <tcphdr_opt2>
  if (p->len >= hdrlen_bytes) {
    fff8:	00a45683          	lhu	a3,10(s0)
    fffc:	06f6fc63          	bgeu	a3,a5,10074 <tcp_input+0x1f8>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
   10000:	00042783          	lw	a5,0(s0)
   10004:	1c078e63          	beqz	a5,101e0 <tcp_input+0x364>
    pbuf_remove_header(p, TCP_HLEN);
   10008:	01400593          	li	a1,20
   1000c:	00040513          	mv	a0,s0
   10010:	a3dfc0ef          	jal	ra,ca4c <pbuf_remove_header>
    tcphdr_opt1len = p->len;
   10014:	00a45483          	lhu	s1,10(s0)
   10018:	92919623          	sh	s1,-1748(gp) # 1fafc <tcphdr_opt1len>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
   1001c:	92e1d983          	lhu	s3,-1746(gp) # 1fafe <tcphdr_optlen>
   10020:	40998933          	sub	s2,s3,s1
   10024:	01091913          	slli	s2,s2,0x10
   10028:	01095913          	srli	s2,s2,0x10
    pbuf_remove_header(p, tcphdr_opt1len);
   1002c:	00048593          	mv	a1,s1
   10030:	00040513          	mv	a0,s0
   10034:	a19fc0ef          	jal	ra,ca4c <pbuf_remove_header>
    if (opt2len > p->next->len) {
   10038:	00042503          	lw	a0,0(s0)
   1003c:	00a55783          	lhu	a5,10(a0)
   10040:	1b27f863          	bgeu	a5,s2,101f0 <tcp_input+0x374>
      TCP_STATS_INC(tcp.lenerr);
   10044:	000227b7          	lui	a5,0x22
   10048:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1004c:	0b67d703          	lhu	a4,182(a5)
   10050:	00170713          	addi	a4,a4,1
   10054:	0ae79b23          	sh	a4,182(a5)
      goto dropped;
   10058:	e81ff06f          	j	fed8 <tcp_input+0x5c>
    TCP_STATS_INC(tcp.lenerr);
   1005c:	000227b7          	lui	a5,0x22
   10060:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   10064:	0b67d703          	lhu	a4,182(a5)
   10068:	00170713          	addi	a4,a4,1
   1006c:	0ae79b23          	sh	a4,182(a5)
    goto dropped;
   10070:	e69ff06f          	j	fed8 <tcp_input+0x5c>
    tcphdr_opt1len = tcphdr_optlen;
   10074:	92e19623          	sh	a4,-1748(gp) # 1fafc <tcphdr_opt1len>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
   10078:	00040513          	mv	a0,s0
   1007c:	9d1fc0ef          	jal	ra,ca4c <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
   10080:	9301a483          	lw	s1,-1744(gp) # 1fb00 <tcphdr>
   10084:	0004c503          	lbu	a0,0(s1)
   10088:	0014c783          	lbu	a5,1(s1)
   1008c:	00879793          	slli	a5,a5,0x8
   10090:	00a7e533          	or	a0,a5,a0
   10094:	be4fa0ef          	jal	ra,a478 <lwip_htons>
   10098:	00a48023          	sb	a0,0(s1)
   1009c:	00855513          	srli	a0,a0,0x8
   100a0:	00a480a3          	sb	a0,1(s1)
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
   100a4:	9301a483          	lw	s1,-1744(gp) # 1fb00 <tcphdr>
   100a8:	0024c503          	lbu	a0,2(s1)
   100ac:	0034c783          	lbu	a5,3(s1)
   100b0:	00879793          	slli	a5,a5,0x8
   100b4:	00a7e533          	or	a0,a5,a0
   100b8:	bc0fa0ef          	jal	ra,a478 <lwip_htons>
   100bc:	00a48123          	sb	a0,2(s1)
   100c0:	00855513          	srli	a0,a0,0x8
   100c4:	00a481a3          	sb	a0,3(s1)
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
   100c8:	9301a483          	lw	s1,-1744(gp) # 1fb00 <tcphdr>
   100cc:	0044c503          	lbu	a0,4(s1)
   100d0:	0054c783          	lbu	a5,5(s1)
   100d4:	00879793          	slli	a5,a5,0x8
   100d8:	00a7e533          	or	a0,a5,a0
   100dc:	0064c783          	lbu	a5,6(s1)
   100e0:	01079793          	slli	a5,a5,0x10
   100e4:	00a7e7b3          	or	a5,a5,a0
   100e8:	0074c503          	lbu	a0,7(s1)
   100ec:	01851513          	slli	a0,a0,0x18
   100f0:	00f56533          	or	a0,a0,a5
   100f4:	b9cfa0ef          	jal	ra,a490 <lwip_htonl>
   100f8:	00a48223          	sb	a0,4(s1)
   100fc:	00855793          	srli	a5,a0,0x8
   10100:	00f482a3          	sb	a5,5(s1)
   10104:	01055793          	srli	a5,a0,0x10
   10108:	00f48323          	sb	a5,6(s1)
   1010c:	01855793          	srli	a5,a0,0x18
   10110:	00f483a3          	sb	a5,7(s1)
   10114:	92a1a023          	sw	a0,-1760(gp) # 1faf0 <seqno>
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
   10118:	9301a483          	lw	s1,-1744(gp) # 1fb00 <tcphdr>
   1011c:	0084c503          	lbu	a0,8(s1)
   10120:	0094c783          	lbu	a5,9(s1)
   10124:	00879793          	slli	a5,a5,0x8
   10128:	00a7e533          	or	a0,a5,a0
   1012c:	00a4c783          	lbu	a5,10(s1)
   10130:	01079793          	slli	a5,a5,0x10
   10134:	00a7e7b3          	or	a5,a5,a0
   10138:	00b4c503          	lbu	a0,11(s1)
   1013c:	01851513          	slli	a0,a0,0x18
   10140:	00f56533          	or	a0,a0,a5
   10144:	b4cfa0ef          	jal	ra,a490 <lwip_htonl>
   10148:	00a48423          	sb	a0,8(s1)
   1014c:	00855793          	srli	a5,a0,0x8
   10150:	00f484a3          	sb	a5,9(s1)
   10154:	01055793          	srli	a5,a0,0x10
   10158:	00f48523          	sb	a5,10(s1)
   1015c:	01855793          	srli	a5,a0,0x18
   10160:	00f485a3          	sb	a5,11(s1)
   10164:	90a1ae23          	sw	a0,-1764(gp) # 1faec <ackno>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
   10168:	9301a483          	lw	s1,-1744(gp) # 1fb00 <tcphdr>
   1016c:	00e4c503          	lbu	a0,14(s1)
   10170:	00f4c783          	lbu	a5,15(s1)
   10174:	00879793          	slli	a5,a5,0x8
   10178:	00a7e533          	or	a0,a5,a0
   1017c:	afcfa0ef          	jal	ra,a478 <lwip_htons>
   10180:	00a48723          	sb	a0,14(s1)
   10184:	00855513          	srli	a0,a0,0x8
   10188:	00a487a3          	sb	a0,15(s1)
  flags = TCPH_FLAGS(tcphdr);
   1018c:	9301a783          	lw	a5,-1744(gp) # 1fb00 <tcphdr>
   10190:	00c7c503          	lbu	a0,12(a5)
   10194:	00d7c783          	lbu	a5,13(a5)
   10198:	00879793          	slli	a5,a5,0x8
   1019c:	00a7e533          	or	a0,a5,a0
   101a0:	ad8fa0ef          	jal	ra,a478 <lwip_htons>
   101a4:	03f57513          	andi	a0,a0,63
   101a8:	90a18aa3          	sb	a0,-1771(gp) # 1fae5 <flags>
  tcplen = p->tot_len;
   101ac:	00845783          	lhu	a5,8(s0)
   101b0:	90f19b23          	sh	a5,-1770(gp) # 1fae6 <tcplen>
  if (flags & (TCP_FIN | TCP_SYN)) {
   101b4:	00357513          	andi	a0,a0,3
   101b8:	00050c63          	beqz	a0,101d0 <tcp_input+0x354>
    tcplen++;
   101bc:	00178713          	addi	a4,a5,1
   101c0:	01071713          	slli	a4,a4,0x10
   101c4:	01075713          	srli	a4,a4,0x10
   101c8:	90e19b23          	sh	a4,-1770(gp) # 1fae6 <tcplen>
    if (tcplen < p->tot_len) {
   101cc:	06f76e63          	bltu	a4,a5,10248 <tcp_input+0x3cc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   101d0:	000227b7          	lui	a5,0x22
   101d4:	f007a483          	lw	s1,-256(a5) # 21f00 <tcp_active_pcbs>
  prev = NULL;
   101d8:	00000913          	li	s2,0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   101dc:	0d80006f          	j	102b4 <tcp_input+0x438>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
   101e0:	0001e537          	lui	a0,0x1e
   101e4:	f4850513          	addi	a0,a0,-184 # 1df48 <altcp_tcp_functions+0x810>
   101e8:	b9dfd0ef          	jal	ra,dd84 <bsp_printf>
   101ec:	e1dff06f          	j	10008 <tcp_input+0x18c>
    tcphdr_opt2 = (u8_t *)p->next->payload;
   101f0:	00452703          	lw	a4,4(a0)
   101f4:	92e1a423          	sw	a4,-1752(gp) # 1faf8 <tcphdr_opt2>
    pbuf_remove_header(p->next, opt2len);
   101f8:	00090593          	mv	a1,s2
   101fc:	851fc0ef          	jal	ra,ca4c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
   10200:	00845783          	lhu	a5,8(s0)
   10204:	413484b3          	sub	s1,s1,s3
   10208:	009784b3          	add	s1,a5,s1
   1020c:	00941423          	sh	s1,8(s0)
    LWIP_ASSERT("p->len == 0", p->len == 0);
   10210:	00a45783          	lhu	a5,10(s0)
   10214:	02079263          	bnez	a5,10238 <tcp_input+0x3bc>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
   10218:	00845703          	lhu	a4,8(s0)
   1021c:	00042783          	lw	a5,0(s0)
   10220:	0087d783          	lhu	a5,8(a5)
   10224:	e4f70ee3          	beq	a4,a5,10080 <tcp_input+0x204>
   10228:	0001e537          	lui	a0,0x1e
   1022c:	f6450513          	addi	a0,a0,-156 # 1df64 <altcp_tcp_functions+0x82c>
   10230:	b55fd0ef          	jal	ra,dd84 <bsp_printf>
   10234:	e4dff06f          	j	10080 <tcp_input+0x204>
    LWIP_ASSERT("p->len == 0", p->len == 0);
   10238:	0001e537          	lui	a0,0x1e
   1023c:	f5850513          	addi	a0,a0,-168 # 1df58 <altcp_tcp_functions+0x820>
   10240:	b45fd0ef          	jal	ra,dd84 <bsp_printf>
   10244:	fd5ff06f          	j	10218 <tcp_input+0x39c>
      TCP_STATS_INC(tcp.lenerr);
   10248:	000227b7          	lui	a5,0x22
   1024c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   10250:	0b67d703          	lhu	a4,182(a5)
   10254:	00170713          	addi	a4,a4,1
   10258:	0ae79b23          	sh	a4,182(a5)
      goto dropped;
   1025c:	c7dff06f          	j	fed8 <tcp_input+0x5c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
   10260:	0001e537          	lui	a0,0x1e
   10264:	f8450513          	addi	a0,a0,-124 # 1df84 <altcp_tcp_functions+0x84c>
   10268:	b1dfd0ef          	jal	ra,dd84 <bsp_printf>
   1026c:	0540006f          	j	102c0 <tcp_input+0x444>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
   10270:	0001e537          	lui	a0,0x1e
   10274:	fac50513          	addi	a0,a0,-84 # 1dfac <altcp_tcp_functions+0x874>
   10278:	b0dfd0ef          	jal	ra,dd84 <bsp_printf>
   1027c:	0500006f          	j	102cc <tcp_input+0x450>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
   10280:	0001e537          	lui	a0,0x1e
   10284:	fd850513          	addi	a0,a0,-40 # 1dfd8 <altcp_tcp_functions+0x8a0>
   10288:	afdfd0ef          	jal	ra,dd84 <bsp_printf>
   1028c:	04c0006f          	j	102d8 <tcp_input+0x45c>
    if (pcb->remote_port == tcphdr->src &&
   10290:	01c4d683          	lhu	a3,28(s1)
   10294:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
   10298:	00074603          	lbu	a2,0(a4)
   1029c:	00174783          	lbu	a5,1(a4)
   102a0:	00879793          	slli	a5,a5,0x8
   102a4:	00c7e7b3          	or	a5,a5,a2
   102a8:	04f68c63          	beq	a3,a5,10300 <tcp_input+0x484>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   102ac:	00048913          	mv	s2,s1
   102b0:	00c4a483          	lw	s1,12(s1)
   102b4:	0a048c63          	beqz	s1,1036c <tcp_input+0x4f0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
   102b8:	0144a783          	lw	a5,20(s1)
   102bc:	fa0782e3          	beqz	a5,10260 <tcp_input+0x3e4>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
   102c0:	0144a703          	lw	a4,20(s1)
   102c4:	00a00793          	li	a5,10
   102c8:	faf704e3          	beq	a4,a5,10270 <tcp_input+0x3f4>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
   102cc:	0144a703          	lw	a4,20(s1)
   102d0:	00100793          	li	a5,1
   102d4:	faf706e3          	beq	a4,a5,10280 <tcp_input+0x404>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   102d8:	0084c703          	lbu	a4,8(s1)
   102dc:	fa070ae3          	beqz	a4,10290 <tcp_input+0x414>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   102e0:	000227b7          	lui	a5,0x22
   102e4:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   102e8:	0047a783          	lw	a5,4(a5)
   102ec:	0387c783          	lbu	a5,56(a5)
   102f0:	00178793          	addi	a5,a5,1
   102f4:	0ff7f793          	andi	a5,a5,255
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   102f8:	f8f70ce3          	beq	a4,a5,10290 <tcp_input+0x414>
   102fc:	fb1ff06f          	j	102ac <tcp_input+0x430>
        pcb->local_port == tcphdr->dest &&
   10300:	01a4d683          	lhu	a3,26(s1)
   10304:	00274603          	lbu	a2,2(a4)
   10308:	00374783          	lbu	a5,3(a4)
   1030c:	00879793          	slli	a5,a5,0x8
   10310:	00c7e7b3          	or	a5,a5,a2
    if (pcb->remote_port == tcphdr->src &&
   10314:	f8f69ce3          	bne	a3,a5,102ac <tcp_input+0x430>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
   10318:	0044a703          	lw	a4,4(s1)
   1031c:	000227b7          	lui	a5,0x22
   10320:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   10324:	0107a783          	lw	a5,16(a5)
        pcb->local_port == tcphdr->dest &&
   10328:	f8f712e3          	bne	a4,a5,102ac <tcp_input+0x430>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
   1032c:	0004a703          	lw	a4,0(s1)
   10330:	000227b7          	lui	a5,0x22
   10334:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   10338:	0147a783          	lw	a5,20(a5)
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
   1033c:	f6f718e3          	bne	a4,a5,102ac <tcp_input+0x430>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
   10340:	00c4a783          	lw	a5,12(s1)
   10344:	0e978663          	beq	a5,s1,10430 <tcp_input+0x5b4>
      if (prev != NULL) {
   10348:	0e090c63          	beqz	s2,10440 <tcp_input+0x5c4>
        prev->next = pcb->next;
   1034c:	00c4a783          	lw	a5,12(s1)
   10350:	00f92623          	sw	a5,12(s2)
        pcb->next = tcp_active_pcbs;
   10354:	000227b7          	lui	a5,0x22
   10358:	f007a703          	lw	a4,-256(a5) # 21f00 <tcp_active_pcbs>
   1035c:	00e4a623          	sw	a4,12(s1)
        tcp_active_pcbs = pcb;
   10360:	f097a023          	sw	s1,-256(a5)
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
   10364:	00c4a783          	lw	a5,12(s1)
   10368:	0e978863          	beq	a5,s1,10458 <tcp_input+0x5dc>
  if (pcb == NULL) {
   1036c:	0e048e63          	beqz	s1,10468 <tcp_input+0x5ec>
  if (pcb != NULL) {
   10370:	40048663          	beqz	s1,1077c <tcp_input+0x900>
    inseg.next = NULL;
   10374:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
   10378:	0007a023          	sw	zero,0(a5)
    inseg.len = p->tot_len;
   1037c:	00845703          	lhu	a4,8(s0)
   10380:	00e79423          	sh	a4,8(a5)
    inseg.p = p;
   10384:	0087a223          	sw	s0,4(a5)
    inseg.tcphdr = tcphdr;
   10388:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
   1038c:	00e7a623          	sw	a4,12(a5)
    recv_data = NULL;
   10390:	9001a823          	sw	zero,-1776(gp) # 1fae0 <recv_data>
    recv_flags = 0;
   10394:	90018a23          	sb	zero,-1772(gp) # 1fae4 <recv_flags>
    recv_acked = 0;
   10398:	90019c23          	sh	zero,-1768(gp) # 1fae8 <recv_acked>
    if (flags & TCP_PSH) {
   1039c:	9151c783          	lbu	a5,-1771(gp) # 1fae5 <flags>
   103a0:	0087f793          	andi	a5,a5,8
   103a4:	00078863          	beqz	a5,103b4 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
   103a8:	00d44783          	lbu	a5,13(s0)
   103ac:	0017e793          	ori	a5,a5,1
   103b0:	00f406a3          	sb	a5,13(s0)
    if (pcb->refused_data != NULL) {
   103b4:	07c4a783          	lw	a5,124(s1)
   103b8:	02078263          	beqz	a5,103dc <tcp_input+0x560>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
   103bc:	00048513          	mv	a0,s1
   103c0:	244030ef          	jal	ra,13604 <tcp_process_refused_data>
   103c4:	ff300793          	li	a5,-13
   103c8:	22f50663          	beq	a0,a5,105f4 <tcp_input+0x778>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
   103cc:	07c4a783          	lw	a5,124(s1)
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
   103d0:	00078663          	beqz	a5,103dc <tcp_input+0x560>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
   103d4:	9161d783          	lhu	a5,-1770(gp) # 1fae6 <tcplen>
   103d8:	20079e63          	bnez	a5,105f4 <tcp_input+0x778>
    tcp_input_pcb = pcb;
   103dc:	000227b7          	lui	a5,0x22
   103e0:	ee97a023          	sw	s1,-288(a5) # 21ee0 <tcp_input_pcb>
    err = tcp_process(pcb);
   103e4:	00048513          	mv	a0,s1
   103e8:	9f4ff0ef          	jal	ra,f5dc <tcp_process>
    if (err != ERR_ABRT) {
   103ec:	ff300793          	li	a5,-13
   103f0:	22f50063          	beq	a0,a5,10610 <tcp_input+0x794>
      if (recv_flags & TF_RESET) {
   103f4:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
   103f8:	0087f793          	andi	a5,a5,8
   103fc:	24078463          	beqz	a5,10644 <tcp_input+0x7c8>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
   10400:	0944a783          	lw	a5,148(s1)
   10404:	00078863          	beqz	a5,10414 <tcp_input+0x598>
   10408:	ff200593          	li	a1,-14
   1040c:	0104a503          	lw	a0,16(s1)
   10410:	000780e7          	jalr	a5
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
   10414:	00048593          	mv	a1,s1
   10418:	00022537          	lui	a0,0x22
   1041c:	f0050513          	addi	a0,a0,-256 # 21f00 <tcp_active_pcbs>
   10420:	001020ef          	jal	ra,12c20 <tcp_pcb_remove>
        tcp_free(pcb);
   10424:	00048513          	mv	a0,s1
   10428:	2e5010ef          	jal	ra,11f0c <tcp_free>
   1042c:	1e40006f          	j	10610 <tcp_input+0x794>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
   10430:	0001e537          	lui	a0,0x1e
   10434:	00050513          	mv	a0,a0
   10438:	94dfd0ef          	jal	ra,dd84 <bsp_printf>
   1043c:	f0dff06f          	j	10348 <tcp_input+0x4cc>
        TCP_STATS_INC(tcp.cachehit);
   10440:	000227b7          	lui	a5,0x22
   10444:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   10448:	0c27d703          	lhu	a4,194(a5)
   1044c:	00170713          	addi	a4,a4,1
   10450:	0ce79123          	sh	a4,194(a5)
   10454:	f11ff06f          	j	10364 <tcp_input+0x4e8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
   10458:	0001e537          	lui	a0,0x1e
   1045c:	02c50513          	addi	a0,a0,44 # 1e02c <altcp_tcp_functions+0x8f4>
   10460:	925fd0ef          	jal	ra,dd84 <bsp_printf>
   10464:	f09ff06f          	j	1036c <tcp_input+0x4f0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   10468:	000227b7          	lui	a5,0x22
   1046c:	f107a483          	lw	s1,-240(a5) # 21f10 <tcp_tw_pcbs>
   10470:	0340006f          	j	104a4 <tcp_input+0x628>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
   10474:	0001e537          	lui	a0,0x1e
   10478:	05850513          	addi	a0,a0,88 # 1e058 <altcp_tcp_functions+0x920>
   1047c:	909fd0ef          	jal	ra,dd84 <bsp_printf>
   10480:	0340006f          	j	104b4 <tcp_input+0x638>
      if (pcb->remote_port == tcphdr->src &&
   10484:	01c4d683          	lhu	a3,28(s1)
   10488:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
   1048c:	00074603          	lbu	a2,0(a4)
   10490:	00174783          	lbu	a5,1(a4)
   10494:	00879793          	slli	a5,a5,0x8
   10498:	00c7e7b3          	or	a5,a5,a2
   1049c:	04f68063          	beq	a3,a5,104dc <tcp_input+0x660>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   104a0:	00c4a483          	lw	s1,12(s1)
   104a4:	08048663          	beqz	s1,10530 <tcp_input+0x6b4>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
   104a8:	0144a703          	lw	a4,20(s1)
   104ac:	00a00793          	li	a5,10
   104b0:	fcf712e3          	bne	a4,a5,10474 <tcp_input+0x5f8>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   104b4:	0084c703          	lbu	a4,8(s1)
   104b8:	fc0706e3          	beqz	a4,10484 <tcp_input+0x608>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   104bc:	000227b7          	lui	a5,0x22
   104c0:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   104c4:	0047a783          	lw	a5,4(a5)
   104c8:	0387c783          	lbu	a5,56(a5)
   104cc:	00178793          	addi	a5,a5,1
   104d0:	0ff7f793          	andi	a5,a5,255
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   104d4:	faf708e3          	beq	a4,a5,10484 <tcp_input+0x608>
   104d8:	fc9ff06f          	j	104a0 <tcp_input+0x624>
          pcb->local_port == tcphdr->dest &&
   104dc:	01a4d683          	lhu	a3,26(s1)
   104e0:	00274603          	lbu	a2,2(a4)
   104e4:	00374783          	lbu	a5,3(a4)
   104e8:	00879793          	slli	a5,a5,0x8
   104ec:	00c7e7b3          	or	a5,a5,a2
      if (pcb->remote_port == tcphdr->src &&
   104f0:	faf698e3          	bne	a3,a5,104a0 <tcp_input+0x624>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
   104f4:	0044a703          	lw	a4,4(s1)
   104f8:	000227b7          	lui	a5,0x22
   104fc:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   10500:	0107a783          	lw	a5,16(a5)
          pcb->local_port == tcphdr->dest &&
   10504:	f8f71ee3          	bne	a4,a5,104a0 <tcp_input+0x624>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
   10508:	0004a703          	lw	a4,0(s1)
   1050c:	000227b7          	lui	a5,0x22
   10510:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   10514:	0147a783          	lw	a5,20(a5)
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
   10518:	f8f714e3          	bne	a4,a5,104a0 <tcp_input+0x624>
          tcp_timewait_input(pcb);
   1051c:	00048513          	mv	a0,s1
   10520:	99dfd0ef          	jal	ra,debc <tcp_timewait_input>
        pbuf_free(p);
   10524:	00040513          	mv	a0,s0
   10528:	e28fc0ef          	jal	ra,cb50 <pbuf_free>
        return;
   1052c:	9c9ff06f          	j	fef4 <tcp_input+0x78>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   10530:	000227b7          	lui	a5,0x22
   10534:	f087a803          	lw	a6,-248(a5) # 21f08 <tcp_listen_pcbs>
   10538:	00080513          	mv	a0,a6
    prev = NULL;
   1053c:	00048593          	mv	a1,s1
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   10540:	0280006f          	j	10568 <tcp_input+0x6ec>
      if (lpcb->local_port == tcphdr->dest) {
   10544:	01a55683          	lhu	a3,26(a0)
   10548:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
   1054c:	00274603          	lbu	a2,2(a4)
   10550:	00374783          	lbu	a5,3(a4)
   10554:	00879793          	slli	a5,a5,0x8
   10558:	00c7e7b3          	or	a5,a5,a2
   1055c:	02f68c63          	beq	a3,a5,10594 <tcp_input+0x718>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   10560:	00050593          	mv	a1,a0
   10564:	00c52503          	lw	a0,12(a0)
   10568:	04050463          	beqz	a0,105b0 <tcp_input+0x734>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
   1056c:	00854703          	lbu	a4,8(a0)
   10570:	fc070ae3          	beqz	a4,10544 <tcp_input+0x6c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   10574:	000227b7          	lui	a5,0x22
   10578:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   1057c:	0047a783          	lw	a5,4(a5)
   10580:	0387c783          	lbu	a5,56(a5)
   10584:	00178793          	addi	a5,a5,1
   10588:	0ff7f793          	andi	a5,a5,255
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
   1058c:	faf70ce3          	beq	a4,a5,10544 <tcp_input+0x6c8>
   10590:	fd1ff06f          	j	10560 <tcp_input+0x6e4>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
   10594:	00052703          	lw	a4,0(a0)
   10598:	000227b7          	lui	a5,0x22
   1059c:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   105a0:	0147a783          	lw	a5,20(a5)
   105a4:	00f70663          	beq	a4,a5,105b0 <tcp_input+0x734>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
   105a8:	00050463          	beqz	a0,105b0 <tcp_input+0x734>
   105ac:	fa071ae3          	bnez	a4,10560 <tcp_input+0x6e4>
    if (lpcb != NULL) {
   105b0:	dc0500e3          	beqz	a0,10370 <tcp_input+0x4f4>
      if (prev != NULL) {
   105b4:	02058463          	beqz	a1,105dc <tcp_input+0x760>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
   105b8:	00c52783          	lw	a5,12(a0)
   105bc:	00f5a623          	sw	a5,12(a1)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
   105c0:	01052623          	sw	a6,12(a0)
        tcp_listen_pcbs.listen_pcbs = lpcb;
   105c4:	000227b7          	lui	a5,0x22
   105c8:	f0a7a423          	sw	a0,-248(a5) # 21f08 <tcp_listen_pcbs>
        tcp_listen_input(lpcb);
   105cc:	addfd0ef          	jal	ra,e0a8 <tcp_listen_input>
      pbuf_free(p);
   105d0:	00040513          	mv	a0,s0
   105d4:	d7cfc0ef          	jal	ra,cb50 <pbuf_free>
      return;
   105d8:	91dff06f          	j	fef4 <tcp_input+0x78>
        TCP_STATS_INC(tcp.cachehit);
   105dc:	000227b7          	lui	a5,0x22
   105e0:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   105e4:	0c27d703          	lhu	a4,194(a5)
   105e8:	00170713          	addi	a4,a4,1
   105ec:	0ce79123          	sh	a4,194(a5)
   105f0:	fddff06f          	j	105cc <tcp_input+0x750>
        if (pcb->rcv_ann_wnd == 0) {
   105f4:	02e4d783          	lhu	a5,46(s1)
   105f8:	04078063          	beqz	a5,10638 <tcp_input+0x7bc>
        TCP_STATS_INC(tcp.drop);
   105fc:	000227b7          	lui	a5,0x22
   10600:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   10604:	0b27d703          	lhu	a4,178(a5)
   10608:	00170713          	addi	a4,a4,1
   1060c:	0ae79923          	sh	a4,178(a5)
    tcp_input_pcb = NULL;
   10610:	000227b7          	lui	a5,0x22
   10614:	ee07a023          	sw	zero,-288(a5) # 21ee0 <tcp_input_pcb>
    recv_data = NULL;
   10618:	9001a823          	sw	zero,-1776(gp) # 1fae0 <recv_data>
    if (inseg.p != NULL) {
   1061c:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
   10620:	0047a503          	lw	a0,4(a5)
   10624:	8c0508e3          	beqz	a0,fef4 <tcp_input+0x78>
      pbuf_free(inseg.p);
   10628:	d28fc0ef          	jal	ra,cb50 <pbuf_free>
      inseg.p = NULL;
   1062c:	a1818793          	addi	a5,gp,-1512 # 1fbe8 <inseg>
   10630:	0007a223          	sw	zero,4(a5)
   10634:	8c1ff06f          	j	fef4 <tcp_input+0x78>
          tcp_send_empty_ack(pcb);
   10638:	00048513          	mv	a0,s1
   1063c:	d50f80ef          	jal	ra,8b8c <tcp_send_empty_ack>
   10640:	fbdff06f          	j	105fc <tcp_input+0x780>
        if (recv_acked > 0) {
   10644:	9181d603          	lhu	a2,-1768(gp) # 1fae8 <recv_acked>
   10648:	02060263          	beqz	a2,1066c <tcp_input+0x7f0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
   1064c:	0844a783          	lw	a5,132(s1)
   10650:	00078c63          	beqz	a5,10668 <tcp_input+0x7ec>
   10654:	00048593          	mv	a1,s1
   10658:	0104a503          	lw	a0,16(s1)
   1065c:	000780e7          	jalr	a5
            if (err == ERR_ABRT) {
   10660:	ff300793          	li	a5,-13
   10664:	faf506e3          	beq	a0,a5,10610 <tcp_input+0x794>
          recv_acked = 0;
   10668:	90019c23          	sh	zero,-1768(gp) # 1fae8 <recv_acked>
        if (tcp_input_delayed_close(pcb)) {
   1066c:	00048513          	mv	a0,s1
   10670:	f88ff0ef          	jal	ra,fdf8 <tcp_input_delayed_close>
   10674:	f8051ee3          	bnez	a0,10610 <tcp_input+0x794>
        if (recv_data != NULL) {
   10678:	9101a783          	lw	a5,-1776(gp) # 1fae0 <recv_data>
   1067c:	04078a63          	beqz	a5,106d0 <tcp_input+0x854>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
   10680:	07c4a783          	lw	a5,124(s1)
   10684:	00078863          	beqz	a5,10694 <tcp_input+0x818>
   10688:	0001e537          	lui	a0,0x1e
   1068c:	08850513          	addi	a0,a0,136 # 1e088 <altcp_tcp_functions+0x950>
   10690:	ef4fd0ef          	jal	ra,dd84 <bsp_printf>
          if (pcb->flags & TF_RXCLOSED) {
   10694:	01e4d783          	lhu	a5,30(s1)
   10698:	0107f793          	andi	a5,a5,16
   1069c:	06079a63          	bnez	a5,10710 <tcp_input+0x894>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
   106a0:	0884a783          	lw	a5,136(s1)
   106a4:	08078063          	beqz	a5,10724 <tcp_input+0x8a8>
   106a8:	00000693          	li	a3,0
   106ac:	9101a603          	lw	a2,-1776(gp) # 1fae0 <recv_data>
   106b0:	00048593          	mv	a1,s1
   106b4:	0104a503          	lw	a0,16(s1)
   106b8:	000780e7          	jalr	a5
          if (err == ERR_ABRT) {
   106bc:	ff300793          	li	a5,-13
   106c0:	f4f508e3          	beq	a0,a5,10610 <tcp_input+0x794>
          if (err != ERR_OK) {
   106c4:	00050663          	beqz	a0,106d0 <tcp_input+0x854>
            pcb->refused_data = recv_data;
   106c8:	9101a783          	lw	a5,-1776(gp) # 1fae0 <recv_data>
   106cc:	06f4ae23          	sw	a5,124(s1)
        if (recv_flags & TF_GOT_FIN) {
   106d0:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
   106d4:	0207f793          	andi	a5,a5,32
   106d8:	00078c63          	beqz	a5,106f0 <tcp_input+0x874>
          if (pcb->refused_data != NULL) {
   106dc:	07c4a783          	lw	a5,124(s1)
   106e0:	04078e63          	beqz	a5,1073c <tcp_input+0x8c0>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
   106e4:	00d7c703          	lbu	a4,13(a5)
   106e8:	02076713          	ori	a4,a4,32
   106ec:	00e786a3          	sb	a4,13(a5)
        tcp_input_pcb = NULL;
   106f0:	000227b7          	lui	a5,0x22
   106f4:	ee07a023          	sw	zero,-288(a5) # 21ee0 <tcp_input_pcb>
        if (tcp_input_delayed_close(pcb)) {
   106f8:	00048513          	mv	a0,s1
   106fc:	efcff0ef          	jal	ra,fdf8 <tcp_input_delayed_close>
   10700:	f00518e3          	bnez	a0,10610 <tcp_input+0x794>
        tcp_output(pcb);
   10704:	00048513          	mv	a0,s1
   10708:	d40f80ef          	jal	ra,8c48 <tcp_output>
   1070c:	f05ff06f          	j	10610 <tcp_input+0x794>
            pbuf_free(recv_data);
   10710:	9101a503          	lw	a0,-1776(gp) # 1fae0 <recv_data>
   10714:	c3cfc0ef          	jal	ra,cb50 <pbuf_free>
            tcp_abort(pcb);
   10718:	00048513          	mv	a0,s1
   1071c:	7b0020ef          	jal	ra,12ecc <tcp_abort>
            goto aborted;
   10720:	ef1ff06f          	j	10610 <tcp_input+0x794>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
   10724:	00000693          	li	a3,0
   10728:	9101a603          	lw	a2,-1776(gp) # 1fae0 <recv_data>
   1072c:	00048593          	mv	a1,s1
   10730:	00000513          	li	a0,0
   10734:	675020ef          	jal	ra,135a8 <tcp_recv_null>
   10738:	f85ff06f          	j	106bc <tcp_input+0x840>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
   1073c:	02c4d783          	lhu	a5,44(s1)
   10740:	00003737          	lui	a4,0x3
   10744:	da070713          	addi	a4,a4,-608 # 2da0 <eml_mahalanobis_distance_squared+0x5c>
   10748:	00e78663          	beq	a5,a4,10754 <tcp_input+0x8d8>
              pcb->rcv_wnd++;
   1074c:	00178793          	addi	a5,a5,1
   10750:	02f49623          	sh	a5,44(s1)
            TCP_EVENT_CLOSED(pcb, err);
   10754:	0884a783          	lw	a5,136(s1)
   10758:	f8078ce3          	beqz	a5,106f0 <tcp_input+0x874>
   1075c:	00000693          	li	a3,0
   10760:	00000613          	li	a2,0
   10764:	00048593          	mv	a1,s1
   10768:	0104a503          	lw	a0,16(s1)
   1076c:	000780e7          	jalr	a5
            if (err == ERR_ABRT) {
   10770:	ff300793          	li	a5,-13
   10774:	f6f51ee3          	bne	a0,a5,106f0 <tcp_input+0x874>
   10778:	e99ff06f          	j	10610 <tcp_input+0x794>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
   1077c:	9301a783          	lw	a5,-1744(gp) # 1fb00 <tcphdr>
   10780:	00c7c503          	lbu	a0,12(a5)
   10784:	00d7c783          	lbu	a5,13(a5)
   10788:	00879793          	slli	a5,a5,0x8
   1078c:	00a7e533          	or	a0,a5,a0
   10790:	ce9f90ef          	jal	ra,a478 <lwip_htons>
   10794:	00457513          	andi	a0,a0,4
   10798:	00050863          	beqz	a0,107a8 <tcp_input+0x92c>
    pbuf_free(p);
   1079c:	00040513          	mv	a0,s0
   107a0:	bb0fc0ef          	jal	ra,cb50 <pbuf_free>
   107a4:	f50ff06f          	j	fef4 <tcp_input+0x78>
      TCP_STATS_INC(tcp.proterr);
   107a8:	000227b7          	lui	a5,0x22
   107ac:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   107b0:	0bc7d703          	lhu	a4,188(a5)
   107b4:	00170713          	addi	a4,a4,1
   107b8:	0ae79e23          	sh	a4,188(a5)
      TCP_STATS_INC(tcp.drop);
   107bc:	0b27d703          	lhu	a4,178(a5)
   107c0:	00170713          	addi	a4,a4,1
   107c4:	0ae79923          	sh	a4,178(a5)
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
   107c8:	9301a703          	lw	a4,-1744(gp) # 1fb00 <tcphdr>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
   107cc:	00074803          	lbu	a6,0(a4)
   107d0:	00174683          	lbu	a3,1(a4)
   107d4:	00869693          	slli	a3,a3,0x8
   107d8:	00274503          	lbu	a0,2(a4)
   107dc:	00374783          	lbu	a5,3(a4)
   107e0:	00879793          	slli	a5,a5,0x8
   107e4:	9161d583          	lhu	a1,-1770(gp) # 1fae6 <tcplen>
   107e8:	9201a603          	lw	a2,-1760(gp) # 1faf0 <seqno>
   107ec:	0106e833          	or	a6,a3,a6
   107f0:	00a7e7b3          	or	a5,a5,a0
   107f4:	00022737          	lui	a4,0x22
   107f8:	ef470713          	addi	a4,a4,-268 # 21ef4 <ip_data+0x10>
   107fc:	000226b7          	lui	a3,0x22
   10800:	ef868693          	addi	a3,a3,-264 # 21ef8 <ip_data+0x14>
   10804:	00c58633          	add	a2,a1,a2
   10808:	91c1a583          	lw	a1,-1764(gp) # 1faec <ackno>
   1080c:	00000513          	li	a0,0
   10810:	a8cf80ef          	jal	ra,8a9c <tcp_rst>
   10814:	f89ff06f          	j	1079c <tcp_input+0x920>

00010818 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
   10818:	9141c783          	lbu	a5,-1772(gp) # 1fae4 <recv_flags>
   1081c:	0107e793          	ori	a5,a5,16
   10820:	90f18a23          	sb	a5,-1772(gp) # 1fae4 <recv_flags>
}
   10824:	00008067          	ret

00010828 <uart_writeAvailability>:
        return *((volatile u32*) address);
   10828:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   1082c:	01055513          	srli	a0,a0,0x10
    }
   10830:	0ff57513          	andi	a0,a0,255
   10834:	00008067          	ret

00010838 <uart_write>:
    static void uart_write(u32 reg, char data){
   10838:	ff010113          	addi	sp,sp,-16
   1083c:	00112623          	sw	ra,12(sp)
   10840:	00812423          	sw	s0,8(sp)
   10844:	00912223          	sw	s1,4(sp)
   10848:	00050413          	mv	s0,a0
   1084c:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   10850:	00040513          	mv	a0,s0
   10854:	fd5ff0ef          	jal	ra,10828 <uart_writeAvailability>
   10858:	fe050ce3          	beqz	a0,10850 <uart_write+0x18>
        *((volatile u32*) address) = data;
   1085c:	00942023          	sw	s1,0(s0)
    }
   10860:	00c12083          	lw	ra,12(sp)
   10864:	00812403          	lw	s0,8(sp)
   10868:	00412483          	lw	s1,4(sp)
   1086c:	01010113          	addi	sp,sp,16
   10870:	00008067          	ret

00010874 <bsp_printHex>:
    {
   10874:	ff010113          	addi	sp,sp,-16
   10878:	00112623          	sw	ra,12(sp)
   1087c:	00812423          	sw	s0,8(sp)
   10880:	00912223          	sw	s1,4(sp)
   10884:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   10888:	01c00413          	li	s0,28
   1088c:	0280006f          	j	108b4 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   10890:	0084d7b3          	srl	a5,s1,s0
   10894:	00f7f713          	andi	a4,a5,15
   10898:	0001c7b7          	lui	a5,0x1c
   1089c:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   108a0:	00e787b3          	add	a5,a5,a4
   108a4:	0007c583          	lbu	a1,0(a5)
   108a8:	f8010537          	lui	a0,0xf8010
   108ac:	f8dff0ef          	jal	ra,10838 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   108b0:	ffc40413          	addi	s0,s0,-4
   108b4:	fc045ee3          	bgez	s0,10890 <bsp_printHex+0x1c>
    }
   108b8:	00c12083          	lw	ra,12(sp)
   108bc:	00812403          	lw	s0,8(sp)
   108c0:	00412483          	lw	s1,4(sp)
   108c4:	01010113          	addi	sp,sp,16
   108c8:	00008067          	ret

000108cc <bsp_printHex_lower>:
        {
   108cc:	ff010113          	addi	sp,sp,-16
   108d0:	00112623          	sw	ra,12(sp)
   108d4:	00812423          	sw	s0,8(sp)
   108d8:	00912223          	sw	s1,4(sp)
   108dc:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   108e0:	01c00413          	li	s0,28
   108e4:	0280006f          	j	1090c <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   108e8:	0084d7b3          	srl	a5,s1,s0
   108ec:	00f7f713          	andi	a4,a5,15
   108f0:	0001c7b7          	lui	a5,0x1c
   108f4:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   108f8:	00e787b3          	add	a5,a5,a4
   108fc:	0007c583          	lbu	a1,0(a5)
   10900:	f8010537          	lui	a0,0xf8010
   10904:	f35ff0ef          	jal	ra,10838 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   10908:	ffc40413          	addi	s0,s0,-4
   1090c:	fc045ee3          	bgez	s0,108e8 <bsp_printHex_lower+0x1c>
        }
   10910:	00c12083          	lw	ra,12(sp)
   10914:	00812403          	lw	s0,8(sp)
   10918:	00412483          	lw	s1,4(sp)
   1091c:	01010113          	addi	sp,sp,16
   10920:	00008067          	ret

00010924 <bsp_printf_c>:
    {
   10924:	ff010113          	addi	sp,sp,-16
   10928:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   1092c:	0ff57593          	andi	a1,a0,255
   10930:	f8010537          	lui	a0,0xf8010
   10934:	f05ff0ef          	jal	ra,10838 <uart_write>
    }
   10938:	00c12083          	lw	ra,12(sp)
   1093c:	01010113          	addi	sp,sp,16
   10940:	00008067          	ret

00010944 <bsp_printf_s>:
    {
   10944:	ff010113          	addi	sp,sp,-16
   10948:	00112623          	sw	ra,12(sp)
   1094c:	00812423          	sw	s0,8(sp)
   10950:	00050413          	mv	s0,a0
        while (*p)
   10954:	00044583          	lbu	a1,0(s0)
   10958:	00058a63          	beqz	a1,1096c <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   1095c:	00140413          	addi	s0,s0,1
   10960:	f8010537          	lui	a0,0xf8010
   10964:	ed5ff0ef          	jal	ra,10838 <uart_write>
   10968:	fedff06f          	j	10954 <bsp_printf_s+0x10>
    }
   1096c:	00c12083          	lw	ra,12(sp)
   10970:	00812403          	lw	s0,8(sp)
   10974:	01010113          	addi	sp,sp,16
   10978:	00008067          	ret

0001097c <bsp_printf_d>:
    {
   1097c:	fd010113          	addi	sp,sp,-48
   10980:	02112623          	sw	ra,44(sp)
   10984:	02812423          	sw	s0,40(sp)
   10988:	02912223          	sw	s1,36(sp)
   1098c:	00050493          	mv	s1,a0
        if (val < 0) {
   10990:	00054663          	bltz	a0,1099c <bsp_printf_d+0x20>
    {
   10994:	00010413          	mv	s0,sp
   10998:	02c0006f          	j	109c4 <bsp_printf_d+0x48>
            bsp_printf_c('-');
   1099c:	02d00513          	li	a0,45
   109a0:	f85ff0ef          	jal	ra,10924 <bsp_printf_c>
            val = -val;
   109a4:	409004b3          	neg	s1,s1
   109a8:	fedff06f          	j	10994 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   109ac:	00a00713          	li	a4,10
   109b0:	02e4e7b3          	rem	a5,s1,a4
   109b4:	03078793          	addi	a5,a5,48
   109b8:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   109bc:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   109c0:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   109c4:	fe0494e3          	bnez	s1,109ac <bsp_printf_d+0x30>
   109c8:	00010793          	mv	a5,sp
   109cc:	fef400e3          	beq	s0,a5,109ac <bsp_printf_d+0x30>
   109d0:	0100006f          	j	109e0 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   109d4:	fff40413          	addi	s0,s0,-1
   109d8:	00044503          	lbu	a0,0(s0)
   109dc:	f49ff0ef          	jal	ra,10924 <bsp_printf_c>
        while (p != buffer)
   109e0:	00010793          	mv	a5,sp
   109e4:	fef418e3          	bne	s0,a5,109d4 <bsp_printf_d+0x58>
    }
   109e8:	02c12083          	lw	ra,44(sp)
   109ec:	02812403          	lw	s0,40(sp)
   109f0:	02412483          	lw	s1,36(sp)
   109f4:	03010113          	addi	sp,sp,48
   109f8:	00008067          	ret

000109fc <bsp_printf_x>:
    {
   109fc:	ff010113          	addi	sp,sp,-16
   10a00:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   10a04:	00000713          	li	a4,0
   10a08:	00700793          	li	a5,7
   10a0c:	02e7c063          	blt	a5,a4,10a2c <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   10a10:	00271693          	slli	a3,a4,0x2
   10a14:	ff000793          	li	a5,-16
   10a18:	00d797b3          	sll	a5,a5,a3
   10a1c:	00f577b3          	and	a5,a0,a5
   10a20:	00078663          	beqz	a5,10a2c <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   10a24:	00170713          	addi	a4,a4,1
   10a28:	fe1ff06f          	j	10a08 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   10a2c:	ea1ff0ef          	jal	ra,108cc <bsp_printHex_lower>
    }
   10a30:	00c12083          	lw	ra,12(sp)
   10a34:	01010113          	addi	sp,sp,16
   10a38:	00008067          	ret

00010a3c <bsp_printf_X>:
        {
   10a3c:	ff010113          	addi	sp,sp,-16
   10a40:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   10a44:	00000713          	li	a4,0
   10a48:	00700793          	li	a5,7
   10a4c:	02e7c063          	blt	a5,a4,10a6c <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   10a50:	00271693          	slli	a3,a4,0x2
   10a54:	ff000793          	li	a5,-16
   10a58:	00d797b3          	sll	a5,a5,a3
   10a5c:	00f577b3          	and	a5,a0,a5
   10a60:	00078663          	beqz	a5,10a6c <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   10a64:	00170713          	addi	a4,a4,1
   10a68:	fe1ff06f          	j	10a48 <bsp_printf_X+0xc>
            bsp_printHex(val);
   10a6c:	e09ff0ef          	jal	ra,10874 <bsp_printHex>
        }
   10a70:	00c12083          	lw	ra,12(sp)
   10a74:	01010113          	addi	sp,sp,16
   10a78:	00008067          	ret

00010a7c <raw_input_local_match>:
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   10a7c:	00854703          	lbu	a4,8(a0) # f8010008 <__freertos_irq_stack_top+0xf7feb0d8>
   10a80:	02070063          	beqz	a4,10aa0 <raw_input_local_match+0x24>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
   10a84:	000227b7          	lui	a5,0x22
   10a88:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   10a8c:	0047a783          	lw	a5,4(a5)
   10a90:	0387c783          	lbu	a5,56(a5)
   10a94:	00178793          	addi	a5,a5,1
   10a98:	0ff7f793          	andi	a5,a5,255
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
   10a9c:	04f71063          	bne	a4,a5,10adc <raw_input_local_match+0x60>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
   10aa0:	00058c63          	beqz	a1,10ab8 <raw_input_local_match+0x3c>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
   10aa4:	04050063          	beqz	a0,10ae4 <raw_input_local_match+0x68>
   10aa8:	00052783          	lw	a5,0(a0)
   10aac:	04078063          	beqz	a5,10aec <raw_input_local_match+0x70>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
        return 1;
      }
  }

  return 0;
   10ab0:	00000513          	li	a0,0
   10ab4:	00008067          	ret
      if (ip_addr_isany(&pcb->local_ip) ||
   10ab8:	02050e63          	beqz	a0,10af4 <raw_input_local_match+0x78>
   10abc:	00052783          	lw	a5,0(a0)
   10ac0:	02078e63          	beqz	a5,10afc <raw_input_local_match+0x80>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
   10ac4:	00022737          	lui	a4,0x22
   10ac8:	ee470713          	addi	a4,a4,-284 # 21ee4 <ip_data>
   10acc:	01472703          	lw	a4,20(a4)
      if (ip_addr_isany(&pcb->local_ip) ||
   10ad0:	02e78a63          	beq	a5,a4,10b04 <raw_input_local_match+0x88>
  return 0;
   10ad4:	00058513          	mv	a0,a1
   10ad8:	00008067          	ret
    return 0;
   10adc:	00000513          	li	a0,0
   10ae0:	00008067          	ret
          return 1;
   10ae4:	00100513          	li	a0,1
   10ae8:	00008067          	ret
   10aec:	00100513          	li	a0,1
   10af0:	00008067          	ret
        return 1;
   10af4:	00100513          	li	a0,1
   10af8:	00008067          	ret
   10afc:	00100513          	li	a0,1
   10b00:	00008067          	ret
   10b04:	00100513          	li	a0,1
}
   10b08:	00008067          	ret

00010b0c <bsp_printf>:
    {
   10b0c:	fc010113          	addi	sp,sp,-64
   10b10:	00112e23          	sw	ra,28(sp)
   10b14:	00812c23          	sw	s0,24(sp)
   10b18:	00912a23          	sw	s1,20(sp)
   10b1c:	00050493          	mv	s1,a0
   10b20:	02b12223          	sw	a1,36(sp)
   10b24:	02c12423          	sw	a2,40(sp)
   10b28:	02d12623          	sw	a3,44(sp)
   10b2c:	02e12823          	sw	a4,48(sp)
   10b30:	02f12a23          	sw	a5,52(sp)
   10b34:	03012c23          	sw	a6,56(sp)
   10b38:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   10b3c:	02410793          	addi	a5,sp,36
   10b40:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   10b44:	00000413          	li	s0,0
   10b48:	01c0006f          	j	10b64 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   10b4c:	00c12783          	lw	a5,12(sp)
   10b50:	00478713          	addi	a4,a5,4
   10b54:	00e12623          	sw	a4,12(sp)
   10b58:	0007a503          	lw	a0,0(a5)
   10b5c:	dc9ff0ef          	jal	ra,10924 <bsp_printf_c>
        for (i = 0; format[i]; i++)
   10b60:	00140413          	addi	s0,s0,1
   10b64:	008487b3          	add	a5,s1,s0
   10b68:	0007c503          	lbu	a0,0(a5)
   10b6c:	0c050263          	beqz	a0,10c30 <bsp_printf+0x124>
            if (format[i] == '%') {
   10b70:	02500793          	li	a5,37
   10b74:	06f50663          	beq	a0,a5,10be0 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   10b78:	dadff0ef          	jal	ra,10924 <bsp_printf_c>
   10b7c:	fe5ff06f          	j	10b60 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   10b80:	00c12783          	lw	a5,12(sp)
   10b84:	00478713          	addi	a4,a5,4
   10b88:	00e12623          	sw	a4,12(sp)
   10b8c:	0007a503          	lw	a0,0(a5)
   10b90:	db5ff0ef          	jal	ra,10944 <bsp_printf_s>
                        break;
   10b94:	fcdff06f          	j	10b60 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   10b98:	00c12783          	lw	a5,12(sp)
   10b9c:	00478713          	addi	a4,a5,4
   10ba0:	00e12623          	sw	a4,12(sp)
   10ba4:	0007a503          	lw	a0,0(a5)
   10ba8:	dd5ff0ef          	jal	ra,1097c <bsp_printf_d>
                        break;
   10bac:	fb5ff06f          	j	10b60 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   10bb0:	00c12783          	lw	a5,12(sp)
   10bb4:	00478713          	addi	a4,a5,4
   10bb8:	00e12623          	sw	a4,12(sp)
   10bbc:	0007a503          	lw	a0,0(a5)
   10bc0:	e7dff0ef          	jal	ra,10a3c <bsp_printf_X>
                        break;
   10bc4:	f9dff06f          	j	10b60 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   10bc8:	00c12783          	lw	a5,12(sp)
   10bcc:	00478713          	addi	a4,a5,4
   10bd0:	00e12623          	sw	a4,12(sp)
   10bd4:	0007a503          	lw	a0,0(a5)
   10bd8:	e25ff0ef          	jal	ra,109fc <bsp_printf_x>
                        break;
   10bdc:	f85ff06f          	j	10b60 <bsp_printf+0x54>
                while (format[++i]) {
   10be0:	00140413          	addi	s0,s0,1
   10be4:	008487b3          	add	a5,s1,s0
   10be8:	0007c783          	lbu	a5,0(a5)
   10bec:	f6078ae3          	beqz	a5,10b60 <bsp_printf+0x54>
                    if (format[i] == 'c') {
   10bf0:	06300713          	li	a4,99
   10bf4:	f4e78ce3          	beq	a5,a4,10b4c <bsp_printf+0x40>
                    else if (format[i] == 's') {
   10bf8:	07300713          	li	a4,115
   10bfc:	f8e782e3          	beq	a5,a4,10b80 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   10c00:	06400713          	li	a4,100
   10c04:	f8e78ae3          	beq	a5,a4,10b98 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   10c08:	05800713          	li	a4,88
   10c0c:	fae782e3          	beq	a5,a4,10bb0 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   10c10:	07800713          	li	a4,120
   10c14:	fae78ae3          	beq	a5,a4,10bc8 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   10c18:	06600713          	li	a4,102
   10c1c:	fce792e3          	bne	a5,a4,10be0 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   10c20:	0001c537          	lui	a0,0x1c
   10c24:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   10c28:	d1dff0ef          	jal	ra,10944 <bsp_printf_s>
                        break;
   10c2c:	f35ff06f          	j	10b60 <bsp_printf+0x54>
    }
   10c30:	01c12083          	lw	ra,28(sp)
   10c34:	01812403          	lw	s0,24(sp)
   10c38:	01412483          	lw	s1,20(sp)
   10c3c:	04010113          	addi	sp,sp,64
   10c40:	00008067          	ret

00010c44 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
   10c44:	fe010113          	addi	sp,sp,-32
   10c48:	00112e23          	sw	ra,28(sp)
   10c4c:	00812c23          	sw	s0,24(sp)
   10c50:	00912a23          	sw	s1,20(sp)
   10c54:	01212823          	sw	s2,16(sp)
   10c58:	01312623          	sw	s3,12(sp)
   10c5c:	01412423          	sw	s4,8(sp)
   10c60:	01512223          	sw	s5,4(sp)
   10c64:	00050a13          	mv	s4,a0
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
   10c68:	000227b7          	lui	a5,0x22
   10c6c:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   10c70:	0007a583          	lw	a1,0(a5)
   10c74:	0147a503          	lw	a0,20(a5)
   10c78:	7a8070ef          	jal	ra,18420 <ip4_addr_isbroadcast_u32>
   10c7c:	00050993          	mv	s3,a0
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
   10c80:	004a2783          	lw	a5,4(s4)
   10c84:	0097c903          	lbu	s2,9(a5)
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
   10c88:	9341a403          	lw	s0,-1740(gp) # 1fb04 <raw_pcbs>
  raw_input_state_t ret = RAW_INPUT_NONE;
   10c8c:	00000a93          	li	s5,0
  prev = NULL;
   10c90:	00000493          	li	s1,0
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
   10c94:	04c0006f          	j	10ce0 <raw_input+0x9c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
      /* receive callback function available? */
      if (pcb->recv != NULL) {
   10c98:	01442783          	lw	a5,20(s0)
   10c9c:	02078e63          	beqz	a5,10cd8 <raw_input+0x94>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
   10ca0:	004a2a83          	lw	s5,4(s4)
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
   10ca4:	000226b7          	lui	a3,0x22
   10ca8:	ef468693          	addi	a3,a3,-268 # 21ef4 <ip_data+0x10>
   10cac:	000a0613          	mv	a2,s4
   10cb0:	00040593          	mv	a1,s0
   10cb4:	01842503          	lw	a0,24(s0)
   10cb8:	000780e7          	jalr	a5
        if (eaten != 0) {
   10cbc:	06051263          	bnez	a0,10d20 <raw_input+0xdc>
            raw_pcbs = pcb;
          }
          return RAW_INPUT_EATEN;
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
   10cc0:	004a2783          	lw	a5,4(s4)
   10cc4:	0b578063          	beq	a5,s5,10d64 <raw_input+0x120>
   10cc8:	0001e537          	lui	a0,0x1e
   10ccc:	0a450513          	addi	a0,a0,164 # 1e0a4 <altcp_tcp_functions+0x96c>
   10cd0:	e3dff0ef          	jal	ra,10b0c <bsp_printf>
        ret = RAW_INPUT_DELIVERED;
   10cd4:	00200a93          	li	s5,2
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
   10cd8:	00040493          	mv	s1,s0
    pcb = pcb->next;
   10cdc:	00c42403          	lw	s0,12(s0)
  while (pcb != NULL) {
   10ce0:	04040e63          	beqz	s0,10d3c <raw_input+0xf8>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
   10ce4:	01044783          	lbu	a5,16(s0)
   10ce8:	fef918e3          	bne	s2,a5,10cd8 <raw_input+0x94>
   10cec:	00098593          	mv	a1,s3
   10cf0:	00040513          	mv	a0,s0
   10cf4:	d89ff0ef          	jal	ra,10a7c <raw_input_local_match>
   10cf8:	fe0500e3          	beqz	a0,10cd8 <raw_input+0x94>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
   10cfc:	01144783          	lbu	a5,17(s0)
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
   10d00:	0017f793          	andi	a5,a5,1
   10d04:	f8078ae3          	beqz	a5,10c98 <raw_input+0x54>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
   10d08:	00442703          	lw	a4,4(s0)
   10d0c:	000227b7          	lui	a5,0x22
   10d10:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   10d14:	0107a783          	lw	a5,16(a5)
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
   10d18:	fcf710e3          	bne	a4,a5,10cd8 <raw_input+0x94>
   10d1c:	f7dff06f          	j	10c98 <raw_input+0x54>
          if (prev != NULL) {
   10d20:	00048c63          	beqz	s1,10d38 <raw_input+0xf4>
            prev->next = pcb->next;
   10d24:	00c42783          	lw	a5,12(s0)
   10d28:	00f4a623          	sw	a5,12(s1)
            pcb->next = raw_pcbs;
   10d2c:	9341a703          	lw	a4,-1740(gp) # 1fb04 <raw_pcbs>
   10d30:	00e42623          	sw	a4,12(s0)
            raw_pcbs = pcb;
   10d34:	9281aa23          	sw	s0,-1740(gp) # 1fb04 <raw_pcbs>
          return RAW_INPUT_EATEN;
   10d38:	00100a93          	li	s5,1
  }
  return ret;
}
   10d3c:	000a8513          	mv	a0,s5
   10d40:	01c12083          	lw	ra,28(sp)
   10d44:	01812403          	lw	s0,24(sp)
   10d48:	01412483          	lw	s1,20(sp)
   10d4c:	01012903          	lw	s2,16(sp)
   10d50:	00c12983          	lw	s3,12(sp)
   10d54:	00812a03          	lw	s4,8(sp)
   10d58:	00412a83          	lw	s5,4(sp)
   10d5c:	02010113          	addi	sp,sp,32
   10d60:	00008067          	ret
        ret = RAW_INPUT_DELIVERED;
   10d64:	00200a93          	li	s5,2
   10d68:	f71ff06f          	j	10cd8 <raw_input+0x94>

00010d6c <raw_bind>:
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb == NULL) || (ipaddr == NULL)) {
   10d6c:	00050c63          	beqz	a0,10d84 <raw_bind+0x18>
   10d70:	00058e63          	beqz	a1,10d8c <raw_bind+0x20>
    return ERR_VAL;
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
   10d74:	0005a783          	lw	a5,0(a1)
   10d78:	00f52023          	sw	a5,0(a0)
  if (IP_IS_V6(&pcb->local_ip) &&
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->local_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->local_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
  return ERR_OK;
   10d7c:	00000513          	li	a0,0
   10d80:	00008067          	ret
    return ERR_VAL;
   10d84:	ffa00513          	li	a0,-6
   10d88:	00008067          	ret
   10d8c:	ffa00513          	li	a0,-6
}
   10d90:	00008067          	ret

00010d94 <raw_bind_netif>:
 */
void
raw_bind_netif(struct raw_pcb *pcb, const struct netif *netif)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
   10d94:	00058a63          	beqz	a1,10da8 <raw_bind_netif+0x14>
    pcb->netif_idx = netif_get_index(netif);
   10d98:	0385c783          	lbu	a5,56(a1)
   10d9c:	00178793          	addi	a5,a5,1
   10da0:	00f50423          	sb	a5,8(a0)
   10da4:	00008067          	ret
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
   10da8:	00050423          	sb	zero,8(a0)
  }
}
   10dac:	00008067          	ret

00010db0 <raw_connect>:
 */
err_t
raw_connect(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb == NULL) || (ipaddr == NULL)) {
   10db0:	02050263          	beqz	a0,10dd4 <raw_connect+0x24>
   10db4:	02058463          	beqz	a1,10ddc <raw_connect+0x2c>
    return ERR_VAL;
  }
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
   10db8:	0005a783          	lw	a5,0(a1)
   10dbc:	00f52223          	sw	a5,4(a0)
  if (IP_IS_V6(&pcb->remote_ip) &&
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */
  raw_set_flags(pcb, RAW_FLAGS_CONNECTED);
   10dc0:	01154783          	lbu	a5,17(a0)
   10dc4:	0017e793          	ori	a5,a5,1
   10dc8:	00f508a3          	sb	a5,17(a0)
  return ERR_OK;
   10dcc:	00000513          	li	a0,0
   10dd0:	00008067          	ret
    return ERR_VAL;
   10dd4:	ffa00513          	li	a0,-6
   10dd8:	00008067          	ret
   10ddc:	ffa00513          	li	a0,-6
}
   10de0:	00008067          	ret

00010de4 <raw_disconnect>:
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
   10de4:	00052223          	sw	zero,4(a0)
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->netif_idx = NETIF_NO_INDEX;
   10de8:	00050423          	sb	zero,8(a0)
  /* mark PCB as unconnected */
  raw_clear_flags(pcb, RAW_FLAGS_CONNECTED);
   10dec:	01154783          	lbu	a5,17(a0)
   10df0:	0fe7f793          	andi	a5,a5,254
   10df4:	00f508a3          	sb	a5,17(a0)
}
   10df8:	00008067          	ret

00010dfc <raw_recv>:
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* remember recv() callback and user data */
  pcb->recv = recv;
   10dfc:	00b52a23          	sw	a1,20(a0)
  pcb->recv_arg = recv_arg;
   10e00:	00c52c23          	sw	a2,24(a0)
}
   10e04:	00008067          	ret

00010e08 <raw_sendto_if_src>:
 * @param src_ip source IP address
 */
err_t
raw_sendto_if_src(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  struct netif *netif, const ip_addr_t *src_ip)
{
   10e08:	fe010113          	addi	sp,sp,-32
   10e0c:	00112e23          	sw	ra,28(sp)
   10e10:	00812c23          	sw	s0,24(sp)
   10e14:	00912a23          	sw	s1,20(sp)
   10e18:	01212823          	sw	s2,16(sp)
   10e1c:	01312623          	sw	s3,12(sp)
   10e20:	01412423          	sw	s4,8(sp)
   10e24:	01512223          	sw	s5,4(sp)
  u16_t header_size;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  if ((pcb == NULL) || (dst_ip == NULL) || (netif == NULL) || (src_ip == NULL) ||
   10e28:	16050c63          	beqz	a0,10fa0 <raw_sendto_if_src+0x198>
   10e2c:	16060e63          	beqz	a2,10fa8 <raw_sendto_if_src+0x1a0>
   10e30:	18068063          	beqz	a3,10fb0 <raw_sendto_if_src+0x1a8>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
   10e34:	18070263          	beqz	a4,10fb8 <raw_sendto_if_src+0x1b0>
   10e38:	00070a93          	mv	s5,a4
   10e3c:	00068a13          	mv	s4,a3
   10e40:	00060993          	mv	s3,a2
   10e44:	00058493          	mv	s1,a1
   10e48:	00050413          	mv	s0,a0
                  IP6_HLEN);
#endif

  /* Handle the HDRINCL option as an exception: none of the code below applies
   * to this case, and sending the packet needs to be done differently too. */
  if (pcb->flags & RAW_FLAGS_HDRINCL) {
   10e4c:	01154783          	lbu	a5,17(a0)
   10e50:	0027f793          	andi	a5,a5,2
   10e54:	04078e63          	beqz	a5,10eb0 <raw_sendto_if_src+0xa8>
    /* A full header *must* be present in the first pbuf of the chain, as the
     * output routines may access its fields directly. */
    if (p->len < header_size) {
   10e58:	00a5d703          	lhu	a4,10(a1)
   10e5c:	01300793          	li	a5,19
   10e60:	16e7f063          	bgeu	a5,a4,10fc0 <raw_sendto_if_src+0x1b8>
      return ERR_VAL;
    }
    /* @todo multicast loop support, if at all desired for this scenario.. */
    NETIF_SET_HINTS(netif, &pcb->netif_hints);
    err = ip_output_if_hdrincl(p, src_ip, dst_ip, netif);
   10e64:	00068813          	mv	a6,a3
   10e68:	00000793          	li	a5,0
   10e6c:	00000713          	li	a4,0
   10e70:	00000693          	li	a3,0
   10e74:	00000613          	li	a2,0
   10e78:	000a8593          	mv	a1,s5
   10e7c:	00048513          	mv	a0,s1
   10e80:	214060ef          	jal	ra,17094 <ip4_output_if>
   10e84:	00050413          	mv	s0,a0
  if (q != p) {
    /* free the header */
    pbuf_free(q);
  }
  return err;
}
   10e88:	00040513          	mv	a0,s0
   10e8c:	01c12083          	lw	ra,28(sp)
   10e90:	01812403          	lw	s0,24(sp)
   10e94:	01412483          	lw	s1,20(sp)
   10e98:	01012903          	lw	s2,16(sp)
   10e9c:	00c12983          	lw	s3,12(sp)
   10ea0:	00812a03          	lw	s4,8(sp)
   10ea4:	00412a83          	lw	s5,4(sp)
   10ea8:	02010113          	addi	sp,sp,32
   10eac:	00008067          	ret
  if ((u16_t)(p->tot_len + header_size) < p->tot_len) {
   10eb0:	0085d703          	lhu	a4,8(a1)
   10eb4:	01470793          	addi	a5,a4,20
   10eb8:	01079793          	slli	a5,a5,0x10
   10ebc:	0107d793          	srli	a5,a5,0x10
   10ec0:	10e7e463          	bltu	a5,a4,10fc8 <raw_sendto_if_src+0x1c0>
  if (pbuf_add_header(p, header_size)) {
   10ec4:	01400593          	li	a1,20
   10ec8:	00048513          	mv	a0,s1
   10ecc:	b49fb0ef          	jal	ra,ca14 <pbuf_add_header>
   10ed0:	02050863          	beqz	a0,10f00 <raw_sendto_if_src+0xf8>
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
   10ed4:	28000613          	li	a2,640
   10ed8:	00000593          	li	a1,0
   10edc:	02200513          	li	a0,34
   10ee0:	d89fb0ef          	jal	ra,cc68 <pbuf_alloc>
   10ee4:	00050913          	mv	s2,a0
    if (q == NULL) {
   10ee8:	0e050463          	beqz	a0,10fd0 <raw_sendto_if_src+0x1c8>
    if (p->tot_len != 0) {
   10eec:	0084d783          	lhu	a5,8(s1)
   10ef0:	02078263          	beqz	a5,10f14 <raw_sendto_if_src+0x10c>
      pbuf_chain(q, p);
   10ef4:	00048593          	mv	a1,s1
   10ef8:	a40fc0ef          	jal	ra,d138 <pbuf_chain>
   10efc:	0180006f          	j	10f14 <raw_sendto_if_src+0x10c>
    if (pbuf_remove_header(q, header_size)) {
   10f00:	01400593          	li	a1,20
   10f04:	00048513          	mv	a0,s1
   10f08:	b45fb0ef          	jal	ra,ca4c <pbuf_remove_header>
   10f0c:	06051463          	bnez	a0,10f74 <raw_sendto_if_src+0x16c>
    q = p;
   10f10:	00048913          	mv	s2,s1
  if (((pcb->flags & RAW_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
   10f14:	01144783          	lbu	a5,17(s0)
   10f18:	0047f793          	andi	a5,a5,4
   10f1c:	00078a63          	beqz	a5,10f30 <raw_sendto_if_src+0x128>
   10f20:	0009a783          	lw	a5,0(s3)
   10f24:	0f07f793          	andi	a5,a5,240
   10f28:	0e000713          	li	a4,224
   10f2c:	04e78e63          	beq	a5,a4,10f88 <raw_sendto_if_src+0x180>
  ttl = (ip_addr_ismulticast(dst_ip) ? raw_get_multicast_ttl(pcb) : pcb->ttl);
   10f30:	0009a783          	lw	a5,0(s3)
   10f34:	0f07f793          	andi	a5,a5,240
   10f38:	0e000713          	li	a4,224
   10f3c:	04e78e63          	beq	a5,a4,10f98 <raw_sendto_if_src+0x190>
   10f40:	00b44683          	lbu	a3,11(s0)
  err = ip_output_if(q, src_ip, dst_ip, ttl, pcb->tos, pcb->protocol, netif);
   10f44:	000a0813          	mv	a6,s4
   10f48:	01044783          	lbu	a5,16(s0)
   10f4c:	00a44703          	lbu	a4,10(s0)
   10f50:	00098613          	mv	a2,s3
   10f54:	000a8593          	mv	a1,s5
   10f58:	00090513          	mv	a0,s2
   10f5c:	138060ef          	jal	ra,17094 <ip4_output_if>
   10f60:	00050413          	mv	s0,a0
  if (q != p) {
   10f64:	f29902e3          	beq	s2,s1,10e88 <raw_sendto_if_src+0x80>
    pbuf_free(q);
   10f68:	00090513          	mv	a0,s2
   10f6c:	be5fb0ef          	jal	ra,cb50 <pbuf_free>
   10f70:	f19ff06f          	j	10e88 <raw_sendto_if_src+0x80>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
   10f74:	0001e537          	lui	a0,0x1e
   10f78:	0f050513          	addi	a0,a0,240 # 1e0f0 <altcp_tcp_functions+0x9b8>
   10f7c:	b91ff0ef          	jal	ra,10b0c <bsp_printf>
      return ERR_MEM;
   10f80:	fff00413          	li	s0,-1
   10f84:	f05ff06f          	j	10e88 <raw_sendto_if_src+0x80>
    q->flags |= PBUF_FLAG_MCASTLOOP;
   10f88:	00d94783          	lbu	a5,13(s2)
   10f8c:	0047e793          	ori	a5,a5,4
   10f90:	00f906a3          	sb	a5,13(s2)
   10f94:	f9dff06f          	j	10f30 <raw_sendto_if_src+0x128>
  ttl = (ip_addr_ismulticast(dst_ip) ? raw_get_multicast_ttl(pcb) : pcb->ttl);
   10f98:	01344683          	lbu	a3,19(s0)
   10f9c:	fa9ff06f          	j	10f44 <raw_sendto_if_src+0x13c>
    return ERR_VAL;
   10fa0:	ffa00413          	li	s0,-6
   10fa4:	ee5ff06f          	j	10e88 <raw_sendto_if_src+0x80>
   10fa8:	ffa00413          	li	s0,-6
   10fac:	eddff06f          	j	10e88 <raw_sendto_if_src+0x80>
   10fb0:	ffa00413          	li	s0,-6
   10fb4:	ed5ff06f          	j	10e88 <raw_sendto_if_src+0x80>
   10fb8:	ffa00413          	li	s0,-6
   10fbc:	ecdff06f          	j	10e88 <raw_sendto_if_src+0x80>
      return ERR_VAL;
   10fc0:	ffa00413          	li	s0,-6
   10fc4:	ec5ff06f          	j	10e88 <raw_sendto_if_src+0x80>
    return ERR_MEM;
   10fc8:	fff00413          	li	s0,-1
   10fcc:	ebdff06f          	j	10e88 <raw_sendto_if_src+0x80>
      return ERR_MEM;
   10fd0:	fff00413          	li	s0,-1
   10fd4:	eb5ff06f          	j	10e88 <raw_sendto_if_src+0x80>

00010fd8 <raw_sendto>:
  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
   10fd8:	0a050863          	beqz	a0,11088 <raw_sendto+0xb0>
   10fdc:	0a060a63          	beqz	a2,11090 <raw_sendto+0xb8>
{
   10fe0:	ff010113          	addi	sp,sp,-16
   10fe4:	00112623          	sw	ra,12(sp)
   10fe8:	00812423          	sw	s0,8(sp)
   10fec:	00912223          	sw	s1,4(sp)
   10ff0:	01212023          	sw	s2,0(sp)
   10ff4:	00060493          	mv	s1,a2
   10ff8:	00058913          	mv	s2,a1
   10ffc:	00050413          	mv	s0,a0
  if (pcb->netif_idx != NETIF_NO_INDEX) {
   11000:	00854503          	lbu	a0,8(a0)
   11004:	06051663          	bnez	a0,11070 <raw_sendto+0x98>
    if (ip_addr_ismulticast(ipaddr)) {
   11008:	00062783          	lw	a5,0(a2)
   1100c:	0f07f793          	andi	a5,a5,240
   11010:	0e000713          	li	a4,224
   11014:	06e78263          	beq	a5,a4,11078 <raw_sendto+0xa0>
      netif = ip_route(&pcb->local_ip, ipaddr);
   11018:	00048513          	mv	a0,s1
   1101c:	6c4050ef          	jal	ra,166e0 <ip4_route>
  if (netif == NULL) {
   11020:	06050c63          	beqz	a0,11098 <raw_sendto+0xc0>
  if (ip_addr_isany(&pcb->local_ip) || ip_addr_ismulticast(&pcb->local_ip)) {
   11024:	00040713          	mv	a4,s0
   11028:	00040c63          	beqz	s0,11040 <raw_sendto+0x68>
   1102c:	00042783          	lw	a5,0(s0)
   11030:	00078863          	beqz	a5,11040 <raw_sendto+0x68>
   11034:	0f07f793          	andi	a5,a5,240
   11038:	0e000693          	li	a3,224
   1103c:	00d79463          	bne	a5,a3,11044 <raw_sendto+0x6c>
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
   11040:	00450713          	addi	a4,a0,4
  return raw_sendto_if_src(pcb, p, ipaddr, netif, src_ip);
   11044:	00050693          	mv	a3,a0
   11048:	00048613          	mv	a2,s1
   1104c:	00090593          	mv	a1,s2
   11050:	00040513          	mv	a0,s0
   11054:	db5ff0ef          	jal	ra,10e08 <raw_sendto_if_src>
}
   11058:	00c12083          	lw	ra,12(sp)
   1105c:	00812403          	lw	s0,8(sp)
   11060:	00412483          	lw	s1,4(sp)
   11064:	00012903          	lw	s2,0(sp)
   11068:	01010113          	addi	sp,sp,16
   1106c:	00008067          	ret
    netif = netif_get_by_index(pcb->netif_idx);
   11070:	9d9fa0ef          	jal	ra,ba48 <netif_get_by_index>
   11074:	fadff06f          	j	11020 <raw_sendto+0x48>
      netif = netif_get_by_index(pcb->mcast_ifindex);
   11078:	01244503          	lbu	a0,18(s0)
   1107c:	9cdfa0ef          	jal	ra,ba48 <netif_get_by_index>
    if (netif == NULL)
   11080:	fa0510e3          	bnez	a0,11020 <raw_sendto+0x48>
   11084:	f95ff06f          	j	11018 <raw_sendto+0x40>
    return ERR_VAL;
   11088:	ffa00513          	li	a0,-6
   1108c:	00008067          	ret
   11090:	ffa00513          	li	a0,-6
}
   11094:	00008067          	ret
    return ERR_RTE;
   11098:	ffc00513          	li	a0,-4
   1109c:	fbdff06f          	j	11058 <raw_sendto+0x80>

000110a0 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
   110a0:	ff010113          	addi	sp,sp,-16
   110a4:	00112623          	sw	ra,12(sp)
  return raw_sendto(pcb, p, &pcb->remote_ip);
   110a8:	00450613          	addi	a2,a0,4
   110ac:	f2dff0ef          	jal	ra,10fd8 <raw_sendto>
}
   110b0:	00c12083          	lw	ra,12(sp)
   110b4:	01010113          	addi	sp,sp,16
   110b8:	00008067          	ret

000110bc <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
   110bc:	ff010113          	addi	sp,sp,-16
   110c0:	00112623          	sw	ra,12(sp)
   110c4:	00050593          	mv	a1,a0
  struct raw_pcb *pcb2;
  LWIP_ASSERT_CORE_LOCKED();
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
   110c8:	9341a703          	lw	a4,-1740(gp) # 1fb04 <raw_pcbs>
   110cc:	02a71863          	bne	a4,a0,110fc <raw_remove+0x40>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
   110d0:	00c72703          	lw	a4,12(a4)
   110d4:	92e1aa23          	sw	a4,-1740(gp) # 1fb04 <raw_pcbs>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
   110d8:	00000513          	li	a0,0
   110dc:	400030ef          	jal	ra,144dc <memp_free>
}
   110e0:	00c12083          	lw	ra,12(sp)
   110e4:	01010113          	addi	sp,sp,16
   110e8:	00008067          	ret
        pcb2->next = pcb->next;
   110ec:	00c5a783          	lw	a5,12(a1)
   110f0:	00f72623          	sw	a5,12(a4)
        break;
   110f4:	fe5ff06f          	j	110d8 <raw_remove+0x1c>
   110f8:	00078713          	mv	a4,a5
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
   110fc:	fc070ee3          	beqz	a4,110d8 <raw_remove+0x1c>
      if (pcb2->next != NULL && pcb2->next == pcb) {
   11100:	00c72783          	lw	a5,12(a4)
   11104:	fe078ae3          	beqz	a5,110f8 <raw_remove+0x3c>
   11108:	feb782e3          	beq	a5,a1,110ec <raw_remove+0x30>
   1110c:	00078713          	mv	a4,a5
   11110:	fedff06f          	j	110fc <raw_remove+0x40>

00011114 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
   11114:	ff010113          	addi	sp,sp,-16
   11118:	00112623          	sw	ra,12(sp)
   1111c:	00812423          	sw	s0,8(sp)
   11120:	00912223          	sw	s1,4(sp)
   11124:	00050493          	mv	s1,a0
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));
  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
   11128:	00000513          	li	a0,0
   1112c:	320030ef          	jal	ra,1444c <memp_malloc>
   11130:	00050413          	mv	s0,a0
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
   11134:	02050663          	beqz	a0,11160 <raw_new+0x4c>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
   11138:	01c00613          	li	a2,28
   1113c:	00000593          	li	a1,0
   11140:	ac1f00ef          	jal	ra,1c00 <memset>
    pcb->protocol = proto;
   11144:	00940823          	sb	s1,16(s0)
    pcb->ttl = RAW_TTL;
   11148:	fff00793          	li	a5,-1
   1114c:	00f405a3          	sb	a5,11(s0)
#if LWIP_MULTICAST_TX_OPTIONS
    raw_set_multicast_ttl(pcb, RAW_TTL);
   11150:	00f409a3          	sb	a5,19(s0)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    pcb->next = raw_pcbs;
   11154:	9341a703          	lw	a4,-1740(gp) # 1fb04 <raw_pcbs>
   11158:	00e42623          	sw	a4,12(s0)
    raw_pcbs = pcb;
   1115c:	9281aa23          	sw	s0,-1740(gp) # 1fb04 <raw_pcbs>
  }
  return pcb;
}
   11160:	00040513          	mv	a0,s0
   11164:	00c12083          	lw	ra,12(sp)
   11168:	00812403          	lw	s0,8(sp)
   1116c:	00412483          	lw	s1,4(sp)
   11170:	01010113          	addi	sp,sp,16
   11174:	00008067          	ret

00011178 <raw_new_ip_type>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new_ip_type(u8_t type, u8_t proto)
{
   11178:	ff010113          	addi	sp,sp,-16
   1117c:	00112623          	sw	ra,12(sp)
  struct raw_pcb *pcb;
  LWIP_ASSERT_CORE_LOCKED();
  pcb = raw_new(proto);
   11180:	00058513          	mv	a0,a1
   11184:	f91ff0ef          	jal	ra,11114 <raw_new>
  }
#else /* LWIP_IPV4 && LWIP_IPV6 */
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
   11188:	00c12083          	lw	ra,12(sp)
   1118c:	01010113          	addi	sp,sp,16
   11190:	00008067          	ret

00011194 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
   11194:	04050063          	beqz	a0,111d4 <raw_netif_ip_addr_changed+0x40>
   11198:	00052783          	lw	a5,0(a0)
   1119c:	02078c63          	beqz	a5,111d4 <raw_netif_ip_addr_changed+0x40>
   111a0:	02058a63          	beqz	a1,111d4 <raw_netif_ip_addr_changed+0x40>
   111a4:	0005a783          	lw	a5,0(a1)
   111a8:	02078663          	beqz	a5,111d4 <raw_netif_ip_addr_changed+0x40>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
   111ac:	9341a783          	lw	a5,-1740(gp) # 1fb04 <raw_pcbs>
   111b0:	0080006f          	j	111b8 <raw_netif_ip_addr_changed+0x24>
   111b4:	00c7a783          	lw	a5,12(a5)
   111b8:	00078e63          	beqz	a5,111d4 <raw_netif_ip_addr_changed+0x40>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
   111bc:	0007a683          	lw	a3,0(a5)
   111c0:	00052703          	lw	a4,0(a0)
   111c4:	fee698e3          	bne	a3,a4,111b4 <raw_netif_ip_addr_changed+0x20>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
   111c8:	0005a703          	lw	a4,0(a1)
   111cc:	00e7a023          	sw	a4,0(a5)
   111d0:	fe5ff06f          	j	111b4 <raw_netif_ip_addr_changed+0x20>
      }
    }
  }
}
   111d4:	00008067          	ret

000111d8 <uart_writeAvailability>:
        return *((volatile u32*) address);
   111d8:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   111dc:	01055513          	srli	a0,a0,0x10
    }
   111e0:	0ff57513          	andi	a0,a0,255
   111e4:	00008067          	ret

000111e8 <uart_write>:
    static void uart_write(u32 reg, char data){
   111e8:	ff010113          	addi	sp,sp,-16
   111ec:	00112623          	sw	ra,12(sp)
   111f0:	00812423          	sw	s0,8(sp)
   111f4:	00912223          	sw	s1,4(sp)
   111f8:	00050413          	mv	s0,a0
   111fc:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   11200:	00040513          	mv	a0,s0
   11204:	fd5ff0ef          	jal	ra,111d8 <uart_writeAvailability>
   11208:	fe050ce3          	beqz	a0,11200 <uart_write+0x18>
        *((volatile u32*) address) = data;
   1120c:	00942023          	sw	s1,0(s0)
    }
   11210:	00c12083          	lw	ra,12(sp)
   11214:	00812403          	lw	s0,8(sp)
   11218:	00412483          	lw	s1,4(sp)
   1121c:	01010113          	addi	sp,sp,16
   11220:	00008067          	ret

00011224 <bsp_printHex>:
    {
   11224:	ff010113          	addi	sp,sp,-16
   11228:	00112623          	sw	ra,12(sp)
   1122c:	00812423          	sw	s0,8(sp)
   11230:	00912223          	sw	s1,4(sp)
   11234:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   11238:	01c00413          	li	s0,28
   1123c:	0280006f          	j	11264 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   11240:	0084d7b3          	srl	a5,s1,s0
   11244:	00f7f713          	andi	a4,a5,15
   11248:	0001c7b7          	lui	a5,0x1c
   1124c:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   11250:	00e787b3          	add	a5,a5,a4
   11254:	0007c583          	lbu	a1,0(a5)
   11258:	f8010537          	lui	a0,0xf8010
   1125c:	f8dff0ef          	jal	ra,111e8 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   11260:	ffc40413          	addi	s0,s0,-4
   11264:	fc045ee3          	bgez	s0,11240 <bsp_printHex+0x1c>
    }
   11268:	00c12083          	lw	ra,12(sp)
   1126c:	00812403          	lw	s0,8(sp)
   11270:	00412483          	lw	s1,4(sp)
   11274:	01010113          	addi	sp,sp,16
   11278:	00008067          	ret

0001127c <bsp_printHex_lower>:
        {
   1127c:	ff010113          	addi	sp,sp,-16
   11280:	00112623          	sw	ra,12(sp)
   11284:	00812423          	sw	s0,8(sp)
   11288:	00912223          	sw	s1,4(sp)
   1128c:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   11290:	01c00413          	li	s0,28
   11294:	0280006f          	j	112bc <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   11298:	0084d7b3          	srl	a5,s1,s0
   1129c:	00f7f713          	andi	a4,a5,15
   112a0:	0001c7b7          	lui	a5,0x1c
   112a4:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   112a8:	00e787b3          	add	a5,a5,a4
   112ac:	0007c583          	lbu	a1,0(a5)
   112b0:	f8010537          	lui	a0,0xf8010
   112b4:	f35ff0ef          	jal	ra,111e8 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   112b8:	ffc40413          	addi	s0,s0,-4
   112bc:	fc045ee3          	bgez	s0,11298 <bsp_printHex_lower+0x1c>
        }
   112c0:	00c12083          	lw	ra,12(sp)
   112c4:	00812403          	lw	s0,8(sp)
   112c8:	00412483          	lw	s1,4(sp)
   112cc:	01010113          	addi	sp,sp,16
   112d0:	00008067          	ret

000112d4 <bsp_printf_c>:
    {
   112d4:	ff010113          	addi	sp,sp,-16
   112d8:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   112dc:	0ff57593          	andi	a1,a0,255
   112e0:	f8010537          	lui	a0,0xf8010
   112e4:	f05ff0ef          	jal	ra,111e8 <uart_write>
    }
   112e8:	00c12083          	lw	ra,12(sp)
   112ec:	01010113          	addi	sp,sp,16
   112f0:	00008067          	ret

000112f4 <bsp_printf_s>:
    {
   112f4:	ff010113          	addi	sp,sp,-16
   112f8:	00112623          	sw	ra,12(sp)
   112fc:	00812423          	sw	s0,8(sp)
   11300:	00050413          	mv	s0,a0
        while (*p)
   11304:	00044583          	lbu	a1,0(s0)
   11308:	00058a63          	beqz	a1,1131c <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   1130c:	00140413          	addi	s0,s0,1
   11310:	f8010537          	lui	a0,0xf8010
   11314:	ed5ff0ef          	jal	ra,111e8 <uart_write>
   11318:	fedff06f          	j	11304 <bsp_printf_s+0x10>
    }
   1131c:	00c12083          	lw	ra,12(sp)
   11320:	00812403          	lw	s0,8(sp)
   11324:	01010113          	addi	sp,sp,16
   11328:	00008067          	ret

0001132c <bsp_printf_d>:
    {
   1132c:	fd010113          	addi	sp,sp,-48
   11330:	02112623          	sw	ra,44(sp)
   11334:	02812423          	sw	s0,40(sp)
   11338:	02912223          	sw	s1,36(sp)
   1133c:	00050493          	mv	s1,a0
        if (val < 0) {
   11340:	00054663          	bltz	a0,1134c <bsp_printf_d+0x20>
    {
   11344:	00010413          	mv	s0,sp
   11348:	02c0006f          	j	11374 <bsp_printf_d+0x48>
            bsp_printf_c('-');
   1134c:	02d00513          	li	a0,45
   11350:	f85ff0ef          	jal	ra,112d4 <bsp_printf_c>
            val = -val;
   11354:	409004b3          	neg	s1,s1
   11358:	fedff06f          	j	11344 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   1135c:	00a00713          	li	a4,10
   11360:	02e4e7b3          	rem	a5,s1,a4
   11364:	03078793          	addi	a5,a5,48
   11368:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   1136c:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   11370:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   11374:	fe0494e3          	bnez	s1,1135c <bsp_printf_d+0x30>
   11378:	00010793          	mv	a5,sp
   1137c:	fef400e3          	beq	s0,a5,1135c <bsp_printf_d+0x30>
   11380:	0100006f          	j	11390 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   11384:	fff40413          	addi	s0,s0,-1
   11388:	00044503          	lbu	a0,0(s0)
   1138c:	f49ff0ef          	jal	ra,112d4 <bsp_printf_c>
        while (p != buffer)
   11390:	00010793          	mv	a5,sp
   11394:	fef418e3          	bne	s0,a5,11384 <bsp_printf_d+0x58>
    }
   11398:	02c12083          	lw	ra,44(sp)
   1139c:	02812403          	lw	s0,40(sp)
   113a0:	02412483          	lw	s1,36(sp)
   113a4:	03010113          	addi	sp,sp,48
   113a8:	00008067          	ret

000113ac <bsp_printf_x>:
    {
   113ac:	ff010113          	addi	sp,sp,-16
   113b0:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   113b4:	00000713          	li	a4,0
   113b8:	00700793          	li	a5,7
   113bc:	02e7c063          	blt	a5,a4,113dc <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   113c0:	00271693          	slli	a3,a4,0x2
   113c4:	ff000793          	li	a5,-16
   113c8:	00d797b3          	sll	a5,a5,a3
   113cc:	00f577b3          	and	a5,a0,a5
   113d0:	00078663          	beqz	a5,113dc <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   113d4:	00170713          	addi	a4,a4,1
   113d8:	fe1ff06f          	j	113b8 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   113dc:	ea1ff0ef          	jal	ra,1127c <bsp_printHex_lower>
    }
   113e0:	00c12083          	lw	ra,12(sp)
   113e4:	01010113          	addi	sp,sp,16
   113e8:	00008067          	ret

000113ec <bsp_printf_X>:
        {
   113ec:	ff010113          	addi	sp,sp,-16
   113f0:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   113f4:	00000713          	li	a4,0
   113f8:	00700793          	li	a5,7
   113fc:	02e7c063          	blt	a5,a4,1141c <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   11400:	00271693          	slli	a3,a4,0x2
   11404:	ff000793          	li	a5,-16
   11408:	00d797b3          	sll	a5,a5,a3
   1140c:	00f577b3          	and	a5,a0,a5
   11410:	00078663          	beqz	a5,1141c <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   11414:	00170713          	addi	a4,a4,1
   11418:	fe1ff06f          	j	113f8 <bsp_printf_X+0xc>
            bsp_printHex(val);
   1141c:	e09ff0ef          	jal	ra,11224 <bsp_printHex>
        }
   11420:	00c12083          	lw	ra,12(sp)
   11424:	01010113          	addi	sp,sp,16
   11428:	00008067          	ret

0001142c <bsp_printf>:
    {
   1142c:	fc010113          	addi	sp,sp,-64
   11430:	00112e23          	sw	ra,28(sp)
   11434:	00812c23          	sw	s0,24(sp)
   11438:	00912a23          	sw	s1,20(sp)
   1143c:	00050493          	mv	s1,a0
   11440:	02b12223          	sw	a1,36(sp)
   11444:	02c12423          	sw	a2,40(sp)
   11448:	02d12623          	sw	a3,44(sp)
   1144c:	02e12823          	sw	a4,48(sp)
   11450:	02f12a23          	sw	a5,52(sp)
   11454:	03012c23          	sw	a6,56(sp)
   11458:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   1145c:	02410793          	addi	a5,sp,36
   11460:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   11464:	00000413          	li	s0,0
   11468:	01c0006f          	j	11484 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   1146c:	00c12783          	lw	a5,12(sp)
   11470:	00478713          	addi	a4,a5,4
   11474:	00e12623          	sw	a4,12(sp)
   11478:	0007a503          	lw	a0,0(a5)
   1147c:	e59ff0ef          	jal	ra,112d4 <bsp_printf_c>
        for (i = 0; format[i]; i++)
   11480:	00140413          	addi	s0,s0,1
   11484:	008487b3          	add	a5,s1,s0
   11488:	0007c503          	lbu	a0,0(a5)
   1148c:	0c050263          	beqz	a0,11550 <bsp_printf+0x124>
            if (format[i] == '%') {
   11490:	02500793          	li	a5,37
   11494:	06f50663          	beq	a0,a5,11500 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   11498:	e3dff0ef          	jal	ra,112d4 <bsp_printf_c>
   1149c:	fe5ff06f          	j	11480 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   114a0:	00c12783          	lw	a5,12(sp)
   114a4:	00478713          	addi	a4,a5,4
   114a8:	00e12623          	sw	a4,12(sp)
   114ac:	0007a503          	lw	a0,0(a5)
   114b0:	e45ff0ef          	jal	ra,112f4 <bsp_printf_s>
                        break;
   114b4:	fcdff06f          	j	11480 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   114b8:	00c12783          	lw	a5,12(sp)
   114bc:	00478713          	addi	a4,a5,4
   114c0:	00e12623          	sw	a4,12(sp)
   114c4:	0007a503          	lw	a0,0(a5)
   114c8:	e65ff0ef          	jal	ra,1132c <bsp_printf_d>
                        break;
   114cc:	fb5ff06f          	j	11480 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   114d0:	00c12783          	lw	a5,12(sp)
   114d4:	00478713          	addi	a4,a5,4
   114d8:	00e12623          	sw	a4,12(sp)
   114dc:	0007a503          	lw	a0,0(a5)
   114e0:	f0dff0ef          	jal	ra,113ec <bsp_printf_X>
                        break;
   114e4:	f9dff06f          	j	11480 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   114e8:	00c12783          	lw	a5,12(sp)
   114ec:	00478713          	addi	a4,a5,4
   114f0:	00e12623          	sw	a4,12(sp)
   114f4:	0007a503          	lw	a0,0(a5)
   114f8:	eb5ff0ef          	jal	ra,113ac <bsp_printf_x>
                        break;
   114fc:	f85ff06f          	j	11480 <bsp_printf+0x54>
                while (format[++i]) {
   11500:	00140413          	addi	s0,s0,1
   11504:	008487b3          	add	a5,s1,s0
   11508:	0007c783          	lbu	a5,0(a5)
   1150c:	f6078ae3          	beqz	a5,11480 <bsp_printf+0x54>
                    if (format[i] == 'c') {
   11510:	06300713          	li	a4,99
   11514:	f4e78ce3          	beq	a5,a4,1146c <bsp_printf+0x40>
                    else if (format[i] == 's') {
   11518:	07300713          	li	a4,115
   1151c:	f8e782e3          	beq	a5,a4,114a0 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   11520:	06400713          	li	a4,100
   11524:	f8e78ae3          	beq	a5,a4,114b8 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   11528:	05800713          	li	a4,88
   1152c:	fae782e3          	beq	a5,a4,114d0 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   11530:	07800713          	li	a4,120
   11534:	fae78ae3          	beq	a5,a4,114e8 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   11538:	06600713          	li	a4,102
   1153c:	fce792e3          	bne	a5,a4,11500 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   11540:	0001c537          	lui	a0,0x1c
   11544:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   11548:	dadff0ef          	jal	ra,112f4 <bsp_printf_s>
                        break;
   1154c:	f35ff06f          	j	11480 <bsp_printf+0x54>
    }
   11550:	01c12083          	lw	ra,28(sp)
   11554:	01812403          	lw	s0,24(sp)
   11558:	01412483          	lw	s1,20(sp)
   1155c:	04010113          	addi	sp,sp,64
   11560:	00008067          	ret

00011564 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
   11564:	ff010113          	addi	sp,sp,-16
   11568:	00112623          	sw	ra,12(sp)
   1156c:	00812423          	sw	s0,8(sp)
   11570:	00912223          	sw	s1,4(sp)
   11574:	01212023          	sw	s2,0(sp)
   11578:	00050413          	mv	s0,a0
   1157c:	00058913          	mv	s2,a1
   11580:	00060493          	mv	s1,a2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
   11584:	00900513          	li	a0,9
   11588:	6c5020ef          	jal	ra,1444c <memp_malloc>
  if (timeout == NULL) {
   1158c:	04050463          	beqz	a0,115d4 <sys_timeout_abs+0x70>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
   11590:	00052023          	sw	zero,0(a0)
  timeout->h = handler;
   11594:	01252423          	sw	s2,8(a0)
  timeout->arg = arg;
   11598:	00952623          	sw	s1,12(a0)
  timeout->time = abs_time;
   1159c:	00852223          	sw	s0,4(a0)
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
   115a0:	9401a703          	lw	a4,-1728(gp) # 1fb10 <next_timeout>
   115a4:	04070063          	beqz	a4,115e4 <sys_timeout_abs+0x80>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
   115a8:	00472783          	lw	a5,4(a4)
   115ac:	40f407b3          	sub	a5,s0,a5
   115b0:	0407d463          	bgez	a5,115f8 <sys_timeout_abs+0x94>
    timeout->next = next_timeout;
   115b4:	00e52023          	sw	a4,0(a0)
    next_timeout = timeout;
   115b8:	94a1a023          	sw	a0,-1728(gp) # 1fb10 <next_timeout>
        t->next = timeout;
        break;
      }
    }
  }
}
   115bc:	00c12083          	lw	ra,12(sp)
   115c0:	00812403          	lw	s0,8(sp)
   115c4:	00412483          	lw	s1,4(sp)
   115c8:	00012903          	lw	s2,0(sp)
   115cc:	01010113          	addi	sp,sp,16
   115d0:	00008067          	ret
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
   115d4:	0001e537          	lui	a0,0x1e
   115d8:	13850513          	addi	a0,a0,312 # 1e138 <lwip_cyclic_timers+0x20>
   115dc:	e51ff0ef          	jal	ra,1142c <bsp_printf>
    return;
   115e0:	fddff06f          	j	115bc <sys_timeout_abs+0x58>
    next_timeout = timeout;
   115e4:	94a1a023          	sw	a0,-1728(gp) # 1fb10 <next_timeout>
    return;
   115e8:	fd5ff06f          	j	115bc <sys_timeout_abs+0x58>
        timeout->next = t->next;
   115ec:	00f52023          	sw	a5,0(a0)
        t->next = timeout;
   115f0:	00a72023          	sw	a0,0(a4)
        break;
   115f4:	fc9ff06f          	j	115bc <sys_timeout_abs+0x58>
    for (t = next_timeout; t != NULL; t = t->next) {
   115f8:	fc0702e3          	beqz	a4,115bc <sys_timeout_abs+0x58>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
   115fc:	00072783          	lw	a5,0(a4)
   11600:	fe0786e3          	beqz	a5,115ec <sys_timeout_abs+0x88>
   11604:	0047a683          	lw	a3,4(a5)
   11608:	40d406b3          	sub	a3,s0,a3
   1160c:	fe06c0e3          	bltz	a3,115ec <sys_timeout_abs+0x88>
    for (t = next_timeout; t != NULL; t = t->next) {
   11610:	00078713          	mv	a4,a5
   11614:	fe5ff06f          	j	115f8 <sys_timeout_abs+0x94>

00011618 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
   11618:	ff010113          	addi	sp,sp,-16
   1161c:	00112623          	sw	ra,12(sp)
   11620:	00812423          	sw	s0,8(sp)
   11624:	00050413          	mv	s0,a0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
   11628:	00452783          	lw	a5,4(a0)
   1162c:	000780e7          	jalr	a5

  now = sys_now();
   11630:	d0df10ef          	jal	ra,333c <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
   11634:	00042703          	lw	a4,0(s0)
   11638:	93c1a783          	lw	a5,-1732(gp) # 1fb0c <current_timeout_due_time>
   1163c:	00f707b3          	add	a5,a4,a5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
   11640:	40a786b3          	sub	a3,a5,a0
   11644:	0206d463          	bgez	a3,1166c <lwip_cyclic_timer+0x54>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
   11648:	00040613          	mv	a2,s0
   1164c:	000115b7          	lui	a1,0x11
   11650:	61858593          	addi	a1,a1,1560 # 11618 <lwip_cyclic_timer>
   11654:	00a70533          	add	a0,a4,a0
   11658:	f0dff0ef          	jal	ra,11564 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
   1165c:	00c12083          	lw	ra,12(sp)
   11660:	00812403          	lw	s0,8(sp)
   11664:	01010113          	addi	sp,sp,16
   11668:	00008067          	ret
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
   1166c:	00040613          	mv	a2,s0
   11670:	000115b7          	lui	a1,0x11
   11674:	61858593          	addi	a1,a1,1560 # 11618 <lwip_cyclic_timer>
   11678:	00078513          	mv	a0,a5
   1167c:	ee9ff0ef          	jal	ra,11564 <sys_timeout_abs>
}
   11680:	fddff06f          	j	1165c <lwip_cyclic_timer+0x44>

00011684 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
   11684:	ff010113          	addi	sp,sp,-16
   11688:	00112623          	sw	ra,12(sp)
   1168c:	00812423          	sw	s0,8(sp)
   11690:	00912223          	sw	s1,4(sp)
   11694:	01212023          	sw	s2,0(sp)
   11698:	00050413          	mv	s0,a0
   1169c:	00058493          	mv	s1,a1
   116a0:	00060913          	mv	s2,a2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
   116a4:	400007b7          	lui	a5,0x40000
   116a8:	02f57863          	bgeu	a0,a5,116d8 <sys_timeout+0x54>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
   116ac:	c91f10ef          	jal	ra,333c <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
   116b0:	00090613          	mv	a2,s2
   116b4:	00048593          	mv	a1,s1
   116b8:	00850533          	add	a0,a0,s0
   116bc:	ea9ff0ef          	jal	ra,11564 <sys_timeout_abs>
#endif
}
   116c0:	00c12083          	lw	ra,12(sp)
   116c4:	00812403          	lw	s0,8(sp)
   116c8:	00412483          	lw	s1,4(sp)
   116cc:	00012903          	lw	s2,0(sp)
   116d0:	01010113          	addi	sp,sp,16
   116d4:	00008067          	ret
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
   116d8:	0001e537          	lui	a0,0x1e
   116dc:	17850513          	addi	a0,a0,376 # 1e178 <lwip_cyclic_timers+0x60>
   116e0:	d4dff0ef          	jal	ra,1142c <bsp_printf>
   116e4:	fc9ff06f          	j	116ac <sys_timeout+0x28>

000116e8 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
   116e8:	9381a783          	lw	a5,-1736(gp) # 1fb08 <tcpip_tcp_timer_active>
   116ec:	04079663          	bnez	a5,11738 <tcp_timer_needed+0x50>
   116f0:	000227b7          	lui	a5,0x22
   116f4:	f007a783          	lw	a5,-256(a5) # 21f00 <tcp_active_pcbs>
   116f8:	02078a63          	beqz	a5,1172c <tcp_timer_needed+0x44>
{
   116fc:	ff010113          	addi	sp,sp,-16
   11700:	00112623          	sw	ra,12(sp)
    tcpip_tcp_timer_active = 1;
   11704:	00100713          	li	a4,1
   11708:	92e1ac23          	sw	a4,-1736(gp) # 1fb08 <tcpip_tcp_timer_active>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
   1170c:	00000613          	li	a2,0
   11710:	000115b7          	lui	a1,0x11
   11714:	73c58593          	addi	a1,a1,1852 # 1173c <tcpip_tcp_timer>
   11718:	0fa00513          	li	a0,250
   1171c:	f69ff0ef          	jal	ra,11684 <sys_timeout>
}
   11720:	00c12083          	lw	ra,12(sp)
   11724:	01010113          	addi	sp,sp,16
   11728:	00008067          	ret
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
   1172c:	000227b7          	lui	a5,0x22
   11730:	f107a783          	lw	a5,-240(a5) # 21f10 <tcp_tw_pcbs>
   11734:	fc0794e3          	bnez	a5,116fc <tcp_timer_needed+0x14>
   11738:	00008067          	ret

0001173c <tcpip_tcp_timer>:
{
   1173c:	ff010113          	addi	sp,sp,-16
   11740:	00112623          	sw	ra,12(sp)
  tcp_tmr();
   11744:	7b0020ef          	jal	ra,13ef4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
   11748:	000227b7          	lui	a5,0x22
   1174c:	f007a783          	lw	a5,-256(a5) # 21f00 <tcp_active_pcbs>
   11750:	02078263          	beqz	a5,11774 <tcpip_tcp_timer+0x38>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
   11754:	00000613          	li	a2,0
   11758:	000115b7          	lui	a1,0x11
   1175c:	73c58593          	addi	a1,a1,1852 # 1173c <tcpip_tcp_timer>
   11760:	0fa00513          	li	a0,250
   11764:	f21ff0ef          	jal	ra,11684 <sys_timeout>
}
   11768:	00c12083          	lw	ra,12(sp)
   1176c:	01010113          	addi	sp,sp,16
   11770:	00008067          	ret
  if (tcp_active_pcbs || tcp_tw_pcbs) {
   11774:	000227b7          	lui	a5,0x22
   11778:	f107a783          	lw	a5,-240(a5) # 21f10 <tcp_tw_pcbs>
   1177c:	fc079ce3          	bnez	a5,11754 <tcpip_tcp_timer+0x18>
    tcpip_tcp_timer_active = 0;
   11780:	9201ac23          	sw	zero,-1736(gp) # 1fb08 <tcpip_tcp_timer_active>
}
   11784:	fe5ff06f          	j	11768 <tcpip_tcp_timer+0x2c>

00011788 <sys_timeouts_init>:
{
   11788:	ff010113          	addi	sp,sp,-16
   1178c:	00112623          	sw	ra,12(sp)
   11790:	00812423          	sw	s0,8(sp)
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
   11794:	00100413          	li	s0,1
   11798:	00300793          	li	a5,3
   1179c:	0287e863          	bltu	a5,s0,117cc <sys_timeouts_init+0x44>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
   117a0:	00341713          	slli	a4,s0,0x3
   117a4:	0001e7b7          	lui	a5,0x1e
   117a8:	11878793          	addi	a5,a5,280 # 1e118 <lwip_cyclic_timers>
   117ac:	00e787b3          	add	a5,a5,a4
   117b0:	00078613          	mv	a2,a5
   117b4:	000115b7          	lui	a1,0x11
   117b8:	61858593          	addi	a1,a1,1560 # 11618 <lwip_cyclic_timer>
   117bc:	0007a503          	lw	a0,0(a5)
   117c0:	ec5ff0ef          	jal	ra,11684 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
   117c4:	00140413          	addi	s0,s0,1
   117c8:	fd1ff06f          	j	11798 <sys_timeouts_init+0x10>
}
   117cc:	00c12083          	lw	ra,12(sp)
   117d0:	00812403          	lw	s0,8(sp)
   117d4:	01010113          	addi	sp,sp,16
   117d8:	00008067          	ret

000117dc <sys_untimeout>:
{
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
   117dc:	9401a783          	lw	a5,-1728(gp) # 1fb10 <next_timeout>
   117e0:	06078263          	beqz	a5,11844 <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
   117e4:	00000693          	li	a3,0
   117e8:	0180006f          	j	11800 <sys_untimeout+0x24>
    if ((t->h == handler) && (t->arg == arg)) {
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
   117ec:	0007a683          	lw	a3,0(a5)
   117f0:	94d1a023          	sw	a3,-1728(gp) # 1fb10 <next_timeout>
   117f4:	0340006f          	j	11828 <sys_untimeout+0x4c>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
   117f8:	00078693          	mv	a3,a5
   117fc:	0007a783          	lw	a5,0(a5)
   11800:	04078063          	beqz	a5,11840 <sys_untimeout+0x64>
    if ((t->h == handler) && (t->arg == arg)) {
   11804:	0087a703          	lw	a4,8(a5)
   11808:	fea718e3          	bne	a4,a0,117f8 <sys_untimeout+0x1c>
   1180c:	00c7a703          	lw	a4,12(a5)
   11810:	feb714e3          	bne	a4,a1,117f8 <sys_untimeout+0x1c>
{
   11814:	ff010113          	addi	sp,sp,-16
   11818:	00112623          	sw	ra,12(sp)
      if (prev_t == NULL) {
   1181c:	fc0688e3          	beqz	a3,117ec <sys_untimeout+0x10>
      } else {
        prev_t->next = t->next;
   11820:	0007a703          	lw	a4,0(a5)
   11824:	00e6a023          	sw	a4,0(a3)
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
   11828:	00078593          	mv	a1,a5
   1182c:	00900513          	li	a0,9
   11830:	4ad020ef          	jal	ra,144dc <memp_free>
      return;
    }
  }
  return;
}
   11834:	00c12083          	lw	ra,12(sp)
   11838:	01010113          	addi	sp,sp,16
   1183c:	00008067          	ret
   11840:	00008067          	ret
   11844:	00008067          	ret

00011848 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
   11848:	ff010113          	addi	sp,sp,-16
   1184c:	00112623          	sw	ra,12(sp)
   11850:	00812423          	sw	s0,8(sp)
   11854:	00912223          	sw	s1,4(sp)
   11858:	01212023          	sw	s2,0(sp)
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
   1185c:	ae1f10ef          	jal	ra,333c <sys_now>
   11860:	00050493          	mv	s1,a0
   11864:	03c0006f          	j	118a0 <sys_check_timeouts+0x58>
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
   11868:	870fb0ef          	jal	ra,c8d8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
   1186c:	9401a583          	lw	a1,-1728(gp) # 1fb10 <next_timeout>
    if (tmptimeout == NULL) {
   11870:	04058863          	beqz	a1,118c0 <sys_check_timeouts+0x78>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
   11874:	0045a783          	lw	a5,4(a1)
   11878:	40f48733          	sub	a4,s1,a5
   1187c:	04074263          	bltz	a4,118c0 <sys_check_timeouts+0x78>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
   11880:	0005a683          	lw	a3,0(a1)
   11884:	94d1a023          	sw	a3,-1728(gp) # 1fb10 <next_timeout>
    handler = tmptimeout->h;
   11888:	0085a403          	lw	s0,8(a1)
    arg = tmptimeout->arg;
   1188c:	00c5a903          	lw	s2,12(a1)
    current_timeout_due_time = tmptimeout->time;
   11890:	92f1ae23          	sw	a5,-1732(gp) # 1fb0c <current_timeout_due_time>
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
   11894:	00900513          	li	a0,9
   11898:	445020ef          	jal	ra,144dc <memp_free>
    if (handler != NULL) {
   1189c:	00041c63          	bnez	s0,118b4 <sys_check_timeouts+0x6c>
    PBUF_CHECK_FREE_OOSEQ();
   118a0:	000227b7          	lui	a5,0x22
   118a4:	edc7c783          	lbu	a5,-292(a5) # 21edc <pbuf_free_ooseq_pending>
   118a8:	0ff7f793          	andi	a5,a5,255
   118ac:	fc0780e3          	beqz	a5,1186c <sys_check_timeouts+0x24>
   118b0:	fb9ff06f          	j	11868 <sys_check_timeouts+0x20>
      handler(arg);
   118b4:	00090513          	mv	a0,s2
   118b8:	000400e7          	jalr	s0
   118bc:	fe5ff06f          	j	118a0 <sys_check_timeouts+0x58>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
   118c0:	00c12083          	lw	ra,12(sp)
   118c4:	00812403          	lw	s0,8(sp)
   118c8:	00412483          	lw	s1,4(sp)
   118cc:	00012903          	lw	s2,0(sp)
   118d0:	01010113          	addi	sp,sp,16
   118d4:	00008067          	ret

000118d8 <sys_restart_timeouts>:
{
  u32_t now;
  u32_t base;
  struct sys_timeo *t;

  if (next_timeout == NULL) {
   118d8:	9401a783          	lw	a5,-1728(gp) # 1fb10 <next_timeout>
   118dc:	04078063          	beqz	a5,1191c <sys_restart_timeouts+0x44>
{
   118e0:	ff010113          	addi	sp,sp,-16
   118e4:	00112623          	sw	ra,12(sp)
    return;
  }

  now = sys_now();
   118e8:	a55f10ef          	jal	ra,333c <sys_now>
  base = next_timeout->time;
   118ec:	9401a703          	lw	a4,-1728(gp) # 1fb10 <next_timeout>
   118f0:	00472683          	lw	a3,4(a4)

  for (t = next_timeout; t != NULL; t = t->next) {
   118f4:	00070e63          	beqz	a4,11910 <sys_restart_timeouts+0x38>
    t->time = (t->time - base) + now;
   118f8:	00472783          	lw	a5,4(a4)
   118fc:	40d787b3          	sub	a5,a5,a3
   11900:	00a787b3          	add	a5,a5,a0
   11904:	00f72223          	sw	a5,4(a4)
  for (t = next_timeout; t != NULL; t = t->next) {
   11908:	00072703          	lw	a4,0(a4)
   1190c:	fe9ff06f          	j	118f4 <sys_restart_timeouts+0x1c>
  }
}
   11910:	00c12083          	lw	ra,12(sp)
   11914:	01010113          	addi	sp,sp,16
   11918:	00008067          	ret
   1191c:	00008067          	ret

00011920 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
   11920:	ff010113          	addi	sp,sp,-16
   11924:	00112623          	sw	ra,12(sp)
   11928:	00812423          	sw	s0,8(sp)
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
   1192c:	9401a783          	lw	a5,-1728(gp) # 1fb10 <next_timeout>
   11930:	02078663          	beqz	a5,1195c <sys_timeouts_sleeptime+0x3c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
   11934:	a09f10ef          	jal	ra,333c <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
   11938:	9401a783          	lw	a5,-1728(gp) # 1fb10 <next_timeout>
   1193c:	0047a403          	lw	s0,4(a5)
   11940:	40a40433          	sub	s0,s0,a0
   11944:	02044063          	bltz	s0,11964 <sys_timeouts_sleeptime+0x44>
    return 0;
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
   11948:	02045063          	bgez	s0,11968 <sys_timeouts_sleeptime+0x48>
   1194c:	0001e537          	lui	a0,0x1e
   11950:	1b050513          	addi	a0,a0,432 # 1e1b0 <lwip_cyclic_timers+0x98>
   11954:	ad9ff0ef          	jal	ra,1142c <bsp_printf>
    return ret;
   11958:	0100006f          	j	11968 <sys_timeouts_sleeptime+0x48>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
   1195c:	fff00413          	li	s0,-1
   11960:	0080006f          	j	11968 <sys_timeouts_sleeptime+0x48>
    return 0;
   11964:	00000413          	li	s0,0
  }
}
   11968:	00040513          	mv	a0,s0
   1196c:	00c12083          	lw	ra,12(sp)
   11970:	00812403          	lw	s0,8(sp)
   11974:	01010113          	addi	sp,sp,16
   11978:	00008067          	ret

0001197c <uart_writeAvailability>:
        return *((volatile u32*) address);
   1197c:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   11980:	01055513          	srli	a0,a0,0x10
    }
   11984:	0ff57513          	andi	a0,a0,255
   11988:	00008067          	ret

0001198c <uart_write>:
    static void uart_write(u32 reg, char data){
   1198c:	ff010113          	addi	sp,sp,-16
   11990:	00112623          	sw	ra,12(sp)
   11994:	00812423          	sw	s0,8(sp)
   11998:	00912223          	sw	s1,4(sp)
   1199c:	00050413          	mv	s0,a0
   119a0:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   119a4:	00040513          	mv	a0,s0
   119a8:	fd5ff0ef          	jal	ra,1197c <uart_writeAvailability>
   119ac:	fe050ce3          	beqz	a0,119a4 <uart_write+0x18>
        *((volatile u32*) address) = data;
   119b0:	00942023          	sw	s1,0(s0)
    }
   119b4:	00c12083          	lw	ra,12(sp)
   119b8:	00812403          	lw	s0,8(sp)
   119bc:	00412483          	lw	s1,4(sp)
   119c0:	01010113          	addi	sp,sp,16
   119c4:	00008067          	ret

000119c8 <bsp_printHex>:
    {
   119c8:	ff010113          	addi	sp,sp,-16
   119cc:	00112623          	sw	ra,12(sp)
   119d0:	00812423          	sw	s0,8(sp)
   119d4:	00912223          	sw	s1,4(sp)
   119d8:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   119dc:	01c00413          	li	s0,28
   119e0:	0280006f          	j	11a08 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   119e4:	0084d7b3          	srl	a5,s1,s0
   119e8:	00f7f713          	andi	a4,a5,15
   119ec:	0001c7b7          	lui	a5,0x1c
   119f0:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   119f4:	00e787b3          	add	a5,a5,a4
   119f8:	0007c583          	lbu	a1,0(a5)
   119fc:	f8010537          	lui	a0,0xf8010
   11a00:	f8dff0ef          	jal	ra,1198c <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   11a04:	ffc40413          	addi	s0,s0,-4
   11a08:	fc045ee3          	bgez	s0,119e4 <bsp_printHex+0x1c>
    }
   11a0c:	00c12083          	lw	ra,12(sp)
   11a10:	00812403          	lw	s0,8(sp)
   11a14:	00412483          	lw	s1,4(sp)
   11a18:	01010113          	addi	sp,sp,16
   11a1c:	00008067          	ret

00011a20 <bsp_printHex_lower>:
        {
   11a20:	ff010113          	addi	sp,sp,-16
   11a24:	00112623          	sw	ra,12(sp)
   11a28:	00812423          	sw	s0,8(sp)
   11a2c:	00912223          	sw	s1,4(sp)
   11a30:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   11a34:	01c00413          	li	s0,28
   11a38:	0280006f          	j	11a60 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   11a3c:	0084d7b3          	srl	a5,s1,s0
   11a40:	00f7f713          	andi	a4,a5,15
   11a44:	0001c7b7          	lui	a5,0x1c
   11a48:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   11a4c:	00e787b3          	add	a5,a5,a4
   11a50:	0007c583          	lbu	a1,0(a5)
   11a54:	f8010537          	lui	a0,0xf8010
   11a58:	f35ff0ef          	jal	ra,1198c <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   11a5c:	ffc40413          	addi	s0,s0,-4
   11a60:	fc045ee3          	bgez	s0,11a3c <bsp_printHex_lower+0x1c>
        }
   11a64:	00c12083          	lw	ra,12(sp)
   11a68:	00812403          	lw	s0,8(sp)
   11a6c:	00412483          	lw	s1,4(sp)
   11a70:	01010113          	addi	sp,sp,16
   11a74:	00008067          	ret

00011a78 <bsp_printf_c>:
    {
   11a78:	ff010113          	addi	sp,sp,-16
   11a7c:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   11a80:	0ff57593          	andi	a1,a0,255
   11a84:	f8010537          	lui	a0,0xf8010
   11a88:	f05ff0ef          	jal	ra,1198c <uart_write>
    }
   11a8c:	00c12083          	lw	ra,12(sp)
   11a90:	01010113          	addi	sp,sp,16
   11a94:	00008067          	ret

00011a98 <bsp_printf_s>:
    {
   11a98:	ff010113          	addi	sp,sp,-16
   11a9c:	00112623          	sw	ra,12(sp)
   11aa0:	00812423          	sw	s0,8(sp)
   11aa4:	00050413          	mv	s0,a0
        while (*p)
   11aa8:	00044583          	lbu	a1,0(s0)
   11aac:	00058a63          	beqz	a1,11ac0 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   11ab0:	00140413          	addi	s0,s0,1
   11ab4:	f8010537          	lui	a0,0xf8010
   11ab8:	ed5ff0ef          	jal	ra,1198c <uart_write>
   11abc:	fedff06f          	j	11aa8 <bsp_printf_s+0x10>
    }
   11ac0:	00c12083          	lw	ra,12(sp)
   11ac4:	00812403          	lw	s0,8(sp)
   11ac8:	01010113          	addi	sp,sp,16
   11acc:	00008067          	ret

00011ad0 <bsp_printf_d>:
    {
   11ad0:	fd010113          	addi	sp,sp,-48
   11ad4:	02112623          	sw	ra,44(sp)
   11ad8:	02812423          	sw	s0,40(sp)
   11adc:	02912223          	sw	s1,36(sp)
   11ae0:	00050493          	mv	s1,a0
        if (val < 0) {
   11ae4:	00054663          	bltz	a0,11af0 <bsp_printf_d+0x20>
    {
   11ae8:	00010413          	mv	s0,sp
   11aec:	02c0006f          	j	11b18 <bsp_printf_d+0x48>
            bsp_printf_c('-');
   11af0:	02d00513          	li	a0,45
   11af4:	f85ff0ef          	jal	ra,11a78 <bsp_printf_c>
            val = -val;
   11af8:	409004b3          	neg	s1,s1
   11afc:	fedff06f          	j	11ae8 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   11b00:	00a00713          	li	a4,10
   11b04:	02e4e7b3          	rem	a5,s1,a4
   11b08:	03078793          	addi	a5,a5,48
   11b0c:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   11b10:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   11b14:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   11b18:	fe0494e3          	bnez	s1,11b00 <bsp_printf_d+0x30>
   11b1c:	00010793          	mv	a5,sp
   11b20:	fef400e3          	beq	s0,a5,11b00 <bsp_printf_d+0x30>
   11b24:	0100006f          	j	11b34 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   11b28:	fff40413          	addi	s0,s0,-1
   11b2c:	00044503          	lbu	a0,0(s0)
   11b30:	f49ff0ef          	jal	ra,11a78 <bsp_printf_c>
        while (p != buffer)
   11b34:	00010793          	mv	a5,sp
   11b38:	fef418e3          	bne	s0,a5,11b28 <bsp_printf_d+0x58>
    }
   11b3c:	02c12083          	lw	ra,44(sp)
   11b40:	02812403          	lw	s0,40(sp)
   11b44:	02412483          	lw	s1,36(sp)
   11b48:	03010113          	addi	sp,sp,48
   11b4c:	00008067          	ret

00011b50 <bsp_printf_x>:
    {
   11b50:	ff010113          	addi	sp,sp,-16
   11b54:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   11b58:	00000713          	li	a4,0
   11b5c:	00700793          	li	a5,7
   11b60:	02e7c063          	blt	a5,a4,11b80 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   11b64:	00271693          	slli	a3,a4,0x2
   11b68:	ff000793          	li	a5,-16
   11b6c:	00d797b3          	sll	a5,a5,a3
   11b70:	00f577b3          	and	a5,a0,a5
   11b74:	00078663          	beqz	a5,11b80 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   11b78:	00170713          	addi	a4,a4,1
   11b7c:	fe1ff06f          	j	11b5c <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   11b80:	ea1ff0ef          	jal	ra,11a20 <bsp_printHex_lower>
    }
   11b84:	00c12083          	lw	ra,12(sp)
   11b88:	01010113          	addi	sp,sp,16
   11b8c:	00008067          	ret

00011b90 <bsp_printf_X>:
        {
   11b90:	ff010113          	addi	sp,sp,-16
   11b94:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   11b98:	00000713          	li	a4,0
   11b9c:	00700793          	li	a5,7
   11ba0:	02e7c063          	blt	a5,a4,11bc0 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   11ba4:	00271693          	slli	a3,a4,0x2
   11ba8:	ff000793          	li	a5,-16
   11bac:	00d797b3          	sll	a5,a5,a3
   11bb0:	00f577b3          	and	a5,a0,a5
   11bb4:	00078663          	beqz	a5,11bc0 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   11bb8:	00170713          	addi	a4,a4,1
   11bbc:	fe1ff06f          	j	11b9c <bsp_printf_X+0xc>
            bsp_printHex(val);
   11bc0:	e09ff0ef          	jal	ra,119c8 <bsp_printHex>
        }
   11bc4:	00c12083          	lw	ra,12(sp)
   11bc8:	01010113          	addi	sp,sp,16
   11bcc:	00008067          	ret

00011bd0 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
   11bd0:	00000593          	li	a1,0
   11bd4:	0240006f          	j	11bf8 <tcp_new_port+0x28>
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
   11bd8:	ffffc737          	lui	a4,0xffffc
   11bdc:	80e19c23          	sh	a4,-2024(gp) # 1f9e8 <tcp_port>
   11be0:	0380006f          	j	11c18 <tcp_new_port+0x48>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
   11be4:	00158593          	addi	a1,a1,1
   11be8:	01059593          	slli	a1,a1,0x10
   11bec:	0105d593          	srli	a1,a1,0x10
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
   11bf0:	000047b7          	lui	a5,0x4
   11bf4:	06f5fa63          	bgeu	a1,a5,11c68 <tcp_new_port+0x98>
  tcp_port++;
   11bf8:	8181d783          	lhu	a5,-2024(gp) # 1f9e8 <tcp_port>
   11bfc:	00178793          	addi	a5,a5,1 # 4001 <bsp_printf_x+0x19>
   11c00:	01079793          	slli	a5,a5,0x10
   11c04:	0107d793          	srli	a5,a5,0x10
   11c08:	80f19c23          	sh	a5,-2024(gp) # 1f9e8 <tcp_port>
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
   11c0c:	00010737          	lui	a4,0x10
   11c10:	fff70713          	addi	a4,a4,-1 # ffff <tcp_input+0x183>
   11c14:	fce782e3          	beq	a5,a4,11bd8 <tcp_new_port+0x8>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
   11c18:	00000613          	li	a2,0
   11c1c:	00300793          	li	a5,3
   11c20:	04c7e063          	bltu	a5,a2,11c60 <tcp_new_port+0x90>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
   11c24:	00261793          	slli	a5,a2,0x2
   11c28:	0001e737          	lui	a4,0x1e
   11c2c:	1c470713          	addi	a4,a4,452 # 1e1c4 <tcp_pcb_lists>
   11c30:	00f707b3          	add	a5,a4,a5
   11c34:	0007a783          	lw	a5,0(a5)
   11c38:	0007a783          	lw	a5,0(a5)
   11c3c:	00078c63          	beqz	a5,11c54 <tcp_new_port+0x84>
      if (pcb->local_port == tcp_port) {
   11c40:	01a7d683          	lhu	a3,26(a5)
   11c44:	8181d703          	lhu	a4,-2024(gp) # 1f9e8 <tcp_port>
   11c48:	f8e68ee3          	beq	a3,a4,11be4 <tcp_new_port+0x14>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
   11c4c:	00c7a783          	lw	a5,12(a5)
   11c50:	fedff06f          	j	11c3c <tcp_new_port+0x6c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
   11c54:	00160613          	addi	a2,a2,1
   11c58:	0ff67613          	andi	a2,a2,255
   11c5c:	fc1ff06f          	j	11c1c <tcp_new_port+0x4c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
   11c60:	8181d503          	lhu	a0,-2024(gp) # 1f9e8 <tcp_port>
   11c64:	00008067          	ret
          return 0;
   11c68:	00000513          	li	a0,0
}
   11c6c:	00008067          	ret

00011c70 <bsp_printf>:
    {
   11c70:	fc010113          	addi	sp,sp,-64
   11c74:	00112e23          	sw	ra,28(sp)
   11c78:	00812c23          	sw	s0,24(sp)
   11c7c:	00912a23          	sw	s1,20(sp)
   11c80:	00050493          	mv	s1,a0
   11c84:	02b12223          	sw	a1,36(sp)
   11c88:	02c12423          	sw	a2,40(sp)
   11c8c:	02d12623          	sw	a3,44(sp)
   11c90:	02e12823          	sw	a4,48(sp)
   11c94:	02f12a23          	sw	a5,52(sp)
   11c98:	03012c23          	sw	a6,56(sp)
   11c9c:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   11ca0:	02410793          	addi	a5,sp,36
   11ca4:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   11ca8:	00000413          	li	s0,0
   11cac:	01c0006f          	j	11cc8 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   11cb0:	00c12783          	lw	a5,12(sp)
   11cb4:	00478713          	addi	a4,a5,4
   11cb8:	00e12623          	sw	a4,12(sp)
   11cbc:	0007a503          	lw	a0,0(a5)
   11cc0:	db9ff0ef          	jal	ra,11a78 <bsp_printf_c>
        for (i = 0; format[i]; i++)
   11cc4:	00140413          	addi	s0,s0,1
   11cc8:	008487b3          	add	a5,s1,s0
   11ccc:	0007c503          	lbu	a0,0(a5)
   11cd0:	0c050263          	beqz	a0,11d94 <bsp_printf+0x124>
            if (format[i] == '%') {
   11cd4:	02500793          	li	a5,37
   11cd8:	06f50663          	beq	a0,a5,11d44 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   11cdc:	d9dff0ef          	jal	ra,11a78 <bsp_printf_c>
   11ce0:	fe5ff06f          	j	11cc4 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   11ce4:	00c12783          	lw	a5,12(sp)
   11ce8:	00478713          	addi	a4,a5,4
   11cec:	00e12623          	sw	a4,12(sp)
   11cf0:	0007a503          	lw	a0,0(a5)
   11cf4:	da5ff0ef          	jal	ra,11a98 <bsp_printf_s>
                        break;
   11cf8:	fcdff06f          	j	11cc4 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   11cfc:	00c12783          	lw	a5,12(sp)
   11d00:	00478713          	addi	a4,a5,4
   11d04:	00e12623          	sw	a4,12(sp)
   11d08:	0007a503          	lw	a0,0(a5)
   11d0c:	dc5ff0ef          	jal	ra,11ad0 <bsp_printf_d>
                        break;
   11d10:	fb5ff06f          	j	11cc4 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   11d14:	00c12783          	lw	a5,12(sp)
   11d18:	00478713          	addi	a4,a5,4
   11d1c:	00e12623          	sw	a4,12(sp)
   11d20:	0007a503          	lw	a0,0(a5)
   11d24:	e6dff0ef          	jal	ra,11b90 <bsp_printf_X>
                        break;
   11d28:	f9dff06f          	j	11cc4 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   11d2c:	00c12783          	lw	a5,12(sp)
   11d30:	00478713          	addi	a4,a5,4
   11d34:	00e12623          	sw	a4,12(sp)
   11d38:	0007a503          	lw	a0,0(a5)
   11d3c:	e15ff0ef          	jal	ra,11b50 <bsp_printf_x>
                        break;
   11d40:	f85ff06f          	j	11cc4 <bsp_printf+0x54>
                while (format[++i]) {
   11d44:	00140413          	addi	s0,s0,1
   11d48:	008487b3          	add	a5,s1,s0
   11d4c:	0007c783          	lbu	a5,0(a5)
   11d50:	f6078ae3          	beqz	a5,11cc4 <bsp_printf+0x54>
                    if (format[i] == 'c') {
   11d54:	06300713          	li	a4,99
   11d58:	f4e78ce3          	beq	a5,a4,11cb0 <bsp_printf+0x40>
                    else if (format[i] == 's') {
   11d5c:	07300713          	li	a4,115
   11d60:	f8e782e3          	beq	a5,a4,11ce4 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   11d64:	06400713          	li	a4,100
   11d68:	f8e78ae3          	beq	a5,a4,11cfc <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   11d6c:	05800713          	li	a4,88
   11d70:	fae782e3          	beq	a5,a4,11d14 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   11d74:	07800713          	li	a4,120
   11d78:	fae78ae3          	beq	a5,a4,11d2c <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   11d7c:	06600713          	li	a4,102
   11d80:	fce792e3          	bne	a5,a4,11d44 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   11d84:	0001c537          	lui	a0,0x1c
   11d88:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   11d8c:	d0dff0ef          	jal	ra,11a98 <bsp_printf_s>
                        break;
   11d90:	f35ff06f          	j	11cc4 <bsp_printf+0x54>
    }
   11d94:	01c12083          	lw	ra,28(sp)
   11d98:	01812403          	lw	s0,24(sp)
   11d9c:	01412483          	lw	s1,20(sp)
   11da0:	04010113          	addi	sp,sp,64
   11da4:	00008067          	ret

00011da8 <tcp_remove_listener>:
{
   11da8:	ff010113          	addi	sp,sp,-16
   11dac:	00112623          	sw	ra,12(sp)
   11db0:	00812423          	sw	s0,8(sp)
   11db4:	00912223          	sw	s1,4(sp)
   11db8:	00050413          	mv	s0,a0
   11dbc:	00058493          	mv	s1,a1
  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
   11dc0:	00059e63          	bnez	a1,11ddc <tcp_remove_listener+0x34>
   11dc4:	0001e537          	lui	a0,0x1e
   11dc8:	21050513          	addi	a0,a0,528 # 1e210 <tcp_backoff+0x10>
   11dcc:	ea5ff0ef          	jal	ra,11c70 <bsp_printf>
   11dd0:	00c0006f          	j	11ddc <tcp_remove_listener+0x34>
      pcb->listener = NULL;
   11dd4:	08042023          	sw	zero,128(s0)
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
   11dd8:	00c42403          	lw	s0,12(s0)
   11ddc:	00040863          	beqz	s0,11dec <tcp_remove_listener+0x44>
    if (pcb->listener == lpcb) {
   11de0:	08042783          	lw	a5,128(s0)
   11de4:	fe979ae3          	bne	a5,s1,11dd8 <tcp_remove_listener+0x30>
   11de8:	fedff06f          	j	11dd4 <tcp_remove_listener+0x2c>
}
   11dec:	00c12083          	lw	ra,12(sp)
   11df0:	00812403          	lw	s0,8(sp)
   11df4:	00412483          	lw	s1,4(sp)
   11df8:	01010113          	addi	sp,sp,16
   11dfc:	00008067          	ret

00011e00 <tcp_listen_closed>:
{
   11e00:	ff010113          	addi	sp,sp,-16
   11e04:	00112623          	sw	ra,12(sp)
   11e08:	00812423          	sw	s0,8(sp)
   11e0c:	00912223          	sw	s1,4(sp)
   11e10:	00050493          	mv	s1,a0
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
   11e14:	04050263          	beqz	a0,11e58 <tcp_listen_closed+0x58>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
   11e18:	0144a703          	lw	a4,20(s1)
   11e1c:	00100793          	li	a5,1
   11e20:	04f71463          	bne	a4,a5,11e68 <tcp_listen_closed+0x68>
{
   11e24:	00100413          	li	s0,1
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
   11e28:	00300793          	li	a5,3
   11e2c:	0487e663          	bltu	a5,s0,11e78 <tcp_listen_closed+0x78>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
   11e30:	00241713          	slli	a4,s0,0x2
   11e34:	0001e7b7          	lui	a5,0x1e
   11e38:	1c478793          	addi	a5,a5,452 # 1e1c4 <tcp_pcb_lists>
   11e3c:	00e787b3          	add	a5,a5,a4
   11e40:	0007a783          	lw	a5,0(a5)
   11e44:	00048593          	mv	a1,s1
   11e48:	0007a503          	lw	a0,0(a5)
   11e4c:	f5dff0ef          	jal	ra,11da8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
   11e50:	00140413          	addi	s0,s0,1
   11e54:	fd5ff06f          	j	11e28 <tcp_listen_closed+0x28>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
   11e58:	0001e537          	lui	a0,0x1e
   11e5c:	23850513          	addi	a0,a0,568 # 1e238 <tcp_backoff+0x38>
   11e60:	e11ff0ef          	jal	ra,11c70 <bsp_printf>
   11e64:	fb5ff06f          	j	11e18 <tcp_listen_closed+0x18>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
   11e68:	0001e537          	lui	a0,0x1e
   11e6c:	24450513          	addi	a0,a0,580 # 1e244 <tcp_backoff+0x44>
   11e70:	e01ff0ef          	jal	ra,11c70 <bsp_printf>
   11e74:	fb1ff06f          	j	11e24 <tcp_listen_closed+0x24>
}
   11e78:	00c12083          	lw	ra,12(sp)
   11e7c:	00812403          	lw	s0,8(sp)
   11e80:	00412483          	lw	s1,4(sp)
   11e84:	01010113          	addi	sp,sp,16
   11e88:	00008067          	ret

00011e8c <tcp_free_listen>:
{
   11e8c:	ff010113          	addi	sp,sp,-16
   11e90:	00112623          	sw	ra,12(sp)
   11e94:	00812423          	sw	s0,8(sp)
   11e98:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
   11e9c:	01452703          	lw	a4,20(a0)
   11ea0:	00100793          	li	a5,1
   11ea4:	02f70063          	beq	a4,a5,11ec4 <tcp_free_listen+0x38>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
   11ea8:	00040593          	mv	a1,s0
   11eac:	00200513          	li	a0,2
   11eb0:	62c020ef          	jal	ra,144dc <memp_free>
}
   11eb4:	00c12083          	lw	ra,12(sp)
   11eb8:	00812403          	lw	s0,8(sp)
   11ebc:	01010113          	addi	sp,sp,16
   11ec0:	00008067          	ret
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
   11ec4:	0001e537          	lui	a0,0x1e
   11ec8:	25c50513          	addi	a0,a0,604 # 1e25c <tcp_backoff+0x5c>
   11ecc:	da5ff0ef          	jal	ra,11c70 <bsp_printf>
   11ed0:	fd9ff06f          	j	11ea8 <tcp_free_listen+0x1c>

00011ed4 <tcp_init>:
{
   11ed4:	ff010113          	addi	sp,sp,-16
   11ed8:	00112623          	sw	ra,12(sp)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
   11edc:	e1def0ef          	jal	ra,1cf8 <rand>
   11ee0:	000047b7          	lui	a5,0x4
   11ee4:	fff78793          	addi	a5,a5,-1 # 3fff <bsp_printf_x+0x17>
   11ee8:	00f57533          	and	a0,a0,a5
   11eec:	01051513          	slli	a0,a0,0x10
   11ef0:	01055513          	srli	a0,a0,0x10
   11ef4:	ffffc7b7          	lui	a5,0xffffc
   11ef8:	00f50533          	add	a0,a0,a5
   11efc:	80a19c23          	sh	a0,-2024(gp) # 1f9e8 <tcp_port>
}
   11f00:	00c12083          	lw	ra,12(sp)
   11f04:	01010113          	addi	sp,sp,16
   11f08:	00008067          	ret

00011f0c <tcp_free>:
{
   11f0c:	ff010113          	addi	sp,sp,-16
   11f10:	00112623          	sw	ra,12(sp)
   11f14:	00812423          	sw	s0,8(sp)
   11f18:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
   11f1c:	01452703          	lw	a4,20(a0)
   11f20:	00100793          	li	a5,1
   11f24:	02f70063          	beq	a4,a5,11f44 <tcp_free+0x38>
  memp_free(MEMP_TCP_PCB, pcb);
   11f28:	00040593          	mv	a1,s0
   11f2c:	00100513          	li	a0,1
   11f30:	5ac020ef          	jal	ra,144dc <memp_free>
}
   11f34:	00c12083          	lw	ra,12(sp)
   11f38:	00812403          	lw	s0,8(sp)
   11f3c:	01010113          	addi	sp,sp,16
   11f40:	00008067          	ret
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
   11f44:	0001e537          	lui	a0,0x1e
   11f48:	27850513          	addi	a0,a0,632 # 1e278 <tcp_backoff+0x78>
   11f4c:	d25ff0ef          	jal	ra,11c70 <bsp_printf>
   11f50:	fd9ff06f          	j	11f28 <tcp_free+0x1c>

00011f54 <tcp_backlog_delayed>:
{
   11f54:	ff010113          	addi	sp,sp,-16
   11f58:	00112623          	sw	ra,12(sp)
   11f5c:	00812423          	sw	s0,8(sp)
   11f60:	00050413          	mv	s0,a0
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
   11f64:	04050663          	beqz	a0,11fb0 <tcp_backlog_delayed+0x5c>
  if ((pcb->flags & TF_BACKLOGPEND) == 0) {
   11f68:	01e45783          	lhu	a5,30(s0)
   11f6c:	2007f793          	andi	a5,a5,512
   11f70:	02079863          	bnez	a5,11fa0 <tcp_backlog_delayed+0x4c>
    if (pcb->listener != NULL) {
   11f74:	08042783          	lw	a5,128(s0)
   11f78:	02078463          	beqz	a5,11fa0 <tcp_backlog_delayed+0x4c>
      pcb->listener->accepts_pending++;
   11f7c:	0217c703          	lbu	a4,33(a5) # ffffc021 <__freertos_irq_stack_top+0xfffd70f1>
   11f80:	00170713          	addi	a4,a4,1
   11f84:	02e780a3          	sb	a4,33(a5)
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
   11f88:	08042783          	lw	a5,128(s0)
   11f8c:	0217c783          	lbu	a5,33(a5)
   11f90:	02078863          	beqz	a5,11fc0 <tcp_backlog_delayed+0x6c>
      tcp_set_flags(pcb, TF_BACKLOGPEND);
   11f94:	01e45783          	lhu	a5,30(s0)
   11f98:	2007e793          	ori	a5,a5,512
   11f9c:	00f41f23          	sh	a5,30(s0)
}
   11fa0:	00c12083          	lw	ra,12(sp)
   11fa4:	00812403          	lw	s0,8(sp)
   11fa8:	01010113          	addi	sp,sp,16
   11fac:	00008067          	ret
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
   11fb0:	0001e537          	lui	a0,0x1e
   11fb4:	23850513          	addi	a0,a0,568 # 1e238 <tcp_backoff+0x38>
   11fb8:	cb9ff0ef          	jal	ra,11c70 <bsp_printf>
   11fbc:	fadff06f          	j	11f68 <tcp_backlog_delayed+0x14>
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
   11fc0:	0001e537          	lui	a0,0x1e
   11fc4:	28c50513          	addi	a0,a0,652 # 1e28c <tcp_backoff+0x8c>
   11fc8:	ca9ff0ef          	jal	ra,11c70 <bsp_printf>
   11fcc:	fc9ff06f          	j	11f94 <tcp_backlog_delayed+0x40>

00011fd0 <tcp_backlog_accepted>:
{
   11fd0:	ff010113          	addi	sp,sp,-16
   11fd4:	00112623          	sw	ra,12(sp)
   11fd8:	00812423          	sw	s0,8(sp)
   11fdc:	00050413          	mv	s0,a0
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
   11fe0:	04050663          	beqz	a0,1202c <tcp_backlog_accepted+0x5c>
  if ((pcb->flags & TF_BACKLOGPEND) != 0) {
   11fe4:	01e45783          	lhu	a5,30(s0)
   11fe8:	2007f793          	andi	a5,a5,512
   11fec:	02078863          	beqz	a5,1201c <tcp_backlog_accepted+0x4c>
    if (pcb->listener != NULL) {
   11ff0:	08042783          	lw	a5,128(s0)
   11ff4:	02078463          	beqz	a5,1201c <tcp_backlog_accepted+0x4c>
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
   11ff8:	0217c783          	lbu	a5,33(a5)
   11ffc:	04078063          	beqz	a5,1203c <tcp_backlog_accepted+0x6c>
      pcb->listener->accepts_pending--;
   12000:	08042703          	lw	a4,128(s0)
   12004:	02174783          	lbu	a5,33(a4)
   12008:	fff78793          	addi	a5,a5,-1
   1200c:	02f700a3          	sb	a5,33(a4)
      tcp_clear_flags(pcb, TF_BACKLOGPEND);
   12010:	01e45783          	lhu	a5,30(s0)
   12014:	dff7f793          	andi	a5,a5,-513
   12018:	00f41f23          	sh	a5,30(s0)
}
   1201c:	00c12083          	lw	ra,12(sp)
   12020:	00812403          	lw	s0,8(sp)
   12024:	01010113          	addi	sp,sp,16
   12028:	00008067          	ret
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
   1202c:	0001e537          	lui	a0,0x1e
   12030:	23850513          	addi	a0,a0,568 # 1e238 <tcp_backoff+0x38>
   12034:	c3dff0ef          	jal	ra,11c70 <bsp_printf>
   12038:	fadff06f          	j	11fe4 <tcp_backlog_accepted+0x14>
      LWIP_ASSERT("accepts_pending != 0", pcb->listener->accepts_pending != 0);
   1203c:	0001e537          	lui	a0,0x1e
   12040:	28c50513          	addi	a0,a0,652 # 1e28c <tcp_backoff+0x8c>
   12044:	c2dff0ef          	jal	ra,11c70 <bsp_printf>
   12048:	fb9ff06f          	j	12000 <tcp_backlog_accepted+0x30>

0001204c <tcp_close_shutdown_fin>:
{
   1204c:	ff010113          	addi	sp,sp,-16
   12050:	00112623          	sw	ra,12(sp)
   12054:	00812423          	sw	s0,8(sp)
   12058:	00912223          	sw	s1,4(sp)
   1205c:	00050413          	mv	s0,a0
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
   12060:	02050e63          	beqz	a0,1209c <tcp_close_shutdown_fin+0x50>
  switch (pcb->state) {
   12064:	01442783          	lw	a5,20(s0)
   12068:	00400713          	li	a4,4
   1206c:	08e78263          	beq	a5,a4,120f0 <tcp_close_shutdown_fin+0xa4>
   12070:	00700713          	li	a4,7
   12074:	08e78c63          	beq	a5,a4,1210c <tcp_close_shutdown_fin+0xc0>
   12078:	00300713          	li	a4,3
   1207c:	02e78863          	beq	a5,a4,120ac <tcp_close_shutdown_fin+0x60>
      return ERR_OK;
   12080:	00000493          	li	s1,0
}
   12084:	00048513          	mv	a0,s1
   12088:	00c12083          	lw	ra,12(sp)
   1208c:	00812403          	lw	s0,8(sp)
   12090:	00412483          	lw	s1,4(sp)
   12094:	01010113          	addi	sp,sp,16
   12098:	00008067          	ret
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
   1209c:	0001e537          	lui	a0,0x1e
   120a0:	23850513          	addi	a0,a0,568 # 1e238 <tcp_backoff+0x38>
   120a4:	bcdff0ef          	jal	ra,11c70 <bsp_printf>
   120a8:	fbdff06f          	j	12064 <tcp_close_shutdown_fin+0x18>
      err = tcp_send_fin(pcb);
   120ac:	00040513          	mv	a0,s0
   120b0:	e04f60ef          	jal	ra,86b4 <tcp_send_fin>
   120b4:	00050493          	mv	s1,a0
      if (err == ERR_OK) {
   120b8:	02050263          	beqz	a0,120dc <tcp_close_shutdown_fin+0x90>
  if (err == ERR_OK) {
   120bc:	06048663          	beqz	s1,12128 <tcp_close_shutdown_fin+0xdc>
  } else if (err == ERR_MEM) {
   120c0:	fff00793          	li	a5,-1
   120c4:	fcf490e3          	bne	s1,a5,12084 <tcp_close_shutdown_fin+0x38>
    tcp_set_flags(pcb, TF_CLOSEPEND);
   120c8:	01e45783          	lhu	a5,30(s0)
   120cc:	0087e793          	ori	a5,a5,8
   120d0:	00f41f23          	sh	a5,30(s0)
    return ERR_OK;
   120d4:	00000493          	li	s1,0
   120d8:	fadff06f          	j	12084 <tcp_close_shutdown_fin+0x38>
        tcp_backlog_accepted(pcb);
   120dc:	00040513          	mv	a0,s0
   120e0:	ef1ff0ef          	jal	ra,11fd0 <tcp_backlog_accepted>
        pcb->state = FIN_WAIT_1;
   120e4:	00500793          	li	a5,5
   120e8:	00f42a23          	sw	a5,20(s0)
   120ec:	fd1ff06f          	j	120bc <tcp_close_shutdown_fin+0x70>
      err = tcp_send_fin(pcb);
   120f0:	00040513          	mv	a0,s0
   120f4:	dc0f60ef          	jal	ra,86b4 <tcp_send_fin>
   120f8:	00050493          	mv	s1,a0
      if (err == ERR_OK) {
   120fc:	fc0510e3          	bnez	a0,120bc <tcp_close_shutdown_fin+0x70>
        pcb->state = FIN_WAIT_1;
   12100:	00500793          	li	a5,5
   12104:	00f42a23          	sw	a5,20(s0)
   12108:	fb5ff06f          	j	120bc <tcp_close_shutdown_fin+0x70>
      err = tcp_send_fin(pcb);
   1210c:	00040513          	mv	a0,s0
   12110:	da4f60ef          	jal	ra,86b4 <tcp_send_fin>
   12114:	00050493          	mv	s1,a0
      if (err == ERR_OK) {
   12118:	fa0512e3          	bnez	a0,120bc <tcp_close_shutdown_fin+0x70>
        pcb->state = LAST_ACK;
   1211c:	00900793          	li	a5,9
   12120:	00f42a23          	sw	a5,20(s0)
   12124:	f99ff06f          	j	120bc <tcp_close_shutdown_fin+0x70>
    tcp_output(pcb);
   12128:	00040513          	mv	a0,s0
   1212c:	b1df60ef          	jal	ra,8c48 <tcp_output>
   12130:	f55ff06f          	j	12084 <tcp_close_shutdown_fin+0x38>

00012134 <tcp_handle_closepend>:
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;
   12134:	000227b7          	lui	a5,0x22
   12138:	f007a503          	lw	a0,-256(a5) # 21f00 <tcp_active_pcbs>

  while (pcb != NULL) {
   1213c:	04050663          	beqz	a0,12188 <tcp_handle_closepend+0x54>
{
   12140:	ff010113          	addi	sp,sp,-16
   12144:	00112623          	sw	ra,12(sp)
   12148:	00812423          	sw	s0,8(sp)
   1214c:	0180006f          	j	12164 <tcp_handle_closepend+0x30>
    struct tcp_pcb *next = pcb->next;
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
   12150:	ff77f793          	andi	a5,a5,-9
   12154:	00f51f23          	sh	a5,30(a0)
      tcp_close_shutdown_fin(pcb);
   12158:	ef5ff0ef          	jal	ra,1204c <tcp_close_shutdown_fin>
{
   1215c:	00040513          	mv	a0,s0
  while (pcb != NULL) {
   12160:	00040c63          	beqz	s0,12178 <tcp_handle_closepend+0x44>
    struct tcp_pcb *next = pcb->next;
   12164:	00c52403          	lw	s0,12(a0)
    if (pcb->flags & TF_CLOSEPEND) {
   12168:	01e55783          	lhu	a5,30(a0)
   1216c:	0087f713          	andi	a4,a5,8
   12170:	fe0706e3          	beqz	a4,1215c <tcp_handle_closepend+0x28>
   12174:	fddff06f          	j	12150 <tcp_handle_closepend+0x1c>
    }
    pcb = next;
  }
}
   12178:	00c12083          	lw	ra,12(sp)
   1217c:	00812403          	lw	s0,8(sp)
   12180:	01010113          	addi	sp,sp,16
   12184:	00008067          	ret
   12188:	00008067          	ret

0001218c <tcp_bind>:
{
   1218c:	ff010113          	addi	sp,sp,-16
   12190:	00112623          	sw	ra,12(sp)
   12194:	00812423          	sw	s0,8(sp)
   12198:	00912223          	sw	s1,4(sp)
   1219c:	00050493          	mv	s1,a0
   121a0:	00058413          	mv	s0,a1
  if (ipaddr == NULL) {
   121a4:	02058e63          	beqz	a1,121e0 <tcp_bind+0x54>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
   121a8:	0c048463          	beqz	s1,12270 <tcp_bind+0xe4>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
   121ac:	0144a783          	lw	a5,20(s1)
   121b0:	0c079463          	bnez	a5,12278 <tcp_bind+0xec>
  if (port == 0) {
   121b4:	02060a63          	beqz	a2,121e8 <tcp_bind+0x5c>
    for (i = 0; i < max_pcb_list; i++) {
   121b8:	00000593          	li	a1,0
   121bc:	00300793          	li	a5,3
   121c0:	02b7ca63          	blt	a5,a1,121f4 <tcp_bind+0x68>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
   121c4:	00259793          	slli	a5,a1,0x2
   121c8:	0001e737          	lui	a4,0x1e
   121cc:	1c470713          	addi	a4,a4,452 # 1e1c4 <tcp_pcb_lists>
   121d0:	00f707b3          	add	a5,a4,a5
   121d4:	0007a783          	lw	a5,0(a5)
   121d8:	0007a783          	lw	a5,0(a5)
   121dc:	05c0006f          	j	12238 <tcp_bind+0xac>
    ipaddr = IP4_ADDR_ANY;
   121e0:	8ac18413          	addi	s0,gp,-1876 # 1fa7c <ip_addr_any>
   121e4:	fc5ff06f          	j	121a8 <tcp_bind+0x1c>
    port = tcp_new_port();
   121e8:	9e9ff0ef          	jal	ra,11bd0 <tcp_new_port>
   121ec:	00050613          	mv	a2,a0
    if (port == 0) {
   121f0:	08050863          	beqz	a0,12280 <tcp_bind+0xf4>
  if (!ip_addr_isany(ipaddr)
   121f4:	00040863          	beqz	s0,12204 <tcp_bind+0x78>
   121f8:	00042783          	lw	a5,0(s0)
   121fc:	00078463          	beqz	a5,12204 <tcp_bind+0x78>
    ip_addr_set(&pcb->local_ip, ipaddr);
   12200:	00f4a023          	sw	a5,0(s1)
  pcb->local_port = port;
   12204:	00c49d23          	sh	a2,26(s1)
  TCP_REG(&tcp_bound_pcbs, pcb);
   12208:	000227b7          	lui	a5,0x22
   1220c:	f0c7a703          	lw	a4,-244(a5) # 21f0c <tcp_bound_pcbs>
   12210:	00e4a623          	sw	a4,12(s1)
   12214:	f097a623          	sw	s1,-244(a5)
   12218:	cd0ff0ef          	jal	ra,116e8 <tcp_timer_needed>
  return ERR_OK;
   1221c:	00000513          	li	a0,0
}
   12220:	00c12083          	lw	ra,12(sp)
   12224:	00812403          	lw	s0,8(sp)
   12228:	00412483          	lw	s1,4(sp)
   1222c:	01010113          	addi	sp,sp,16
   12230:	00008067          	ret
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
   12234:	00c7a783          	lw	a5,12(a5)
   12238:	02078863          	beqz	a5,12268 <tcp_bind+0xdc>
        if (cpcb->local_port == port) {
   1223c:	01a7d703          	lhu	a4,26(a5)
   12240:	fec71ae3          	bne	a4,a2,12234 <tcp_bind+0xa8>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
   12244:	04078263          	beqz	a5,12288 <tcp_bind+0xfc>
                (ip_addr_isany(&cpcb->local_ip) ||
   12248:	0007a703          	lw	a4,0(a5)
   1224c:	04070263          	beqz	a4,12290 <tcp_bind+0x104>
   12250:	04040463          	beqz	s0,12298 <tcp_bind+0x10c>
                 ip_addr_isany(ipaddr) ||
   12254:	00042683          	lw	a3,0(s0)
   12258:	04068463          	beqz	a3,122a0 <tcp_bind+0x114>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
   1225c:	fcd71ce3          	bne	a4,a3,12234 <tcp_bind+0xa8>
              return ERR_USE;
   12260:	ff800513          	li	a0,-8
   12264:	fbdff06f          	j	12220 <tcp_bind+0x94>
    for (i = 0; i < max_pcb_list; i++) {
   12268:	00158593          	addi	a1,a1,1
   1226c:	f51ff06f          	j	121bc <tcp_bind+0x30>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
   12270:	ff000513          	li	a0,-16
   12274:	fadff06f          	j	12220 <tcp_bind+0x94>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
   12278:	ffa00513          	li	a0,-6
   1227c:	fa5ff06f          	j	12220 <tcp_bind+0x94>
      return ERR_BUF;
   12280:	ffe00513          	li	a0,-2
   12284:	f9dff06f          	j	12220 <tcp_bind+0x94>
              return ERR_USE;
   12288:	ff800513          	li	a0,-8
   1228c:	f95ff06f          	j	12220 <tcp_bind+0x94>
   12290:	ff800513          	li	a0,-8
   12294:	f8dff06f          	j	12220 <tcp_bind+0x94>
   12298:	ff800513          	li	a0,-8
   1229c:	f85ff06f          	j	12220 <tcp_bind+0x94>
   122a0:	ff800513          	li	a0,-8
   122a4:	f7dff06f          	j	12220 <tcp_bind+0x94>

000122a8 <tcp_bind_netif>:
  if (netif != NULL) {
   122a8:	00058a63          	beqz	a1,122bc <tcp_bind_netif+0x14>
    pcb->netif_idx = netif_get_index(netif);
   122ac:	0385c783          	lbu	a5,56(a1)
   122b0:	00178793          	addi	a5,a5,1
   122b4:	00f50423          	sb	a5,8(a0)
   122b8:	00008067          	ret
    pcb->netif_idx = NETIF_NO_INDEX;
   122bc:	00050423          	sb	zero,8(a0)
}
   122c0:	00008067          	ret

000122c4 <tcp_listen_with_backlog_and_err>:
{
   122c4:	fe010113          	addi	sp,sp,-32
   122c8:	00112e23          	sw	ra,28(sp)
   122cc:	00812c23          	sw	s0,24(sp)
   122d0:	00912a23          	sw	s1,20(sp)
   122d4:	01212823          	sw	s2,16(sp)
   122d8:	01312623          	sw	s3,12(sp)
   122dc:	00050413          	mv	s0,a0
   122e0:	00060913          	mv	s2,a2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
   122e4:	12050a63          	beqz	a0,12418 <tcp_listen_with_backlog_and_err+0x154>
   122e8:	00058993          	mv	s3,a1
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
   122ec:	01452783          	lw	a5,20(a0)
   122f0:	12079a63          	bnez	a5,12424 <tcp_listen_with_backlog_and_err+0x160>
  if (pcb->state == LISTEN) {
   122f4:	00100713          	li	a4,1
   122f8:	12e78c63          	beq	a5,a4,12430 <tcp_listen_with_backlog_and_err+0x16c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
   122fc:	00200513          	li	a0,2
   12300:	14c020ef          	jal	ra,1444c <memp_malloc>
   12304:	00050493          	mv	s1,a0
  if (lpcb == NULL) {
   12308:	12050a63          	beqz	a0,1243c <tcp_listen_with_backlog_and_err+0x178>
  lpcb->callback_arg = pcb->callback_arg;
   1230c:	01042783          	lw	a5,16(s0)
   12310:	00f52823          	sw	a5,16(a0)
  lpcb->local_port = pcb->local_port;
   12314:	01a45783          	lhu	a5,26(s0)
   12318:	00f51d23          	sh	a5,26(a0)
  lpcb->state = LISTEN;
   1231c:	00100793          	li	a5,1
   12320:	00f52a23          	sw	a5,20(a0)
  lpcb->prio = pcb->prio;
   12324:	01844783          	lbu	a5,24(s0)
   12328:	00f50c23          	sb	a5,24(a0)
  lpcb->so_options = pcb->so_options;
   1232c:	00944783          	lbu	a5,9(s0)
   12330:	00f504a3          	sb	a5,9(a0)
  lpcb->netif_idx = pcb->netif_idx;
   12334:	00844783          	lbu	a5,8(s0)
   12338:	00f50423          	sb	a5,8(a0)
  lpcb->ttl = pcb->ttl;
   1233c:	00b44783          	lbu	a5,11(s0)
   12340:	00f505a3          	sb	a5,11(a0)
  lpcb->tos = pcb->tos;
   12344:	00a44783          	lbu	a5,10(s0)
   12348:	00f50523          	sb	a5,10(a0)
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
   1234c:	00042783          	lw	a5,0(s0)
   12350:	00f52023          	sw	a5,0(a0)
  if (pcb->local_port != 0) {
   12354:	01a45783          	lhu	a5,26(s0)
   12358:	04078063          	beqz	a5,12398 <tcp_listen_with_backlog_and_err+0xd4>
    TCP_RMV(&tcp_bound_pcbs, pcb);
   1235c:	000227b7          	lui	a5,0x22
   12360:	f0c7a783          	lw	a5,-244(a5) # 21f0c <tcp_bound_pcbs>
   12364:	00878c63          	beq	a5,s0,1237c <tcp_listen_with_backlog_and_err+0xb8>
   12368:	02078663          	beqz	a5,12394 <tcp_listen_with_backlog_and_err+0xd0>
   1236c:	00c7a703          	lw	a4,12(a5)
   12370:	00870e63          	beq	a4,s0,1238c <tcp_listen_with_backlog_and_err+0xc8>
   12374:	00070793          	mv	a5,a4
   12378:	ff1ff06f          	j	12368 <tcp_listen_with_backlog_and_err+0xa4>
   1237c:	00c7a703          	lw	a4,12(a5)
   12380:	000227b7          	lui	a5,0x22
   12384:	f0e7a623          	sw	a4,-244(a5) # 21f0c <tcp_bound_pcbs>
   12388:	00c0006f          	j	12394 <tcp_listen_with_backlog_and_err+0xd0>
   1238c:	00c42703          	lw	a4,12(s0)
   12390:	00e7a623          	sw	a4,12(a5)
   12394:	00042623          	sw	zero,12(s0)
  tcp_free(pcb);
   12398:	00040513          	mv	a0,s0
   1239c:	b71ff0ef          	jal	ra,11f0c <tcp_free>
  lpcb->accept = tcp_accept_null;
   123a0:	000137b7          	lui	a5,0x13
   123a4:	ee878793          	addi	a5,a5,-280 # 12ee8 <tcp_accept_null>
   123a8:	00f4ae23          	sw	a5,28(s1)
  lpcb->accepts_pending = 0;
   123ac:	020480a3          	sb	zero,33(s1)
  tcp_backlog_set(lpcb, backlog);
   123b0:	0144a703          	lw	a4,20(s1)
   123b4:	00100793          	li	a5,1
   123b8:	04f71863          	bne	a4,a5,12408 <tcp_listen_with_backlog_and_err+0x144>
   123bc:	00099463          	bnez	s3,123c4 <tcp_listen_with_backlog_and_err+0x100>
   123c0:	00100993          	li	s3,1
   123c4:	03348023          	sb	s3,32(s1)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
   123c8:	000227b7          	lui	a5,0x22
   123cc:	f087a703          	lw	a4,-248(a5) # 21f08 <tcp_listen_pcbs>
   123d0:	00e4a623          	sw	a4,12(s1)
   123d4:	f097a423          	sw	s1,-248(a5)
   123d8:	b10ff0ef          	jal	ra,116e8 <tcp_timer_needed>
  res = ERR_OK;
   123dc:	00000793          	li	a5,0
  if (err != NULL) {
   123e0:	00090463          	beqz	s2,123e8 <tcp_listen_with_backlog_and_err+0x124>
    *err = res;
   123e4:	00f90023          	sb	a5,0(s2)
}
   123e8:	00048513          	mv	a0,s1
   123ec:	01c12083          	lw	ra,28(sp)
   123f0:	01812403          	lw	s0,24(sp)
   123f4:	01412483          	lw	s1,20(sp)
   123f8:	01012903          	lw	s2,16(sp)
   123fc:	00c12983          	lw	s3,12(sp)
   12400:	02010113          	addi	sp,sp,32
   12404:	00008067          	ret
  tcp_backlog_set(lpcb, backlog);
   12408:	0001e537          	lui	a0,0x1e
   1240c:	2a450513          	addi	a0,a0,676 # 1e2a4 <tcp_backoff+0xa4>
   12410:	861ff0ef          	jal	ra,11c70 <bsp_printf>
   12414:	fa9ff06f          	j	123bc <tcp_listen_with_backlog_and_err+0xf8>
  struct tcp_pcb_listen *lpcb = NULL;
   12418:	00050493          	mv	s1,a0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
   1241c:	ff000793          	li	a5,-16
   12420:	fc1ff06f          	j	123e0 <tcp_listen_with_backlog_and_err+0x11c>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
   12424:	ff100793          	li	a5,-15
  struct tcp_pcb_listen *lpcb = NULL;
   12428:	00000493          	li	s1,0
   1242c:	fb5ff06f          	j	123e0 <tcp_listen_with_backlog_and_err+0x11c>
    lpcb = (struct tcp_pcb_listen *)pcb;
   12430:	00050493          	mv	s1,a0
    res = ERR_ALREADY;
   12434:	ff700793          	li	a5,-9
   12438:	fa9ff06f          	j	123e0 <tcp_listen_with_backlog_and_err+0x11c>
    res = ERR_MEM;
   1243c:	fff00793          	li	a5,-1
   12440:	fa1ff06f          	j	123e0 <tcp_listen_with_backlog_and_err+0x11c>

00012444 <tcp_listen_with_backlog>:
{
   12444:	ff010113          	addi	sp,sp,-16
   12448:	00112623          	sw	ra,12(sp)
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
   1244c:	00000613          	li	a2,0
   12450:	e75ff0ef          	jal	ra,122c4 <tcp_listen_with_backlog_and_err>
}
   12454:	00c12083          	lw	ra,12(sp)
   12458:	01010113          	addi	sp,sp,16
   1245c:	00008067          	ret

00012460 <tcp_update_rcv_ann_wnd>:
{
   12460:	ff010113          	addi	sp,sp,-16
   12464:	00112623          	sw	ra,12(sp)
   12468:	00812423          	sw	s0,8(sp)
   1246c:	00912223          	sw	s1,4(sp)
   12470:	00050413          	mv	s0,a0
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
   12474:	06050063          	beqz	a0,124d4 <tcp_update_rcv_ann_wnd+0x74>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
   12478:	02842483          	lw	s1,40(s0)
   1247c:	02c45583          	lhu	a1,44(s0)
   12480:	00b48533          	add	a0,s1,a1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
   12484:	03042683          	lw	a3,48(s0)
   12488:	03645603          	lhu	a2,54(s0)
   1248c:	00060793          	mv	a5,a2
   12490:	00001737          	lui	a4,0x1
   12494:	6d070713          	addi	a4,a4,1744 # 16d0 <_malloc_r+0x59c>
   12498:	00c77663          	bgeu	a4,a2,124a4 <tcp_update_rcv_ann_wnd+0x44>
   1249c:	000017b7          	lui	a5,0x1
   124a0:	6d078793          	addi	a5,a5,1744 # 16d0 <_malloc_r+0x59c>
   124a4:	01079793          	slli	a5,a5,0x10
   124a8:	0107d793          	srli	a5,a5,0x10
   124ac:	00f687b3          	add	a5,a3,a5
   124b0:	40f507b3          	sub	a5,a0,a5
   124b4:	0207c863          	bltz	a5,124e4 <tcp_update_rcv_ann_wnd+0x84>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
   124b8:	02b41723          	sh	a1,46(s0)
    return new_right_edge - pcb->rcv_ann_right_edge;
   124bc:	40d50533          	sub	a0,a0,a3
}
   124c0:	00c12083          	lw	ra,12(sp)
   124c4:	00812403          	lw	s0,8(sp)
   124c8:	00412483          	lw	s1,4(sp)
   124cc:	01010113          	addi	sp,sp,16
   124d0:	00008067          	ret
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
   124d4:	0001e537          	lui	a0,0x1e
   124d8:	2d450513          	addi	a0,a0,724 # 1e2d4 <tcp_backoff+0xd4>
   124dc:	f94ff0ef          	jal	ra,11c70 <bsp_printf>
   124e0:	f99ff06f          	j	12478 <tcp_update_rcv_ann_wnd+0x18>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
   124e4:	40d487b3          	sub	a5,s1,a3
   124e8:	00f05863          	blez	a5,124f8 <tcp_update_rcv_ann_wnd+0x98>
      pcb->rcv_ann_wnd = 0;
   124ec:	02041723          	sh	zero,46(s0)
    return 0;
   124f0:	00000513          	li	a0,0
   124f4:	fcdff06f          	j	124c0 <tcp_update_rcv_ann_wnd+0x60>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
   124f8:	409684b3          	sub	s1,a3,s1
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
   124fc:	000107b7          	lui	a5,0x10
   12500:	00f4f663          	bgeu	s1,a5,1250c <tcp_update_rcv_ann_wnd+0xac>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
   12504:	02941723          	sh	s1,46(s0)
   12508:	fe9ff06f          	j	124f0 <tcp_update_rcv_ann_wnd+0x90>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
   1250c:	0001e537          	lui	a0,0x1e
   12510:	2f850513          	addi	a0,a0,760 # 1e2f8 <tcp_backoff+0xf8>
   12514:	f5cff0ef          	jal	ra,11c70 <bsp_printf>
   12518:	fedff06f          	j	12504 <tcp_update_rcv_ann_wnd+0xa4>

0001251c <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
   1251c:	0a050663          	beqz	a0,125c8 <tcp_recved+0xac>
{
   12520:	ff010113          	addi	sp,sp,-16
   12524:	00112623          	sw	ra,12(sp)
   12528:	00812423          	sw	s0,8(sp)
   1252c:	00912223          	sw	s1,4(sp)
   12530:	00058493          	mv	s1,a1
   12534:	00050413          	mv	s0,a0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
   12538:	01452703          	lw	a4,20(a0)
   1253c:	00100793          	li	a5,1
   12540:	04f70c63          	beq	a4,a5,12598 <tcp_recved+0x7c>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
   12544:	02c45703          	lhu	a4,44(s0)
   12548:	009705b3          	add	a1,a4,s1
   1254c:	01059593          	slli	a1,a1,0x10
   12550:	0105d593          	srli	a1,a1,0x10
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
   12554:	000037b7          	lui	a5,0x3
   12558:	da078793          	addi	a5,a5,-608 # 2da0 <eml_mahalanobis_distance_squared+0x5c>
   1255c:	00b7e463          	bltu	a5,a1,12564 <tcp_recved+0x48>
   12560:	04e5f463          	bgeu	a1,a4,125a8 <tcp_recved+0x8c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
   12564:	000037b7          	lui	a5,0x3
   12568:	da078793          	addi	a5,a5,-608 # 2da0 <eml_mahalanobis_distance_squared+0x5c>
   1256c:	02f41623          	sh	a5,44(s0)
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
   12570:	00040513          	mv	a0,s0
   12574:	eedff0ef          	jal	ra,12460 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
   12578:	000017b7          	lui	a5,0x1
   1257c:	b6778793          	addi	a5,a5,-1177 # b67 <regnum_t6+0xb48>
   12580:	02a7e863          	bltu	a5,a0,125b0 <tcp_recved+0x94>
}
   12584:	00c12083          	lw	ra,12(sp)
   12588:	00812403          	lw	s0,8(sp)
   1258c:	00412483          	lw	s1,4(sp)
   12590:	01010113          	addi	sp,sp,16
   12594:	00008067          	ret
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
   12598:	0001e537          	lui	a0,0x1e
   1259c:	31450513          	addi	a0,a0,788 # 1e314 <tcp_backoff+0x114>
   125a0:	ed0ff0ef          	jal	ra,11c70 <bsp_printf>
   125a4:	fa1ff06f          	j	12544 <tcp_recved+0x28>
    pcb->rcv_wnd = rcv_wnd;
   125a8:	02b41623          	sh	a1,44(s0)
   125ac:	fc5ff06f          	j	12570 <tcp_recved+0x54>
    tcp_ack_now(pcb);
   125b0:	01e45783          	lhu	a5,30(s0)
   125b4:	0027e793          	ori	a5,a5,2
   125b8:	00f41f23          	sh	a5,30(s0)
    tcp_output(pcb);
   125bc:	00040513          	mv	a0,s0
   125c0:	e88f60ef          	jal	ra,8c48 <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
   125c4:	fc1ff06f          	j	12584 <tcp_recved+0x68>
   125c8:	00008067          	ret

000125cc <tcp_txnow>:
{
   125cc:	ff010113          	addi	sp,sp,-16
   125d0:	00112623          	sw	ra,12(sp)
   125d4:	00812423          	sw	s0,8(sp)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   125d8:	000227b7          	lui	a5,0x22
   125dc:	f007a403          	lw	s0,-256(a5) # 21f00 <tcp_active_pcbs>
   125e0:	0100006f          	j	125f0 <tcp_txnow+0x24>
      tcp_output(pcb);
   125e4:	00040513          	mv	a0,s0
   125e8:	e60f60ef          	jal	ra,8c48 <tcp_output>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   125ec:	00c42403          	lw	s0,12(s0)
   125f0:	00040a63          	beqz	s0,12604 <tcp_txnow+0x38>
    if (pcb->flags & TF_NAGLEMEMERR) {
   125f4:	01e45783          	lhu	a5,30(s0)
   125f8:	0807f793          	andi	a5,a5,128
   125fc:	fe0788e3          	beqz	a5,125ec <tcp_txnow+0x20>
   12600:	fe5ff06f          	j	125e4 <tcp_txnow+0x18>
}
   12604:	00c12083          	lw	ra,12(sp)
   12608:	00812403          	lw	s0,8(sp)
   1260c:	01010113          	addi	sp,sp,16
   12610:	00008067          	ret

00012614 <tcp_seg_free>:
  if (seg != NULL) {
   12614:	02050e63          	beqz	a0,12650 <tcp_seg_free+0x3c>
{
   12618:	ff010113          	addi	sp,sp,-16
   1261c:	00112623          	sw	ra,12(sp)
   12620:	00812423          	sw	s0,8(sp)
   12624:	00050413          	mv	s0,a0
    if (seg->p != NULL) {
   12628:	00452503          	lw	a0,4(a0)
   1262c:	00050463          	beqz	a0,12634 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
   12630:	d20fa0ef          	jal	ra,cb50 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
   12634:	00040593          	mv	a1,s0
   12638:	00300513          	li	a0,3
   1263c:	6a1010ef          	jal	ra,144dc <memp_free>
}
   12640:	00c12083          	lw	ra,12(sp)
   12644:	00812403          	lw	s0,8(sp)
   12648:	01010113          	addi	sp,sp,16
   1264c:	00008067          	ret
   12650:	00008067          	ret

00012654 <tcp_segs_free>:
  while (seg != NULL) {
   12654:	02050863          	beqz	a0,12684 <tcp_segs_free+0x30>
{
   12658:	ff010113          	addi	sp,sp,-16
   1265c:	00112623          	sw	ra,12(sp)
   12660:	00812423          	sw	s0,8(sp)
    struct tcp_seg *next = seg->next;
   12664:	00052403          	lw	s0,0(a0)
    tcp_seg_free(seg);
   12668:	fadff0ef          	jal	ra,12614 <tcp_seg_free>
    seg = next;
   1266c:	00040513          	mv	a0,s0
  while (seg != NULL) {
   12670:	fe041ae3          	bnez	s0,12664 <tcp_segs_free+0x10>
}
   12674:	00c12083          	lw	ra,12(sp)
   12678:	00812403          	lw	s0,8(sp)
   1267c:	01010113          	addi	sp,sp,16
   12680:	00008067          	ret
   12684:	00008067          	ret

00012688 <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
   12688:	00050463          	beqz	a0,12690 <tcp_setprio+0x8>
  pcb->prio = prio;
   1268c:	00b50c23          	sb	a1,24(a0)
}
   12690:	00008067          	ret

00012694 <tcp_seg_copy>:
{
   12694:	ff010113          	addi	sp,sp,-16
   12698:	00112623          	sw	ra,12(sp)
   1269c:	00812423          	sw	s0,8(sp)
   126a0:	00912223          	sw	s1,4(sp)
   126a4:	00050493          	mv	s1,a0
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
   126a8:	04050063          	beqz	a0,126e8 <tcp_seg_copy+0x54>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
   126ac:	00300513          	li	a0,3
   126b0:	59d010ef          	jal	ra,1444c <memp_malloc>
   126b4:	00050413          	mv	s0,a0
  if (cseg == NULL) {
   126b8:	00050c63          	beqz	a0,126d0 <tcp_seg_copy+0x3c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
   126bc:	01000613          	li	a2,16
   126c0:	00048593          	mv	a1,s1
   126c4:	b00ef0ef          	jal	ra,19c4 <memcpy>
  pbuf_ref(cseg->p);
   126c8:	00442503          	lw	a0,4(s0)
   126cc:	995fa0ef          	jal	ra,d060 <pbuf_ref>
}
   126d0:	00040513          	mv	a0,s0
   126d4:	00c12083          	lw	ra,12(sp)
   126d8:	00812403          	lw	s0,8(sp)
   126dc:	00412483          	lw	s1,4(sp)
   126e0:	01010113          	addi	sp,sp,16
   126e4:	00008067          	ret
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
   126e8:	0001e537          	lui	a0,0x1e
   126ec:	33c50513          	addi	a0,a0,828 # 1e33c <tcp_backoff+0x13c>
   126f0:	d80ff0ef          	jal	ra,11c70 <bsp_printf>
   126f4:	fb9ff06f          	j	126ac <tcp_seg_copy+0x18>

000126f8 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
   126f8:	00050463          	beqz	a0,12700 <tcp_arg+0x8>
    pcb->callback_arg = arg;
   126fc:	00b52823          	sw	a1,16(a0)
  }
}
   12700:	00008067          	ret

00012704 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
   12704:	04050863          	beqz	a0,12754 <tcp_recv+0x50>
{
   12708:	ff010113          	addi	sp,sp,-16
   1270c:	00112623          	sw	ra,12(sp)
   12710:	00812423          	sw	s0,8(sp)
   12714:	00912223          	sw	s1,4(sp)
   12718:	00058493          	mv	s1,a1
   1271c:	00050413          	mv	s0,a0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
   12720:	01452703          	lw	a4,20(a0)
   12724:	00100793          	li	a5,1
   12728:	00f70e63          	beq	a4,a5,12744 <tcp_recv+0x40>
    pcb->recv = recv;
   1272c:	08942423          	sw	s1,136(s0)
  }
}
   12730:	00c12083          	lw	ra,12(sp)
   12734:	00812403          	lw	s0,8(sp)
   12738:	00412483          	lw	s1,4(sp)
   1273c:	01010113          	addi	sp,sp,16
   12740:	00008067          	ret
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
   12744:	0001e537          	lui	a0,0x1e
   12748:	35850513          	addi	a0,a0,856 # 1e358 <tcp_backoff+0x158>
   1274c:	d24ff0ef          	jal	ra,11c70 <bsp_printf>
   12750:	fddff06f          	j	1272c <tcp_recv+0x28>
   12754:	00008067          	ret

00012758 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
   12758:	04050863          	beqz	a0,127a8 <tcp_sent+0x50>
{
   1275c:	ff010113          	addi	sp,sp,-16
   12760:	00112623          	sw	ra,12(sp)
   12764:	00812423          	sw	s0,8(sp)
   12768:	00912223          	sw	s1,4(sp)
   1276c:	00058493          	mv	s1,a1
   12770:	00050413          	mv	s0,a0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
   12774:	01452703          	lw	a4,20(a0)
   12778:	00100793          	li	a5,1
   1277c:	00f70e63          	beq	a4,a5,12798 <tcp_sent+0x40>
    pcb->sent = sent;
   12780:	08942223          	sw	s1,132(s0)
  }
}
   12784:	00c12083          	lw	ra,12(sp)
   12788:	00812403          	lw	s0,8(sp)
   1278c:	00412483          	lw	s1,4(sp)
   12790:	01010113          	addi	sp,sp,16
   12794:	00008067          	ret
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
   12798:	0001e537          	lui	a0,0x1e
   1279c:	38050513          	addi	a0,a0,896 # 1e380 <tcp_backoff+0x180>
   127a0:	cd0ff0ef          	jal	ra,11c70 <bsp_printf>
   127a4:	fddff06f          	j	12780 <tcp_sent+0x28>
   127a8:	00008067          	ret

000127ac <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
   127ac:	04050863          	beqz	a0,127fc <tcp_err+0x50>
{
   127b0:	ff010113          	addi	sp,sp,-16
   127b4:	00112623          	sw	ra,12(sp)
   127b8:	00812423          	sw	s0,8(sp)
   127bc:	00912223          	sw	s1,4(sp)
   127c0:	00058493          	mv	s1,a1
   127c4:	00050413          	mv	s0,a0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
   127c8:	01452703          	lw	a4,20(a0)
   127cc:	00100793          	li	a5,1
   127d0:	00f70e63          	beq	a4,a5,127ec <tcp_err+0x40>
    pcb->errf = err;
   127d4:	08942a23          	sw	s1,148(s0)
  }
}
   127d8:	00c12083          	lw	ra,12(sp)
   127dc:	00812403          	lw	s0,8(sp)
   127e0:	00412483          	lw	s1,4(sp)
   127e4:	01010113          	addi	sp,sp,16
   127e8:	00008067          	ret
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
   127ec:	0001e537          	lui	a0,0x1e
   127f0:	3a850513          	addi	a0,a0,936 # 1e3a8 <tcp_backoff+0x1a8>
   127f4:	c7cff0ef          	jal	ra,11c70 <bsp_printf>
   127f8:	fddff06f          	j	127d4 <tcp_err+0x28>
   127fc:	00008067          	ret

00012800 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
   12800:	00050863          	beqz	a0,12810 <tcp_accept+0x10>
   12804:	01452703          	lw	a4,20(a0)
   12808:	00100793          	li	a5,1
   1280c:	00f70463          	beq	a4,a5,12814 <tcp_accept+0x14>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
  }
}
   12810:	00008067          	ret
    lpcb->accept = accept;
   12814:	00b52e23          	sw	a1,28(a0)
}
   12818:	ff9ff06f          	j	12810 <tcp_accept+0x10>

0001281c <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
   1281c:	06050063          	beqz	a0,1287c <tcp_poll+0x60>
{
   12820:	ff010113          	addi	sp,sp,-16
   12824:	00112623          	sw	ra,12(sp)
   12828:	00812423          	sw	s0,8(sp)
   1282c:	00912223          	sw	s1,4(sp)
   12830:	01212023          	sw	s2,0(sp)
   12834:	00060493          	mv	s1,a2
   12838:	00058913          	mv	s2,a1
   1283c:	00050413          	mv	s0,a0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
   12840:	01452703          	lw	a4,20(a0)
   12844:	00100793          	li	a5,1
   12848:	02f70263          	beq	a4,a5,1286c <tcp_poll+0x50>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
   1284c:	09242823          	sw	s2,144(s0)
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
   12850:	029400a3          	sb	s1,33(s0)
}
   12854:	00c12083          	lw	ra,12(sp)
   12858:	00812403          	lw	s0,8(sp)
   1285c:	00412483          	lw	s1,4(sp)
   12860:	00012903          	lw	s2,0(sp)
   12864:	01010113          	addi	sp,sp,16
   12868:	00008067          	ret
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
   1286c:	0001e537          	lui	a0,0x1e
   12870:	3d050513          	addi	a0,a0,976 # 1e3d0 <tcp_backoff+0x1d0>
   12874:	bfcff0ef          	jal	ra,11c70 <bsp_printf>
   12878:	fd5ff06f          	j	1284c <tcp_poll+0x30>
   1287c:	00008067          	ret

00012880 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
   12880:	ff010113          	addi	sp,sp,-16
   12884:	00112623          	sw	ra,12(sp)
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
   12888:	02050263          	beqz	a0,128ac <tcp_next_iss+0x2c>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
   1288c:	8141a503          	lw	a0,-2028(gp) # 1f9e4 <iss.5397>
   12890:	00022737          	lui	a4,0x22
   12894:	f0472703          	lw	a4,-252(a4) # 21f04 <tcp_ticks>
   12898:	00e50533          	add	a0,a0,a4
   1289c:	80a1aa23          	sw	a0,-2028(gp) # 1f9e4 <iss.5397>
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
   128a0:	00c12083          	lw	ra,12(sp)
   128a4:	01010113          	addi	sp,sp,16
   128a8:	00008067          	ret
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
   128ac:	0001e537          	lui	a0,0x1e
   128b0:	3f050513          	addi	a0,a0,1008 # 1e3f0 <tcp_backoff+0x1f0>
   128b4:	bbcff0ef          	jal	ra,11c70 <bsp_printf>
   128b8:	fd5ff06f          	j	1288c <tcp_next_iss+0xc>

000128bc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
   128bc:	ff010113          	addi	sp,sp,-16
   128c0:	00112623          	sw	ra,12(sp)
   128c4:	00812423          	sw	s0,8(sp)
   128c8:	00912223          	sw	s1,4(sp)
   128cc:	00050413          	mv	s0,a0
   128d0:	00058493          	mv	s1,a1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
   128d4:	04060863          	beqz	a2,12924 <tcp_eff_send_mss_netif+0x68>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
   128d8:	02048a63          	beqz	s1,1290c <tcp_eff_send_mss_netif+0x50>
      return sendmss;
    }
    mtu = outif->mtu;
   128dc:	02c4d783          	lhu	a5,44(s1)
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
   128e0:	02078663          	beqz	a5,1290c <tcp_eff_send_mss_netif+0x50>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
   128e4:	02800713          	li	a4,40
   128e8:	04f77663          	bgeu	a4,a5,12934 <tcp_eff_send_mss_netif+0x78>
   128ec:	fd878793          	addi	a5,a5,-40
   128f0:	01079793          	slli	a5,a5,0x10
   128f4:	0107d793          	srli	a5,a5,0x10
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
   128f8:	00078713          	mv	a4,a5
   128fc:	00f47463          	bgeu	s0,a5,12904 <tcp_eff_send_mss_netif+0x48>
   12900:	00040713          	mv	a4,s0
   12904:	01071413          	slli	s0,a4,0x10
   12908:	01045413          	srli	s0,s0,0x10
  }
  return sendmss;
}
   1290c:	00040513          	mv	a0,s0
   12910:	00c12083          	lw	ra,12(sp)
   12914:	00812403          	lw	s0,8(sp)
   12918:	00412483          	lw	s1,4(sp)
   1291c:	01010113          	addi	sp,sp,16
   12920:	00008067          	ret
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
   12924:	0001e537          	lui	a0,0x1e
   12928:	40c50513          	addi	a0,a0,1036 # 1e40c <tcp_backoff+0x20c>
   1292c:	b44ff0ef          	jal	ra,11c70 <bsp_printf>
   12930:	fa9ff06f          	j	128d8 <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
   12934:	00000793          	li	a5,0
   12938:	fc1ff06f          	j	128f8 <tcp_eff_send_mss_netif+0x3c>

0001293c <tcp_connect>:
{
   1293c:	fe010113          	addi	sp,sp,-32
   12940:	00112e23          	sw	ra,28(sp)
   12944:	00812c23          	sw	s0,24(sp)
   12948:	00912a23          	sw	s1,20(sp)
   1294c:	01212823          	sw	s2,16(sp)
   12950:	01312623          	sw	s3,12(sp)
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
   12954:	16050c63          	beqz	a0,12acc <tcp_connect+0x190>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
   12958:	16058e63          	beqz	a1,12ad4 <tcp_connect+0x198>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
   1295c:	01452783          	lw	a5,20(a0)
   12960:	16079e63          	bnez	a5,12adc <tcp_connect+0x1a0>
   12964:	00068913          	mv	s2,a3
   12968:	00050413          	mv	s0,a0
  ip_addr_set(&pcb->remote_ip, ipaddr);
   1296c:	0005a783          	lw	a5,0(a1)
   12970:	00f52223          	sw	a5,4(a0)
  pcb->remote_port = port;
   12974:	00c51e23          	sh	a2,28(a0)
  if (pcb->netif_idx != NETIF_NO_INDEX) {
   12978:	00854503          	lbu	a0,8(a0)
   1297c:	0e050063          	beqz	a0,12a5c <tcp_connect+0x120>
    netif = netif_get_by_index(pcb->netif_idx);
   12980:	8c8f90ef          	jal	ra,ba48 <netif_get_by_index>
   12984:	00050493          	mv	s1,a0
  if (netif == NULL) {
   12988:	14048e63          	beqz	s1,12ae4 <tcp_connect+0x1a8>
  if (ip_addr_isany(&pcb->local_ip)) {
   1298c:	00040663          	beqz	s0,12998 <tcp_connect+0x5c>
   12990:	00042783          	lw	a5,0(s0)
   12994:	00079a63          	bnez	a5,129a8 <tcp_connect+0x6c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
   12998:	00448793          	addi	a5,s1,4
    if (local_ip == NULL) {
   1299c:	14078863          	beqz	a5,12aec <tcp_connect+0x1b0>
    ip_addr_copy(pcb->local_ip, *local_ip);
   129a0:	0044a783          	lw	a5,4(s1)
   129a4:	00f42023          	sw	a5,0(s0)
  old_local_port = pcb->local_port;
   129a8:	01a45983          	lhu	s3,26(s0)
  if (pcb->local_port == 0) {
   129ac:	00099863          	bnez	s3,129bc <tcp_connect+0x80>
    pcb->local_port = tcp_new_port();
   129b0:	a20ff0ef          	jal	ra,11bd0 <tcp_new_port>
   129b4:	00a41d23          	sh	a0,26(s0)
    if (pcb->local_port == 0) {
   129b8:	12050e63          	beqz	a0,12af4 <tcp_connect+0x1b8>
  iss = tcp_next_iss(pcb);
   129bc:	00040513          	mv	a0,s0
   129c0:	ec1ff0ef          	jal	ra,12880 <tcp_next_iss>
  pcb->rcv_nxt = 0;
   129c4:	02042423          	sw	zero,40(s0)
  pcb->snd_nxt = iss;
   129c8:	04a42a23          	sw	a0,84(s0)
  pcb->lastack = iss - 1;
   129cc:	fff50513          	addi	a0,a0,-1
   129d0:	04a42423          	sw	a0,72(s0)
  pcb->snd_wl2 = iss - 1;
   129d4:	04a42e23          	sw	a0,92(s0)
  pcb->snd_lbb = iss - 1;
   129d8:	06a42023          	sw	a0,96(s0)
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
   129dc:	000037b7          	lui	a5,0x3
   129e0:	da078793          	addi	a5,a5,-608 # 2da0 <eml_mahalanobis_distance_squared+0x5c>
   129e4:	02f41723          	sh	a5,46(s0)
   129e8:	02f41623          	sh	a5,44(s0)
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
   129ec:	02042823          	sw	zero,48(s0)
  pcb->snd_wnd = TCP_WND;
   129f0:	06f41223          	sh	a5,100(s0)
  pcb->mss = INITIAL_MSS;
   129f4:	21800793          	li	a5,536
   129f8:	02f41b23          	sh	a5,54(s0)
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
   129fc:	00440613          	addi	a2,s0,4
   12a00:	00048593          	mv	a1,s1
   12a04:	21800513          	li	a0,536
   12a08:	eb5ff0ef          	jal	ra,128bc <tcp_eff_send_mss_netif>
   12a0c:	02a41b23          	sh	a0,54(s0)
  pcb->cwnd = 1;
   12a10:	00100793          	li	a5,1
   12a14:	04f41623          	sh	a5,76(s0)
  pcb->connected = connected;
   12a18:	09242623          	sw	s2,140(s0)
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
   12a1c:	00200593          	li	a1,2
   12a20:	00040513          	mv	a0,s0
   12a24:	a91f50ef          	jal	ra,84b4 <tcp_enqueue_flags>
   12a28:	00050493          	mv	s1,a0
  if (ret == ERR_OK) {
   12a2c:	08051063          	bnez	a0,12aac <tcp_connect+0x170>
    pcb->state = SYN_SENT;
   12a30:	00200793          	li	a5,2
   12a34:	00f42a23          	sw	a5,20(s0)
    if (old_local_port != 0) {
   12a38:	04098663          	beqz	s3,12a84 <tcp_connect+0x148>
      TCP_RMV(&tcp_bound_pcbs, pcb);
   12a3c:	000227b7          	lui	a5,0x22
   12a40:	f0c7a783          	lw	a5,-244(a5) # 21f0c <tcp_bound_pcbs>
   12a44:	02878463          	beq	a5,s0,12a6c <tcp_connect+0x130>
   12a48:	02078e63          	beqz	a5,12a84 <tcp_connect+0x148>
   12a4c:	00c7a703          	lw	a4,12(a5)
   12a50:	02870663          	beq	a4,s0,12a7c <tcp_connect+0x140>
   12a54:	00070793          	mv	a5,a4
   12a58:	ff1ff06f          	j	12a48 <tcp_connect+0x10c>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
   12a5c:	00440513          	addi	a0,s0,4
   12a60:	481030ef          	jal	ra,166e0 <ip4_route>
   12a64:	00050493          	mv	s1,a0
   12a68:	f21ff06f          	j	12988 <tcp_connect+0x4c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
   12a6c:	00c7a703          	lw	a4,12(a5)
   12a70:	000227b7          	lui	a5,0x22
   12a74:	f0e7a623          	sw	a4,-244(a5) # 21f0c <tcp_bound_pcbs>
   12a78:	00c0006f          	j	12a84 <tcp_connect+0x148>
   12a7c:	00c42703          	lw	a4,12(s0)
   12a80:	00e7a623          	sw	a4,12(a5)
    TCP_REG_ACTIVE(pcb);
   12a84:	000227b7          	lui	a5,0x22
   12a88:	f007a703          	lw	a4,-256(a5) # 21f00 <tcp_active_pcbs>
   12a8c:	00e42623          	sw	a4,12(s0)
   12a90:	f087a023          	sw	s0,-256(a5)
   12a94:	c55fe0ef          	jal	ra,116e8 <tcp_timer_needed>
   12a98:	000227b7          	lui	a5,0x22
   12a9c:	00100713          	li	a4,1
   12aa0:	eee78e23          	sb	a4,-260(a5) # 21efc <tcp_active_pcbs_changed>
    tcp_output(pcb);
   12aa4:	00040513          	mv	a0,s0
   12aa8:	9a0f60ef          	jal	ra,8c48 <tcp_output>
}
   12aac:	00048513          	mv	a0,s1
   12ab0:	01c12083          	lw	ra,28(sp)
   12ab4:	01812403          	lw	s0,24(sp)
   12ab8:	01412483          	lw	s1,20(sp)
   12abc:	01012903          	lw	s2,16(sp)
   12ac0:	00c12983          	lw	s3,12(sp)
   12ac4:	02010113          	addi	sp,sp,32
   12ac8:	00008067          	ret
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
   12acc:	ff000493          	li	s1,-16
   12ad0:	fddff06f          	j	12aac <tcp_connect+0x170>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
   12ad4:	ff000493          	li	s1,-16
   12ad8:	fd5ff06f          	j	12aac <tcp_connect+0x170>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
   12adc:	ff600493          	li	s1,-10
   12ae0:	fcdff06f          	j	12aac <tcp_connect+0x170>
    return ERR_RTE;
   12ae4:	ffc00493          	li	s1,-4
   12ae8:	fc5ff06f          	j	12aac <tcp_connect+0x170>
      return ERR_RTE;
   12aec:	ffc00493          	li	s1,-4
   12af0:	fbdff06f          	j	12aac <tcp_connect+0x170>
      return ERR_BUF;
   12af4:	ffe00493          	li	s1,-2
   12af8:	fb5ff06f          	j	12aac <tcp_connect+0x170>

00012afc <tcp_debug_state_str>:
}

const char *
tcp_debug_state_str(enum tcp_state s)
{
  return tcp_state_str[s];
   12afc:	00251513          	slli	a0,a0,0x2
   12b00:	0001e7b7          	lui	a5,0x1e
   12b04:	1c478793          	addi	a5,a5,452 # 1e1c4 <tcp_pcb_lists>
   12b08:	00a787b3          	add	a5,a5,a0
}
   12b0c:	0107a503          	lw	a0,16(a5)
   12b10:	00008067          	ret

00012b14 <tcp_tcp_get_tcp_addrinfo>:

err_t
tcp_tcp_get_tcp_addrinfo(struct tcp_pcb *pcb, int local, ip_addr_t *addr, u16_t *port)
{
  if (pcb) {
   12b14:	04050263          	beqz	a0,12b58 <tcp_tcp_get_tcp_addrinfo+0x44>
    if (local) {
   12b18:	02058263          	beqz	a1,12b3c <tcp_tcp_get_tcp_addrinfo+0x28>
      if (addr) {
   12b1c:	00060663          	beqz	a2,12b28 <tcp_tcp_get_tcp_addrinfo+0x14>
        *addr = pcb->local_ip;
   12b20:	00052783          	lw	a5,0(a0)
   12b24:	00f62023          	sw	a5,0(a2)
      }
      if (port) {
   12b28:	00068663          	beqz	a3,12b34 <tcp_tcp_get_tcp_addrinfo+0x20>
        *port = pcb->local_port;
   12b2c:	01a55783          	lhu	a5,26(a0)
   12b30:	00f69023          	sh	a5,0(a3)
      }
      if (port) {
        *port = pcb->remote_port;
      }
    }
    return ERR_OK;
   12b34:	00000513          	li	a0,0
   12b38:	00008067          	ret
      if (addr) {
   12b3c:	00060663          	beqz	a2,12b48 <tcp_tcp_get_tcp_addrinfo+0x34>
        *addr = pcb->remote_ip;
   12b40:	00452783          	lw	a5,4(a0)
   12b44:	00f62023          	sw	a5,0(a2)
      if (port) {
   12b48:	fe0686e3          	beqz	a3,12b34 <tcp_tcp_get_tcp_addrinfo+0x20>
        *port = pcb->remote_port;
   12b4c:	01c55783          	lhu	a5,28(a0)
   12b50:	00f69023          	sh	a5,0(a3)
   12b54:	fe1ff06f          	j	12b34 <tcp_tcp_get_tcp_addrinfo+0x20>
  }
  return ERR_VAL;
   12b58:	ffa00513          	li	a0,-6
}
   12b5c:	00008067          	ret

00012b60 <tcp_free_ooseq>:
#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
   12b60:	07852783          	lw	a5,120(a0)
   12b64:	02078863          	beqz	a5,12b94 <tcp_free_ooseq+0x34>
{
   12b68:	ff010113          	addi	sp,sp,-16
   12b6c:	00112623          	sw	ra,12(sp)
   12b70:	00812423          	sw	s0,8(sp)
   12b74:	00050413          	mv	s0,a0
    tcp_segs_free(pcb->ooseq);
   12b78:	00078513          	mv	a0,a5
   12b7c:	ad9ff0ef          	jal	ra,12654 <tcp_segs_free>
    pcb->ooseq = NULL;
   12b80:	06042c23          	sw	zero,120(s0)
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
   12b84:	00c12083          	lw	ra,12(sp)
   12b88:	00812403          	lw	s0,8(sp)
   12b8c:	01010113          	addi	sp,sp,16
   12b90:	00008067          	ret
   12b94:	00008067          	ret

00012b98 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
   12b98:	00050e63          	beqz	a0,12bb4 <tcp_pcb_purge+0x1c>
  if (pcb->state != CLOSED &&
   12b9c:	01452783          	lw	a5,20(a0)
   12ba0:	00078a63          	beqz	a5,12bb4 <tcp_pcb_purge+0x1c>
   12ba4:	00a00713          	li	a4,10
   12ba8:	00e78663          	beq	a5,a4,12bb4 <tcp_pcb_purge+0x1c>
      pcb->state != TIME_WAIT &&
   12bac:	00100713          	li	a4,1
   12bb0:	00e79463          	bne	a5,a4,12bb8 <tcp_pcb_purge+0x20>
   12bb4:	00008067          	ret
{
   12bb8:	ff010113          	addi	sp,sp,-16
   12bbc:	00112623          	sw	ra,12(sp)
   12bc0:	00812423          	sw	s0,8(sp)
   12bc4:	00050413          	mv	s0,a0
    tcp_backlog_accepted(pcb);
   12bc8:	c08ff0ef          	jal	ra,11fd0 <tcp_backlog_accepted>
    if (pcb->refused_data != NULL) {
   12bcc:	07c42503          	lw	a0,124(s0)
   12bd0:	00050663          	beqz	a0,12bdc <tcp_pcb_purge+0x44>
      pbuf_free(pcb->refused_data);
   12bd4:	f7df90ef          	jal	ra,cb50 <pbuf_free>
      pcb->refused_data = NULL;
   12bd8:	06042e23          	sw	zero,124(s0)
    if (pcb->ooseq != NULL) {
   12bdc:	07842783          	lw	a5,120(s0)
   12be0:	00078663          	beqz	a5,12bec <tcp_pcb_purge+0x54>
      tcp_free_ooseq(pcb);
   12be4:	00040513          	mv	a0,s0
   12be8:	f79ff0ef          	jal	ra,12b60 <tcp_free_ooseq>
    pcb->rtime = -1;
   12bec:	fff00793          	li	a5,-1
   12bf0:	02f41a23          	sh	a5,52(s0)
    tcp_segs_free(pcb->unsent);
   12bf4:	07042503          	lw	a0,112(s0)
   12bf8:	a5dff0ef          	jal	ra,12654 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
   12bfc:	07442503          	lw	a0,116(s0)
   12c00:	a55ff0ef          	jal	ra,12654 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
   12c04:	06042823          	sw	zero,112(s0)
   12c08:	06042a23          	sw	zero,116(s0)
    pcb->unsent_oversize = 0;
   12c0c:	06041623          	sh	zero,108(s0)
}
   12c10:	00c12083          	lw	ra,12(sp)
   12c14:	00812403          	lw	s0,8(sp)
   12c18:	01010113          	addi	sp,sp,16
   12c1c:	00008067          	ret

00012c20 <tcp_pcb_remove>:
{
   12c20:	ff010113          	addi	sp,sp,-16
   12c24:	00112623          	sw	ra,12(sp)
   12c28:	00812423          	sw	s0,8(sp)
   12c2c:	00912223          	sw	s1,4(sp)
   12c30:	00050493          	mv	s1,a0
   12c34:	00058413          	mv	s0,a1
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
   12c38:	02058263          	beqz	a1,12c5c <tcp_pcb_remove+0x3c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
   12c3c:	02048863          	beqz	s1,12c6c <tcp_pcb_remove+0x4c>
  TCP_RMV(pcblist, pcb);
   12c40:	0004a783          	lw	a5,0(s1)
   12c44:	02878c63          	beq	a5,s0,12c7c <tcp_pcb_remove+0x5c>
   12c48:	04078463          	beqz	a5,12c90 <tcp_pcb_remove+0x70>
   12c4c:	00c7a703          	lw	a4,12(a5)
   12c50:	02870c63          	beq	a4,s0,12c88 <tcp_pcb_remove+0x68>
   12c54:	00070793          	mv	a5,a4
   12c58:	ff1ff06f          	j	12c48 <tcp_pcb_remove+0x28>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
   12c5c:	0001e537          	lui	a0,0x1e
   12c60:	43450513          	addi	a0,a0,1076 # 1e434 <tcp_backoff+0x234>
   12c64:	80cff0ef          	jal	ra,11c70 <bsp_printf>
   12c68:	fd5ff06f          	j	12c3c <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
   12c6c:	0001e537          	lui	a0,0x1e
   12c70:	45050513          	addi	a0,a0,1104 # 1e450 <tcp_backoff+0x250>
   12c74:	ffdfe0ef          	jal	ra,11c70 <bsp_printf>
   12c78:	fc9ff06f          	j	12c40 <tcp_pcb_remove+0x20>
  TCP_RMV(pcblist, pcb);
   12c7c:	00c7a783          	lw	a5,12(a5)
   12c80:	00f4a023          	sw	a5,0(s1)
   12c84:	00c0006f          	j	12c90 <tcp_pcb_remove+0x70>
   12c88:	00c42703          	lw	a4,12(s0)
   12c8c:	00e7a623          	sw	a4,12(a5)
   12c90:	00042623          	sw	zero,12(s0)
  tcp_pcb_purge(pcb);
   12c94:	00040513          	mv	a0,s0
   12c98:	f01ff0ef          	jal	ra,12b98 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
   12c9c:	01442783          	lw	a5,20(s0)
   12ca0:	00a00713          	li	a4,10
   12ca4:	00e78c63          	beq	a5,a4,12cbc <tcp_pcb_remove+0x9c>
   12ca8:	00100713          	li	a4,1
   12cac:	00e78863          	beq	a5,a4,12cbc <tcp_pcb_remove+0x9c>
      (pcb->flags & TF_ACK_DELAY)) {
   12cb0:	01e45783          	lhu	a5,30(s0)
      (pcb->state != LISTEN) &&
   12cb4:	0017f713          	andi	a4,a5,1
   12cb8:	06071463          	bnez	a4,12d20 <tcp_pcb_remove+0x100>
  if (pcb->state != LISTEN) {
   12cbc:	01442703          	lw	a4,20(s0)
   12cc0:	00100793          	li	a5,1
   12cc4:	04f70063          	beq	a4,a5,12d04 <tcp_pcb_remove+0xe4>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
   12cc8:	07042783          	lw	a5,112(s0)
   12ccc:	00078863          	beqz	a5,12cdc <tcp_pcb_remove+0xbc>
   12cd0:	0001e537          	lui	a0,0x1e
   12cd4:	47050513          	addi	a0,a0,1136 # 1e470 <tcp_backoff+0x270>
   12cd8:	f99fe0ef          	jal	ra,11c70 <bsp_printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
   12cdc:	07442783          	lw	a5,116(s0)
   12ce0:	00078863          	beqz	a5,12cf0 <tcp_pcb_remove+0xd0>
   12ce4:	0001e537          	lui	a0,0x1e
   12ce8:	48850513          	addi	a0,a0,1160 # 1e488 <tcp_backoff+0x288>
   12cec:	f85fe0ef          	jal	ra,11c70 <bsp_printf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
   12cf0:	07842783          	lw	a5,120(s0)
   12cf4:	00078863          	beqz	a5,12d04 <tcp_pcb_remove+0xe4>
   12cf8:	0001e537          	lui	a0,0x1e
   12cfc:	4a450513          	addi	a0,a0,1188 # 1e4a4 <tcp_backoff+0x2a4>
   12d00:	f71fe0ef          	jal	ra,11c70 <bsp_printf>
  pcb->state = CLOSED;
   12d04:	00042a23          	sw	zero,20(s0)
  pcb->local_port = 0;
   12d08:	00041d23          	sh	zero,26(s0)
}
   12d0c:	00c12083          	lw	ra,12(sp)
   12d10:	00812403          	lw	s0,8(sp)
   12d14:	00412483          	lw	s1,4(sp)
   12d18:	01010113          	addi	sp,sp,16
   12d1c:	00008067          	ret
    tcp_ack_now(pcb);
   12d20:	0027e793          	ori	a5,a5,2
   12d24:	00f41f23          	sh	a5,30(s0)
    tcp_output(pcb);
   12d28:	00040513          	mv	a0,s0
   12d2c:	f1df50ef          	jal	ra,8c48 <tcp_output>
   12d30:	f8dff06f          	j	12cbc <tcp_pcb_remove+0x9c>

00012d34 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
   12d34:	18050a63          	beqz	a0,12ec8 <tcp_abandon+0x194>
{
   12d38:	fe010113          	addi	sp,sp,-32
   12d3c:	00112e23          	sw	ra,28(sp)
   12d40:	00812c23          	sw	s0,24(sp)
   12d44:	00912a23          	sw	s1,20(sp)
   12d48:	01212823          	sw	s2,16(sp)
   12d4c:	01312623          	sw	s3,12(sp)
   12d50:	01412423          	sw	s4,8(sp)
   12d54:	01512223          	sw	s5,4(sp)
   12d58:	01612023          	sw	s6,0(sp)
   12d5c:	00050413          	mv	s0,a0
   12d60:	00058493          	mv	s1,a1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
   12d64:	01452703          	lw	a4,20(a0)
   12d68:	00100793          	li	a5,1
   12d6c:	04f70663          	beq	a4,a5,12db8 <tcp_abandon+0x84>
  if (pcb->state == TIME_WAIT) {
   12d70:	01442783          	lw	a5,20(s0)
   12d74:	00a00713          	li	a4,10
   12d78:	04e78863          	beq	a5,a4,12dc8 <tcp_abandon+0x94>
    seqno = pcb->snd_nxt;
   12d7c:	05442a03          	lw	s4,84(s0)
    ackno = pcb->rcv_nxt;
   12d80:	02842a83          	lw	s5,40(s0)
    errf = pcb->errf;
   12d84:	09442903          	lw	s2,148(s0)
    errf_arg = pcb->callback_arg;
   12d88:	01042983          	lw	s3,16(s0)
    if (pcb->state == CLOSED) {
   12d8c:	0e079663          	bnez	a5,12e78 <tcp_abandon+0x144>
      if (pcb->local_port != 0) {
   12d90:	01a45b03          	lhu	s6,26(s0)
   12d94:	100b0463          	beqz	s6,12e9c <tcp_abandon+0x168>
        TCP_RMV(&tcp_bound_pcbs, pcb);
   12d98:	000227b7          	lui	a5,0x22
   12d9c:	f0c7a783          	lw	a5,-244(a5) # 21f0c <tcp_bound_pcbs>
   12da0:	04878263          	beq	a5,s0,12de4 <tcp_abandon+0xb0>
   12da4:	04078c63          	beqz	a5,12dfc <tcp_abandon+0xc8>
   12da8:	00c7a703          	lw	a4,12(a5)
   12dac:	04870463          	beq	a4,s0,12df4 <tcp_abandon+0xc0>
   12db0:	00070793          	mv	a5,a4
   12db4:	ff1ff06f          	j	12da4 <tcp_abandon+0x70>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
   12db8:	0001e537          	lui	a0,0x1e
   12dbc:	4bc50513          	addi	a0,a0,1212 # 1e4bc <tcp_backoff+0x2bc>
   12dc0:	eb1fe0ef          	jal	ra,11c70 <bsp_printf>
   12dc4:	fadff06f          	j	12d70 <tcp_abandon+0x3c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
   12dc8:	00040593          	mv	a1,s0
   12dcc:	00022537          	lui	a0,0x22
   12dd0:	f1050513          	addi	a0,a0,-240 # 21f10 <tcp_tw_pcbs>
   12dd4:	e4dff0ef          	jal	ra,12c20 <tcp_pcb_remove>
    tcp_free(pcb);
   12dd8:	00040513          	mv	a0,s0
   12ddc:	930ff0ef          	jal	ra,11f0c <tcp_free>
   12de0:	0700006f          	j	12e50 <tcp_abandon+0x11c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
   12de4:	00c7a703          	lw	a4,12(a5)
   12de8:	000227b7          	lui	a5,0x22
   12dec:	f0e7a623          	sw	a4,-244(a5) # 21f0c <tcp_bound_pcbs>
   12df0:	00c0006f          	j	12dfc <tcp_abandon+0xc8>
   12df4:	00c42703          	lw	a4,12(s0)
   12df8:	00e7a623          	sw	a4,12(a5)
   12dfc:	00042623          	sw	zero,12(s0)
    u16_t local_port = 0;
   12e00:	00000b13          	li	s6,0
    int send_rst = 0;
   12e04:	00000493          	li	s1,0
    if (pcb->unacked != NULL) {
   12e08:	07442503          	lw	a0,116(s0)
   12e0c:	00050463          	beqz	a0,12e14 <tcp_abandon+0xe0>
      tcp_segs_free(pcb->unacked);
   12e10:	845ff0ef          	jal	ra,12654 <tcp_segs_free>
    if (pcb->unsent != NULL) {
   12e14:	07042503          	lw	a0,112(s0)
   12e18:	00050463          	beqz	a0,12e20 <tcp_abandon+0xec>
      tcp_segs_free(pcb->unsent);
   12e1c:	839ff0ef          	jal	ra,12654 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
   12e20:	07842503          	lw	a0,120(s0)
   12e24:	00050463          	beqz	a0,12e2c <tcp_abandon+0xf8>
      tcp_segs_free(pcb->ooseq);
   12e28:	82dff0ef          	jal	ra,12654 <tcp_segs_free>
    tcp_backlog_accepted(pcb);
   12e2c:	00040513          	mv	a0,s0
   12e30:	9a0ff0ef          	jal	ra,11fd0 <tcp_backlog_accepted>
    if (send_rst) {
   12e34:	06049863          	bnez	s1,12ea4 <tcp_abandon+0x170>
    tcp_free(pcb);
   12e38:	00040513          	mv	a0,s0
   12e3c:	8d0ff0ef          	jal	ra,11f0c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
   12e40:	00090863          	beqz	s2,12e50 <tcp_abandon+0x11c>
   12e44:	ff300593          	li	a1,-13
   12e48:	00098513          	mv	a0,s3
   12e4c:	000900e7          	jalr	s2
}
   12e50:	01c12083          	lw	ra,28(sp)
   12e54:	01812403          	lw	s0,24(sp)
   12e58:	01412483          	lw	s1,20(sp)
   12e5c:	01012903          	lw	s2,16(sp)
   12e60:	00c12983          	lw	s3,12(sp)
   12e64:	00812a03          	lw	s4,8(sp)
   12e68:	00412a83          	lw	s5,4(sp)
   12e6c:	00012b03          	lw	s6,0(sp)
   12e70:	02010113          	addi	sp,sp,32
   12e74:	00008067          	ret
      local_port = pcb->local_port;
   12e78:	01a45b03          	lhu	s6,26(s0)
      TCP_PCB_REMOVE_ACTIVE(pcb);
   12e7c:	00040593          	mv	a1,s0
   12e80:	00022537          	lui	a0,0x22
   12e84:	f0050513          	addi	a0,a0,-256 # 21f00 <tcp_active_pcbs>
   12e88:	d99ff0ef          	jal	ra,12c20 <tcp_pcb_remove>
   12e8c:	000227b7          	lui	a5,0x22
   12e90:	00100713          	li	a4,1
   12e94:	eee78e23          	sb	a4,-260(a5) # 21efc <tcp_active_pcbs_changed>
   12e98:	f71ff06f          	j	12e08 <tcp_abandon+0xd4>
    int send_rst = 0;
   12e9c:	00000493          	li	s1,0
   12ea0:	f69ff06f          	j	12e08 <tcp_abandon+0xd4>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
   12ea4:	01c45803          	lhu	a6,28(s0)
   12ea8:	000b0793          	mv	a5,s6
   12eac:	00440713          	addi	a4,s0,4
   12eb0:	00040693          	mv	a3,s0
   12eb4:	000a8613          	mv	a2,s5
   12eb8:	000a0593          	mv	a1,s4
   12ebc:	00040513          	mv	a0,s0
   12ec0:	bddf50ef          	jal	ra,8a9c <tcp_rst>
   12ec4:	f75ff06f          	j	12e38 <tcp_abandon+0x104>
   12ec8:	00008067          	ret

00012ecc <tcp_abort>:
{
   12ecc:	ff010113          	addi	sp,sp,-16
   12ed0:	00112623          	sw	ra,12(sp)
  tcp_abandon(pcb, 1);
   12ed4:	00100593          	li	a1,1
   12ed8:	e5dff0ef          	jal	ra,12d34 <tcp_abandon>
}
   12edc:	00c12083          	lw	ra,12(sp)
   12ee0:	01010113          	addi	sp,sp,16
   12ee4:	00008067          	ret

00012ee8 <tcp_accept_null>:
{
   12ee8:	ff010113          	addi	sp,sp,-16
   12eec:	00112623          	sw	ra,12(sp)
   12ef0:	00812423          	sw	s0,8(sp)
   12ef4:	00058413          	mv	s0,a1
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
   12ef8:	02058063          	beqz	a1,12f18 <tcp_accept_null+0x30>
  tcp_abort(pcb);
   12efc:	00040513          	mv	a0,s0
   12f00:	fcdff0ef          	jal	ra,12ecc <tcp_abort>
}
   12f04:	ff300513          	li	a0,-13
   12f08:	00c12083          	lw	ra,12(sp)
   12f0c:	00812403          	lw	s0,8(sp)
   12f10:	01010113          	addi	sp,sp,16
   12f14:	00008067          	ret
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
   12f18:	0001e537          	lui	a0,0x1e
   12f1c:	4f050513          	addi	a0,a0,1264 # 1e4f0 <tcp_backoff+0x2f0>
   12f20:	d51fe0ef          	jal	ra,11c70 <bsp_printf>
   12f24:	fd9ff06f          	j	12efc <tcp_accept_null+0x14>

00012f28 <tcp_kill_timewait>:
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   12f28:	000227b7          	lui	a5,0x22
   12f2c:	f107a783          	lw	a5,-240(a5) # 21f10 <tcp_tw_pcbs>
  inactivity = 0;
   12f30:	00000613          	li	a2,0
  inactive = NULL;
   12f34:	00000513          	li	a0,0
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
   12f38:	0080006f          	j	12f40 <tcp_kill_timewait+0x18>
   12f3c:	00c7a783          	lw	a5,12(a5)
   12f40:	02078263          	beqz	a5,12f64 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   12f44:	0247a683          	lw	a3,36(a5)
   12f48:	00022737          	lui	a4,0x22
   12f4c:	f0472703          	lw	a4,-252(a4) # 21f04 <tcp_ticks>
   12f50:	40d70733          	sub	a4,a4,a3
   12f54:	fec764e3          	bltu	a4,a2,12f3c <tcp_kill_timewait+0x14>
      inactivity = tcp_ticks - pcb->tmr;
   12f58:	00070613          	mv	a2,a4
      inactive = pcb;
   12f5c:	00078513          	mv	a0,a5
   12f60:	fddff06f          	j	12f3c <tcp_kill_timewait+0x14>
  if (inactive != NULL) {
   12f64:	00050e63          	beqz	a0,12f80 <tcp_kill_timewait+0x58>
{
   12f68:	ff010113          	addi	sp,sp,-16
   12f6c:	00112623          	sw	ra,12(sp)
    tcp_abort(inactive);
   12f70:	f5dff0ef          	jal	ra,12ecc <tcp_abort>
}
   12f74:	00c12083          	lw	ra,12(sp)
   12f78:	01010113          	addi	sp,sp,16
   12f7c:	00008067          	ret
   12f80:	00008067          	ret

00012f84 <tcp_kill_prio>:
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
   12f84:	01851793          	slli	a5,a0,0x18
   12f88:	4187d793          	srai	a5,a5,0x18
   12f8c:	0007c663          	bltz	a5,12f98 <tcp_kill_prio+0x14>
  if (mprio == 0) {
   12f90:	00051663          	bnez	a0,12f9c <tcp_kill_prio+0x18>
   12f94:	00008067          	ret
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
   12f98:	07f00513          	li	a0,127
  mprio--;
   12f9c:	fff50513          	addi	a0,a0,-1
   12fa0:	0ff57693          	andi	a3,a0,255
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   12fa4:	000227b7          	lui	a5,0x22
   12fa8:	f007a783          	lw	a5,-256(a5) # 21f00 <tcp_active_pcbs>
  inactivity = 0;
   12fac:	00000613          	li	a2,0
  inactive = NULL;
   12fb0:	00000513          	li	a0,0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   12fb4:	0200006f          	j	12fd4 <tcp_kill_prio+0x50>
      inactivity = tcp_ticks - pcb->tmr;
   12fb8:	000226b7          	lui	a3,0x22
   12fbc:	f046a683          	lw	a3,-252(a3) # 21f04 <tcp_ticks>
   12fc0:	0247a603          	lw	a2,36(a5)
   12fc4:	40c68633          	sub	a2,a3,a2
      mprio      = pcb->prio;
   12fc8:	00070693          	mv	a3,a4
      inactive   = pcb;
   12fcc:	00078513          	mv	a0,a5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   12fd0:	00c7a783          	lw	a5,12(a5)
   12fd4:	02078463          	beqz	a5,12ffc <tcp_kill_prio+0x78>
    if ((pcb->prio < mprio) ||
   12fd8:	0187c703          	lbu	a4,24(a5)
   12fdc:	fcd76ee3          	bltu	a4,a3,12fb8 <tcp_kill_prio+0x34>
   12fe0:	fed718e3          	bne	a4,a3,12fd0 <tcp_kill_prio+0x4c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
   12fe4:	0247a803          	lw	a6,36(a5)
   12fe8:	000225b7          	lui	a1,0x22
   12fec:	f045a583          	lw	a1,-252(a1) # 21f04 <tcp_ticks>
   12ff0:	410585b3          	sub	a1,a1,a6
   12ff4:	fcc5eee3          	bltu	a1,a2,12fd0 <tcp_kill_prio+0x4c>
   12ff8:	fc1ff06f          	j	12fb8 <tcp_kill_prio+0x34>
  if (inactive != NULL) {
   12ffc:	00050e63          	beqz	a0,13018 <tcp_kill_prio+0x94>
{
   13000:	ff010113          	addi	sp,sp,-16
   13004:	00112623          	sw	ra,12(sp)
    tcp_abort(inactive);
   13008:	ec5ff0ef          	jal	ra,12ecc <tcp_abort>
}
   1300c:	00c12083          	lw	ra,12(sp)
   13010:	01010113          	addi	sp,sp,16
   13014:	00008067          	ret
   13018:	00008067          	ret

0001301c <tcp_netif_ip_addr_changed_pcblist>:
{
   1301c:	ff010113          	addi	sp,sp,-16
   13020:	00112623          	sw	ra,12(sp)
   13024:	00812423          	sw	s0,8(sp)
   13028:	00912223          	sw	s1,4(sp)
   1302c:	01212023          	sw	s2,0(sp)
   13030:	00050493          	mv	s1,a0
   13034:	00058413          	mv	s0,a1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
   13038:	02051263          	bnez	a0,1305c <tcp_netif_ip_addr_changed_pcblist+0x40>
   1303c:	0001e537          	lui	a0,0x1e
   13040:	51050513          	addi	a0,a0,1296 # 1e510 <tcp_backoff+0x310>
   13044:	c2dfe0ef          	jal	ra,11c70 <bsp_printf>
   13048:	0140006f          	j	1305c <tcp_netif_ip_addr_changed_pcblist+0x40>
      struct tcp_pcb *next = pcb->next;
   1304c:	00c42903          	lw	s2,12(s0)
      tcp_abort(pcb);
   13050:	00040513          	mv	a0,s0
   13054:	e79ff0ef          	jal	ra,12ecc <tcp_abort>
      pcb = next;
   13058:	00090413          	mv	s0,s2
  while (pcb != NULL) {
   1305c:	00040c63          	beqz	s0,13074 <tcp_netif_ip_addr_changed_pcblist+0x58>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
   13060:	00042703          	lw	a4,0(s0)
   13064:	0004a783          	lw	a5,0(s1)
   13068:	fef702e3          	beq	a4,a5,1304c <tcp_netif_ip_addr_changed_pcblist+0x30>
      pcb = pcb->next;
   1306c:	00c42403          	lw	s0,12(s0)
   13070:	fedff06f          	j	1305c <tcp_netif_ip_addr_changed_pcblist+0x40>
}
   13074:	00c12083          	lw	ra,12(sp)
   13078:	00812403          	lw	s0,8(sp)
   1307c:	00412483          	lw	s1,4(sp)
   13080:	00012903          	lw	s2,0(sp)
   13084:	01010113          	addi	sp,sp,16
   13088:	00008067          	ret

0001308c <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
   1308c:	00050663          	beqz	a0,13098 <tcp_netif_ip_addr_changed+0xc>
   13090:	00052783          	lw	a5,0(a0)
   13094:	00079463          	bnez	a5,1309c <tcp_netif_ip_addr_changed+0x10>
   13098:	00008067          	ret
{
   1309c:	ff010113          	addi	sp,sp,-16
   130a0:	00112623          	sw	ra,12(sp)
   130a4:	00812423          	sw	s0,8(sp)
   130a8:	00912223          	sw	s1,4(sp)
   130ac:	00058493          	mv	s1,a1
   130b0:	00050413          	mv	s0,a0
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
   130b4:	000227b7          	lui	a5,0x22
   130b8:	f007a583          	lw	a1,-256(a5) # 21f00 <tcp_active_pcbs>
   130bc:	f61ff0ef          	jal	ra,1301c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
   130c0:	000227b7          	lui	a5,0x22
   130c4:	f0c7a583          	lw	a1,-244(a5) # 21f0c <tcp_bound_pcbs>
   130c8:	00040513          	mv	a0,s0
   130cc:	f51ff0ef          	jal	ra,1301c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
   130d0:	02048c63          	beqz	s1,13108 <tcp_netif_ip_addr_changed+0x7c>
   130d4:	0004a783          	lw	a5,0(s1)
   130d8:	02078863          	beqz	a5,13108 <tcp_netif_ip_addr_changed+0x7c>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
   130dc:	000227b7          	lui	a5,0x22
   130e0:	f087a783          	lw	a5,-248(a5) # 21f08 <tcp_listen_pcbs>
   130e4:	0080006f          	j	130ec <tcp_netif_ip_addr_changed+0x60>
   130e8:	00c7a783          	lw	a5,12(a5)
   130ec:	00078e63          	beqz	a5,13108 <tcp_netif_ip_addr_changed+0x7c>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
   130f0:	0007a683          	lw	a3,0(a5)
   130f4:	00042703          	lw	a4,0(s0)
   130f8:	fee698e3          	bne	a3,a4,130e8 <tcp_netif_ip_addr_changed+0x5c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
   130fc:	0004a703          	lw	a4,0(s1)
   13100:	00e7a023          	sw	a4,0(a5)
   13104:	fe5ff06f          	j	130e8 <tcp_netif_ip_addr_changed+0x5c>
}
   13108:	00c12083          	lw	ra,12(sp)
   1310c:	00812403          	lw	s0,8(sp)
   13110:	00412483          	lw	s1,4(sp)
   13114:	01010113          	addi	sp,sp,16
   13118:	00008067          	ret

0001311c <tcp_kill_state>:
{
   1311c:	ff010113          	addi	sp,sp,-16
   13120:	00112623          	sw	ra,12(sp)
   13124:	00812423          	sw	s0,8(sp)
   13128:	00050413          	mv	s0,a0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
   1312c:	ff850713          	addi	a4,a0,-8
   13130:	00100793          	li	a5,1
   13134:	00e7ec63          	bltu	a5,a4,1314c <tcp_kill_state+0x30>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   13138:	000227b7          	lui	a5,0x22
   1313c:	f007a783          	lw	a5,-256(a5) # 21f00 <tcp_active_pcbs>
  inactivity = 0;
   13140:	00000613          	li	a2,0
  inactive = NULL;
   13144:	00000513          	li	a0,0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   13148:	0180006f          	j	13160 <tcp_kill_state+0x44>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
   1314c:	0001e537          	lui	a0,0x1e
   13150:	54450513          	addi	a0,a0,1348 # 1e544 <tcp_backoff+0x344>
   13154:	b1dfe0ef          	jal	ra,11c70 <bsp_printf>
   13158:	fe1ff06f          	j	13138 <tcp_kill_state+0x1c>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
   1315c:	00c7a783          	lw	a5,12(a5)
   13160:	02078663          	beqz	a5,1318c <tcp_kill_state+0x70>
    if (pcb->state == state) {
   13164:	0147a703          	lw	a4,20(a5)
   13168:	fe871ae3          	bne	a4,s0,1315c <tcp_kill_state+0x40>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
   1316c:	0247a683          	lw	a3,36(a5)
   13170:	00022737          	lui	a4,0x22
   13174:	f0472703          	lw	a4,-252(a4) # 21f04 <tcp_ticks>
   13178:	40d70733          	sub	a4,a4,a3
   1317c:	fec760e3          	bltu	a4,a2,1315c <tcp_kill_state+0x40>
        inactivity = tcp_ticks - pcb->tmr;
   13180:	00070613          	mv	a2,a4
        inactive = pcb;
   13184:	00078513          	mv	a0,a5
   13188:	fd5ff06f          	j	1315c <tcp_kill_state+0x40>
  if (inactive != NULL) {
   1318c:	00050663          	beqz	a0,13198 <tcp_kill_state+0x7c>
    tcp_abandon(inactive, 0);
   13190:	00000593          	li	a1,0
   13194:	ba1ff0ef          	jal	ra,12d34 <tcp_abandon>
}
   13198:	00c12083          	lw	ra,12(sp)
   1319c:	00812403          	lw	s0,8(sp)
   131a0:	01010113          	addi	sp,sp,16
   131a4:	00008067          	ret

000131a8 <tcp_alloc>:
{
   131a8:	ff010113          	addi	sp,sp,-16
   131ac:	00112623          	sw	ra,12(sp)
   131b0:	00812423          	sw	s0,8(sp)
   131b4:	00912223          	sw	s1,4(sp)
   131b8:	00050493          	mv	s1,a0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   131bc:	00100513          	li	a0,1
   131c0:	28c010ef          	jal	ra,1444c <memp_malloc>
   131c4:	00050413          	mv	s0,a0
  if (pcb == NULL) {
   131c8:	0a050063          	beqz	a0,13268 <tcp_alloc+0xc0>
  if (pcb != NULL) {
   131cc:	08040263          	beqz	s0,13250 <tcp_alloc+0xa8>
    memset(pcb, 0, sizeof(struct tcp_pcb));
   131d0:	0a000613          	li	a2,160
   131d4:	00000593          	li	a1,0
   131d8:	00040513          	mv	a0,s0
   131dc:	a25ee0ef          	jal	ra,1c00 <memset>
    pcb->prio = prio;
   131e0:	00940c23          	sb	s1,24(s0)
    pcb->snd_buf = TCP_SND_BUF;
   131e4:	000037b7          	lui	a5,0x3
   131e8:	da078793          	addi	a5,a5,-608 # 2da0 <eml_mahalanobis_distance_squared+0x5c>
   131ec:	06f41423          	sh	a5,104(s0)
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
   131f0:	02f41723          	sh	a5,46(s0)
   131f4:	02f41623          	sh	a5,44(s0)
    pcb->ttl = TCP_TTL;
   131f8:	fff00713          	li	a4,-1
   131fc:	00e405a3          	sb	a4,11(s0)
    pcb->mss = INITIAL_MSS;
   13200:	21800693          	li	a3,536
   13204:	02d41b23          	sh	a3,54(s0)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
   13208:	00600693          	li	a3,6
   1320c:	04d41223          	sh	a3,68(s0)
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
   13210:	04d41123          	sh	a3,66(s0)
    pcb->rtime = -1;
   13214:	02e41a23          	sh	a4,52(s0)
    pcb->cwnd = 1;
   13218:	00100713          	li	a4,1
   1321c:	04e41623          	sh	a4,76(s0)
    pcb->tmr = tcp_ticks;
   13220:	00022737          	lui	a4,0x22
   13224:	f0472703          	lw	a4,-252(a4) # 21f04 <tcp_ticks>
   13228:	02e42223          	sw	a4,36(s0)
    pcb->last_timer = tcp_timer_ctr;
   1322c:	9441c703          	lbu	a4,-1724(gp) # 1fb14 <tcp_timer_ctr>
   13230:	02e40123          	sb	a4,34(s0)
    pcb->ssthresh = TCP_SND_BUF;
   13234:	04f41723          	sh	a5,78(s0)
    pcb->recv = tcp_recv_null;
   13238:	000137b7          	lui	a5,0x13
   1323c:	5a878793          	addi	a5,a5,1448 # 135a8 <tcp_recv_null>
   13240:	08f42423          	sw	a5,136(s0)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
   13244:	006de7b7          	lui	a5,0x6de
   13248:	d0078793          	addi	a5,a5,-768 # 6ddd00 <__freertos_irq_stack_top+0x6b8dd0>
   1324c:	08f42c23          	sw	a5,152(s0)
}
   13250:	00040513          	mv	a0,s0
   13254:	00c12083          	lw	ra,12(sp)
   13258:	00812403          	lw	s0,8(sp)
   1325c:	00412483          	lw	s1,4(sp)
   13260:	01010113          	addi	sp,sp,16
   13264:	00008067          	ret
    tcp_handle_closepend();
   13268:	ecdfe0ef          	jal	ra,12134 <tcp_handle_closepend>
    tcp_kill_timewait();
   1326c:	cbdff0ef          	jal	ra,12f28 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   13270:	00100513          	li	a0,1
   13274:	1d8010ef          	jal	ra,1444c <memp_malloc>
   13278:	00050413          	mv	s0,a0
    if (pcb == NULL) {
   1327c:	02050263          	beqz	a0,132a0 <tcp_alloc+0xf8>
    if (pcb != NULL) {
   13280:	f40406e3          	beqz	s0,131cc <tcp_alloc+0x24>
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
   13284:	000227b7          	lui	a5,0x22
   13288:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1328c:	0d47a703          	lw	a4,212(a5)
   13290:	00075783          	lhu	a5,0(a4)
   13294:	fff78793          	addi	a5,a5,-1
   13298:	00f71023          	sh	a5,0(a4)
   1329c:	f31ff06f          	j	131cc <tcp_alloc+0x24>
      tcp_kill_state(LAST_ACK);
   132a0:	00900513          	li	a0,9
   132a4:	e79ff0ef          	jal	ra,1311c <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   132a8:	00100513          	li	a0,1
   132ac:	1a0010ef          	jal	ra,1444c <memp_malloc>
   132b0:	00050413          	mv	s0,a0
      if (pcb == NULL) {
   132b4:	02050263          	beqz	a0,132d8 <tcp_alloc+0x130>
      if (pcb != NULL) {
   132b8:	fc0404e3          	beqz	s0,13280 <tcp_alloc+0xd8>
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
   132bc:	000227b7          	lui	a5,0x22
   132c0:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   132c4:	0d47a703          	lw	a4,212(a5)
   132c8:	00075783          	lhu	a5,0(a4)
   132cc:	fff78793          	addi	a5,a5,-1
   132d0:	00f71023          	sh	a5,0(a4)
   132d4:	fadff06f          	j	13280 <tcp_alloc+0xd8>
        tcp_kill_state(CLOSING);
   132d8:	00800513          	li	a0,8
   132dc:	e41ff0ef          	jal	ra,1311c <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   132e0:	00100513          	li	a0,1
   132e4:	168010ef          	jal	ra,1444c <memp_malloc>
   132e8:	00050413          	mv	s0,a0
        if (pcb == NULL) {
   132ec:	02050263          	beqz	a0,13310 <tcp_alloc+0x168>
        if (pcb != NULL) {
   132f0:	fc0404e3          	beqz	s0,132b8 <tcp_alloc+0x110>
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
   132f4:	000227b7          	lui	a5,0x22
   132f8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   132fc:	0d47a703          	lw	a4,212(a5)
   13300:	00075783          	lhu	a5,0(a4)
   13304:	fff78793          	addi	a5,a5,-1
   13308:	00f71023          	sh	a5,0(a4)
   1330c:	fadff06f          	j	132b8 <tcp_alloc+0x110>
          tcp_kill_prio(prio);
   13310:	00048513          	mv	a0,s1
   13314:	c71ff0ef          	jal	ra,12f84 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
   13318:	00100513          	li	a0,1
   1331c:	130010ef          	jal	ra,1444c <memp_malloc>
   13320:	00050413          	mv	s0,a0
          if (pcb != NULL) {
   13324:	fc0506e3          	beqz	a0,132f0 <tcp_alloc+0x148>
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
   13328:	000227b7          	lui	a5,0x22
   1332c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   13330:	0d47a703          	lw	a4,212(a5)
   13334:	00075783          	lhu	a5,0(a4)
   13338:	fff78793          	addi	a5,a5,-1
   1333c:	00f71023          	sh	a5,0(a4)
   13340:	fb1ff06f          	j	132f0 <tcp_alloc+0x148>

00013344 <tcp_new>:
{
   13344:	ff010113          	addi	sp,sp,-16
   13348:	00112623          	sw	ra,12(sp)
  return tcp_alloc(TCP_PRIO_NORMAL);
   1334c:	04000513          	li	a0,64
   13350:	e59ff0ef          	jal	ra,131a8 <tcp_alloc>
}
   13354:	00c12083          	lw	ra,12(sp)
   13358:	01010113          	addi	sp,sp,16
   1335c:	00008067          	ret

00013360 <tcp_new_ip_type>:
{
   13360:	ff010113          	addi	sp,sp,-16
   13364:	00112623          	sw	ra,12(sp)
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
   13368:	04000513          	li	a0,64
   1336c:	e3dff0ef          	jal	ra,131a8 <tcp_alloc>
}
   13370:	00c12083          	lw	ra,12(sp)
   13374:	01010113          	addi	sp,sp,16
   13378:	00008067          	ret

0001337c <tcp_close_shutdown>:
{
   1337c:	ff010113          	addi	sp,sp,-16
   13380:	00112623          	sw	ra,12(sp)
   13384:	00812423          	sw	s0,8(sp)
   13388:	00912223          	sw	s1,4(sp)
   1338c:	00050413          	mv	s0,a0
   13390:	00058493          	mv	s1,a1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
   13394:	04050063          	beqz	a0,133d4 <tcp_close_shutdown+0x58>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
   13398:	00048c63          	beqz	s1,133b0 <tcp_close_shutdown+0x34>
   1339c:	01442783          	lw	a5,20(s0)
   133a0:	00400713          	li	a4,4
   133a4:	04e78063          	beq	a5,a4,133e4 <tcp_close_shutdown+0x68>
   133a8:	00700713          	li	a4,7
   133ac:	02e78c63          	beq	a5,a4,133e4 <tcp_close_shutdown+0x68>
  switch (pcb->state) {
   133b0:	01442783          	lw	a5,20(s0)
   133b4:	00100713          	li	a4,1
   133b8:	14e78e63          	beq	a5,a4,13514 <tcp_close_shutdown+0x198>
   133bc:	10078263          	beqz	a5,134c0 <tcp_close_shutdown+0x144>
   133c0:	00200713          	li	a4,2
   133c4:	16e78c63          	beq	a5,a4,1353c <tcp_close_shutdown+0x1c0>
      return tcp_close_shutdown_fin(pcb);
   133c8:	00040513          	mv	a0,s0
   133cc:	c81fe0ef          	jal	ra,1204c <tcp_close_shutdown_fin>
   133d0:	0d40006f          	j	134a4 <tcp_close_shutdown+0x128>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
   133d4:	0001e537          	lui	a0,0x1e
   133d8:	55450513          	addi	a0,a0,1364 # 1e554 <tcp_backoff+0x354>
   133dc:	895fe0ef          	jal	ra,11c70 <bsp_printf>
   133e0:	fb9ff06f          	j	13398 <tcp_close_shutdown+0x1c>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
   133e4:	07c42783          	lw	a5,124(s0)
   133e8:	04078c63          	beqz	a5,13440 <tcp_close_shutdown+0xc4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
   133ec:	01e45783          	lhu	a5,30(s0)
   133f0:	0107f793          	andi	a5,a5,16
   133f4:	06078063          	beqz	a5,13454 <tcp_close_shutdown+0xd8>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
   133f8:	01c45803          	lhu	a6,28(s0)
   133fc:	01a45783          	lhu	a5,26(s0)
   13400:	00440713          	addi	a4,s0,4
   13404:	00040693          	mv	a3,s0
   13408:	02842603          	lw	a2,40(s0)
   1340c:	05442583          	lw	a1,84(s0)
   13410:	00040513          	mv	a0,s0
   13414:	e88f50ef          	jal	ra,8a9c <tcp_rst>
      tcp_pcb_purge(pcb);
   13418:	00040513          	mv	a0,s0
   1341c:	f7cff0ef          	jal	ra,12b98 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
   13420:	000227b7          	lui	a5,0x22
   13424:	f007a783          	lw	a5,-256(a5) # 21f00 <tcp_active_pcbs>
   13428:	02878e63          	beq	a5,s0,13464 <tcp_close_shutdown+0xe8>
   1342c:	04078863          	beqz	a5,1347c <tcp_close_shutdown+0x100>
   13430:	00c7a703          	lw	a4,12(a5)
   13434:	04870063          	beq	a4,s0,13474 <tcp_close_shutdown+0xf8>
   13438:	00070793          	mv	a5,a4
   1343c:	ff1ff06f          	j	1342c <tcp_close_shutdown+0xb0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
   13440:	02c45703          	lhu	a4,44(s0)
   13444:	000037b7          	lui	a5,0x3
   13448:	da078793          	addi	a5,a5,-608 # 2da0 <eml_mahalanobis_distance_squared+0x5c>
   1344c:	f6f702e3          	beq	a4,a5,133b0 <tcp_close_shutdown+0x34>
   13450:	f9dff06f          	j	133ec <tcp_close_shutdown+0x70>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
   13454:	0001e537          	lui	a0,0x1e
   13458:	57450513          	addi	a0,a0,1396 # 1e574 <tcp_backoff+0x374>
   1345c:	815fe0ef          	jal	ra,11c70 <bsp_printf>
   13460:	f99ff06f          	j	133f8 <tcp_close_shutdown+0x7c>
      TCP_RMV_ACTIVE(pcb);
   13464:	00c7a703          	lw	a4,12(a5)
   13468:	000227b7          	lui	a5,0x22
   1346c:	f0e7a023          	sw	a4,-256(a5) # 21f00 <tcp_active_pcbs>
   13470:	00c0006f          	j	1347c <tcp_close_shutdown+0x100>
   13474:	00c42703          	lw	a4,12(s0)
   13478:	00e7a623          	sw	a4,12(a5)
   1347c:	00042623          	sw	zero,12(s0)
   13480:	000227b7          	lui	a5,0x22
   13484:	00100713          	li	a4,1
   13488:	eee78e23          	sb	a4,-260(a5) # 21efc <tcp_active_pcbs_changed>
      if (tcp_input_pcb == pcb) {
   1348c:	000227b7          	lui	a5,0x22
   13490:	ee07a783          	lw	a5,-288(a5) # 21ee0 <tcp_input_pcb>
   13494:	02878263          	beq	a5,s0,134b8 <tcp_close_shutdown+0x13c>
        tcp_free(pcb);
   13498:	00040513          	mv	a0,s0
   1349c:	a71fe0ef          	jal	ra,11f0c <tcp_free>
      return ERR_OK;
   134a0:	00000513          	li	a0,0
}
   134a4:	00c12083          	lw	ra,12(sp)
   134a8:	00812403          	lw	s0,8(sp)
   134ac:	00412483          	lw	s1,4(sp)
   134b0:	01010113          	addi	sp,sp,16
   134b4:	00008067          	ret
        tcp_trigger_input_pcb_close();
   134b8:	b60fd0ef          	jal	ra,10818 <tcp_trigger_input_pcb_close>
   134bc:	fe5ff06f          	j	134a0 <tcp_close_shutdown+0x124>
      if (pcb->local_port != 0) {
   134c0:	01a45783          	lhu	a5,26(s0)
   134c4:	04078063          	beqz	a5,13504 <tcp_close_shutdown+0x188>
        TCP_RMV(&tcp_bound_pcbs, pcb);
   134c8:	000227b7          	lui	a5,0x22
   134cc:	f0c7a783          	lw	a5,-244(a5) # 21f0c <tcp_bound_pcbs>
   134d0:	00878c63          	beq	a5,s0,134e8 <tcp_close_shutdown+0x16c>
   134d4:	02078663          	beqz	a5,13500 <tcp_close_shutdown+0x184>
   134d8:	00c7a703          	lw	a4,12(a5)
   134dc:	00870e63          	beq	a4,s0,134f8 <tcp_close_shutdown+0x17c>
   134e0:	00070793          	mv	a5,a4
   134e4:	ff1ff06f          	j	134d4 <tcp_close_shutdown+0x158>
   134e8:	00c7a703          	lw	a4,12(a5)
   134ec:	000227b7          	lui	a5,0x22
   134f0:	f0e7a623          	sw	a4,-244(a5) # 21f0c <tcp_bound_pcbs>
   134f4:	00c0006f          	j	13500 <tcp_close_shutdown+0x184>
   134f8:	00c42703          	lw	a4,12(s0)
   134fc:	00e7a623          	sw	a4,12(a5)
   13500:	00042623          	sw	zero,12(s0)
      tcp_free(pcb);
   13504:	00040513          	mv	a0,s0
   13508:	a05fe0ef          	jal	ra,11f0c <tcp_free>
  return ERR_OK;
   1350c:	00000513          	li	a0,0
      break;
   13510:	f95ff06f          	j	134a4 <tcp_close_shutdown+0x128>
      tcp_listen_closed(pcb);
   13514:	00040513          	mv	a0,s0
   13518:	8e9fe0ef          	jal	ra,11e00 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
   1351c:	00040593          	mv	a1,s0
   13520:	00022537          	lui	a0,0x22
   13524:	f0850513          	addi	a0,a0,-248 # 21f08 <tcp_listen_pcbs>
   13528:	ef8ff0ef          	jal	ra,12c20 <tcp_pcb_remove>
      tcp_free_listen(pcb);
   1352c:	00040513          	mv	a0,s0
   13530:	95dfe0ef          	jal	ra,11e8c <tcp_free_listen>
  return ERR_OK;
   13534:	00000513          	li	a0,0
      break;
   13538:	f6dff06f          	j	134a4 <tcp_close_shutdown+0x128>
      TCP_PCB_REMOVE_ACTIVE(pcb);
   1353c:	00040593          	mv	a1,s0
   13540:	00022537          	lui	a0,0x22
   13544:	f0050513          	addi	a0,a0,-256 # 21f00 <tcp_active_pcbs>
   13548:	ed8ff0ef          	jal	ra,12c20 <tcp_pcb_remove>
   1354c:	000227b7          	lui	a5,0x22
   13550:	00100713          	li	a4,1
   13554:	eee78e23          	sb	a4,-260(a5) # 21efc <tcp_active_pcbs_changed>
      tcp_free(pcb);
   13558:	00040513          	mv	a0,s0
   1355c:	9b1fe0ef          	jal	ra,11f0c <tcp_free>
  return ERR_OK;
   13560:	00000513          	li	a0,0
      break;
   13564:	f41ff06f          	j	134a4 <tcp_close_shutdown+0x128>

00013568 <tcp_close>:
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
   13568:	02050c63          	beqz	a0,135a0 <tcp_close+0x38>
{
   1356c:	ff010113          	addi	sp,sp,-16
   13570:	00112623          	sw	ra,12(sp)
  if (pcb->state != LISTEN) {
   13574:	01452703          	lw	a4,20(a0)
   13578:	00100793          	li	a5,1
   1357c:	00f70863          	beq	a4,a5,1358c <tcp_close+0x24>
    tcp_set_flags(pcb, TF_RXCLOSED);
   13580:	01e55783          	lhu	a5,30(a0)
   13584:	0107e793          	ori	a5,a5,16
   13588:	00f51f23          	sh	a5,30(a0)
  return tcp_close_shutdown(pcb, 1);
   1358c:	00100593          	li	a1,1
   13590:	dedff0ef          	jal	ra,1337c <tcp_close_shutdown>
}
   13594:	00c12083          	lw	ra,12(sp)
   13598:	01010113          	addi	sp,sp,16
   1359c:	00008067          	ret
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
   135a0:	ff000513          	li	a0,-16
}
   135a4:	00008067          	ret

000135a8 <tcp_recv_null>:
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
   135a8:	04058a63          	beqz	a1,135fc <tcp_recv_null+0x54>
{
   135ac:	ff010113          	addi	sp,sp,-16
   135b0:	00112623          	sw	ra,12(sp)
   135b4:	00812423          	sw	s0,8(sp)
   135b8:	00060413          	mv	s0,a2
   135bc:	00058513          	mv	a0,a1
  if (p != NULL) {
   135c0:	02060463          	beqz	a2,135e8 <tcp_recv_null+0x40>
    tcp_recved(pcb, p->tot_len);
   135c4:	00865583          	lhu	a1,8(a2)
   135c8:	f55fe0ef          	jal	ra,1251c <tcp_recved>
    pbuf_free(p);
   135cc:	00040513          	mv	a0,s0
   135d0:	d80f90ef          	jal	ra,cb50 <pbuf_free>
  return ERR_OK;
   135d4:	00000513          	li	a0,0
}
   135d8:	00c12083          	lw	ra,12(sp)
   135dc:	00812403          	lw	s0,8(sp)
   135e0:	01010113          	addi	sp,sp,16
   135e4:	00008067          	ret
  } else if (err == ERR_OK) {
   135e8:	00068663          	beqz	a3,135f4 <tcp_recv_null+0x4c>
  return ERR_OK;
   135ec:	00000513          	li	a0,0
   135f0:	fe9ff06f          	j	135d8 <tcp_recv_null+0x30>
    return tcp_close(pcb);
   135f4:	f75ff0ef          	jal	ra,13568 <tcp_close>
   135f8:	fe1ff06f          	j	135d8 <tcp_recv_null+0x30>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
   135fc:	ff000513          	li	a0,-16
}
   13600:	00008067          	ret

00013604 <tcp_process_refused_data>:
{
   13604:	fe010113          	addi	sp,sp,-32
   13608:	00112e23          	sw	ra,28(sp)
   1360c:	00812c23          	sw	s0,24(sp)
   13610:	00912a23          	sw	s1,20(sp)
   13614:	01212823          	sw	s2,16(sp)
   13618:	01312623          	sw	s3,12(sp)
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
   1361c:	0c050863          	beqz	a0,136ec <tcp_process_refused_data+0xe8>
   13620:	00050413          	mv	s0,a0
    u8_t refused_flags = pcb->refused_data->flags;
   13624:	07c52903          	lw	s2,124(a0)
   13628:	00d94983          	lbu	s3,13(s2)
    pcb->refused_data = NULL;
   1362c:	06052e23          	sw	zero,124(a0)
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
   13630:	08852783          	lw	a5,136(a0)
   13634:	06078663          	beqz	a5,136a0 <tcp_process_refused_data+0x9c>
   13638:	00000693          	li	a3,0
   1363c:	00090613          	mv	a2,s2
   13640:	00050593          	mv	a1,a0
   13644:	01052503          	lw	a0,16(a0)
   13648:	000780e7          	jalr	a5
   1364c:	00050493          	mv	s1,a0
    if (err == ERR_OK) {
   13650:	06049663          	bnez	s1,136bc <tcp_process_refused_data+0xb8>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
   13654:	0209f993          	andi	s3,s3,32
   13658:	06098a63          	beqz	s3,136cc <tcp_process_refused_data+0xc8>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
   1365c:	02c45703          	lhu	a4,44(s0)
   13660:	000037b7          	lui	a5,0x3
   13664:	da078793          	addi	a5,a5,-608 # 2da0 <eml_mahalanobis_distance_squared+0x5c>
   13668:	00f70663          	beq	a4,a5,13674 <tcp_process_refused_data+0x70>
          pcb->rcv_wnd++;
   1366c:	00170713          	addi	a4,a4,1
   13670:	02e41623          	sh	a4,44(s0)
        TCP_EVENT_CLOSED(pcb, err);
   13674:	08842783          	lw	a5,136(s0)
   13678:	04078a63          	beqz	a5,136cc <tcp_process_refused_data+0xc8>
   1367c:	00000693          	li	a3,0
   13680:	00000613          	li	a2,0
   13684:	00040593          	mv	a1,s0
   13688:	01042503          	lw	a0,16(s0)
   1368c:	000780e7          	jalr	a5
        if (err == ERR_ABRT) {
   13690:	ff300793          	li	a5,-13
   13694:	02f51c63          	bne	a0,a5,136cc <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
   13698:	00050493          	mv	s1,a0
   1369c:	0300006f          	j	136cc <tcp_process_refused_data+0xc8>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
   136a0:	00000693          	li	a3,0
   136a4:	00090613          	mv	a2,s2
   136a8:	00050593          	mv	a1,a0
   136ac:	00000513          	li	a0,0
   136b0:	ef9ff0ef          	jal	ra,135a8 <tcp_recv_null>
   136b4:	00050493          	mv	s1,a0
   136b8:	f99ff06f          	j	13650 <tcp_process_refused_data+0x4c>
    } else if (err == ERR_ABRT) {
   136bc:	ff300793          	li	a5,-13
   136c0:	00f48663          	beq	s1,a5,136cc <tcp_process_refused_data+0xc8>
      pcb->refused_data = refused_data;
   136c4:	07242e23          	sw	s2,124(s0)
      return ERR_INPROGRESS;
   136c8:	ffb00493          	li	s1,-5
}
   136cc:	00048513          	mv	a0,s1
   136d0:	01c12083          	lw	ra,28(sp)
   136d4:	01812403          	lw	s0,24(sp)
   136d8:	01412483          	lw	s1,20(sp)
   136dc:	01012903          	lw	s2,16(sp)
   136e0:	00c12983          	lw	s3,12(sp)
   136e4:	02010113          	addi	sp,sp,32
   136e8:	00008067          	ret
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
   136ec:	ff000493          	li	s1,-16
   136f0:	fddff06f          	j	136cc <tcp_process_refused_data+0xc8>

000136f4 <tcp_fasttmr>:
{
   136f4:	ff010113          	addi	sp,sp,-16
   136f8:	00112623          	sw	ra,12(sp)
   136fc:	00812423          	sw	s0,8(sp)
   13700:	00912223          	sw	s1,4(sp)
   13704:	01212023          	sw	s2,0(sp)
  ++tcp_timer_ctr;
   13708:	9441c783          	lbu	a5,-1724(gp) # 1fb14 <tcp_timer_ctr>
   1370c:	00178793          	addi	a5,a5,1
   13710:	94f18223          	sb	a5,-1724(gp) # 1fb14 <tcp_timer_ctr>
  pcb = tcp_active_pcbs;
   13714:	000227b7          	lui	a5,0x22
   13718:	f007a403          	lw	s0,-256(a5) # 21f00 <tcp_active_pcbs>
  while (pcb != NULL) {
   1371c:	0400006f          	j	1375c <tcp_fasttmr+0x68>
        tcp_ack_now(pcb);
   13720:	0027e793          	ori	a5,a5,2
   13724:	00f41f23          	sh	a5,30(s0)
        tcp_output(pcb);
   13728:	00040513          	mv	a0,s0
   1372c:	d1cf50ef          	jal	ra,8c48 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
   13730:	01e45783          	lhu	a5,30(s0)
   13734:	ffc7f793          	andi	a5,a5,-4
   13738:	00f41f23          	sh	a5,30(s0)
   1373c:	0400006f          	j	1377c <tcp_fasttmr+0x88>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
   13740:	ff77f793          	andi	a5,a5,-9
   13744:	00f41f23          	sh	a5,30(s0)
        tcp_close_shutdown_fin(pcb);
   13748:	00040513          	mv	a0,s0
   1374c:	901fe0ef          	jal	ra,1204c <tcp_close_shutdown_fin>
   13750:	0380006f          	j	13788 <tcp_fasttmr+0x94>
      pcb = pcb->next;
   13754:	00c42483          	lw	s1,12(s0)
{
   13758:	00048413          	mv	s0,s1
  while (pcb != NULL) {
   1375c:	04040a63          	beqz	s0,137b0 <tcp_fasttmr+0xbc>
    if (pcb->last_timer != tcp_timer_ctr) {
   13760:	02244703          	lbu	a4,34(s0)
   13764:	9441c783          	lbu	a5,-1724(gp) # 1fb14 <tcp_timer_ctr>
   13768:	fef706e3          	beq	a4,a5,13754 <tcp_fasttmr+0x60>
      pcb->last_timer = tcp_timer_ctr;
   1376c:	02f40123          	sb	a5,34(s0)
      if (pcb->flags & TF_ACK_DELAY) {
   13770:	01e45783          	lhu	a5,30(s0)
   13774:	0017f713          	andi	a4,a5,1
   13778:	fa0714e3          	bnez	a4,13720 <tcp_fasttmr+0x2c>
      if (pcb->flags & TF_CLOSEPEND) {
   1377c:	01e45783          	lhu	a5,30(s0)
   13780:	0087f713          	andi	a4,a5,8
   13784:	fa071ee3          	bnez	a4,13740 <tcp_fasttmr+0x4c>
      next = pcb->next;
   13788:	00c42483          	lw	s1,12(s0)
      if (pcb->refused_data != NULL) {
   1378c:	07c42783          	lw	a5,124(s0)
   13790:	fc0784e3          	beqz	a5,13758 <tcp_fasttmr+0x64>
        tcp_active_pcbs_changed = 0;
   13794:	00022937          	lui	s2,0x22
   13798:	ee090e23          	sb	zero,-260(s2) # 21efc <tcp_active_pcbs_changed>
        tcp_process_refused_data(pcb);
   1379c:	00040513          	mv	a0,s0
   137a0:	e65ff0ef          	jal	ra,13604 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
   137a4:	efc94783          	lbu	a5,-260(s2)
   137a8:	fa0788e3          	beqz	a5,13758 <tcp_fasttmr+0x64>
   137ac:	f69ff06f          	j	13714 <tcp_fasttmr+0x20>
}
   137b0:	00c12083          	lw	ra,12(sp)
   137b4:	00812403          	lw	s0,8(sp)
   137b8:	00412483          	lw	s1,4(sp)
   137bc:	00012903          	lw	s2,0(sp)
   137c0:	01010113          	addi	sp,sp,16
   137c4:	00008067          	ret

000137c8 <tcp_shutdown>:
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
   137c8:	08050863          	beqz	a0,13858 <tcp_shutdown+0x90>
  if (pcb->state == LISTEN) {
   137cc:	01452703          	lw	a4,20(a0)
   137d0:	00100793          	li	a5,1
   137d4:	08f70663          	beq	a4,a5,13860 <tcp_shutdown+0x98>
{
   137d8:	ff010113          	addi	sp,sp,-16
   137dc:	00112623          	sw	ra,12(sp)
   137e0:	00812423          	sw	s0,8(sp)
   137e4:	00912223          	sw	s1,4(sp)
   137e8:	01212023          	sw	s2,0(sp)
   137ec:	00060913          	mv	s2,a2
   137f0:	00058493          	mv	s1,a1
   137f4:	00050413          	mv	s0,a0
  if (shut_rx) {
   137f8:	02058263          	beqz	a1,1381c <tcp_shutdown+0x54>
    tcp_set_flags(pcb, TF_RXCLOSED);
   137fc:	01e55783          	lhu	a5,30(a0)
   13800:	0107e793          	ori	a5,a5,16
   13804:	00f51f23          	sh	a5,30(a0)
    if (shut_tx) {
   13808:	04061263          	bnez	a2,1384c <tcp_shutdown+0x84>
    if (pcb->refused_data != NULL) {
   1380c:	07c52503          	lw	a0,124(a0)
   13810:	00050663          	beqz	a0,1381c <tcp_shutdown+0x54>
      pbuf_free(pcb->refused_data);
   13814:	b3cf90ef          	jal	ra,cb50 <pbuf_free>
      pcb->refused_data = NULL;
   13818:	06042e23          	sw	zero,124(s0)
  if (shut_tx) {
   1381c:	04090663          	beqz	s2,13868 <tcp_shutdown+0xa0>
    switch (pcb->state) {
   13820:	01442783          	lw	a5,20(s0)
   13824:	00300713          	li	a4,3
   13828:	04e7ee63          	bltu	a5,a4,13884 <tcp_shutdown+0xbc>
   1382c:	00400713          	li	a4,4
   13830:	00f77663          	bgeu	a4,a5,1383c <tcp_shutdown+0x74>
   13834:	00700713          	li	a4,7
   13838:	04e79a63          	bne	a5,a4,1388c <tcp_shutdown+0xc4>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
   1383c:	0ff4f593          	andi	a1,s1,255
   13840:	00040513          	mv	a0,s0
   13844:	b39ff0ef          	jal	ra,1337c <tcp_close_shutdown>
   13848:	0240006f          	j	1386c <tcp_shutdown+0xa4>
      return tcp_close_shutdown(pcb, 1);
   1384c:	00100593          	li	a1,1
   13850:	b2dff0ef          	jal	ra,1337c <tcp_close_shutdown>
   13854:	0180006f          	j	1386c <tcp_shutdown+0xa4>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
   13858:	ff000513          	li	a0,-16
   1385c:	00008067          	ret
    return ERR_CONN;
   13860:	ff500513          	li	a0,-11
}
   13864:	00008067          	ret
  return ERR_OK;
   13868:	00000513          	li	a0,0
}
   1386c:	00c12083          	lw	ra,12(sp)
   13870:	00812403          	lw	s0,8(sp)
   13874:	00412483          	lw	s1,4(sp)
   13878:	00012903          	lw	s2,0(sp)
   1387c:	01010113          	addi	sp,sp,16
   13880:	00008067          	ret
        return ERR_CONN;
   13884:	ff500513          	li	a0,-11
   13888:	fe5ff06f          	j	1386c <tcp_shutdown+0xa4>
   1388c:	ff500513          	li	a0,-11
   13890:	fddff06f          	j	1386c <tcp_shutdown+0xa4>

00013894 <tcp_slowtmr>:
{
   13894:	fe010113          	addi	sp,sp,-32
   13898:	00112e23          	sw	ra,28(sp)
   1389c:	00812c23          	sw	s0,24(sp)
   138a0:	00912a23          	sw	s1,20(sp)
   138a4:	01212823          	sw	s2,16(sp)
   138a8:	01312623          	sw	s3,12(sp)
   138ac:	01412423          	sw	s4,8(sp)
  ++tcp_ticks;
   138b0:	00022737          	lui	a4,0x22
   138b4:	f0472783          	lw	a5,-252(a4) # 21f04 <tcp_ticks>
   138b8:	00178793          	addi	a5,a5,1
   138bc:	f0f72223          	sw	a5,-252(a4)
  ++tcp_timer_ctr;
   138c0:	9441c783          	lbu	a5,-1724(gp) # 1fb14 <tcp_timer_ctr>
   138c4:	00178793          	addi	a5,a5,1
   138c8:	94f18223          	sb	a5,-1724(gp) # 1fb14 <tcp_timer_ctr>
  pcb = tcp_active_pcbs;
   138cc:	000227b7          	lui	a5,0x22
   138d0:	f007a403          	lw	s0,-256(a5) # 21f00 <tcp_active_pcbs>
  prev = NULL;
   138d4:	00000993          	li	s3,0
  while (pcb != NULL) {
   138d8:	4800006f          	j	13d58 <tcp_slowtmr+0x4c4>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
   138dc:	0001e537          	lui	a0,0x1e
   138e0:	59050513          	addi	a0,a0,1424 # 1e590 <tcp_backoff+0x390>
   138e4:	b8cfe0ef          	jal	ra,11c70 <bsp_printf>
   138e8:	47c0006f          	j	13d64 <tcp_slowtmr+0x4d0>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
   138ec:	0001e537          	lui	a0,0x1e
   138f0:	5bc50513          	addi	a0,a0,1468 # 1e5bc <tcp_backoff+0x3bc>
   138f4:	b7cfe0ef          	jal	ra,11c70 <bsp_printf>
   138f8:	4780006f          	j	13d70 <tcp_slowtmr+0x4dc>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
   138fc:	0001e537          	lui	a0,0x1e
   13900:	5e850513          	addi	a0,a0,1512 # 1e5e8 <tcp_backoff+0x3e8>
   13904:	b6cfe0ef          	jal	ra,11c70 <bsp_printf>
   13908:	4740006f          	j	13d7c <tcp_slowtmr+0x4e8>
      prev = pcb;
   1390c:	00040993          	mv	s3,s0
      pcb = pcb->next;
   13910:	00c42403          	lw	s0,12(s0)
      continue;
   13914:	4440006f          	j	13d58 <tcp_slowtmr+0x4c4>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
   13918:	04644703          	lbu	a4,70(s0)
   1391c:	00300793          	li	a5,3
   13920:	46e7fc63          	bgeu	a5,a4,13d98 <tcp_slowtmr+0x504>
      ++pcb_remove;
   13924:	00100493          	li	s1,1
   13928:	15c0006f          	j	13a84 <tcp_slowtmr+0x1f0>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
   1392c:	0001e537          	lui	a0,0x1e
   13930:	64c50513          	addi	a0,a0,1612 # 1e64c <tcp_backoff+0x44c>
   13934:	b3cfe0ef          	jal	ra,11c70 <bsp_printf>
   13938:	4900006f          	j	13dc8 <tcp_slowtmr+0x534>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
   1393c:	00040513          	mv	a0,s0
   13940:	87df40ef          	jal	ra,81bc <tcp_split_unsent_seg>
   13944:	02050263          	beqz	a0,13968 <tcp_slowtmr+0xd4>
              pcb->persist_cnt = 0;
   13948:	08040e23          	sb	zero,156(s0)
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
   1394c:	09d44783          	lbu	a5,157(s0)
   13950:	00600713          	li	a4,6
   13954:	20f76463          	bltu	a4,a5,13b5c <tcp_slowtmr+0x2c8>
                pcb->persist_backoff++;
   13958:	00178793          	addi	a5,a5,1
   1395c:	08f40ea3          	sb	a5,157(s0)
    pcb_remove = 0;
   13960:	00000493          	li	s1,0
   13964:	1200006f          	j	13a84 <tcp_slowtmr+0x1f0>
                if (tcp_output(pcb) == ERR_OK) {
   13968:	00040513          	mv	a0,s0
   1396c:	adcf50ef          	jal	ra,8c48 <tcp_output>
   13970:	fc051ce3          	bnez	a0,13948 <tcp_slowtmr+0xb4>
    pcb_remove = 0;
   13974:	00000493          	li	s1,0
   13978:	10c0006f          	j	13a84 <tcp_slowtmr+0x1f0>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
   1397c:	03441783          	lh	a5,52(s0)
   13980:	0007cc63          	bltz	a5,13998 <tcp_slowtmr+0x104>
   13984:	00008737          	lui	a4,0x8
   13988:	fff70713          	addi	a4,a4,-1 # 7fff <tcp_write+0x593>
   1398c:	00e78663          	beq	a5,a4,13998 <tcp_slowtmr+0x104>
          ++pcb->rtime;
   13990:	00178793          	addi	a5,a5,1
   13994:	02f41a23          	sh	a5,52(s0)
        if (pcb->rtime >= pcb->rto) {
   13998:	03441703          	lh	a4,52(s0)
   1399c:	04441783          	lh	a5,68(s0)
   139a0:	0ef74263          	blt	a4,a5,13a84 <tcp_slowtmr+0x1f0>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
   139a4:	00040513          	mv	a0,s0
   139a8:	de1f40ef          	jal	ra,8788 <tcp_rexmit_rto_prepare>
   139ac:	00050a63          	beqz	a0,139c0 <tcp_slowtmr+0x12c>
   139b0:	07442783          	lw	a5,116(s0)
   139b4:	0c079863          	bnez	a5,13a84 <tcp_slowtmr+0x1f0>
   139b8:	07042783          	lw	a5,112(s0)
   139bc:	0c078463          	beqz	a5,13a84 <tcp_slowtmr+0x1f0>
            if (pcb->state != SYN_SENT) {
   139c0:	01442703          	lw	a4,20(s0)
   139c4:	00200793          	li	a5,2
   139c8:	04f70c63          	beq	a4,a5,13a20 <tcp_slowtmr+0x18c>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
   139cc:	04644783          	lbu	a5,70(s0)
   139d0:	00078713          	mv	a4,a5
   139d4:	00c00693          	li	a3,12
   139d8:	00f6f463          	bgeu	a3,a5,139e0 <tcp_slowtmr+0x14c>
   139dc:	00c00713          	li	a4,12
   139e0:	0ff77693          	andi	a3,a4,255
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
   139e4:	04041783          	lh	a5,64(s0)
   139e8:	4037d793          	srai	a5,a5,0x3
   139ec:	04241703          	lh	a4,66(s0)
   139f0:	00e787b3          	add	a5,a5,a4
   139f4:	0001e737          	lui	a4,0x1e
   139f8:	1c470713          	addi	a4,a4,452 # 1e1c4 <tcp_pcb_lists>
   139fc:	00d70733          	add	a4,a4,a3
   13a00:	03c74703          	lbu	a4,60(a4)
   13a04:	00e797b3          	sll	a5,a5,a4
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
   13a08:	00008737          	lui	a4,0x8
   13a0c:	ffe70713          	addi	a4,a4,-2 # 7ffe <tcp_write+0x592>
   13a10:	06f74263          	blt	a4,a5,13a74 <tcp_slowtmr+0x1e0>
   13a14:	01079793          	slli	a5,a5,0x10
   13a18:	4107d793          	srai	a5,a5,0x10
   13a1c:	04f41223          	sh	a5,68(s0)
            pcb->rtime = 0;
   13a20:	02041a23          	sh	zero,52(s0)
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
   13a24:	06445703          	lhu	a4,100(s0)
   13a28:	04c45683          	lhu	a3,76(s0)
   13a2c:	00070793          	mv	a5,a4
   13a30:	00e6f463          	bgeu	a3,a4,13a38 <tcp_slowtmr+0x1a4>
   13a34:	00068793          	mv	a5,a3
   13a38:	01079793          	slli	a5,a5,0x10
   13a3c:	0107d793          	srli	a5,a5,0x10
            pcb->ssthresh = eff_wnd >> 1;
   13a40:	0017d793          	srli	a5,a5,0x1
   13a44:	04f41723          	sh	a5,78(s0)
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
   13a48:	03645683          	lhu	a3,54(s0)
   13a4c:	00169713          	slli	a4,a3,0x1
   13a50:	01071713          	slli	a4,a4,0x10
   13a54:	01075713          	srli	a4,a4,0x10
   13a58:	00e7f463          	bgeu	a5,a4,13a60 <tcp_slowtmr+0x1cc>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
   13a5c:	04e41723          	sh	a4,78(s0)
            pcb->cwnd = pcb->mss;
   13a60:	04d41623          	sh	a3,76(s0)
            pcb->bytes_acked = 0;
   13a64:	06041723          	sh	zero,110(s0)
            tcp_rexmit_rto_commit(pcb);
   13a68:	00040513          	mv	a0,s0
   13a6c:	ef0f50ef          	jal	ra,915c <tcp_rexmit_rto_commit>
   13a70:	0140006f          	j	13a84 <tcp_slowtmr+0x1f0>
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
   13a74:	000087b7          	lui	a5,0x8
   13a78:	fff78793          	addi	a5,a5,-1 # 7fff <tcp_write+0x593>
   13a7c:	fa1ff06f          	j	13a1c <tcp_slowtmr+0x188>
      ++pcb_remove;
   13a80:	00100493          	li	s1,1
    if (pcb->state == FIN_WAIT_2) {
   13a84:	01442783          	lw	a5,20(s0)
   13a88:	00600713          	li	a4,6
   13a8c:	0ce78c63          	beq	a5,a4,13b64 <tcp_slowtmr+0x2d0>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
   13a90:	00944903          	lbu	s2,9(s0)
   13a94:	00897913          	andi	s2,s2,8
   13a98:	00090c63          	beqz	s2,13ab0 <tcp_slowtmr+0x21c>
   13a9c:	00400713          	li	a4,4
   13aa0:	0ee78a63          	beq	a5,a4,13b94 <tcp_slowtmr+0x300>
        ((pcb->state == ESTABLISHED) ||
   13aa4:	00700713          	li	a4,7
   13aa8:	0ee78663          	beq	a5,a4,13b94 <tcp_slowtmr+0x300>
    pcb_reset = 0;
   13aac:	00000913          	li	s2,0
    if (pcb->ooseq != NULL &&
   13ab0:	07842783          	lw	a5,120(s0)
   13ab4:	02078463          	beqz	a5,13adc <tcp_slowtmr+0x248>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
   13ab8:	02442783          	lw	a5,36(s0)
   13abc:	00022737          	lui	a4,0x22
   13ac0:	f0472703          	lw	a4,-252(a4) # 21f04 <tcp_ticks>
   13ac4:	40f70733          	sub	a4,a4,a5
   13ac8:	04441683          	lh	a3,68(s0)
   13acc:	00169793          	slli	a5,a3,0x1
   13ad0:	00d787b3          	add	a5,a5,a3
   13ad4:	00179693          	slli	a3,a5,0x1
    if (pcb->ooseq != NULL &&
   13ad8:	14d77463          	bgeu	a4,a3,13c20 <tcp_slowtmr+0x38c>
    if (pcb->state == SYN_RCVD) {
   13adc:	01442783          	lw	a5,20(s0)
   13ae0:	00300713          	li	a4,3
   13ae4:	14e78463          	beq	a5,a4,13c2c <tcp_slowtmr+0x398>
    if (pcb->state == LAST_ACK) {
   13ae8:	00900713          	li	a4,9
   13aec:	16e78263          	beq	a5,a4,13c50 <tcp_slowtmr+0x3bc>
    if (pcb_remove) {
   13af0:	18049263          	bnez	s1,13c74 <tcp_slowtmr+0x3e0>
      pcb = pcb->next;
   13af4:	00c42483          	lw	s1,12(s0)
      ++prev->polltmr;
   13af8:	02044783          	lbu	a5,32(s0)
   13afc:	00178793          	addi	a5,a5,1
   13b00:	0ff7f793          	andi	a5,a5,255
   13b04:	02f40023          	sb	a5,32(s0)
      if (prev->polltmr >= prev->pollinterval) {
   13b08:	02144703          	lbu	a4,33(s0)
   13b0c:	24e7e263          	bltu	a5,a4,13d50 <tcp_slowtmr+0x4bc>
        prev->polltmr = 0;
   13b10:	02040023          	sb	zero,32(s0)
        tcp_active_pcbs_changed = 0;
   13b14:	000227b7          	lui	a5,0x22
   13b18:	ee078e23          	sb	zero,-260(a5) # 21efc <tcp_active_pcbs_changed>
        TCP_EVENT_POLL(prev, err);
   13b1c:	09042783          	lw	a5,144(s0)
   13b20:	20078a63          	beqz	a5,13d34 <tcp_slowtmr+0x4a0>
   13b24:	00040593          	mv	a1,s0
   13b28:	01042503          	lw	a0,16(s0)
   13b2c:	000780e7          	jalr	a5
        if (tcp_active_pcbs_changed) {
   13b30:	000227b7          	lui	a5,0x22
   13b34:	efc7c783          	lbu	a5,-260(a5) # 21efc <tcp_active_pcbs_changed>
   13b38:	d8079ae3          	bnez	a5,138cc <tcp_slowtmr+0x38>
        if (err == ERR_OK) {
   13b3c:	20050063          	beqz	a0,13d3c <tcp_slowtmr+0x4a8>
      prev = pcb;
   13b40:	00040993          	mv	s3,s0
      pcb = pcb->next;
   13b44:	00048413          	mv	s0,s1
   13b48:	2100006f          	j	13d58 <tcp_slowtmr+0x4c4>
          ++pcb_remove; /* max probes reached */
   13b4c:	00100493          	li	s1,1
   13b50:	f35ff06f          	j	13a84 <tcp_slowtmr+0x1f0>
    pcb_remove = 0;
   13b54:	00000493          	li	s1,0
   13b58:	f2dff06f          	j	13a84 <tcp_slowtmr+0x1f0>
   13b5c:	00000493          	li	s1,0
   13b60:	f25ff06f          	j	13a84 <tcp_slowtmr+0x1f0>
      if (pcb->flags & TF_RXCLOSED) {
   13b64:	01e45703          	lhu	a4,30(s0)
   13b68:	01077713          	andi	a4,a4,16
   13b6c:	f20702e3          	beqz	a4,13a90 <tcp_slowtmr+0x1fc>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
   13b70:	02442683          	lw	a3,36(s0)
   13b74:	00022737          	lui	a4,0x22
   13b78:	f0472703          	lw	a4,-252(a4) # 21f04 <tcp_ticks>
   13b7c:	40d70733          	sub	a4,a4,a3
   13b80:	02800693          	li	a3,40
   13b84:	f0e6f6e3          	bgeu	a3,a4,13a90 <tcp_slowtmr+0x1fc>
          ++pcb_remove;
   13b88:	00148493          	addi	s1,s1,1
   13b8c:	0ff4f493          	andi	s1,s1,255
   13b90:	f01ff06f          	j	13a90 <tcp_slowtmr+0x1fc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
   13b94:	000227b7          	lui	a5,0x22
   13b98:	f047a683          	lw	a3,-252(a5) # 21f04 <tcp_ticks>
   13b9c:	02442783          	lw	a5,36(s0)
   13ba0:	40f686b3          	sub	a3,a3,a5
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
   13ba4:	09842703          	lw	a4,152(s0)
   13ba8:	000a57b7          	lui	a5,0xa5
   13bac:	cb878793          	addi	a5,a5,-840 # a4cb8 <__freertos_irq_stack_top+0x7fd88>
   13bb0:	00f707b3          	add	a5,a4,a5
   13bb4:	1f400613          	li	a2,500
   13bb8:	02c7d7b3          	divu	a5,a5,a2
      if ((u32_t)(tcp_ticks - pcb->tmr) >
   13bbc:	00d7fa63          	bgeu	a5,a3,13bd0 <tcp_slowtmr+0x33c>
        ++pcb_remove;
   13bc0:	00148493          	addi	s1,s1,1
   13bc4:	0ff4f493          	andi	s1,s1,255
        ++pcb_reset;
   13bc8:	00100913          	li	s2,1
   13bcc:	ee5ff06f          	j	13ab0 <tcp_slowtmr+0x21c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
   13bd0:	09f44783          	lbu	a5,159(s0)
   13bd4:	00012637          	lui	a2,0x12
   13bd8:	4f860613          	addi	a2,a2,1272 # 124f8 <tcp_update_rcv_ann_wnd+0x98>
   13bdc:	02c787b3          	mul	a5,a5,a2
   13be0:	00f70733          	add	a4,a4,a5
                 / TCP_SLOW_INTERVAL) {
   13be4:	1f400793          	li	a5,500
   13be8:	02f75733          	divu	a4,a4,a5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
   13bec:	00d76663          	bltu	a4,a3,13bf8 <tcp_slowtmr+0x364>
    pcb_reset = 0;
   13bf0:	00000913          	li	s2,0
   13bf4:	ebdff06f          	j	13ab0 <tcp_slowtmr+0x21c>
        err = tcp_keepalive(pcb);
   13bf8:	00040513          	mv	a0,s0
   13bfc:	dfcf50ef          	jal	ra,91f8 <tcp_keepalive>
        if (err == ERR_OK) {
   13c00:	00051c63          	bnez	a0,13c18 <tcp_slowtmr+0x384>
          pcb->keep_cnt_sent++;
   13c04:	09f44783          	lbu	a5,159(s0)
   13c08:	00178793          	addi	a5,a5,1
   13c0c:	08f40fa3          	sb	a5,159(s0)
    pcb_reset = 0;
   13c10:	00000913          	li	s2,0
   13c14:	e9dff06f          	j	13ab0 <tcp_slowtmr+0x21c>
   13c18:	00000913          	li	s2,0
   13c1c:	e95ff06f          	j	13ab0 <tcp_slowtmr+0x21c>
      tcp_free_ooseq(pcb);
   13c20:	00040513          	mv	a0,s0
   13c24:	f3dfe0ef          	jal	ra,12b60 <tcp_free_ooseq>
   13c28:	eb5ff06f          	j	13adc <tcp_slowtmr+0x248>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
   13c2c:	02442683          	lw	a3,36(s0)
   13c30:	00022737          	lui	a4,0x22
   13c34:	f0472703          	lw	a4,-252(a4) # 21f04 <tcp_ticks>
   13c38:	40d70733          	sub	a4,a4,a3
   13c3c:	02800693          	li	a3,40
   13c40:	eae6f4e3          	bgeu	a3,a4,13ae8 <tcp_slowtmr+0x254>
        ++pcb_remove;
   13c44:	00148493          	addi	s1,s1,1
   13c48:	0ff4f493          	andi	s1,s1,255
   13c4c:	e9dff06f          	j	13ae8 <tcp_slowtmr+0x254>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
   13c50:	02442703          	lw	a4,36(s0)
   13c54:	000227b7          	lui	a5,0x22
   13c58:	f047a783          	lw	a5,-252(a5) # 21f04 <tcp_ticks>
   13c5c:	40e787b3          	sub	a5,a5,a4
   13c60:	0f000713          	li	a4,240
   13c64:	e8f776e3          	bgeu	a4,a5,13af0 <tcp_slowtmr+0x25c>
        ++pcb_remove;
   13c68:	00148493          	addi	s1,s1,1
   13c6c:	0ff4f493          	andi	s1,s1,255
   13c70:	e81ff06f          	j	13af0 <tcp_slowtmr+0x25c>
      tcp_err_fn err_fn = pcb->errf;
   13c74:	09442483          	lw	s1,148(s0)
      tcp_pcb_purge(pcb);
   13c78:	00040513          	mv	a0,s0
   13c7c:	f1dfe0ef          	jal	ra,12b98 <tcp_pcb_purge>
      if (prev != NULL) {
   13c80:	06098463          	beqz	s3,13ce8 <tcp_slowtmr+0x454>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
   13c84:	000227b7          	lui	a5,0x22
   13c88:	f007a783          	lw	a5,-256(a5) # 21f00 <tcp_active_pcbs>
   13c8c:	04878663          	beq	a5,s0,13cd8 <tcp_slowtmr+0x444>
        prev->next = pcb->next;
   13c90:	00c42783          	lw	a5,12(s0)
   13c94:	00f9a623          	sw	a5,12(s3)
      if (pcb_reset) {
   13c98:	06091c63          	bnez	s2,13d10 <tcp_slowtmr+0x47c>
      err_arg = pcb->callback_arg;
   13c9c:	01042a03          	lw	s4,16(s0)
      pcb = pcb->next;
   13ca0:	00c42903          	lw	s2,12(s0)
      tcp_free(pcb2);
   13ca4:	00040513          	mv	a0,s0
   13ca8:	a64fe0ef          	jal	ra,11f0c <tcp_free>
      tcp_active_pcbs_changed = 0;
   13cac:	000227b7          	lui	a5,0x22
   13cb0:	ee078e23          	sb	zero,-260(a5) # 21efc <tcp_active_pcbs_changed>
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
   13cb4:	00048863          	beqz	s1,13cc4 <tcp_slowtmr+0x430>
   13cb8:	ff300593          	li	a1,-13
   13cbc:	000a0513          	mv	a0,s4
   13cc0:	000480e7          	jalr	s1
      if (tcp_active_pcbs_changed) {
   13cc4:	000227b7          	lui	a5,0x22
   13cc8:	efc7c783          	lbu	a5,-260(a5) # 21efc <tcp_active_pcbs_changed>
   13ccc:	c00790e3          	bnez	a5,138cc <tcp_slowtmr+0x38>
      pcb = pcb->next;
   13cd0:	00090413          	mv	s0,s2
   13cd4:	0840006f          	j	13d58 <tcp_slowtmr+0x4c4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
   13cd8:	0001e537          	lui	a0,0x1e
   13cdc:	68450513          	addi	a0,a0,1668 # 1e684 <tcp_backoff+0x484>
   13ce0:	f91fd0ef          	jal	ra,11c70 <bsp_printf>
   13ce4:	fadff06f          	j	13c90 <tcp_slowtmr+0x3fc>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
   13ce8:	000227b7          	lui	a5,0x22
   13cec:	f007a783          	lw	a5,-256(a5) # 21f00 <tcp_active_pcbs>
   13cf0:	00878863          	beq	a5,s0,13d00 <tcp_slowtmr+0x46c>
   13cf4:	0001e537          	lui	a0,0x1e
   13cf8:	6b050513          	addi	a0,a0,1712 # 1e6b0 <tcp_backoff+0x4b0>
   13cfc:	f75fd0ef          	jal	ra,11c70 <bsp_printf>
        tcp_active_pcbs = pcb->next;
   13d00:	00c42703          	lw	a4,12(s0)
   13d04:	000227b7          	lui	a5,0x22
   13d08:	f0e7a023          	sw	a4,-256(a5) # 21f00 <tcp_active_pcbs>
   13d0c:	f8dff06f          	j	13c98 <tcp_slowtmr+0x404>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
   13d10:	01c45803          	lhu	a6,28(s0)
   13d14:	01a45783          	lhu	a5,26(s0)
   13d18:	00440713          	addi	a4,s0,4
   13d1c:	00040693          	mv	a3,s0
   13d20:	02842603          	lw	a2,40(s0)
   13d24:	05442583          	lw	a1,84(s0)
   13d28:	00040513          	mv	a0,s0
   13d2c:	d71f40ef          	jal	ra,8a9c <tcp_rst>
   13d30:	f6dff06f          	j	13c9c <tcp_slowtmr+0x408>
        TCP_EVENT_POLL(prev, err);
   13d34:	00000513          	li	a0,0
   13d38:	df9ff06f          	j	13b30 <tcp_slowtmr+0x29c>
          tcp_output(prev);
   13d3c:	00040513          	mv	a0,s0
   13d40:	f09f40ef          	jal	ra,8c48 <tcp_output>
      prev = pcb;
   13d44:	00040993          	mv	s3,s0
      pcb = pcb->next;
   13d48:	00048413          	mv	s0,s1
   13d4c:	00c0006f          	j	13d58 <tcp_slowtmr+0x4c4>
      prev = pcb;
   13d50:	00040993          	mv	s3,s0
      pcb = pcb->next;
   13d54:	00048413          	mv	s0,s1
  while (pcb != NULL) {
   13d58:	0c040263          	beqz	s0,13e1c <tcp_slowtmr+0x588>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
   13d5c:	01442783          	lw	a5,20(s0)
   13d60:	b6078ee3          	beqz	a5,138dc <tcp_slowtmr+0x48>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
   13d64:	01442703          	lw	a4,20(s0)
   13d68:	00100793          	li	a5,1
   13d6c:	b8f700e3          	beq	a4,a5,138ec <tcp_slowtmr+0x58>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
   13d70:	01442703          	lw	a4,20(s0)
   13d74:	00a00793          	li	a5,10
   13d78:	b8f702e3          	beq	a4,a5,138fc <tcp_slowtmr+0x68>
    if (pcb->last_timer == tcp_timer_ctr) {
   13d7c:	02244703          	lbu	a4,34(s0)
   13d80:	9441c783          	lbu	a5,-1724(gp) # 1fb14 <tcp_timer_ctr>
   13d84:	b8f704e3          	beq	a4,a5,1390c <tcp_slowtmr+0x78>
    pcb->last_timer = tcp_timer_ctr;
   13d88:	02f40123          	sb	a5,34(s0)
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
   13d8c:	01442703          	lw	a4,20(s0)
   13d90:	00200793          	li	a5,2
   13d94:	b8f702e3          	beq	a4,a5,13918 <tcp_slowtmr+0x84>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
   13d98:	04644703          	lbu	a4,70(s0)
   13d9c:	00700793          	li	a5,7
   13da0:	cee7e0e3          	bltu	a5,a4,13a80 <tcp_slowtmr+0x1ec>
      if (pcb->persist_backoff > 0) {
   13da4:	09d44483          	lbu	s1,157(s0)
   13da8:	bc048ae3          	beqz	s1,1397c <tcp_slowtmr+0xe8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
   13dac:	07442783          	lw	a5,116(s0)
   13db0:	00078863          	beqz	a5,13dc0 <tcp_slowtmr+0x52c>
   13db4:	0001e537          	lui	a0,0x1e
   13db8:	61850513          	addi	a0,a0,1560 # 1e618 <tcp_backoff+0x418>
   13dbc:	eb5fd0ef          	jal	ra,11c70 <bsp_printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
   13dc0:	07042783          	lw	a5,112(s0)
   13dc4:	b60784e3          	beqz	a5,1392c <tcp_slowtmr+0x98>
        if (pcb->persist_probe >= TCP_MAXRTX) {
   13dc8:	09e44703          	lbu	a4,158(s0)
   13dcc:	00700793          	li	a5,7
   13dd0:	d6e7eee3          	bltu	a5,a4,13b4c <tcp_slowtmr+0x2b8>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
   13dd4:	09d44783          	lbu	a5,157(s0)
   13dd8:	fff78713          	addi	a4,a5,-1
   13ddc:	84018793          	addi	a5,gp,-1984 # 1fa10 <tcp_persist_backoff>
   13de0:	00e787b3          	add	a5,a5,a4
   13de4:	0007c703          	lbu	a4,0(a5)
          if (pcb->persist_cnt < backoff_cnt) {
   13de8:	09c44783          	lbu	a5,156(s0)
   13dec:	00e7f663          	bgeu	a5,a4,13df8 <tcp_slowtmr+0x564>
            pcb->persist_cnt++;
   13df0:	00178793          	addi	a5,a5,1
   13df4:	08f40e23          	sb	a5,156(s0)
          if (pcb->persist_cnt >= backoff_cnt) {
   13df8:	09c44783          	lbu	a5,156(s0)
   13dfc:	d4e7ece3          	bltu	a5,a4,13b54 <tcp_slowtmr+0x2c0>
            if (pcb->snd_wnd == 0) {
   13e00:	06445583          	lhu	a1,100(s0)
   13e04:	b2059ce3          	bnez	a1,1393c <tcp_slowtmr+0xa8>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
   13e08:	00040513          	mv	a0,s0
   13e0c:	c80f50ef          	jal	ra,928c <tcp_zero_window_probe>
   13e10:	b2050ce3          	beqz	a0,13948 <tcp_slowtmr+0xb4>
    pcb_remove = 0;
   13e14:	00000493          	li	s1,0
   13e18:	c6dff06f          	j	13a84 <tcp_slowtmr+0x1f0>
  pcb = tcp_tw_pcbs;
   13e1c:	000227b7          	lui	a5,0x22
   13e20:	f107a483          	lw	s1,-240(a5) # 21f10 <tcp_tw_pcbs>
  while (pcb != NULL) {
   13e24:	0300006f          	j	13e54 <tcp_slowtmr+0x5c0>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
   13e28:	0001e537          	lui	a0,0x1e
   13e2c:	6dc50513          	addi	a0,a0,1756 # 1e6dc <tcp_backoff+0x4dc>
   13e30:	e41fd0ef          	jal	ra,11c70 <bsp_printf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
   13e34:	0244a703          	lw	a4,36(s1)
   13e38:	000227b7          	lui	a5,0x22
   13e3c:	f047a783          	lw	a5,-252(a5) # 21f04 <tcp_ticks>
   13e40:	40e787b3          	sub	a5,a5,a4
   13e44:	0f000713          	li	a4,240
   13e48:	02f76063          	bltu	a4,a5,13e68 <tcp_slowtmr+0x5d4>
      prev = pcb;
   13e4c:	00048413          	mv	s0,s1
      pcb = pcb->next;
   13e50:	00c4a483          	lw	s1,12(s1)
  while (pcb != NULL) {
   13e54:	08048063          	beqz	s1,13ed4 <tcp_slowtmr+0x640>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
   13e58:	0144a703          	lw	a4,20(s1)
   13e5c:	00a00793          	li	a5,10
   13e60:	fcf70ae3          	beq	a4,a5,13e34 <tcp_slowtmr+0x5a0>
   13e64:	fc5ff06f          	j	13e28 <tcp_slowtmr+0x594>
      tcp_pcb_purge(pcb);
   13e68:	00048513          	mv	a0,s1
   13e6c:	d2dfe0ef          	jal	ra,12b98 <tcp_pcb_purge>
      if (prev != NULL) {
   13e70:	02040e63          	beqz	s0,13eac <tcp_slowtmr+0x618>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
   13e74:	000227b7          	lui	a5,0x22
   13e78:	f107a783          	lw	a5,-240(a5) # 21f10 <tcp_tw_pcbs>
   13e7c:	02978063          	beq	a5,s1,13e9c <tcp_slowtmr+0x608>
        prev->next = pcb->next;
   13e80:	00c4a783          	lw	a5,12(s1)
   13e84:	00f42623          	sw	a5,12(s0)
      pcb = pcb->next;
   13e88:	00c4a903          	lw	s2,12(s1)
      tcp_free(pcb2);
   13e8c:	00048513          	mv	a0,s1
   13e90:	87cfe0ef          	jal	ra,11f0c <tcp_free>
      pcb = pcb->next;
   13e94:	00090493          	mv	s1,s2
   13e98:	fbdff06f          	j	13e54 <tcp_slowtmr+0x5c0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
   13e9c:	0001e537          	lui	a0,0x1e
   13ea0:	70c50513          	addi	a0,a0,1804 # 1e70c <tcp_backoff+0x50c>
   13ea4:	dcdfd0ef          	jal	ra,11c70 <bsp_printf>
   13ea8:	fd9ff06f          	j	13e80 <tcp_slowtmr+0x5ec>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
   13eac:	000227b7          	lui	a5,0x22
   13eb0:	f107a783          	lw	a5,-240(a5) # 21f10 <tcp_tw_pcbs>
   13eb4:	00978863          	beq	a5,s1,13ec4 <tcp_slowtmr+0x630>
   13eb8:	0001e537          	lui	a0,0x1e
   13ebc:	73450513          	addi	a0,a0,1844 # 1e734 <tcp_backoff+0x534>
   13ec0:	db1fd0ef          	jal	ra,11c70 <bsp_printf>
        tcp_tw_pcbs = pcb->next;
   13ec4:	00c4a703          	lw	a4,12(s1)
   13ec8:	000227b7          	lui	a5,0x22
   13ecc:	f0e7a823          	sw	a4,-240(a5) # 21f10 <tcp_tw_pcbs>
   13ed0:	fb9ff06f          	j	13e88 <tcp_slowtmr+0x5f4>
}
   13ed4:	01c12083          	lw	ra,28(sp)
   13ed8:	01812403          	lw	s0,24(sp)
   13edc:	01412483          	lw	s1,20(sp)
   13ee0:	01012903          	lw	s2,16(sp)
   13ee4:	00c12983          	lw	s3,12(sp)
   13ee8:	00812a03          	lw	s4,8(sp)
   13eec:	02010113          	addi	sp,sp,32
   13ef0:	00008067          	ret

00013ef4 <tcp_tmr>:
{
   13ef4:	ff010113          	addi	sp,sp,-16
   13ef8:	00112623          	sw	ra,12(sp)
  tcp_fasttmr();
   13efc:	ff8ff0ef          	jal	ra,136f4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
   13f00:	9451c783          	lbu	a5,-1723(gp) # 1fb15 <tcp_timer>
   13f04:	00178793          	addi	a5,a5,1
   13f08:	0ff7f793          	andi	a5,a5,255
   13f0c:	94f182a3          	sb	a5,-1723(gp) # 1fb15 <tcp_timer>
   13f10:	0017f793          	andi	a5,a5,1
   13f14:	00079863          	bnez	a5,13f24 <tcp_tmr+0x30>
}
   13f18:	00c12083          	lw	ra,12(sp)
   13f1c:	01010113          	addi	sp,sp,16
   13f20:	00008067          	ret
    tcp_slowtmr();
   13f24:	971ff0ef          	jal	ra,13894 <tcp_slowtmr>
}
   13f28:	ff1ff06f          	j	13f18 <tcp_tmr+0x24>

00013f2c <uart_writeAvailability>:
        return *((volatile u32*) address);
   13f2c:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   13f30:	01055513          	srli	a0,a0,0x10
    }
   13f34:	0ff57513          	andi	a0,a0,255
   13f38:	00008067          	ret

00013f3c <uart_write>:
    static void uart_write(u32 reg, char data){
   13f3c:	ff010113          	addi	sp,sp,-16
   13f40:	00112623          	sw	ra,12(sp)
   13f44:	00812423          	sw	s0,8(sp)
   13f48:	00912223          	sw	s1,4(sp)
   13f4c:	00050413          	mv	s0,a0
   13f50:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   13f54:	00040513          	mv	a0,s0
   13f58:	fd5ff0ef          	jal	ra,13f2c <uart_writeAvailability>
   13f5c:	fe050ce3          	beqz	a0,13f54 <uart_write+0x18>
        *((volatile u32*) address) = data;
   13f60:	00942023          	sw	s1,0(s0)
    }
   13f64:	00c12083          	lw	ra,12(sp)
   13f68:	00812403          	lw	s0,8(sp)
   13f6c:	00412483          	lw	s1,4(sp)
   13f70:	01010113          	addi	sp,sp,16
   13f74:	00008067          	ret

00013f78 <bsp_printHex>:
    {
   13f78:	ff010113          	addi	sp,sp,-16
   13f7c:	00112623          	sw	ra,12(sp)
   13f80:	00812423          	sw	s0,8(sp)
   13f84:	00912223          	sw	s1,4(sp)
   13f88:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   13f8c:	01c00413          	li	s0,28
   13f90:	0280006f          	j	13fb8 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   13f94:	0084d7b3          	srl	a5,s1,s0
   13f98:	00f7f713          	andi	a4,a5,15
   13f9c:	0001c7b7          	lui	a5,0x1c
   13fa0:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   13fa4:	00e787b3          	add	a5,a5,a4
   13fa8:	0007c583          	lbu	a1,0(a5)
   13fac:	f8010537          	lui	a0,0xf8010
   13fb0:	f8dff0ef          	jal	ra,13f3c <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   13fb4:	ffc40413          	addi	s0,s0,-4
   13fb8:	fc045ee3          	bgez	s0,13f94 <bsp_printHex+0x1c>
    }
   13fbc:	00c12083          	lw	ra,12(sp)
   13fc0:	00812403          	lw	s0,8(sp)
   13fc4:	00412483          	lw	s1,4(sp)
   13fc8:	01010113          	addi	sp,sp,16
   13fcc:	00008067          	ret

00013fd0 <bsp_printHex_lower>:
        {
   13fd0:	ff010113          	addi	sp,sp,-16
   13fd4:	00112623          	sw	ra,12(sp)
   13fd8:	00812423          	sw	s0,8(sp)
   13fdc:	00912223          	sw	s1,4(sp)
   13fe0:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   13fe4:	01c00413          	li	s0,28
   13fe8:	0280006f          	j	14010 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   13fec:	0084d7b3          	srl	a5,s1,s0
   13ff0:	00f7f713          	andi	a4,a5,15
   13ff4:	0001c7b7          	lui	a5,0x1c
   13ff8:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   13ffc:	00e787b3          	add	a5,a5,a4
   14000:	0007c583          	lbu	a1,0(a5)
   14004:	f8010537          	lui	a0,0xf8010
   14008:	f35ff0ef          	jal	ra,13f3c <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   1400c:	ffc40413          	addi	s0,s0,-4
   14010:	fc045ee3          	bgez	s0,13fec <bsp_printHex_lower+0x1c>
        }
   14014:	00c12083          	lw	ra,12(sp)
   14018:	00812403          	lw	s0,8(sp)
   1401c:	00412483          	lw	s1,4(sp)
   14020:	01010113          	addi	sp,sp,16
   14024:	00008067          	ret

00014028 <bsp_printf_c>:
    {
   14028:	ff010113          	addi	sp,sp,-16
   1402c:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   14030:	0ff57593          	andi	a1,a0,255
   14034:	f8010537          	lui	a0,0xf8010
   14038:	f05ff0ef          	jal	ra,13f3c <uart_write>
    }
   1403c:	00c12083          	lw	ra,12(sp)
   14040:	01010113          	addi	sp,sp,16
   14044:	00008067          	ret

00014048 <bsp_printf_s>:
    {
   14048:	ff010113          	addi	sp,sp,-16
   1404c:	00112623          	sw	ra,12(sp)
   14050:	00812423          	sw	s0,8(sp)
   14054:	00050413          	mv	s0,a0
        while (*p)
   14058:	00044583          	lbu	a1,0(s0)
   1405c:	00058a63          	beqz	a1,14070 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   14060:	00140413          	addi	s0,s0,1
   14064:	f8010537          	lui	a0,0xf8010
   14068:	ed5ff0ef          	jal	ra,13f3c <uart_write>
   1406c:	fedff06f          	j	14058 <bsp_printf_s+0x10>
    }
   14070:	00c12083          	lw	ra,12(sp)
   14074:	00812403          	lw	s0,8(sp)
   14078:	01010113          	addi	sp,sp,16
   1407c:	00008067          	ret

00014080 <bsp_printf_d>:
    {
   14080:	fd010113          	addi	sp,sp,-48
   14084:	02112623          	sw	ra,44(sp)
   14088:	02812423          	sw	s0,40(sp)
   1408c:	02912223          	sw	s1,36(sp)
   14090:	00050493          	mv	s1,a0
        if (val < 0) {
   14094:	00054663          	bltz	a0,140a0 <bsp_printf_d+0x20>
    {
   14098:	00010413          	mv	s0,sp
   1409c:	02c0006f          	j	140c8 <bsp_printf_d+0x48>
            bsp_printf_c('-');
   140a0:	02d00513          	li	a0,45
   140a4:	f85ff0ef          	jal	ra,14028 <bsp_printf_c>
            val = -val;
   140a8:	409004b3          	neg	s1,s1
   140ac:	fedff06f          	j	14098 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   140b0:	00a00713          	li	a4,10
   140b4:	02e4e7b3          	rem	a5,s1,a4
   140b8:	03078793          	addi	a5,a5,48
   140bc:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   140c0:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   140c4:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   140c8:	fe0494e3          	bnez	s1,140b0 <bsp_printf_d+0x30>
   140cc:	00010793          	mv	a5,sp
   140d0:	fef400e3          	beq	s0,a5,140b0 <bsp_printf_d+0x30>
   140d4:	0100006f          	j	140e4 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   140d8:	fff40413          	addi	s0,s0,-1
   140dc:	00044503          	lbu	a0,0(s0)
   140e0:	f49ff0ef          	jal	ra,14028 <bsp_printf_c>
        while (p != buffer)
   140e4:	00010793          	mv	a5,sp
   140e8:	fef418e3          	bne	s0,a5,140d8 <bsp_printf_d+0x58>
    }
   140ec:	02c12083          	lw	ra,44(sp)
   140f0:	02812403          	lw	s0,40(sp)
   140f4:	02412483          	lw	s1,36(sp)
   140f8:	03010113          	addi	sp,sp,48
   140fc:	00008067          	ret

00014100 <bsp_printf_x>:
    {
   14100:	ff010113          	addi	sp,sp,-16
   14104:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   14108:	00000713          	li	a4,0
   1410c:	00700793          	li	a5,7
   14110:	02e7c063          	blt	a5,a4,14130 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   14114:	00271693          	slli	a3,a4,0x2
   14118:	ff000793          	li	a5,-16
   1411c:	00d797b3          	sll	a5,a5,a3
   14120:	00f577b3          	and	a5,a0,a5
   14124:	00078663          	beqz	a5,14130 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   14128:	00170713          	addi	a4,a4,1
   1412c:	fe1ff06f          	j	1410c <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   14130:	ea1ff0ef          	jal	ra,13fd0 <bsp_printHex_lower>
    }
   14134:	00c12083          	lw	ra,12(sp)
   14138:	01010113          	addi	sp,sp,16
   1413c:	00008067          	ret

00014140 <bsp_printf_X>:
        {
   14140:	ff010113          	addi	sp,sp,-16
   14144:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   14148:	00000713          	li	a4,0
   1414c:	00700793          	li	a5,7
   14150:	02e7c063          	blt	a5,a4,14170 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   14154:	00271693          	slli	a3,a4,0x2
   14158:	ff000793          	li	a5,-16
   1415c:	00d797b3          	sll	a5,a5,a3
   14160:	00f577b3          	and	a5,a0,a5
   14164:	00078663          	beqz	a5,14170 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   14168:	00170713          	addi	a4,a4,1
   1416c:	fe1ff06f          	j	1414c <bsp_printf_X+0xc>
            bsp_printHex(val);
   14170:	e09ff0ef          	jal	ra,13f78 <bsp_printHex>
        }
   14174:	00c12083          	lw	ra,12(sp)
   14178:	01010113          	addi	sp,sp,16
   1417c:	00008067          	ret

00014180 <bsp_printf>:
    {
   14180:	fc010113          	addi	sp,sp,-64
   14184:	00112e23          	sw	ra,28(sp)
   14188:	00812c23          	sw	s0,24(sp)
   1418c:	00912a23          	sw	s1,20(sp)
   14190:	00050493          	mv	s1,a0
   14194:	02b12223          	sw	a1,36(sp)
   14198:	02c12423          	sw	a2,40(sp)
   1419c:	02d12623          	sw	a3,44(sp)
   141a0:	02e12823          	sw	a4,48(sp)
   141a4:	02f12a23          	sw	a5,52(sp)
   141a8:	03012c23          	sw	a6,56(sp)
   141ac:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   141b0:	02410793          	addi	a5,sp,36
   141b4:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   141b8:	00000413          	li	s0,0
   141bc:	01c0006f          	j	141d8 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   141c0:	00c12783          	lw	a5,12(sp)
   141c4:	00478713          	addi	a4,a5,4
   141c8:	00e12623          	sw	a4,12(sp)
   141cc:	0007a503          	lw	a0,0(a5)
   141d0:	e59ff0ef          	jal	ra,14028 <bsp_printf_c>
        for (i = 0; format[i]; i++)
   141d4:	00140413          	addi	s0,s0,1
   141d8:	008487b3          	add	a5,s1,s0
   141dc:	0007c503          	lbu	a0,0(a5)
   141e0:	0c050263          	beqz	a0,142a4 <bsp_printf+0x124>
            if (format[i] == '%') {
   141e4:	02500793          	li	a5,37
   141e8:	06f50663          	beq	a0,a5,14254 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   141ec:	e3dff0ef          	jal	ra,14028 <bsp_printf_c>
   141f0:	fe5ff06f          	j	141d4 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   141f4:	00c12783          	lw	a5,12(sp)
   141f8:	00478713          	addi	a4,a5,4
   141fc:	00e12623          	sw	a4,12(sp)
   14200:	0007a503          	lw	a0,0(a5)
   14204:	e45ff0ef          	jal	ra,14048 <bsp_printf_s>
                        break;
   14208:	fcdff06f          	j	141d4 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   1420c:	00c12783          	lw	a5,12(sp)
   14210:	00478713          	addi	a4,a5,4
   14214:	00e12623          	sw	a4,12(sp)
   14218:	0007a503          	lw	a0,0(a5)
   1421c:	e65ff0ef          	jal	ra,14080 <bsp_printf_d>
                        break;
   14220:	fb5ff06f          	j	141d4 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   14224:	00c12783          	lw	a5,12(sp)
   14228:	00478713          	addi	a4,a5,4
   1422c:	00e12623          	sw	a4,12(sp)
   14230:	0007a503          	lw	a0,0(a5)
   14234:	f0dff0ef          	jal	ra,14140 <bsp_printf_X>
                        break;
   14238:	f9dff06f          	j	141d4 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   1423c:	00c12783          	lw	a5,12(sp)
   14240:	00478713          	addi	a4,a5,4
   14244:	00e12623          	sw	a4,12(sp)
   14248:	0007a503          	lw	a0,0(a5)
   1424c:	eb5ff0ef          	jal	ra,14100 <bsp_printf_x>
                        break;
   14250:	f85ff06f          	j	141d4 <bsp_printf+0x54>
                while (format[++i]) {
   14254:	00140413          	addi	s0,s0,1
   14258:	008487b3          	add	a5,s1,s0
   1425c:	0007c783          	lbu	a5,0(a5)
   14260:	f6078ae3          	beqz	a5,141d4 <bsp_printf+0x54>
                    if (format[i] == 'c') {
   14264:	06300713          	li	a4,99
   14268:	f4e78ce3          	beq	a5,a4,141c0 <bsp_printf+0x40>
                    else if (format[i] == 's') {
   1426c:	07300713          	li	a4,115
   14270:	f8e782e3          	beq	a5,a4,141f4 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   14274:	06400713          	li	a4,100
   14278:	f8e78ae3          	beq	a5,a4,1420c <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   1427c:	05800713          	li	a4,88
   14280:	fae782e3          	beq	a5,a4,14224 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   14284:	07800713          	li	a4,120
   14288:	fae78ae3          	beq	a5,a4,1423c <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   1428c:	06600713          	li	a4,102
   14290:	fce792e3          	bne	a5,a4,14254 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   14294:	0001c537          	lui	a0,0x1c
   14298:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   1429c:	dadff0ef          	jal	ra,14048 <bsp_printf_s>
                        break;
   142a0:	f35ff06f          	j	141d4 <bsp_printf+0x54>
    }
   142a4:	01c12083          	lw	ra,28(sp)
   142a8:	01812403          	lw	s0,24(sp)
   142ac:	01412483          	lw	s1,20(sp)
   142b0:	04010113          	addi	sp,sp,64
   142b4:	00008067          	ret

000142b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
   142b8:	ff010113          	addi	sp,sp,-16
   142bc:	00112623          	sw	ra,12(sp)
   142c0:	00812423          	sw	s0,8(sp)
   142c4:	00912223          	sw	s1,4(sp)
   142c8:	00050493          	mv	s1,a0
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
   142cc:	00455503          	lhu	a0,4(a0)
   142d0:	00350513          	addi	a0,a0,3
   142d4:	01051513          	slli	a0,a0,0x10
   142d8:	01055513          	srli	a0,a0,0x10
   142dc:	ffc57513          	andi	a0,a0,-4
   142e0:	494010ef          	jal	ra,15774 <mem_malloc>
   142e4:	00050413          	mv	s0,a0
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
   142e8:	04050c63          	beqz	a0,14340 <do_memp_malloc_pool+0x88>
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
   142ec:	00357793          	andi	a5,a0,3
   142f0:	04079063          	bnez	a5,14330 <do_memp_malloc_pool+0x78>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
   142f4:	0004a703          	lw	a4,0(s1)
   142f8:	00475783          	lhu	a5,4(a4)
   142fc:	00178793          	addi	a5,a5,1
   14300:	00f71223          	sh	a5,4(a4)
    if (desc->stats->used > desc->stats->max) {
   14304:	0004a783          	lw	a5,0(s1)
   14308:	0047d703          	lhu	a4,4(a5)
   1430c:	0067d683          	lhu	a3,6(a5)
   14310:	00e6f463          	bgeu	a3,a4,14318 <do_memp_malloc_pool+0x60>
      desc->stats->max = desc->stats->used;
   14314:	00e79323          	sh	a4,6(a5)
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
   14318:	00040513          	mv	a0,s0
   1431c:	00c12083          	lw	ra,12(sp)
   14320:	00812403          	lw	s0,8(sp)
   14324:	00412483          	lw	s1,4(sp)
   14328:	01010113          	addi	sp,sp,16
   1432c:	00008067          	ret
    LWIP_ASSERT("memp_malloc: memp properly aligned",
   14330:	0001e537          	lui	a0,0x1e
   14334:	7f450513          	addi	a0,a0,2036 # 1e7f4 <memp_pools+0x30>
   14338:	e49ff0ef          	jal	ra,14180 <bsp_printf>
   1433c:	fb9ff06f          	j	142f4 <do_memp_malloc_pool+0x3c>
    desc->stats->err++;
   14340:	0004a703          	lw	a4,0(s1)
   14344:	00075783          	lhu	a5,0(a4)
   14348:	00178793          	addi	a5,a5,1
   1434c:	00f71023          	sh	a5,0(a4)
  return NULL;
   14350:	fc9ff06f          	j	14318 <do_memp_malloc_pool+0x60>

00014354 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
   14354:	ff010113          	addi	sp,sp,-16
   14358:	00112623          	sw	ra,12(sp)
   1435c:	00812423          	sw	s0,8(sp)
   14360:	00912223          	sw	s1,4(sp)
   14364:	00050493          	mv	s1,a0
   14368:	00058413          	mv	s0,a1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
   1436c:	0035f793          	andi	a5,a1,3
   14370:	02079863          	bnez	a5,143a0 <do_memp_free_pool+0x4c>
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
   14374:	0004a703          	lw	a4,0(s1)
   14378:	00475783          	lhu	a5,4(a4)
   1437c:	fff78793          	addi	a5,a5,-1
   14380:	00f71223          	sh	a5,4(a4)
#endif

#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
   14384:	00040513          	mv	a0,s0
   14388:	024010ef          	jal	ra,153ac <mem_free>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
   1438c:	00c12083          	lw	ra,12(sp)
   14390:	00812403          	lw	s0,8(sp)
   14394:	00412483          	lw	s1,4(sp)
   14398:	01010113          	addi	sp,sp,16
   1439c:	00008067          	ret
  LWIP_ASSERT("memp_free: mem properly aligned",
   143a0:	0001f537          	lui	a0,0x1f
   143a4:	81850513          	addi	a0,a0,-2024 # 1e818 <memp_pools+0x54>
   143a8:	dd9ff0ef          	jal	ra,14180 <bsp_printf>
   143ac:	fc9ff06f          	j	14374 <do_memp_free_pool+0x20>

000143b0 <memp_init_pool>:
}
   143b0:	00008067          	ret

000143b4 <memp_init>:
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
   143b4:	00000793          	li	a5,0
   143b8:	00b00713          	li	a4,11
   143bc:	04f76263          	bltu	a4,a5,14400 <memp_init+0x4c>
    memp_init_pool(memp_pools[i]);
   143c0:	00279693          	slli	a3,a5,0x2
   143c4:	0001e737          	lui	a4,0x1e
   143c8:	7c470713          	addi	a4,a4,1988 # 1e7c4 <memp_pools>
   143cc:	00d70733          	add	a4,a4,a3
   143d0:	00072703          	lw	a4,0(a4)
    lwip_stats.memp[i] = memp_pools[i]->stats;
   143d4:	00072603          	lw	a2,0(a4)
   143d8:	00022737          	lui	a4,0x22
   143dc:	03478693          	addi	a3,a5,52
   143e0:	00269693          	slli	a3,a3,0x2
   143e4:	dc070713          	addi	a4,a4,-576 # 21dc0 <lwip_stats>
   143e8:	00d70733          	add	a4,a4,a3
   143ec:	00c72023          	sw	a2,0(a4)
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
   143f0:	00178793          	addi	a5,a5,1
   143f4:	01079793          	slli	a5,a5,0x10
   143f8:	0107d793          	srli	a5,a5,0x10
   143fc:	fbdff06f          	j	143b8 <memp_init+0x4>
}
   14400:	00008067          	ret

00014404 <memp_malloc_pool>:
{
   14404:	ff010113          	addi	sp,sp,-16
   14408:	00112623          	sw	ra,12(sp)
   1440c:	00812423          	sw	s0,8(sp)
   14410:	00050413          	mv	s0,a0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
   14414:	02050063          	beqz	a0,14434 <memp_malloc_pool+0x30>
  if (desc == NULL) {
   14418:	02040663          	beqz	s0,14444 <memp_malloc_pool+0x40>
  return do_memp_malloc_pool(desc);
   1441c:	00040513          	mv	a0,s0
   14420:	e99ff0ef          	jal	ra,142b8 <do_memp_malloc_pool>
}
   14424:	00c12083          	lw	ra,12(sp)
   14428:	00812403          	lw	s0,8(sp)
   1442c:	01010113          	addi	sp,sp,16
   14430:	00008067          	ret
  LWIP_ASSERT("invalid pool desc", desc != NULL);
   14434:	0001f537          	lui	a0,0x1f
   14438:	83850513          	addi	a0,a0,-1992 # 1e838 <memp_pools+0x74>
   1443c:	d45ff0ef          	jal	ra,14180 <bsp_printf>
   14440:	fd9ff06f          	j	14418 <memp_malloc_pool+0x14>
    return NULL;
   14444:	00040513          	mv	a0,s0
   14448:	fddff06f          	j	14424 <memp_malloc_pool+0x20>

0001444c <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
   1444c:	00b00793          	li	a5,11
   14450:	02a7e863          	bltu	a5,a0,14480 <memp_malloc+0x34>
{
   14454:	ff010113          	addi	sp,sp,-16
   14458:	00112623          	sw	ra,12(sp)
  memp = do_memp_malloc_pool(memp_pools[type]);
   1445c:	00251513          	slli	a0,a0,0x2
   14460:	0001e7b7          	lui	a5,0x1e
   14464:	7c478793          	addi	a5,a5,1988 # 1e7c4 <memp_pools>
   14468:	00a78533          	add	a0,a5,a0
   1446c:	00052503          	lw	a0,0(a0)
   14470:	e49ff0ef          	jal	ra,142b8 <do_memp_malloc_pool>
}
   14474:	00c12083          	lw	ra,12(sp)
   14478:	01010113          	addi	sp,sp,16
   1447c:	00008067          	ret
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
   14480:	00000513          	li	a0,0
}
   14484:	00008067          	ret

00014488 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
   14488:	ff010113          	addi	sp,sp,-16
   1448c:	00112623          	sw	ra,12(sp)
   14490:	00812423          	sw	s0,8(sp)
   14494:	00912223          	sw	s1,4(sp)
   14498:	00050413          	mv	s0,a0
   1449c:	00058493          	mv	s1,a1
  LWIP_ASSERT("invalid pool desc", desc != NULL);
   144a0:	02050663          	beqz	a0,144cc <memp_free_pool+0x44>
  if ((desc == NULL) || (mem == NULL)) {
   144a4:	00040a63          	beqz	s0,144b8 <memp_free_pool+0x30>
   144a8:	00048863          	beqz	s1,144b8 <memp_free_pool+0x30>
    return;
  }

  do_memp_free_pool(desc, mem);
   144ac:	00048593          	mv	a1,s1
   144b0:	00040513          	mv	a0,s0
   144b4:	ea1ff0ef          	jal	ra,14354 <do_memp_free_pool>
}
   144b8:	00c12083          	lw	ra,12(sp)
   144bc:	00812403          	lw	s0,8(sp)
   144c0:	00412483          	lw	s1,4(sp)
   144c4:	01010113          	addi	sp,sp,16
   144c8:	00008067          	ret
  LWIP_ASSERT("invalid pool desc", desc != NULL);
   144cc:	0001f537          	lui	a0,0x1f
   144d0:	83850513          	addi	a0,a0,-1992 # 1e838 <memp_pools+0x74>
   144d4:	cadff0ef          	jal	ra,14180 <bsp_printf>
   144d8:	fcdff06f          	j	144a4 <memp_free_pool+0x1c>

000144dc <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
   144dc:	00b00793          	li	a5,11
   144e0:	02a7ea63          	bltu	a5,a0,14514 <memp_free+0x38>

  if (mem == NULL) {
   144e4:	02058863          	beqz	a1,14514 <memp_free+0x38>
{
   144e8:	ff010113          	addi	sp,sp,-16
   144ec:	00112623          	sw	ra,12(sp)

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
   144f0:	00251513          	slli	a0,a0,0x2
   144f4:	0001e7b7          	lui	a5,0x1e
   144f8:	7c478793          	addi	a5,a5,1988 # 1e7c4 <memp_pools>
   144fc:	00a78533          	add	a0,a5,a0
   14500:	00052503          	lw	a0,0(a0)
   14504:	e51ff0ef          	jal	ra,14354 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
   14508:	00c12083          	lw	ra,12(sp)
   1450c:	01010113          	addi	sp,sp,16
   14510:	00008067          	ret
   14514:	00008067          	ret

00014518 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
   14518:	ff010113          	addi	sp,sp,-16
   1451c:	00112623          	sw	ra,12(sp)
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
   14520:	b11f60ef          	jal	ra,b030 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
   14524:	615000ef          	jal	ra,15338 <mem_init>
  memp_init();
   14528:	e8dff0ef          	jal	ra,143b4 <memp_init>
  pbuf_init();
  netif_init();
   1452c:	e11f70ef          	jal	ra,c33c <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
   14530:	9a5fd0ef          	jal	ra,11ed4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
   14534:	2e8030ef          	jal	ra,1781c <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
   14538:	a50fd0ef          	jal	ra,11788 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
   1453c:	00c12083          	lw	ra,12(sp)
   14540:	01010113          	addi	sp,sp,16
   14544:	00008067          	ret

00014548 <uart_writeAvailability>:
        return *((volatile u32*) address);
   14548:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   1454c:	01055513          	srli	a0,a0,0x10
    }
   14550:	0ff57513          	andi	a0,a0,255
   14554:	00008067          	ret

00014558 <uart_write>:
    static void uart_write(u32 reg, char data){
   14558:	ff010113          	addi	sp,sp,-16
   1455c:	00112623          	sw	ra,12(sp)
   14560:	00812423          	sw	s0,8(sp)
   14564:	00912223          	sw	s1,4(sp)
   14568:	00050413          	mv	s0,a0
   1456c:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   14570:	00040513          	mv	a0,s0
   14574:	fd5ff0ef          	jal	ra,14548 <uart_writeAvailability>
   14578:	fe050ce3          	beqz	a0,14570 <uart_write+0x18>
        *((volatile u32*) address) = data;
   1457c:	00942023          	sw	s1,0(s0)
    }
   14580:	00c12083          	lw	ra,12(sp)
   14584:	00812403          	lw	s0,8(sp)
   14588:	00412483          	lw	s1,4(sp)
   1458c:	01010113          	addi	sp,sp,16
   14590:	00008067          	ret

00014594 <bsp_printHex>:
    {
   14594:	ff010113          	addi	sp,sp,-16
   14598:	00112623          	sw	ra,12(sp)
   1459c:	00812423          	sw	s0,8(sp)
   145a0:	00912223          	sw	s1,4(sp)
   145a4:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   145a8:	01c00413          	li	s0,28
   145ac:	0280006f          	j	145d4 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   145b0:	0084d7b3          	srl	a5,s1,s0
   145b4:	00f7f713          	andi	a4,a5,15
   145b8:	0001c7b7          	lui	a5,0x1c
   145bc:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   145c0:	00e787b3          	add	a5,a5,a4
   145c4:	0007c583          	lbu	a1,0(a5)
   145c8:	f8010537          	lui	a0,0xf8010
   145cc:	f8dff0ef          	jal	ra,14558 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   145d0:	ffc40413          	addi	s0,s0,-4
   145d4:	fc045ee3          	bgez	s0,145b0 <bsp_printHex+0x1c>
    }
   145d8:	00c12083          	lw	ra,12(sp)
   145dc:	00812403          	lw	s0,8(sp)
   145e0:	00412483          	lw	s1,4(sp)
   145e4:	01010113          	addi	sp,sp,16
   145e8:	00008067          	ret

000145ec <bsp_printHex_lower>:
        {
   145ec:	ff010113          	addi	sp,sp,-16
   145f0:	00112623          	sw	ra,12(sp)
   145f4:	00812423          	sw	s0,8(sp)
   145f8:	00912223          	sw	s1,4(sp)
   145fc:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   14600:	01c00413          	li	s0,28
   14604:	0280006f          	j	1462c <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   14608:	0084d7b3          	srl	a5,s1,s0
   1460c:	00f7f713          	andi	a4,a5,15
   14610:	0001c7b7          	lui	a5,0x1c
   14614:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   14618:	00e787b3          	add	a5,a5,a4
   1461c:	0007c583          	lbu	a1,0(a5)
   14620:	f8010537          	lui	a0,0xf8010
   14624:	f35ff0ef          	jal	ra,14558 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   14628:	ffc40413          	addi	s0,s0,-4
   1462c:	fc045ee3          	bgez	s0,14608 <bsp_printHex_lower+0x1c>
        }
   14630:	00c12083          	lw	ra,12(sp)
   14634:	00812403          	lw	s0,8(sp)
   14638:	00412483          	lw	s1,4(sp)
   1463c:	01010113          	addi	sp,sp,16
   14640:	00008067          	ret

00014644 <bsp_printf_c>:
    {
   14644:	ff010113          	addi	sp,sp,-16
   14648:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   1464c:	0ff57593          	andi	a1,a0,255
   14650:	f8010537          	lui	a0,0xf8010
   14654:	f05ff0ef          	jal	ra,14558 <uart_write>
    }
   14658:	00c12083          	lw	ra,12(sp)
   1465c:	01010113          	addi	sp,sp,16
   14660:	00008067          	ret

00014664 <bsp_printf_s>:
    {
   14664:	ff010113          	addi	sp,sp,-16
   14668:	00112623          	sw	ra,12(sp)
   1466c:	00812423          	sw	s0,8(sp)
   14670:	00050413          	mv	s0,a0
        while (*p)
   14674:	00044583          	lbu	a1,0(s0)
   14678:	00058a63          	beqz	a1,1468c <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   1467c:	00140413          	addi	s0,s0,1
   14680:	f8010537          	lui	a0,0xf8010
   14684:	ed5ff0ef          	jal	ra,14558 <uart_write>
   14688:	fedff06f          	j	14674 <bsp_printf_s+0x10>
    }
   1468c:	00c12083          	lw	ra,12(sp)
   14690:	00812403          	lw	s0,8(sp)
   14694:	01010113          	addi	sp,sp,16
   14698:	00008067          	ret

0001469c <bsp_printf_d>:
    {
   1469c:	fd010113          	addi	sp,sp,-48
   146a0:	02112623          	sw	ra,44(sp)
   146a4:	02812423          	sw	s0,40(sp)
   146a8:	02912223          	sw	s1,36(sp)
   146ac:	00050493          	mv	s1,a0
        if (val < 0) {
   146b0:	00054663          	bltz	a0,146bc <bsp_printf_d+0x20>
    {
   146b4:	00010413          	mv	s0,sp
   146b8:	02c0006f          	j	146e4 <bsp_printf_d+0x48>
            bsp_printf_c('-');
   146bc:	02d00513          	li	a0,45
   146c0:	f85ff0ef          	jal	ra,14644 <bsp_printf_c>
            val = -val;
   146c4:	409004b3          	neg	s1,s1
   146c8:	fedff06f          	j	146b4 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   146cc:	00a00713          	li	a4,10
   146d0:	02e4e7b3          	rem	a5,s1,a4
   146d4:	03078793          	addi	a5,a5,48
   146d8:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   146dc:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   146e0:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   146e4:	fe0494e3          	bnez	s1,146cc <bsp_printf_d+0x30>
   146e8:	00010793          	mv	a5,sp
   146ec:	fef400e3          	beq	s0,a5,146cc <bsp_printf_d+0x30>
   146f0:	0100006f          	j	14700 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   146f4:	fff40413          	addi	s0,s0,-1
   146f8:	00044503          	lbu	a0,0(s0)
   146fc:	f49ff0ef          	jal	ra,14644 <bsp_printf_c>
        while (p != buffer)
   14700:	00010793          	mv	a5,sp
   14704:	fef418e3          	bne	s0,a5,146f4 <bsp_printf_d+0x58>
    }
   14708:	02c12083          	lw	ra,44(sp)
   1470c:	02812403          	lw	s0,40(sp)
   14710:	02412483          	lw	s1,36(sp)
   14714:	03010113          	addi	sp,sp,48
   14718:	00008067          	ret

0001471c <bsp_printf_x>:
    {
   1471c:	ff010113          	addi	sp,sp,-16
   14720:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   14724:	00000713          	li	a4,0
   14728:	00700793          	li	a5,7
   1472c:	02e7c063          	blt	a5,a4,1474c <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   14730:	00271693          	slli	a3,a4,0x2
   14734:	ff000793          	li	a5,-16
   14738:	00d797b3          	sll	a5,a5,a3
   1473c:	00f577b3          	and	a5,a0,a5
   14740:	00078663          	beqz	a5,1474c <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   14744:	00170713          	addi	a4,a4,1
   14748:	fe1ff06f          	j	14728 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   1474c:	ea1ff0ef          	jal	ra,145ec <bsp_printHex_lower>
    }
   14750:	00c12083          	lw	ra,12(sp)
   14754:	01010113          	addi	sp,sp,16
   14758:	00008067          	ret

0001475c <bsp_printf_X>:
        {
   1475c:	ff010113          	addi	sp,sp,-16
   14760:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   14764:	00000713          	li	a4,0
   14768:	00700793          	li	a5,7
   1476c:	02e7c063          	blt	a5,a4,1478c <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   14770:	00271693          	slli	a3,a4,0x2
   14774:	ff000793          	li	a5,-16
   14778:	00d797b3          	sll	a5,a5,a3
   1477c:	00f577b3          	and	a5,a0,a5
   14780:	00078663          	beqz	a5,1478c <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   14784:	00170713          	addi	a4,a4,1
   14788:	fe1ff06f          	j	14768 <bsp_printf_X+0xc>
            bsp_printHex(val);
   1478c:	e09ff0ef          	jal	ra,14594 <bsp_printHex>
        }
   14790:	00c12083          	lw	ra,12(sp)
   14794:	01010113          	addi	sp,sp,16
   14798:	00008067          	ret

0001479c <bsp_printf>:
    {
   1479c:	fc010113          	addi	sp,sp,-64
   147a0:	00112e23          	sw	ra,28(sp)
   147a4:	00812c23          	sw	s0,24(sp)
   147a8:	00912a23          	sw	s1,20(sp)
   147ac:	00050493          	mv	s1,a0
   147b0:	02b12223          	sw	a1,36(sp)
   147b4:	02c12423          	sw	a2,40(sp)
   147b8:	02d12623          	sw	a3,44(sp)
   147bc:	02e12823          	sw	a4,48(sp)
   147c0:	02f12a23          	sw	a5,52(sp)
   147c4:	03012c23          	sw	a6,56(sp)
   147c8:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   147cc:	02410793          	addi	a5,sp,36
   147d0:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   147d4:	00000413          	li	s0,0
   147d8:	01c0006f          	j	147f4 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   147dc:	00c12783          	lw	a5,12(sp)
   147e0:	00478713          	addi	a4,a5,4
   147e4:	00e12623          	sw	a4,12(sp)
   147e8:	0007a503          	lw	a0,0(a5)
   147ec:	e59ff0ef          	jal	ra,14644 <bsp_printf_c>
        for (i = 0; format[i]; i++)
   147f0:	00140413          	addi	s0,s0,1
   147f4:	008487b3          	add	a5,s1,s0
   147f8:	0007c503          	lbu	a0,0(a5)
   147fc:	0c050263          	beqz	a0,148c0 <bsp_printf+0x124>
            if (format[i] == '%') {
   14800:	02500793          	li	a5,37
   14804:	06f50663          	beq	a0,a5,14870 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   14808:	e3dff0ef          	jal	ra,14644 <bsp_printf_c>
   1480c:	fe5ff06f          	j	147f0 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   14810:	00c12783          	lw	a5,12(sp)
   14814:	00478713          	addi	a4,a5,4
   14818:	00e12623          	sw	a4,12(sp)
   1481c:	0007a503          	lw	a0,0(a5)
   14820:	e45ff0ef          	jal	ra,14664 <bsp_printf_s>
                        break;
   14824:	fcdff06f          	j	147f0 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   14828:	00c12783          	lw	a5,12(sp)
   1482c:	00478713          	addi	a4,a5,4
   14830:	00e12623          	sw	a4,12(sp)
   14834:	0007a503          	lw	a0,0(a5)
   14838:	e65ff0ef          	jal	ra,1469c <bsp_printf_d>
                        break;
   1483c:	fb5ff06f          	j	147f0 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   14840:	00c12783          	lw	a5,12(sp)
   14844:	00478713          	addi	a4,a5,4
   14848:	00e12623          	sw	a4,12(sp)
   1484c:	0007a503          	lw	a0,0(a5)
   14850:	f0dff0ef          	jal	ra,1475c <bsp_printf_X>
                        break;
   14854:	f9dff06f          	j	147f0 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   14858:	00c12783          	lw	a5,12(sp)
   1485c:	00478713          	addi	a4,a5,4
   14860:	00e12623          	sw	a4,12(sp)
   14864:	0007a503          	lw	a0,0(a5)
   14868:	eb5ff0ef          	jal	ra,1471c <bsp_printf_x>
                        break;
   1486c:	f85ff06f          	j	147f0 <bsp_printf+0x54>
                while (format[++i]) {
   14870:	00140413          	addi	s0,s0,1
   14874:	008487b3          	add	a5,s1,s0
   14878:	0007c783          	lbu	a5,0(a5)
   1487c:	f6078ae3          	beqz	a5,147f0 <bsp_printf+0x54>
                    if (format[i] == 'c') {
   14880:	06300713          	li	a4,99
   14884:	f4e78ce3          	beq	a5,a4,147dc <bsp_printf+0x40>
                    else if (format[i] == 's') {
   14888:	07300713          	li	a4,115
   1488c:	f8e782e3          	beq	a5,a4,14810 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   14890:	06400713          	li	a4,100
   14894:	f8e78ae3          	beq	a5,a4,14828 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   14898:	05800713          	li	a4,88
   1489c:	fae782e3          	beq	a5,a4,14840 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   148a0:	07800713          	li	a4,120
   148a4:	fae78ae3          	beq	a5,a4,14858 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   148a8:	06600713          	li	a4,102
   148ac:	fce792e3          	bne	a5,a4,14870 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   148b0:	0001c537          	lui	a0,0x1c
   148b4:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   148b8:	dadff0ef          	jal	ra,14664 <bsp_printf_s>
                        break;
   148bc:	f35ff06f          	j	147f0 <bsp_printf+0x54>
    }
   148c0:	01c12083          	lw	ra,28(sp)
   148c4:	01812403          	lw	s0,24(sp)
   148c8:	01412483          	lw	s1,20(sp)
   148cc:	04010113          	addi	sp,sp,64
   148d0:	00008067          	ret

000148d4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
   148d4:	ff010113          	addi	sp,sp,-16
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
   148d8:	00011723          	sh	zero,14(sp)
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
   148dc:	00157613          	andi	a2,a0,1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
   148e0:	00060c63          	beqz	a2,148f8 <lwip_standard_chksum+0x24>
   148e4:	00b05a63          	blez	a1,148f8 <lwip_standard_chksum+0x24>
    ((u8_t *)&t)[1] = *pb++;
   148e8:	00054783          	lbu	a5,0(a0)
   148ec:	00f107a3          	sb	a5,15(sp)
    len--;
   148f0:	fff58593          	addi	a1,a1,-1
    ((u8_t *)&t)[1] = *pb++;
   148f4:	00150513          	addi	a0,a0,1
  u32_t sum = 0;
   148f8:	00000793          	li	a5,0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
   148fc:	00100713          	li	a4,1
   14900:	00b75c63          	bge	a4,a1,14918 <lwip_standard_chksum+0x44>
    sum += *ps++;
   14904:	00055703          	lhu	a4,0(a0)
   14908:	00e787b3          	add	a5,a5,a4
    len -= 2;
   1490c:	ffe58593          	addi	a1,a1,-2
    sum += *ps++;
   14910:	00250513          	addi	a0,a0,2
   14914:	fe9ff06f          	j	148fc <lwip_standard_chksum+0x28>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
   14918:	00b05663          	blez	a1,14924 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
   1491c:	00054703          	lbu	a4,0(a0)
   14920:	00e10723          	sb	a4,14(sp)
  }

  /* Add end bytes */
  sum += t;
   14924:	00e15703          	lhu	a4,14(sp)
   14928:	00f707b3          	add	a5,a4,a5

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
   1492c:	0107d713          	srli	a4,a5,0x10
   14930:	000106b7          	lui	a3,0x10
   14934:	fff68693          	addi	a3,a3,-1 # ffff <tcp_input+0x183>
   14938:	00d7f7b3          	and	a5,a5,a3
   1493c:	00f707b3          	add	a5,a4,a5
  sum = FOLD_U32T(sum);
   14940:	0107d513          	srli	a0,a5,0x10
   14944:	00d7f7b3          	and	a5,a5,a3
   14948:	00f50533          	add	a0,a0,a5

  /* Swap if alignment was odd */
  if (odd) {
   1494c:	00060c63          	beqz	a2,14964 <lwip_standard_chksum+0x90>
    sum = SWAP_BYTES_IN_WORD(sum);
   14950:	00851793          	slli	a5,a0,0x8
   14954:	00d7f7b3          	and	a5,a5,a3
   14958:	00855513          	srli	a0,a0,0x8
   1495c:	0ff57513          	andi	a0,a0,255
   14960:	00a7e533          	or	a0,a5,a0
  }

  return (u16_t)sum;
}
   14964:	01051513          	slli	a0,a0,0x10
   14968:	01055513          	srli	a0,a0,0x10
   1496c:	01010113          	addi	sp,sp,16
   14970:	00008067          	ret

00014974 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
   14974:	fe010113          	addi	sp,sp,-32
   14978:	00112e23          	sw	ra,28(sp)
   1497c:	00812c23          	sw	s0,24(sp)
   14980:	00912a23          	sw	s1,20(sp)
   14984:	01212823          	sw	s2,16(sp)
   14988:	01312623          	sw	s3,12(sp)
   1498c:	01412423          	sw	s4,8(sp)
   14990:	00050493          	mv	s1,a0
   14994:	00058a13          	mv	s4,a1
   14998:	00060993          	mv	s3,a2
   1499c:	00068413          	mv	s0,a3
  struct pbuf *q;
  int swapped = 0;
   149a0:	00000913          	li	s2,0

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
   149a4:	0080006f          	j	149ac <inet_cksum_pseudo_base+0x38>
   149a8:	0004a483          	lw	s1,0(s1)
   149ac:	04048a63          	beqz	s1,14a00 <inet_cksum_pseudo_base+0x8c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
   149b0:	00a4d583          	lhu	a1,10(s1)
   149b4:	0044a503          	lw	a0,4(s1)
   149b8:	f1dff0ef          	jal	ra,148d4 <lwip_standard_chksum>
   149bc:	00850433          	add	s0,a0,s0
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
   149c0:	01045793          	srli	a5,s0,0x10
   149c4:	01041413          	slli	s0,s0,0x10
   149c8:	01045413          	srli	s0,s0,0x10
   149cc:	00878433          	add	s0,a5,s0
    if (q->len % 2 != 0) {
   149d0:	00a4d783          	lhu	a5,10(s1)
   149d4:	0017f793          	andi	a5,a5,1
   149d8:	fc0788e3          	beqz	a5,149a8 <inet_cksum_pseudo_base+0x34>
      swapped = !swapped;
   149dc:	00194913          	xori	s2,s2,1
      acc = SWAP_BYTES_IN_WORD(acc);
   149e0:	00841793          	slli	a5,s0,0x8
   149e4:	00010737          	lui	a4,0x10
   149e8:	fff70713          	addi	a4,a4,-1 # ffff <tcp_input+0x183>
   149ec:	00e7f7b3          	and	a5,a5,a4
   149f0:	00845413          	srli	s0,s0,0x8
   149f4:	0ff47413          	andi	s0,s0,255
   149f8:	0087e433          	or	s0,a5,s0
   149fc:	fadff06f          	j	149a8 <inet_cksum_pseudo_base+0x34>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
   14a00:	02090063          	beqz	s2,14a20 <inet_cksum_pseudo_base+0xac>
    acc = SWAP_BYTES_IN_WORD(acc);
   14a04:	00841793          	slli	a5,s0,0x8
   14a08:	00010737          	lui	a4,0x10
   14a0c:	fff70713          	addi	a4,a4,-1 # ffff <tcp_input+0x183>
   14a10:	00e7f7b3          	and	a5,a5,a4
   14a14:	00845413          	srli	s0,s0,0x8
   14a18:	0ff47413          	andi	s0,s0,255
   14a1c:	0087e433          	or	s0,a5,s0
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
   14a20:	000a0513          	mv	a0,s4
   14a24:	a55f50ef          	jal	ra,a478 <lwip_htons>
   14a28:	00a40433          	add	s0,s0,a0
  acc += (u32_t)lwip_htons(proto_len);
   14a2c:	00098513          	mv	a0,s3
   14a30:	a49f50ef          	jal	ra,a478 <lwip_htons>
   14a34:	00a40533          	add	a0,s0,a0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
   14a38:	01055793          	srli	a5,a0,0x10
   14a3c:	00010737          	lui	a4,0x10
   14a40:	fff70713          	addi	a4,a4,-1 # ffff <tcp_input+0x183>
   14a44:	00e57533          	and	a0,a0,a4
   14a48:	00a78533          	add	a0,a5,a0
  acc = FOLD_U32T(acc);
   14a4c:	01055793          	srli	a5,a0,0x10
   14a50:	00e57533          	and	a0,a0,a4
   14a54:	00a78533          	add	a0,a5,a0
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
   14a58:	fff54513          	not	a0,a0
}
   14a5c:	01051513          	slli	a0,a0,0x10
   14a60:	01055513          	srli	a0,a0,0x10
   14a64:	01c12083          	lw	ra,28(sp)
   14a68:	01812403          	lw	s0,24(sp)
   14a6c:	01412483          	lw	s1,20(sp)
   14a70:	01012903          	lw	s2,16(sp)
   14a74:	00c12983          	lw	s3,12(sp)
   14a78:	00812a03          	lw	s4,8(sp)
   14a7c:	02010113          	addi	sp,sp,32
   14a80:	00008067          	ret

00014a84 <inet_cksum_pseudo_partial_base>:

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
                               u16_t chksum_len, u32_t acc)
{
   14a84:	fe010113          	addi	sp,sp,-32
   14a88:	00112e23          	sw	ra,28(sp)
   14a8c:	00812c23          	sw	s0,24(sp)
   14a90:	00912a23          	sw	s1,20(sp)
   14a94:	01212823          	sw	s2,16(sp)
   14a98:	01312623          	sw	s3,12(sp)
   14a9c:	01412423          	sw	s4,8(sp)
   14aa0:	01512223          	sw	s5,4(sp)
   14aa4:	01612023          	sw	s6,0(sp)
   14aa8:	00050913          	mv	s2,a0
   14aac:	00058b13          	mv	s6,a1
   14ab0:	00060a93          	mv	s5,a2
   14ab4:	00068993          	mv	s3,a3
   14ab8:	00070413          	mv	s0,a4
  struct pbuf *q;
  int swapped = 0;
   14abc:	00000a13          	li	s4,0
  u16_t chklen;

  /* iterate through all pbuf in chain */
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
   14ac0:	0180006f          	j	14ad8 <inet_cksum_pseudo_partial_base+0x54>
    if (chklen > chksum_len) {
      chklen = chksum_len;
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
    chksum_len = (u16_t)(chksum_len - chklen);
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
   14ac4:	0001f537          	lui	a0,0x1f
   14ac8:	84c50513          	addi	a0,a0,-1972 # 1e84c <memp_pools+0x88>
   14acc:	cd1ff0ef          	jal	ra,1479c <bsp_printf>
   14ad0:	0440006f          	j	14b14 <inet_cksum_pseudo_partial_base+0x90>
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
   14ad4:	00092903          	lw	s2,0(s2)
   14ad8:	06090e63          	beqz	s2,14b54 <inet_cksum_pseudo_partial_base+0xd0>
   14adc:	06098c63          	beqz	s3,14b54 <inet_cksum_pseudo_partial_base+0xd0>
    chklen = q->len;
   14ae0:	00a95483          	lhu	s1,10(s2)
    if (chklen > chksum_len) {
   14ae4:	0099f463          	bgeu	s3,s1,14aec <inet_cksum_pseudo_partial_base+0x68>
      chklen = chksum_len;
   14ae8:	00098493          	mv	s1,s3
    acc += LWIP_CHKSUM(q->payload, chklen);
   14aec:	00048593          	mv	a1,s1
   14af0:	00492503          	lw	a0,4(s2)
   14af4:	de1ff0ef          	jal	ra,148d4 <lwip_standard_chksum>
   14af8:	00850433          	add	s0,a0,s0
    chksum_len = (u16_t)(chksum_len - chklen);
   14afc:	409984b3          	sub	s1,s3,s1
   14b00:	01049993          	slli	s3,s1,0x10
   14b04:	0109d993          	srli	s3,s3,0x10
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
   14b08:	000087b7          	lui	a5,0x8
   14b0c:	ffe78793          	addi	a5,a5,-2 # 7ffe <tcp_write+0x592>
   14b10:	fb37eae3          	bltu	a5,s3,14ac4 <inet_cksum_pseudo_partial_base+0x40>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
   14b14:	01045513          	srli	a0,s0,0x10
   14b18:	01041413          	slli	s0,s0,0x10
   14b1c:	01045413          	srli	s0,s0,0x10
   14b20:	00850433          	add	s0,a0,s0
    if (q->len % 2 != 0) {
   14b24:	00a95783          	lhu	a5,10(s2)
   14b28:	0017f793          	andi	a5,a5,1
   14b2c:	fa0784e3          	beqz	a5,14ad4 <inet_cksum_pseudo_partial_base+0x50>
      swapped = !swapped;
   14b30:	001a4a13          	xori	s4,s4,1
      acc = SWAP_BYTES_IN_WORD(acc);
   14b34:	00841793          	slli	a5,s0,0x8
   14b38:	00010737          	lui	a4,0x10
   14b3c:	fff70713          	addi	a4,a4,-1 # ffff <tcp_input+0x183>
   14b40:	00e7f7b3          	and	a5,a5,a4
   14b44:	00845413          	srli	s0,s0,0x8
   14b48:	0ff47413          	andi	s0,s0,255
   14b4c:	0087e433          	or	s0,a5,s0
   14b50:	f85ff06f          	j	14ad4 <inet_cksum_pseudo_partial_base+0x50>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
   14b54:	020a0063          	beqz	s4,14b74 <inet_cksum_pseudo_partial_base+0xf0>
    acc = SWAP_BYTES_IN_WORD(acc);
   14b58:	00841793          	slli	a5,s0,0x8
   14b5c:	00010737          	lui	a4,0x10
   14b60:	fff70713          	addi	a4,a4,-1 # ffff <tcp_input+0x183>
   14b64:	00e7f7b3          	and	a5,a5,a4
   14b68:	00845413          	srli	s0,s0,0x8
   14b6c:	0ff47413          	andi	s0,s0,255
   14b70:	0087e433          	or	s0,a5,s0
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
   14b74:	000b0513          	mv	a0,s6
   14b78:	901f50ef          	jal	ra,a478 <lwip_htons>
   14b7c:	00a40433          	add	s0,s0,a0
  acc += (u32_t)lwip_htons(proto_len);
   14b80:	000a8513          	mv	a0,s5
   14b84:	8f5f50ef          	jal	ra,a478 <lwip_htons>
   14b88:	00a40533          	add	a0,s0,a0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
   14b8c:	01055793          	srli	a5,a0,0x10
   14b90:	00010737          	lui	a4,0x10
   14b94:	fff70713          	addi	a4,a4,-1 # ffff <tcp_input+0x183>
   14b98:	00e57533          	and	a0,a0,a4
   14b9c:	00a78533          	add	a0,a5,a0
  acc = FOLD_U32T(acc);
   14ba0:	01055793          	srli	a5,a0,0x10
   14ba4:	00e57533          	and	a0,a0,a4
   14ba8:	00a78533          	add	a0,a5,a0
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
   14bac:	fff54513          	not	a0,a0
}
   14bb0:	01051513          	slli	a0,a0,0x10
   14bb4:	01055513          	srli	a0,a0,0x10
   14bb8:	01c12083          	lw	ra,28(sp)
   14bbc:	01812403          	lw	s0,24(sp)
   14bc0:	01412483          	lw	s1,20(sp)
   14bc4:	01012903          	lw	s2,16(sp)
   14bc8:	00c12983          	lw	s3,12(sp)
   14bcc:	00812a03          	lw	s4,8(sp)
   14bd0:	00412a83          	lw	s5,4(sp)
   14bd4:	00012b03          	lw	s6,0(sp)
   14bd8:	02010113          	addi	sp,sp,32
   14bdc:	00008067          	ret

00014be0 <inet_chksum_pseudo>:
{
   14be0:	ff010113          	addi	sp,sp,-16
   14be4:	00112623          	sw	ra,12(sp)
  addr = ip4_addr_get_u32(src);
   14be8:	0006a683          	lw	a3,0(a3)
  acc = (addr & 0xffffUL);
   14bec:	000107b7          	lui	a5,0x10
   14bf0:	fff78813          	addi	a6,a5,-1 # ffff <tcp_input+0x183>
   14bf4:	0106f7b3          	and	a5,a3,a6
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
   14bf8:	0106d693          	srli	a3,a3,0x10
   14bfc:	00f686b3          	add	a3,a3,a5
  addr = ip4_addr_get_u32(dest);
   14c00:	00072703          	lw	a4,0(a4)
  acc = (u32_t)(acc + (addr & 0xffffUL));
   14c04:	010777b3          	and	a5,a4,a6
   14c08:	00d786b3          	add	a3,a5,a3
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
   14c0c:	01075713          	srli	a4,a4,0x10
   14c10:	00d707b3          	add	a5,a4,a3
  acc = FOLD_U32T(acc);
   14c14:	0107d693          	srli	a3,a5,0x10
   14c18:	0107f7b3          	and	a5,a5,a6
   14c1c:	00f687b3          	add	a5,a3,a5
  acc = FOLD_U32T(acc);
   14c20:	0107d693          	srli	a3,a5,0x10
   14c24:	0107f7b3          	and	a5,a5,a6
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
   14c28:	00f686b3          	add	a3,a3,a5
   14c2c:	d49ff0ef          	jal	ra,14974 <inet_cksum_pseudo_base>
}
   14c30:	00c12083          	lw	ra,12(sp)
   14c34:	01010113          	addi	sp,sp,16
   14c38:	00008067          	ret

00014c3c <ip_chksum_pseudo>:
{
   14c3c:	ff010113          	addi	sp,sp,-16
   14c40:	00112623          	sw	ra,12(sp)
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
   14c44:	f9dff0ef          	jal	ra,14be0 <inet_chksum_pseudo>
}
   14c48:	00c12083          	lw	ra,12(sp)
   14c4c:	01010113          	addi	sp,sp,16
   14c50:	00008067          	ret

00014c54 <inet_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
                           u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
{
   14c54:	ff010113          	addi	sp,sp,-16
   14c58:	00112623          	sw	ra,12(sp)
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
   14c5c:	00072703          	lw	a4,0(a4)
  acc = (addr & 0xffffUL);
   14c60:	000108b7          	lui	a7,0x10
   14c64:	fff88893          	addi	a7,a7,-1 # ffff <tcp_input+0x183>
   14c68:	01177833          	and	a6,a4,a7
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
   14c6c:	01075713          	srli	a4,a4,0x10
   14c70:	01070733          	add	a4,a4,a6
  addr = ip4_addr_get_u32(dest);
   14c74:	0007a803          	lw	a6,0(a5)
  acc = (u32_t)(acc + (addr & 0xffffUL));
   14c78:	011877b3          	and	a5,a6,a7
   14c7c:	00e78733          	add	a4,a5,a4
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
   14c80:	01085813          	srli	a6,a6,0x10
   14c84:	00e807b3          	add	a5,a6,a4
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
   14c88:	0107d713          	srli	a4,a5,0x10
   14c8c:	0117f7b3          	and	a5,a5,a7
   14c90:	00f707b3          	add	a5,a4,a5
  acc = FOLD_U32T(acc);
   14c94:	0107d713          	srli	a4,a5,0x10
   14c98:	0117f7b3          	and	a5,a5,a7

  return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
   14c9c:	00f70733          	add	a4,a4,a5
   14ca0:	de5ff0ef          	jal	ra,14a84 <inet_cksum_pseudo_partial_base>
}
   14ca4:	00c12083          	lw	ra,12(sp)
   14ca8:	01010113          	addi	sp,sp,16
   14cac:	00008067          	ret

00014cb0 <ip_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
                         u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
{
   14cb0:	ff010113          	addi	sp,sp,-16
   14cb4:	00112623          	sw	ra,12(sp)
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
   14cb8:	f9dff0ef          	jal	ra,14c54 <inet_chksum_pseudo_partial>
  }
#endif /* LWIP_IPV4 */
}
   14cbc:	00c12083          	lw	ra,12(sp)
   14cc0:	01010113          	addi	sp,sp,16
   14cc4:	00008067          	ret

00014cc8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
   14cc8:	ff010113          	addi	sp,sp,-16
   14ccc:	00112623          	sw	ra,12(sp)
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
   14cd0:	c05ff0ef          	jal	ra,148d4 <lwip_standard_chksum>
   14cd4:	fff54513          	not	a0,a0
}
   14cd8:	01051513          	slli	a0,a0,0x10
   14cdc:	01055513          	srli	a0,a0,0x10
   14ce0:	00c12083          	lw	ra,12(sp)
   14ce4:	01010113          	addi	sp,sp,16
   14ce8:	00008067          	ret

00014cec <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
   14cec:	ff010113          	addi	sp,sp,-16
   14cf0:	00112623          	sw	ra,12(sp)
   14cf4:	00812423          	sw	s0,8(sp)
   14cf8:	00912223          	sw	s1,4(sp)
   14cfc:	01212023          	sw	s2,0(sp)
   14d00:	00050493          	mv	s1,a0
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
   14d04:	00000913          	li	s2,0

  acc = 0;
   14d08:	00000413          	li	s0,0
  for (q = p; q != NULL; q = q->next) {
   14d0c:	0080006f          	j	14d14 <inet_chksum_pbuf+0x28>
   14d10:	0004a483          	lw	s1,0(s1)
   14d14:	04048a63          	beqz	s1,14d68 <inet_chksum_pbuf+0x7c>
    acc += LWIP_CHKSUM(q->payload, q->len);
   14d18:	00a4d583          	lhu	a1,10(s1)
   14d1c:	0044a503          	lw	a0,4(s1)
   14d20:	bb5ff0ef          	jal	ra,148d4 <lwip_standard_chksum>
   14d24:	00850433          	add	s0,a0,s0
    acc = FOLD_U32T(acc);
   14d28:	01045793          	srli	a5,s0,0x10
   14d2c:	01041413          	slli	s0,s0,0x10
   14d30:	01045413          	srli	s0,s0,0x10
   14d34:	00878433          	add	s0,a5,s0
    if (q->len % 2 != 0) {
   14d38:	00a4d783          	lhu	a5,10(s1)
   14d3c:	0017f793          	andi	a5,a5,1
   14d40:	fc0788e3          	beqz	a5,14d10 <inet_chksum_pbuf+0x24>
      swapped = !swapped;
   14d44:	00194913          	xori	s2,s2,1
      acc = SWAP_BYTES_IN_WORD(acc);
   14d48:	00841793          	slli	a5,s0,0x8
   14d4c:	00010737          	lui	a4,0x10
   14d50:	fff70713          	addi	a4,a4,-1 # ffff <tcp_input+0x183>
   14d54:	00e7f7b3          	and	a5,a5,a4
   14d58:	00845413          	srli	s0,s0,0x8
   14d5c:	0ff47413          	andi	s0,s0,255
   14d60:	0087e433          	or	s0,a5,s0
   14d64:	fadff06f          	j	14d10 <inet_chksum_pbuf+0x24>
    }
  }

  if (swapped) {
   14d68:	02090063          	beqz	s2,14d88 <inet_chksum_pbuf+0x9c>
    acc = SWAP_BYTES_IN_WORD(acc);
   14d6c:	00841793          	slli	a5,s0,0x8
   14d70:	00010737          	lui	a4,0x10
   14d74:	fff70713          	addi	a4,a4,-1 # ffff <tcp_input+0x183>
   14d78:	00e7f7b3          	and	a5,a5,a4
   14d7c:	00845413          	srli	s0,s0,0x8
   14d80:	0ff47413          	andi	s0,s0,255
   14d84:	0087e433          	or	s0,a5,s0
  }
  return (u16_t)~(acc & 0xffffUL);
   14d88:	fff44513          	not	a0,s0
}
   14d8c:	01051513          	slli	a0,a0,0x10
   14d90:	01055513          	srli	a0,a0,0x10
   14d94:	00c12083          	lw	ra,12(sp)
   14d98:	00812403          	lw	s0,8(sp)
   14d9c:	00412483          	lw	s1,4(sp)
   14da0:	00012903          	lw	s2,0(sp)
   14da4:	01010113          	addi	sp,sp,16
   14da8:	00008067          	ret

00014dac <uart_writeAvailability>:
        return *((volatile u32*) address);
   14dac:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   14db0:	01055513          	srli	a0,a0,0x10
    }
   14db4:	0ff57513          	andi	a0,a0,255
   14db8:	00008067          	ret

00014dbc <uart_write>:
    static void uart_write(u32 reg, char data){
   14dbc:	ff010113          	addi	sp,sp,-16
   14dc0:	00112623          	sw	ra,12(sp)
   14dc4:	00812423          	sw	s0,8(sp)
   14dc8:	00912223          	sw	s1,4(sp)
   14dcc:	00050413          	mv	s0,a0
   14dd0:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   14dd4:	00040513          	mv	a0,s0
   14dd8:	fd5ff0ef          	jal	ra,14dac <uart_writeAvailability>
   14ddc:	fe050ce3          	beqz	a0,14dd4 <uart_write+0x18>
        *((volatile u32*) address) = data;
   14de0:	00942023          	sw	s1,0(s0)
    }
   14de4:	00c12083          	lw	ra,12(sp)
   14de8:	00812403          	lw	s0,8(sp)
   14dec:	00412483          	lw	s1,4(sp)
   14df0:	01010113          	addi	sp,sp,16
   14df4:	00008067          	ret

00014df8 <bsp_printHex>:
    {
   14df8:	ff010113          	addi	sp,sp,-16
   14dfc:	00112623          	sw	ra,12(sp)
   14e00:	00812423          	sw	s0,8(sp)
   14e04:	00912223          	sw	s1,4(sp)
   14e08:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   14e0c:	01c00413          	li	s0,28
   14e10:	0280006f          	j	14e38 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   14e14:	0084d7b3          	srl	a5,s1,s0
   14e18:	00f7f713          	andi	a4,a5,15
   14e1c:	0001c7b7          	lui	a5,0x1c
   14e20:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   14e24:	00e787b3          	add	a5,a5,a4
   14e28:	0007c583          	lbu	a1,0(a5)
   14e2c:	f8010537          	lui	a0,0xf8010
   14e30:	f8dff0ef          	jal	ra,14dbc <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   14e34:	ffc40413          	addi	s0,s0,-4
   14e38:	fc045ee3          	bgez	s0,14e14 <bsp_printHex+0x1c>
    }
   14e3c:	00c12083          	lw	ra,12(sp)
   14e40:	00812403          	lw	s0,8(sp)
   14e44:	00412483          	lw	s1,4(sp)
   14e48:	01010113          	addi	sp,sp,16
   14e4c:	00008067          	ret

00014e50 <bsp_printHex_lower>:
        {
   14e50:	ff010113          	addi	sp,sp,-16
   14e54:	00112623          	sw	ra,12(sp)
   14e58:	00812423          	sw	s0,8(sp)
   14e5c:	00912223          	sw	s1,4(sp)
   14e60:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   14e64:	01c00413          	li	s0,28
   14e68:	0280006f          	j	14e90 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   14e6c:	0084d7b3          	srl	a5,s1,s0
   14e70:	00f7f713          	andi	a4,a5,15
   14e74:	0001c7b7          	lui	a5,0x1c
   14e78:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   14e7c:	00e787b3          	add	a5,a5,a4
   14e80:	0007c583          	lbu	a1,0(a5)
   14e84:	f8010537          	lui	a0,0xf8010
   14e88:	f35ff0ef          	jal	ra,14dbc <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   14e8c:	ffc40413          	addi	s0,s0,-4
   14e90:	fc045ee3          	bgez	s0,14e6c <bsp_printHex_lower+0x1c>
        }
   14e94:	00c12083          	lw	ra,12(sp)
   14e98:	00812403          	lw	s0,8(sp)
   14e9c:	00412483          	lw	s1,4(sp)
   14ea0:	01010113          	addi	sp,sp,16
   14ea4:	00008067          	ret

00014ea8 <bsp_printf_c>:
    {
   14ea8:	ff010113          	addi	sp,sp,-16
   14eac:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   14eb0:	0ff57593          	andi	a1,a0,255
   14eb4:	f8010537          	lui	a0,0xf8010
   14eb8:	f05ff0ef          	jal	ra,14dbc <uart_write>
    }
   14ebc:	00c12083          	lw	ra,12(sp)
   14ec0:	01010113          	addi	sp,sp,16
   14ec4:	00008067          	ret

00014ec8 <bsp_printf_s>:
    {
   14ec8:	ff010113          	addi	sp,sp,-16
   14ecc:	00112623          	sw	ra,12(sp)
   14ed0:	00812423          	sw	s0,8(sp)
   14ed4:	00050413          	mv	s0,a0
        while (*p)
   14ed8:	00044583          	lbu	a1,0(s0)
   14edc:	00058a63          	beqz	a1,14ef0 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   14ee0:	00140413          	addi	s0,s0,1
   14ee4:	f8010537          	lui	a0,0xf8010
   14ee8:	ed5ff0ef          	jal	ra,14dbc <uart_write>
   14eec:	fedff06f          	j	14ed8 <bsp_printf_s+0x10>
    }
   14ef0:	00c12083          	lw	ra,12(sp)
   14ef4:	00812403          	lw	s0,8(sp)
   14ef8:	01010113          	addi	sp,sp,16
   14efc:	00008067          	ret

00014f00 <bsp_printf_d>:
    {
   14f00:	fd010113          	addi	sp,sp,-48
   14f04:	02112623          	sw	ra,44(sp)
   14f08:	02812423          	sw	s0,40(sp)
   14f0c:	02912223          	sw	s1,36(sp)
   14f10:	00050493          	mv	s1,a0
        if (val < 0) {
   14f14:	00054663          	bltz	a0,14f20 <bsp_printf_d+0x20>
    {
   14f18:	00010413          	mv	s0,sp
   14f1c:	02c0006f          	j	14f48 <bsp_printf_d+0x48>
            bsp_printf_c('-');
   14f20:	02d00513          	li	a0,45
   14f24:	f85ff0ef          	jal	ra,14ea8 <bsp_printf_c>
            val = -val;
   14f28:	409004b3          	neg	s1,s1
   14f2c:	fedff06f          	j	14f18 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   14f30:	00a00713          	li	a4,10
   14f34:	02e4e7b3          	rem	a5,s1,a4
   14f38:	03078793          	addi	a5,a5,48
   14f3c:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   14f40:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   14f44:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   14f48:	fe0494e3          	bnez	s1,14f30 <bsp_printf_d+0x30>
   14f4c:	00010793          	mv	a5,sp
   14f50:	fef400e3          	beq	s0,a5,14f30 <bsp_printf_d+0x30>
   14f54:	0100006f          	j	14f64 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   14f58:	fff40413          	addi	s0,s0,-1
   14f5c:	00044503          	lbu	a0,0(s0)
   14f60:	f49ff0ef          	jal	ra,14ea8 <bsp_printf_c>
        while (p != buffer)
   14f64:	00010793          	mv	a5,sp
   14f68:	fef418e3          	bne	s0,a5,14f58 <bsp_printf_d+0x58>
    }
   14f6c:	02c12083          	lw	ra,44(sp)
   14f70:	02812403          	lw	s0,40(sp)
   14f74:	02412483          	lw	s1,36(sp)
   14f78:	03010113          	addi	sp,sp,48
   14f7c:	00008067          	ret

00014f80 <bsp_printf_x>:
    {
   14f80:	ff010113          	addi	sp,sp,-16
   14f84:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   14f88:	00000713          	li	a4,0
   14f8c:	00700793          	li	a5,7
   14f90:	02e7c063          	blt	a5,a4,14fb0 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   14f94:	00271693          	slli	a3,a4,0x2
   14f98:	ff000793          	li	a5,-16
   14f9c:	00d797b3          	sll	a5,a5,a3
   14fa0:	00f577b3          	and	a5,a0,a5
   14fa4:	00078663          	beqz	a5,14fb0 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   14fa8:	00170713          	addi	a4,a4,1
   14fac:	fe1ff06f          	j	14f8c <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   14fb0:	ea1ff0ef          	jal	ra,14e50 <bsp_printHex_lower>
    }
   14fb4:	00c12083          	lw	ra,12(sp)
   14fb8:	01010113          	addi	sp,sp,16
   14fbc:	00008067          	ret

00014fc0 <bsp_printf_X>:
        {
   14fc0:	ff010113          	addi	sp,sp,-16
   14fc4:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   14fc8:	00000713          	li	a4,0
   14fcc:	00700793          	li	a5,7
   14fd0:	02e7c063          	blt	a5,a4,14ff0 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   14fd4:	00271693          	slli	a3,a4,0x2
   14fd8:	ff000793          	li	a5,-16
   14fdc:	00d797b3          	sll	a5,a5,a3
   14fe0:	00f577b3          	and	a5,a0,a5
   14fe4:	00078663          	beqz	a5,14ff0 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   14fe8:	00170713          	addi	a4,a4,1
   14fec:	fe1ff06f          	j	14fcc <bsp_printf_X+0xc>
            bsp_printHex(val);
   14ff0:	e09ff0ef          	jal	ra,14df8 <bsp_printHex>
        }
   14ff4:	00c12083          	lw	ra,12(sp)
   14ff8:	01010113          	addi	sp,sp,16
   14ffc:	00008067          	ret

00015000 <ptr_to_mem>:
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
  return (struct mem *)(void *)&ram[ptr];
   15000:	9501a783          	lw	a5,-1712(gp) # 1fb20 <ram>
}
   15004:	00a78533          	add	a0,a5,a0
   15008:	00008067          	ret

0001500c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
  return (mem_size_t)((u8_t *)mem - ram);
   1500c:	9501a783          	lw	a5,-1712(gp) # 1fb20 <ram>
   15010:	40f50533          	sub	a0,a0,a5
}
   15014:	01051513          	slli	a0,a0,0x10
   15018:	01055513          	srli	a0,a0,0x10
   1501c:	00008067          	ret

00015020 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
   15020:	fe010113          	addi	sp,sp,-32
   15024:	00112e23          	sw	ra,28(sp)
   15028:	00812c23          	sw	s0,24(sp)
   1502c:	00912a23          	sw	s1,20(sp)
   15030:	01212823          	sw	s2,16(sp)
   15034:	01312623          	sw	s3,12(sp)
   15038:	00050413          	mv	s0,a0
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
   1503c:	fd1ff0ef          	jal	ra,1500c <mem_to_ptr>
   15040:	00050913          	mv	s2,a0
  nmem = ptr_to_mem(mem->next);
   15044:	00045483          	lhu	s1,0(s0)
   15048:	00048513          	mv	a0,s1
   1504c:	fb5ff0ef          	jal	ra,15000 <ptr_to_mem>
   15050:	00050993          	mv	s3,a0
  pmem = ptr_to_mem(mem->prev);
   15054:	00245403          	lhu	s0,2(s0)
   15058:	00040513          	mv	a0,s0
   1505c:	fa5ff0ef          	jal	ra,15000 <ptr_to_mem>
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
   15060:	000027b7          	lui	a5,0x2
   15064:	0297e663          	bltu	a5,s1,15090 <mem_link_valid+0x70>
   15068:	0487e463          	bltu	a5,s0,150b0 <mem_link_valid+0x90>
   1506c:	01240663          	beq	s0,s2,15078 <mem_link_valid+0x58>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
   15070:	00055783          	lhu	a5,0(a0) # f8010000 <__freertos_irq_stack_top+0xf7feb0d0>
   15074:	05279263          	bne	a5,s2,150b8 <mem_link_valid+0x98>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
   15078:	94c1a783          	lw	a5,-1716(gp) # 1fb1c <ram_end>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
   1507c:	05378263          	beq	a5,s3,150c0 <mem_link_valid+0xa0>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
   15080:	0029d783          	lhu	a5,2(s3)
   15084:	05279263          	bne	a5,s2,150c8 <mem_link_valid+0xa8>
    return 0;
  }
  return 1;
   15088:	00100513          	li	a0,1
   1508c:	0080006f          	j	15094 <mem_link_valid+0x74>
    return 0;
   15090:	00000513          	li	a0,0
}
   15094:	01c12083          	lw	ra,28(sp)
   15098:	01812403          	lw	s0,24(sp)
   1509c:	01412483          	lw	s1,20(sp)
   150a0:	01012903          	lw	s2,16(sp)
   150a4:	00c12983          	lw	s3,12(sp)
   150a8:	02010113          	addi	sp,sp,32
   150ac:	00008067          	ret
    return 0;
   150b0:	00000513          	li	a0,0
   150b4:	fe1ff06f          	j	15094 <mem_link_valid+0x74>
   150b8:	00000513          	li	a0,0
   150bc:	fd9ff06f          	j	15094 <mem_link_valid+0x74>
  return 1;
   150c0:	00100513          	li	a0,1
   150c4:	fd1ff06f          	j	15094 <mem_link_valid+0x74>
    return 0;
   150c8:	00000513          	li	a0,0
   150cc:	fc9ff06f          	j	15094 <mem_link_valid+0x74>

000150d0 <bsp_printf>:
    {
   150d0:	fc010113          	addi	sp,sp,-64
   150d4:	00112e23          	sw	ra,28(sp)
   150d8:	00812c23          	sw	s0,24(sp)
   150dc:	00912a23          	sw	s1,20(sp)
   150e0:	00050493          	mv	s1,a0
   150e4:	02b12223          	sw	a1,36(sp)
   150e8:	02c12423          	sw	a2,40(sp)
   150ec:	02d12623          	sw	a3,44(sp)
   150f0:	02e12823          	sw	a4,48(sp)
   150f4:	02f12a23          	sw	a5,52(sp)
   150f8:	03012c23          	sw	a6,56(sp)
   150fc:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   15100:	02410793          	addi	a5,sp,36
   15104:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   15108:	00000413          	li	s0,0
   1510c:	01c0006f          	j	15128 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   15110:	00c12783          	lw	a5,12(sp)
   15114:	00478713          	addi	a4,a5,4 # 2004 <_strtol_l.isra.0+0xdc>
   15118:	00e12623          	sw	a4,12(sp)
   1511c:	0007a503          	lw	a0,0(a5)
   15120:	d89ff0ef          	jal	ra,14ea8 <bsp_printf_c>
        for (i = 0; format[i]; i++)
   15124:	00140413          	addi	s0,s0,1
   15128:	008487b3          	add	a5,s1,s0
   1512c:	0007c503          	lbu	a0,0(a5)
   15130:	0c050263          	beqz	a0,151f4 <bsp_printf+0x124>
            if (format[i] == '%') {
   15134:	02500793          	li	a5,37
   15138:	06f50663          	beq	a0,a5,151a4 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   1513c:	d6dff0ef          	jal	ra,14ea8 <bsp_printf_c>
   15140:	fe5ff06f          	j	15124 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   15144:	00c12783          	lw	a5,12(sp)
   15148:	00478713          	addi	a4,a5,4
   1514c:	00e12623          	sw	a4,12(sp)
   15150:	0007a503          	lw	a0,0(a5)
   15154:	d75ff0ef          	jal	ra,14ec8 <bsp_printf_s>
                        break;
   15158:	fcdff06f          	j	15124 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   1515c:	00c12783          	lw	a5,12(sp)
   15160:	00478713          	addi	a4,a5,4
   15164:	00e12623          	sw	a4,12(sp)
   15168:	0007a503          	lw	a0,0(a5)
   1516c:	d95ff0ef          	jal	ra,14f00 <bsp_printf_d>
                        break;
   15170:	fb5ff06f          	j	15124 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   15174:	00c12783          	lw	a5,12(sp)
   15178:	00478713          	addi	a4,a5,4
   1517c:	00e12623          	sw	a4,12(sp)
   15180:	0007a503          	lw	a0,0(a5)
   15184:	e3dff0ef          	jal	ra,14fc0 <bsp_printf_X>
                        break;
   15188:	f9dff06f          	j	15124 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   1518c:	00c12783          	lw	a5,12(sp)
   15190:	00478713          	addi	a4,a5,4
   15194:	00e12623          	sw	a4,12(sp)
   15198:	0007a503          	lw	a0,0(a5)
   1519c:	de5ff0ef          	jal	ra,14f80 <bsp_printf_x>
                        break;
   151a0:	f85ff06f          	j	15124 <bsp_printf+0x54>
                while (format[++i]) {
   151a4:	00140413          	addi	s0,s0,1
   151a8:	008487b3          	add	a5,s1,s0
   151ac:	0007c783          	lbu	a5,0(a5)
   151b0:	f6078ae3          	beqz	a5,15124 <bsp_printf+0x54>
                    if (format[i] == 'c') {
   151b4:	06300713          	li	a4,99
   151b8:	f4e78ce3          	beq	a5,a4,15110 <bsp_printf+0x40>
                    else if (format[i] == 's') {
   151bc:	07300713          	li	a4,115
   151c0:	f8e782e3          	beq	a5,a4,15144 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   151c4:	06400713          	li	a4,100
   151c8:	f8e78ae3          	beq	a5,a4,1515c <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   151cc:	05800713          	li	a4,88
   151d0:	fae782e3          	beq	a5,a4,15174 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   151d4:	07800713          	li	a4,120
   151d8:	fae78ae3          	beq	a5,a4,1518c <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   151dc:	06600713          	li	a4,102
   151e0:	fce792e3          	bne	a5,a4,151a4 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   151e4:	0001c537          	lui	a0,0x1c
   151e8:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   151ec:	cddff0ef          	jal	ra,14ec8 <bsp_printf_s>
                        break;
   151f0:	f35ff06f          	j	15124 <bsp_printf+0x54>
    }
   151f4:	01c12083          	lw	ra,28(sp)
   151f8:	01812403          	lw	s0,24(sp)
   151fc:	01412483          	lw	s1,20(sp)
   15200:	04010113          	addi	sp,sp,64
   15204:	00008067          	ret

00015208 <plug_holes>:
{
   15208:	ff010113          	addi	sp,sp,-16
   1520c:	00112623          	sw	ra,12(sp)
   15210:	00812423          	sw	s0,8(sp)
   15214:	00912223          	sw	s1,4(sp)
   15218:	00050413          	mv	s0,a0
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
   1521c:	9501a783          	lw	a5,-1712(gp) # 1fb20 <ram>
   15220:	0cf56463          	bltu	a0,a5,152e8 <plug_holes+0xe0>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
   15224:	94c1a783          	lw	a5,-1716(gp) # 1fb1c <ram_end>
   15228:	0cf47863          	bgeu	s0,a5,152f8 <plug_holes+0xf0>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
   1522c:	00444783          	lbu	a5,4(s0)
   15230:	0c079c63          	bnez	a5,15308 <plug_holes+0x100>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
   15234:	00045703          	lhu	a4,0(s0)
   15238:	000027b7          	lui	a5,0x2
   1523c:	0ce7ee63          	bltu	a5,a4,15318 <plug_holes+0x110>
  nmem = ptr_to_mem(mem->next);
   15240:	00045503          	lhu	a0,0(s0)
   15244:	dbdff0ef          	jal	ra,15000 <ptr_to_mem>
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
   15248:	04a40263          	beq	s0,a0,1528c <plug_holes+0x84>
   1524c:	00454783          	lbu	a5,4(a0)
   15250:	02079e63          	bnez	a5,1528c <plug_holes+0x84>
   15254:	94c1a783          	lw	a5,-1716(gp) # 1fb1c <ram_end>
   15258:	02a78a63          	beq	a5,a0,1528c <plug_holes+0x84>
    if (lfree == nmem) {
   1525c:	9481a783          	lw	a5,-1720(gp) # 1fb18 <lfree>
   15260:	0ca78463          	beq	a5,a0,15328 <plug_holes+0x120>
    mem->next = nmem->next;
   15264:	00055783          	lhu	a5,0(a0)
   15268:	00f41023          	sh	a5,0(s0)
    if (nmem->next != MEM_SIZE_ALIGNED) {
   1526c:	00055503          	lhu	a0,0(a0)
   15270:	000027b7          	lui	a5,0x2
   15274:	00f50c63          	beq	a0,a5,1528c <plug_holes+0x84>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
   15278:	d89ff0ef          	jal	ra,15000 <ptr_to_mem>
   1527c:	00050493          	mv	s1,a0
   15280:	00040513          	mv	a0,s0
   15284:	d89ff0ef          	jal	ra,1500c <mem_to_ptr>
   15288:	00a49123          	sh	a0,2(s1)
  pmem = ptr_to_mem(mem->prev);
   1528c:	00245503          	lhu	a0,2(s0)
   15290:	d71ff0ef          	jal	ra,15000 <ptr_to_mem>
   15294:	00050493          	mv	s1,a0
  if (pmem != mem && pmem->used == 0) {
   15298:	02a40e63          	beq	s0,a0,152d4 <plug_holes+0xcc>
   1529c:	00454783          	lbu	a5,4(a0)
   152a0:	02079a63          	bnez	a5,152d4 <plug_holes+0xcc>
    if (lfree == mem) {
   152a4:	9481a783          	lw	a5,-1720(gp) # 1fb18 <lfree>
   152a8:	08878463          	beq	a5,s0,15330 <plug_holes+0x128>
    pmem->next = mem->next;
   152ac:	00045783          	lhu	a5,0(s0)
   152b0:	00f49023          	sh	a5,0(s1)
    if (mem->next != MEM_SIZE_ALIGNED) {
   152b4:	00045503          	lhu	a0,0(s0)
   152b8:	000027b7          	lui	a5,0x2
   152bc:	00f50c63          	beq	a0,a5,152d4 <plug_holes+0xcc>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
   152c0:	d41ff0ef          	jal	ra,15000 <ptr_to_mem>
   152c4:	00050413          	mv	s0,a0
   152c8:	00048513          	mv	a0,s1
   152cc:	d41ff0ef          	jal	ra,1500c <mem_to_ptr>
   152d0:	00a41123          	sh	a0,2(s0)
}
   152d4:	00c12083          	lw	ra,12(sp)
   152d8:	00812403          	lw	s0,8(sp)
   152dc:	00412483          	lw	s1,4(sp)
   152e0:	01010113          	addi	sp,sp,16
   152e4:	00008067          	ret
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
   152e8:	0001f537          	lui	a0,0x1f
   152ec:	85850513          	addi	a0,a0,-1960 # 1e858 <memp_pools+0x94>
   152f0:	de1ff0ef          	jal	ra,150d0 <bsp_printf>
   152f4:	f31ff06f          	j	15224 <plug_holes+0x1c>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
   152f8:	0001f537          	lui	a0,0x1f
   152fc:	87050513          	addi	a0,a0,-1936 # 1e870 <memp_pools+0xac>
   15300:	dd1ff0ef          	jal	ra,150d0 <bsp_printf>
   15304:	f29ff06f          	j	1522c <plug_holes+0x24>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
   15308:	0001f537          	lui	a0,0x1f
   1530c:	88c50513          	addi	a0,a0,-1908 # 1e88c <memp_pools+0xc8>
   15310:	dc1ff0ef          	jal	ra,150d0 <bsp_printf>
   15314:	f21ff06f          	j	15234 <plug_holes+0x2c>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
   15318:	0001f537          	lui	a0,0x1f
   1531c:	8a850513          	addi	a0,a0,-1880 # 1e8a8 <memp_pools+0xe4>
   15320:	db1ff0ef          	jal	ra,150d0 <bsp_printf>
   15324:	f1dff06f          	j	15240 <plug_holes+0x38>
      lfree = mem;
   15328:	9481a423          	sw	s0,-1720(gp) # 1fb18 <lfree>
   1532c:	f39ff06f          	j	15264 <plug_holes+0x5c>
      lfree = pmem;
   15330:	94a1a423          	sw	a0,-1720(gp) # 1fb18 <lfree>
   15334:	f79ff06f          	j	152ac <plug_holes+0xa4>

00015338 <mem_init>:
{
   15338:	ff010113          	addi	sp,sp,-16
   1533c:	00112623          	sw	ra,12(sp)
   15340:	00812423          	sw	s0,8(sp)
   15344:	00912223          	sw	s1,4(sp)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
   15348:	00022437          	lui	s0,0x22
   1534c:	f1440413          	addi	s0,s0,-236 # 21f14 <ram_heap>
   15350:	00340413          	addi	s0,s0,3
   15354:	ffc47413          	andi	s0,s0,-4
   15358:	9481a823          	sw	s0,-1712(gp) # 1fb20 <ram>
  mem->next = MEM_SIZE_ALIGNED;
   1535c:	000024b7          	lui	s1,0x2
   15360:	00941023          	sh	s1,0(s0)
  mem->prev = 0;
   15364:	00041123          	sh	zero,2(s0)
  mem->used = 0;
   15368:	00040223          	sb	zero,4(s0)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
   1536c:	00002537          	lui	a0,0x2
   15370:	c91ff0ef          	jal	ra,15000 <ptr_to_mem>
   15374:	94a1a623          	sw	a0,-1716(gp) # 1fb1c <ram_end>
  ram_end->used = 1;
   15378:	00100793          	li	a5,1
   1537c:	00f50223          	sb	a5,4(a0) # 2004 <_strtol_l.isra.0+0xdc>
  ram_end->next = MEM_SIZE_ALIGNED;
   15380:	00951023          	sh	s1,0(a0)
  ram_end->prev = MEM_SIZE_ALIGNED;
   15384:	00951123          	sh	s1,2(a0)
  lfree = (struct mem *)(void *)ram;
   15388:	9481a423          	sw	s0,-1720(gp) # 1fb18 <lfree>
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
   1538c:	000227b7          	lui	a5,0x22
   15390:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   15394:	0c979323          	sh	s1,198(a5)
}
   15398:	00c12083          	lw	ra,12(sp)
   1539c:	00812403          	lw	s0,8(sp)
   153a0:	00412483          	lw	s1,4(sp)
   153a4:	01010113          	addi	sp,sp,16
   153a8:	00008067          	ret

000153ac <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
   153ac:	14050063          	beqz	a0,154ec <mem_free+0x140>
{
   153b0:	ff010113          	addi	sp,sp,-16
   153b4:	00112623          	sw	ra,12(sp)
   153b8:	00812423          	sw	s0,8(sp)
   153bc:	00912223          	sw	s1,4(sp)
   153c0:	01212023          	sw	s2,0(sp)
   153c4:	00050413          	mv	s0,a0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
   153c8:	00357793          	andi	a5,a0,3
   153cc:	06079e63          	bnez	a5,15448 <mem_free+0x9c>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
   153d0:	ff850913          	addi	s2,a0,-8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
   153d4:	9501a483          	lw	s1,-1712(gp) # 1fb20 <ram>
   153d8:	08996a63          	bltu	s2,s1,1546c <mem_free+0xc0>
   153dc:	00c50793          	addi	a5,a0,12
   153e0:	94c1a703          	lw	a4,-1716(gp) # 1fb1c <ram_end>
   153e4:	08f76463          	bltu	a4,a5,1546c <mem_free+0xc0>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
   153e8:	ffc54783          	lbu	a5,-4(a0)
   153ec:	0a078c63          	beqz	a5,154a4 <mem_free+0xf8>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
   153f0:	00090513          	mv	a0,s2
   153f4:	c2dff0ef          	jal	ra,15020 <mem_link_valid>
   153f8:	0c050863          	beqz	a0,154c8 <mem_free+0x11c>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
   153fc:	fe040e23          	sb	zero,-4(s0)

  if (mem < lfree) {
   15400:	9481a783          	lw	a5,-1720(gp) # 1fb18 <lfree>
   15404:	00f97463          	bgeu	s2,a5,1540c <mem_free+0x60>
    /* the newly freed struct is now the lowest */
    lfree = mem;
   15408:	9521a423          	sw	s2,-1720(gp) # 1fb18 <lfree>
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
   1540c:	00022737          	lui	a4,0x22
   15410:	dc070713          	addi	a4,a4,-576 # 21dc0 <lwip_stats>
   15414:	0c875683          	lhu	a3,200(a4)
   15418:	409907b3          	sub	a5,s2,s1
   1541c:	01079793          	slli	a5,a5,0x10
   15420:	0107d793          	srli	a5,a5,0x10
   15424:	ff845483          	lhu	s1,-8(s0)
   15428:	409787b3          	sub	a5,a5,s1
   1542c:	01079793          	slli	a5,a5,0x10
   15430:	0107d793          	srli	a5,a5,0x10
   15434:	00f687b3          	add	a5,a3,a5
   15438:	0cf71423          	sh	a5,200(a4)

  /* finally, see if prev or next are free also */
  plug_holes(mem);
   1543c:	00090513          	mv	a0,s2
   15440:	dc9ff0ef          	jal	ra,15208 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
   15444:	0480006f          	j	1548c <mem_free+0xe0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
   15448:	0001f537          	lui	a0,0x1f
   1544c:	8d450513          	addi	a0,a0,-1836 # 1e8d4 <memp_pools+0x110>
   15450:	c81ff0ef          	jal	ra,150d0 <bsp_printf>
    MEM_STATS_INC_LOCKED(illegal);
   15454:	000227b7          	lui	a5,0x22
   15458:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1545c:	0cc7d703          	lhu	a4,204(a5)
   15460:	00170713          	addi	a4,a4,1
   15464:	0ce79623          	sh	a4,204(a5)
    return;
   15468:	0240006f          	j	1548c <mem_free+0xe0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
   1546c:	0001f537          	lui	a0,0x1f
   15470:	8f850513          	addi	a0,a0,-1800 # 1e8f8 <memp_pools+0x134>
   15474:	c5dff0ef          	jal	ra,150d0 <bsp_printf>
    MEM_STATS_INC_LOCKED(illegal);
   15478:	000227b7          	lui	a5,0x22
   1547c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   15480:	0cc7d703          	lhu	a4,204(a5)
   15484:	00170713          	addi	a4,a4,1
   15488:	0ce79623          	sh	a4,204(a5)
}
   1548c:	00c12083          	lw	ra,12(sp)
   15490:	00812403          	lw	s0,8(sp)
   15494:	00412483          	lw	s1,4(sp)
   15498:	00012903          	lw	s2,0(sp)
   1549c:	01010113          	addi	sp,sp,16
   154a0:	00008067          	ret
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
   154a4:	0001f537          	lui	a0,0x1f
   154a8:	91450513          	addi	a0,a0,-1772 # 1e914 <memp_pools+0x150>
   154ac:	c25ff0ef          	jal	ra,150d0 <bsp_printf>
    MEM_STATS_INC_LOCKED(illegal);
   154b0:	000227b7          	lui	a5,0x22
   154b4:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   154b8:	0cc7d703          	lhu	a4,204(a5)
   154bc:	00170713          	addi	a4,a4,1
   154c0:	0ce79623          	sh	a4,204(a5)
    return;
   154c4:	fc9ff06f          	j	1548c <mem_free+0xe0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
   154c8:	0001f537          	lui	a0,0x1f
   154cc:	93c50513          	addi	a0,a0,-1732 # 1e93c <memp_pools+0x178>
   154d0:	c01ff0ef          	jal	ra,150d0 <bsp_printf>
    MEM_STATS_INC_LOCKED(illegal);
   154d4:	000227b7          	lui	a5,0x22
   154d8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   154dc:	0cc7d703          	lhu	a4,204(a5)
   154e0:	00170713          	addi	a4,a4,1
   154e4:	0ce79623          	sh	a4,204(a5)
    return;
   154e8:	fa5ff06f          	j	1548c <mem_free+0xe0>
   154ec:	00008067          	ret

000154f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
   154f0:	fe010113          	addi	sp,sp,-32
   154f4:	00112e23          	sw	ra,28(sp)
   154f8:	00812c23          	sw	s0,24(sp)
   154fc:	00912a23          	sw	s1,20(sp)
   15500:	01212823          	sw	s2,16(sp)
   15504:	01312623          	sw	s3,12(sp)
   15508:	01412423          	sw	s4,8(sp)
   1550c:	01512223          	sw	s5,4(sp)
   15510:	01612023          	sw	s6,0(sp)
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
   15514:	00358413          	addi	s0,a1,3
   15518:	01041413          	slli	s0,s0,0x10
   1551c:	01045413          	srli	s0,s0,0x10
   15520:	ffc47413          	andi	s0,s0,-4
   15524:	01041413          	slli	s0,s0,0x10
   15528:	01045413          	srli	s0,s0,0x10
  if (newsize < MIN_SIZE_ALIGNED) {
   1552c:	00b00793          	li	a5,11
   15530:	0087fa63          	bgeu	a5,s0,15544 <mem_trim+0x54>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
   15534:	000027b7          	lui	a5,0x2
   15538:	0087f863          	bgeu	a5,s0,15548 <mem_trim+0x58>
    return NULL;
   1553c:	00000513          	li	a0,0
   15540:	1200006f          	j	15660 <mem_trim+0x170>
    newsize = MIN_SIZE_ALIGNED;
   15544:	00c00413          	li	s0,12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
   15548:	20b46663          	bltu	s0,a1,15754 <mem_trim+0x264>
   1554c:	00050493          	mv	s1,a0
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   15550:	9501a783          	lw	a5,-1712(gp) # 1fb20 <ram>
   15554:	00f56663          	bltu	a0,a5,15560 <mem_trim+0x70>
   15558:	94c1a783          	lw	a5,-1716(gp) # 1fb1c <ram_end>
   1555c:	00f56863          	bltu	a0,a5,1556c <mem_trim+0x7c>
   15560:	0001f537          	lui	a0,0x1f
   15564:	97050513          	addi	a0,a0,-1680 # 1e970 <memp_pools+0x1ac>
   15568:	b69ff0ef          	jal	ra,150d0 <bsp_printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
   1556c:	9501a783          	lw	a5,-1712(gp) # 1fb20 <ram>
   15570:	0cf4ec63          	bltu	s1,a5,15648 <mem_trim+0x158>
   15574:	94c1a783          	lw	a5,-1716(gp) # 1fb1c <ram_end>
   15578:	0cf4f863          	bgeu	s1,a5,15648 <mem_trim+0x158>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
   1557c:	ff848513          	addi	a0,s1,-8 # 1ff8 <_strtol_l.isra.0+0xd0>
   15580:	a8dff0ef          	jal	ra,1500c <mem_to_ptr>
   15584:	00050a13          	mv	s4,a0

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
   15588:	ff84d903          	lhu	s2,-8(s1)
   1558c:	40a90933          	sub	s2,s2,a0
   15590:	01091913          	slli	s2,s2,0x10
   15594:	01095913          	srli	s2,s2,0x10
   15598:	ff890913          	addi	s2,s2,-8
   1559c:	01091913          	slli	s2,s2,0x10
   155a0:	01095913          	srli	s2,s2,0x10
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
   155a4:	0e896263          	bltu	s2,s0,15688 <mem_trim+0x198>
  if (newsize > size) {
   155a8:	1a896a63          	bltu	s2,s0,1575c <mem_trim+0x26c>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
   155ac:	1b240c63          	beq	s0,s2,15764 <mem_trim+0x274>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
   155b0:	ff84d983          	lhu	s3,-8(s1)
   155b4:	00098513          	mv	a0,s3
   155b8:	a49ff0ef          	jal	ra,15000 <ptr_to_mem>
   155bc:	00050a93          	mv	s5,a0
  if (mem2->used == 0) {
   155c0:	00454783          	lbu	a5,4(a0)
   155c4:	0e079a63          	bnez	a5,156b8 <mem_trim+0x1c8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
   155c8:	000027b7          	lui	a5,0x2
   155cc:	0cf98663          	beq	s3,a5,15698 <mem_trim+0x1a8>
    /* remember the old next pointer */
    next = mem2->next;
   155d0:	000adb03          	lhu	s6,0(s5)
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
   155d4:	014409b3          	add	s3,s0,s4
   155d8:	01099993          	slli	s3,s3,0x10
   155dc:	0109d993          	srli	s3,s3,0x10
   155e0:	00898993          	addi	s3,s3,8
   155e4:	01099993          	slli	s3,s3,0x10
   155e8:	0109d993          	srli	s3,s3,0x10
    if (lfree == mem2) {
   155ec:	9481a783          	lw	a5,-1720(gp) # 1fb18 <lfree>
   155f0:	0b578c63          	beq	a5,s5,156a8 <mem_trim+0x1b8>
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
   155f4:	00098513          	mv	a0,s3
   155f8:	a09ff0ef          	jal	ra,15000 <ptr_to_mem>
    mem2->used = 0;
   155fc:	00050223          	sb	zero,4(a0)
    /* restore the next pointer */
    mem2->next = next;
   15600:	01651023          	sh	s6,0(a0)
    /* link it back to mem */
    mem2->prev = ptr;
   15604:	01451123          	sh	s4,2(a0)
    /* link mem to it */
    mem->next = ptr2;
   15608:	ff349c23          	sh	s3,-8(s1)
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
   1560c:	00055503          	lhu	a0,0(a0)
   15610:	000027b7          	lui	a5,0x2
   15614:	00f50663          	beq	a0,a5,15620 <mem_trim+0x130>
      ptr_to_mem(mem2->next)->prev = ptr2;
   15618:	9e9ff0ef          	jal	ra,15000 <ptr_to_mem>
   1561c:	01351123          	sh	s3,2(a0)
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
   15620:	000227b7          	lui	a5,0x22
   15624:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   15628:	0c87d703          	lhu	a4,200(a5)
   1562c:	41240433          	sub	s0,s0,s2
   15630:	01041413          	slli	s0,s0,0x10
   15634:	01045413          	srli	s0,s0,0x10
   15638:	00870433          	add	s0,a4,s0
   1563c:	0c879423          	sh	s0,200(a5)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
   15640:	00048513          	mv	a0,s1
   15644:	01c0006f          	j	15660 <mem_trim+0x170>
    MEM_STATS_INC_LOCKED(illegal);
   15648:	000227b7          	lui	a5,0x22
   1564c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   15650:	0cc7d703          	lhu	a4,204(a5)
   15654:	00170713          	addi	a4,a4,1
   15658:	0ce79623          	sh	a4,204(a5)
    return rmem;
   1565c:	00048513          	mv	a0,s1
}
   15660:	01c12083          	lw	ra,28(sp)
   15664:	01812403          	lw	s0,24(sp)
   15668:	01412483          	lw	s1,20(sp)
   1566c:	01012903          	lw	s2,16(sp)
   15670:	00c12983          	lw	s3,12(sp)
   15674:	00812a03          	lw	s4,8(sp)
   15678:	00412a83          	lw	s5,4(sp)
   1567c:	00012b03          	lw	s6,0(sp)
   15680:	02010113          	addi	sp,sp,32
   15684:	00008067          	ret
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
   15688:	0001f537          	lui	a0,0x1f
   1568c:	98850513          	addi	a0,a0,-1656 # 1e988 <memp_pools+0x1c4>
   15690:	a41ff0ef          	jal	ra,150d0 <bsp_printf>
   15694:	f15ff06f          	j	155a8 <mem_trim+0xb8>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
   15698:	0001f537          	lui	a0,0x1f
   1569c:	9a850513          	addi	a0,a0,-1624 # 1e9a8 <memp_pools+0x1e4>
   156a0:	a31ff0ef          	jal	ra,150d0 <bsp_printf>
   156a4:	f2dff06f          	j	155d0 <mem_trim+0xe0>
      lfree = ptr_to_mem(ptr2);
   156a8:	00098513          	mv	a0,s3
   156ac:	955ff0ef          	jal	ra,15000 <ptr_to_mem>
   156b0:	94a1a423          	sw	a0,-1720(gp) # 1fb18 <lfree>
   156b4:	f41ff06f          	j	155f4 <mem_trim+0x104>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
   156b8:	01440793          	addi	a5,s0,20
   156bc:	0af96863          	bltu	s2,a5,1576c <mem_trim+0x27c>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
   156c0:	01440ab3          	add	s5,s0,s4
   156c4:	010a9a93          	slli	s5,s5,0x10
   156c8:	010ada93          	srli	s5,s5,0x10
   156cc:	008a8a93          	addi	s5,s5,8
   156d0:	010a9a93          	slli	s5,s5,0x10
   156d4:	010ada93          	srli	s5,s5,0x10
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
   156d8:	000027b7          	lui	a5,0x2
   156dc:	06f98463          	beq	s3,a5,15744 <mem_trim+0x254>
    mem2 = ptr_to_mem(ptr2);
   156e0:	000a8513          	mv	a0,s5
   156e4:	91dff0ef          	jal	ra,15000 <ptr_to_mem>
    if (mem2 < lfree) {
   156e8:	9481a783          	lw	a5,-1720(gp) # 1fb18 <lfree>
   156ec:	00f57463          	bgeu	a0,a5,156f4 <mem_trim+0x204>
      lfree = mem2;
   156f0:	94a1a423          	sw	a0,-1720(gp) # 1fb18 <lfree>
    mem2->used = 0;
   156f4:	00050223          	sb	zero,4(a0)
    mem2->next = mem->next;
   156f8:	ff84d783          	lhu	a5,-8(s1)
   156fc:	00f51023          	sh	a5,0(a0)
    mem2->prev = ptr;
   15700:	01451123          	sh	s4,2(a0)
    mem->next = ptr2;
   15704:	ff549c23          	sh	s5,-8(s1)
    if (mem2->next != MEM_SIZE_ALIGNED) {
   15708:	00055503          	lhu	a0,0(a0)
   1570c:	000027b7          	lui	a5,0x2
   15710:	00f50663          	beq	a0,a5,1571c <mem_trim+0x22c>
      ptr_to_mem(mem2->next)->prev = ptr2;
   15714:	8edff0ef          	jal	ra,15000 <ptr_to_mem>
   15718:	01551123          	sh	s5,2(a0)
    MEM_STATS_DEC_USED(used, (size - newsize));
   1571c:	000227b7          	lui	a5,0x22
   15720:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   15724:	0c87d703          	lhu	a4,200(a5)
   15728:	41240433          	sub	s0,s0,s2
   1572c:	01041413          	slli	s0,s0,0x10
   15730:	01045413          	srli	s0,s0,0x10
   15734:	00870433          	add	s0,a4,s0
   15738:	0c879423          	sh	s0,200(a5)
  return rmem;
   1573c:	00048513          	mv	a0,s1
   15740:	f21ff06f          	j	15660 <mem_trim+0x170>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
   15744:	0001f537          	lui	a0,0x1f
   15748:	9a850513          	addi	a0,a0,-1624 # 1e9a8 <memp_pools+0x1e4>
   1574c:	985ff0ef          	jal	ra,150d0 <bsp_printf>
   15750:	f91ff06f          	j	156e0 <mem_trim+0x1f0>
    return NULL;
   15754:	00000513          	li	a0,0
   15758:	f09ff06f          	j	15660 <mem_trim+0x170>
    return NULL;
   1575c:	00000513          	li	a0,0
   15760:	f01ff06f          	j	15660 <mem_trim+0x170>
    return rmem;
   15764:	00048513          	mv	a0,s1
   15768:	ef9ff06f          	j	15660 <mem_trim+0x170>
  return rmem;
   1576c:	00048513          	mv	a0,s1
   15770:	ef1ff06f          	j	15660 <mem_trim+0x170>

00015774 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
   15774:	26050463          	beqz	a0,159dc <mem_malloc+0x268>
{
   15778:	fe010113          	addi	sp,sp,-32
   1577c:	00112e23          	sw	ra,28(sp)
   15780:	00812c23          	sw	s0,24(sp)
   15784:	00912a23          	sw	s1,20(sp)
   15788:	01212823          	sw	s2,16(sp)
   1578c:	01312623          	sw	s3,12(sp)
   15790:	01412423          	sw	s4,8(sp)
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
   15794:	00350993          	addi	s3,a0,3
   15798:	01099993          	slli	s3,s3,0x10
   1579c:	0109d993          	srli	s3,s3,0x10
   157a0:	ffc9f993          	andi	s3,s3,-4
   157a4:	01099993          	slli	s3,s3,0x10
   157a8:	0109d993          	srli	s3,s3,0x10
  if (size < MIN_SIZE_ALIGNED) {
   157ac:	00b00793          	li	a5,11
   157b0:	0137fa63          	bgeu	a5,s3,157c4 <mem_malloc+0x50>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
   157b4:	000027b7          	lui	a5,0x2
   157b8:	0137f863          	bgeu	a5,s3,157c8 <mem_malloc+0x54>
    return NULL;
   157bc:	00000513          	li	a0,0
   157c0:	1fc0006f          	j	159bc <mem_malloc+0x248>
    size = MIN_SIZE_ALIGNED;
   157c4:	00c00993          	li	s3,12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
   157c8:	20a9ee63          	bltu	s3,a0,159e4 <mem_malloc+0x270>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
   157cc:	9481a503          	lw	a0,-1720(gp) # 1fb18 <lfree>
   157d0:	83dff0ef          	jal	ra,1500c <mem_to_ptr>
   157d4:	00050413          	mv	s0,a0
   157d8:	0cc0006f          	j	158a4 <mem_malloc+0x130>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
   157dc:	0001f537          	lui	a0,0x1f
   157e0:	9a850513          	addi	a0,a0,-1624 # 1e9a8 <memp_pools+0x1e4>
   157e4:	8edff0ef          	jal	ra,150d0 <bsp_printf>
   157e8:	11c0006f          	j	15904 <mem_malloc+0x190>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
   157ec:	00100713          	li	a4,1
   157f0:	00e50223          	sb	a4,4(a0)
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
   157f4:	00022937          	lui	s2,0x22
   157f8:	dc090913          	addi	s2,s2,-576 # 21dc0 <lwip_stats>
   157fc:	0c895403          	lhu	s0,200(s2)
   15800:	008787b3          	add	a5,a5,s0
   15804:	01079413          	slli	s0,a5,0x10
   15808:	01045413          	srli	s0,s0,0x10
   1580c:	801ff0ef          	jal	ra,1500c <mem_to_ptr>
   15810:	40a407b3          	sub	a5,s0,a0
   15814:	01079793          	slli	a5,a5,0x10
   15818:	0107d793          	srli	a5,a5,0x10
   1581c:	0cf91423          	sh	a5,200(s2)
   15820:	0ca95703          	lhu	a4,202(s2)
   15824:	14f77a63          	bgeu	a4,a5,15978 <mem_malloc+0x204>
   15828:	00022737          	lui	a4,0x22
   1582c:	dc070713          	addi	a4,a4,-576 # 21dc0 <lwip_stats>
   15830:	0cf71523          	sh	a5,202(a4)
   15834:	1440006f          	j	15978 <mem_malloc+0x204>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
   15838:	00055503          	lhu	a0,0(a0)
   1583c:	fc4ff0ef          	jal	ra,15000 <ptr_to_mem>
          while (cur->used && cur != ram_end) {
   15840:	00454783          	lbu	a5,4(a0)
   15844:	00078663          	beqz	a5,15850 <mem_malloc+0xdc>
   15848:	94c1a703          	lw	a4,-1716(gp) # 1fb1c <ram_end>
   1584c:	fea716e3          	bne	a4,a0,15838 <mem_malloc+0xc4>
          }
          lfree = cur;
   15850:	94a1a423          	sw	a0,-1720(gp) # 1fb18 <lfree>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
   15854:	94c1a703          	lw	a4,-1716(gp) # 1fb1c <ram_end>
   15858:	12a70463          	beq	a4,a0,15980 <mem_malloc+0x20c>
   1585c:	12078263          	beqz	a5,15980 <mem_malloc+0x20c>
   15860:	0001f537          	lui	a0,0x1f
   15864:	9bc50513          	addi	a0,a0,-1604 # 1e9bc <memp_pools+0x1f8>
   15868:	869ff0ef          	jal	ra,150d0 <bsp_printf>
   1586c:	1140006f          	j	15980 <mem_malloc+0x20c>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
   15870:	0001f537          	lui	a0,0x1f
   15874:	9d850513          	addi	a0,a0,-1576 # 1e9d8 <memp_pools+0x214>
   15878:	859ff0ef          	jal	ra,150d0 <bsp_printf>
   1587c:	1140006f          	j	15990 <mem_malloc+0x21c>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
   15880:	0001f537          	lui	a0,0x1f
   15884:	a0850513          	addi	a0,a0,-1528 # 1ea08 <memp_pools+0x244>
   15888:	849ff0ef          	jal	ra,150d0 <bsp_printf>
   1588c:	10c0006f          	j	15998 <mem_malloc+0x224>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
   15890:	0001f537          	lui	a0,0x1f
   15894:	a3850513          	addi	a0,a0,-1480 # 1ea38 <memp_pools+0x274>
   15898:	839ff0ef          	jal	ra,150d0 <bsp_printf>
   1589c:	1000006f          	j	1599c <mem_malloc+0x228>
         ptr = ptr_to_mem(ptr)->next) {
   158a0:	0004d403          	lhu	s0,0(s1)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
   158a4:	00040913          	mv	s2,s0
   158a8:	00098a13          	mv	s4,s3
   158ac:	000027b7          	lui	a5,0x2
   158b0:	413787b3          	sub	a5,a5,s3
   158b4:	0ef47863          	bgeu	s0,a5,159a4 <mem_malloc+0x230>
      mem = ptr_to_mem(ptr);
   158b8:	00040513          	mv	a0,s0
   158bc:	f44ff0ef          	jal	ra,15000 <ptr_to_mem>
   158c0:	00050493          	mv	s1,a0
      if ((!mem->used) &&
   158c4:	00454783          	lbu	a5,4(a0)
   158c8:	fc079ce3          	bnez	a5,158a0 <mem_malloc+0x12c>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
   158cc:	00055783          	lhu	a5,0(a0)
   158d0:	41278933          	sub	s2,a5,s2
   158d4:	ff890913          	addi	s2,s2,-8
      if ((!mem->used) &&
   158d8:	fd4964e3          	bltu	s2,s4,158a0 <mem_malloc+0x12c>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
   158dc:	014a0713          	addi	a4,s4,20
   158e0:	f0e966e3          	bltu	s2,a4,157ec <mem_malloc+0x78>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
   158e4:	01340933          	add	s2,s0,s3
   158e8:	01091913          	slli	s2,s2,0x10
   158ec:	01095913          	srli	s2,s2,0x10
   158f0:	00890913          	addi	s2,s2,8
   158f4:	01091913          	slli	s2,s2,0x10
   158f8:	01095913          	srli	s2,s2,0x10
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
   158fc:	000027b7          	lui	a5,0x2
   15900:	ecf90ee3          	beq	s2,a5,157dc <mem_malloc+0x68>
          mem2 = ptr_to_mem(ptr2);
   15904:	00090513          	mv	a0,s2
   15908:	ef8ff0ef          	jal	ra,15000 <ptr_to_mem>
          mem2->used = 0;
   1590c:	00050223          	sb	zero,4(a0)
          mem2->next = mem->next;
   15910:	0004d783          	lhu	a5,0(s1)
   15914:	00f51023          	sh	a5,0(a0)
          mem2->prev = ptr;
   15918:	00851123          	sh	s0,2(a0)
          mem->next = ptr2;
   1591c:	01249023          	sh	s2,0(s1)
          mem->used = 1;
   15920:	00100793          	li	a5,1
   15924:	00f48223          	sb	a5,4(s1)
          if (mem2->next != MEM_SIZE_ALIGNED) {
   15928:	00055503          	lhu	a0,0(a0)
   1592c:	000027b7          	lui	a5,0x2
   15930:	00f50663          	beq	a0,a5,1593c <mem_malloc+0x1c8>
            ptr_to_mem(mem2->next)->prev = ptr2;
   15934:	eccff0ef          	jal	ra,15000 <ptr_to_mem>
   15938:	01251123          	sh	s2,2(a0)
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
   1593c:	00022737          	lui	a4,0x22
   15940:	dc070713          	addi	a4,a4,-576 # 21dc0 <lwip_stats>
   15944:	0c875783          	lhu	a5,200(a4)
   15948:	013787b3          	add	a5,a5,s3
   1594c:	01079793          	slli	a5,a5,0x10
   15950:	0107d793          	srli	a5,a5,0x10
   15954:	00878793          	addi	a5,a5,8 # 2008 <_strtol_l.isra.0+0xe0>
   15958:	01079793          	slli	a5,a5,0x10
   1595c:	0107d793          	srli	a5,a5,0x10
   15960:	0cf71423          	sh	a5,200(a4)
   15964:	0ca75703          	lhu	a4,202(a4)
   15968:	00f77863          	bgeu	a4,a5,15978 <mem_malloc+0x204>
   1596c:	00022737          	lui	a4,0x22
   15970:	dc070713          	addi	a4,a4,-576 # 21dc0 <lwip_stats>
   15974:	0cf71523          	sh	a5,202(a4)
        if (mem == lfree) {
   15978:	9481a503          	lw	a0,-1720(gp) # 1fb18 <lfree>
   1597c:	ec9502e3          	beq	a0,s1,15840 <mem_malloc+0xcc>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
   15980:	01448a33          	add	s4,s1,s4
   15984:	008a0a13          	addi	s4,s4,8
   15988:	94c1a783          	lw	a5,-1716(gp) # 1fb1c <ram_end>
   1598c:	ef47e2e3          	bltu	a5,s4,15870 <mem_malloc+0xfc>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
   15990:	0034f413          	andi	s0,s1,3
   15994:	ee0416e3          	bnez	s0,15880 <mem_malloc+0x10c>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
   15998:	ee041ce3          	bnez	s0,15890 <mem_malloc+0x11c>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
   1599c:	00848513          	addi	a0,s1,8
   159a0:	01c0006f          	j	159bc <mem_malloc+0x248>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
   159a4:	000227b7          	lui	a5,0x22
   159a8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   159ac:	0c47d703          	lhu	a4,196(a5)
   159b0:	00170713          	addi	a4,a4,1
   159b4:	0ce79223          	sh	a4,196(a5)
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
   159b8:	00000513          	li	a0,0
}
   159bc:	01c12083          	lw	ra,28(sp)
   159c0:	01812403          	lw	s0,24(sp)
   159c4:	01412483          	lw	s1,20(sp)
   159c8:	01012903          	lw	s2,16(sp)
   159cc:	00c12983          	lw	s3,12(sp)
   159d0:	00812a03          	lw	s4,8(sp)
   159d4:	02010113          	addi	sp,sp,32
   159d8:	00008067          	ret
    return NULL;
   159dc:	00000513          	li	a0,0
}
   159e0:	00008067          	ret
    return NULL;
   159e4:	00000513          	li	a0,0
   159e8:	fd5ff06f          	j	159bc <mem_malloc+0x248>

000159ec <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
   159ec:	ff010113          	addi	sp,sp,-16
   159f0:	00112623          	sw	ra,12(sp)
   159f4:	00812423          	sw	s0,8(sp)
   159f8:	00912223          	sw	s1,4(sp)
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
   159fc:	02b50433          	mul	s0,a0,a1

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
   15a00:	01041513          	slli	a0,s0,0x10
   15a04:	01055513          	srli	a0,a0,0x10
   15a08:	02a41063          	bne	s0,a0,15a28 <mem_calloc+0x3c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
   15a0c:	d69ff0ef          	jal	ra,15774 <mem_malloc>
   15a10:	00050493          	mv	s1,a0
  if (p) {
   15a14:	00050c63          	beqz	a0,15a2c <mem_calloc+0x40>
    /* zero the memory */
    memset(p, 0, alloc_size);
   15a18:	00040613          	mv	a2,s0
   15a1c:	00000593          	li	a1,0
   15a20:	9e0ec0ef          	jal	ra,1c00 <memset>
   15a24:	0080006f          	j	15a2c <mem_calloc+0x40>
    return NULL;
   15a28:	00000493          	li	s1,0
  }
  return p;
}
   15a2c:	00048513          	mv	a0,s1
   15a30:	00c12083          	lw	ra,12(sp)
   15a34:	00812403          	lw	s0,8(sp)
   15a38:	00412483          	lw	s1,4(sp)
   15a3c:	01010113          	addi	sp,sp,16
   15a40:	00008067          	ret

00015a44 <uart_writeAvailability>:
        return *((volatile u32*) address);
   15a44:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   15a48:	01055513          	srli	a0,a0,0x10
    }
   15a4c:	0ff57513          	andi	a0,a0,255
   15a50:	00008067          	ret

00015a54 <uart_write>:
    static void uart_write(u32 reg, char data){
   15a54:	ff010113          	addi	sp,sp,-16
   15a58:	00112623          	sw	ra,12(sp)
   15a5c:	00812423          	sw	s0,8(sp)
   15a60:	00912223          	sw	s1,4(sp)
   15a64:	00050413          	mv	s0,a0
   15a68:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   15a6c:	00040513          	mv	a0,s0
   15a70:	fd5ff0ef          	jal	ra,15a44 <uart_writeAvailability>
   15a74:	fe050ce3          	beqz	a0,15a6c <uart_write+0x18>
        *((volatile u32*) address) = data;
   15a78:	00942023          	sw	s1,0(s0)
    }
   15a7c:	00c12083          	lw	ra,12(sp)
   15a80:	00812403          	lw	s0,8(sp)
   15a84:	00412483          	lw	s1,4(sp)
   15a88:	01010113          	addi	sp,sp,16
   15a8c:	00008067          	ret

00015a90 <bsp_printHex>:
    {
   15a90:	ff010113          	addi	sp,sp,-16
   15a94:	00112623          	sw	ra,12(sp)
   15a98:	00812423          	sw	s0,8(sp)
   15a9c:	00912223          	sw	s1,4(sp)
   15aa0:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   15aa4:	01c00413          	li	s0,28
   15aa8:	0280006f          	j	15ad0 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   15aac:	0084d7b3          	srl	a5,s1,s0
   15ab0:	00f7f713          	andi	a4,a5,15
   15ab4:	0001c7b7          	lui	a5,0x1c
   15ab8:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   15abc:	00e787b3          	add	a5,a5,a4
   15ac0:	0007c583          	lbu	a1,0(a5)
   15ac4:	f8010537          	lui	a0,0xf8010
   15ac8:	f8dff0ef          	jal	ra,15a54 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   15acc:	ffc40413          	addi	s0,s0,-4
   15ad0:	fc045ee3          	bgez	s0,15aac <bsp_printHex+0x1c>
    }
   15ad4:	00c12083          	lw	ra,12(sp)
   15ad8:	00812403          	lw	s0,8(sp)
   15adc:	00412483          	lw	s1,4(sp)
   15ae0:	01010113          	addi	sp,sp,16
   15ae4:	00008067          	ret

00015ae8 <bsp_printHex_lower>:
        {
   15ae8:	ff010113          	addi	sp,sp,-16
   15aec:	00112623          	sw	ra,12(sp)
   15af0:	00812423          	sw	s0,8(sp)
   15af4:	00912223          	sw	s1,4(sp)
   15af8:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   15afc:	01c00413          	li	s0,28
   15b00:	0280006f          	j	15b28 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   15b04:	0084d7b3          	srl	a5,s1,s0
   15b08:	00f7f713          	andi	a4,a5,15
   15b0c:	0001c7b7          	lui	a5,0x1c
   15b10:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   15b14:	00e787b3          	add	a5,a5,a4
   15b18:	0007c583          	lbu	a1,0(a5)
   15b1c:	f8010537          	lui	a0,0xf8010
   15b20:	f35ff0ef          	jal	ra,15a54 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   15b24:	ffc40413          	addi	s0,s0,-4
   15b28:	fc045ee3          	bgez	s0,15b04 <bsp_printHex_lower+0x1c>
        }
   15b2c:	00c12083          	lw	ra,12(sp)
   15b30:	00812403          	lw	s0,8(sp)
   15b34:	00412483          	lw	s1,4(sp)
   15b38:	01010113          	addi	sp,sp,16
   15b3c:	00008067          	ret

00015b40 <bsp_printf_c>:
    {
   15b40:	ff010113          	addi	sp,sp,-16
   15b44:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   15b48:	0ff57593          	andi	a1,a0,255
   15b4c:	f8010537          	lui	a0,0xf8010
   15b50:	f05ff0ef          	jal	ra,15a54 <uart_write>
    }
   15b54:	00c12083          	lw	ra,12(sp)
   15b58:	01010113          	addi	sp,sp,16
   15b5c:	00008067          	ret

00015b60 <bsp_printf_s>:
    {
   15b60:	ff010113          	addi	sp,sp,-16
   15b64:	00112623          	sw	ra,12(sp)
   15b68:	00812423          	sw	s0,8(sp)
   15b6c:	00050413          	mv	s0,a0
        while (*p)
   15b70:	00044583          	lbu	a1,0(s0)
   15b74:	00058a63          	beqz	a1,15b88 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   15b78:	00140413          	addi	s0,s0,1
   15b7c:	f8010537          	lui	a0,0xf8010
   15b80:	ed5ff0ef          	jal	ra,15a54 <uart_write>
   15b84:	fedff06f          	j	15b70 <bsp_printf_s+0x10>
    }
   15b88:	00c12083          	lw	ra,12(sp)
   15b8c:	00812403          	lw	s0,8(sp)
   15b90:	01010113          	addi	sp,sp,16
   15b94:	00008067          	ret

00015b98 <bsp_printf_d>:
    {
   15b98:	fd010113          	addi	sp,sp,-48
   15b9c:	02112623          	sw	ra,44(sp)
   15ba0:	02812423          	sw	s0,40(sp)
   15ba4:	02912223          	sw	s1,36(sp)
   15ba8:	00050493          	mv	s1,a0
        if (val < 0) {
   15bac:	00054663          	bltz	a0,15bb8 <bsp_printf_d+0x20>
    {
   15bb0:	00010413          	mv	s0,sp
   15bb4:	02c0006f          	j	15be0 <bsp_printf_d+0x48>
            bsp_printf_c('-');
   15bb8:	02d00513          	li	a0,45
   15bbc:	f85ff0ef          	jal	ra,15b40 <bsp_printf_c>
            val = -val;
   15bc0:	409004b3          	neg	s1,s1
   15bc4:	fedff06f          	j	15bb0 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   15bc8:	00a00713          	li	a4,10
   15bcc:	02e4e7b3          	rem	a5,s1,a4
   15bd0:	03078793          	addi	a5,a5,48
   15bd4:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   15bd8:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   15bdc:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   15be0:	fe0494e3          	bnez	s1,15bc8 <bsp_printf_d+0x30>
   15be4:	00010793          	mv	a5,sp
   15be8:	fef400e3          	beq	s0,a5,15bc8 <bsp_printf_d+0x30>
   15bec:	0100006f          	j	15bfc <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   15bf0:	fff40413          	addi	s0,s0,-1
   15bf4:	00044503          	lbu	a0,0(s0)
   15bf8:	f49ff0ef          	jal	ra,15b40 <bsp_printf_c>
        while (p != buffer)
   15bfc:	00010793          	mv	a5,sp
   15c00:	fef418e3          	bne	s0,a5,15bf0 <bsp_printf_d+0x58>
    }
   15c04:	02c12083          	lw	ra,44(sp)
   15c08:	02812403          	lw	s0,40(sp)
   15c0c:	02412483          	lw	s1,36(sp)
   15c10:	03010113          	addi	sp,sp,48
   15c14:	00008067          	ret

00015c18 <bsp_printf_x>:
    {
   15c18:	ff010113          	addi	sp,sp,-16
   15c1c:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   15c20:	00000713          	li	a4,0
   15c24:	00700793          	li	a5,7
   15c28:	02e7c063          	blt	a5,a4,15c48 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   15c2c:	00271693          	slli	a3,a4,0x2
   15c30:	ff000793          	li	a5,-16
   15c34:	00d797b3          	sll	a5,a5,a3
   15c38:	00f577b3          	and	a5,a0,a5
   15c3c:	00078663          	beqz	a5,15c48 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   15c40:	00170713          	addi	a4,a4,1
   15c44:	fe1ff06f          	j	15c24 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   15c48:	ea1ff0ef          	jal	ra,15ae8 <bsp_printHex_lower>
    }
   15c4c:	00c12083          	lw	ra,12(sp)
   15c50:	01010113          	addi	sp,sp,16
   15c54:	00008067          	ret

00015c58 <bsp_printf_X>:
        {
   15c58:	ff010113          	addi	sp,sp,-16
   15c5c:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   15c60:	00000713          	li	a4,0
   15c64:	00700793          	li	a5,7
   15c68:	02e7c063          	blt	a5,a4,15c88 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   15c6c:	00271693          	slli	a3,a4,0x2
   15c70:	ff000793          	li	a5,-16
   15c74:	00d797b3          	sll	a5,a5,a3
   15c78:	00f577b3          	and	a5,a0,a5
   15c7c:	00078663          	beqz	a5,15c88 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   15c80:	00170713          	addi	a4,a4,1
   15c84:	fe1ff06f          	j	15c64 <bsp_printf_X+0xc>
            bsp_printHex(val);
   15c88:	e09ff0ef          	jal	ra,15a90 <bsp_printHex>
        }
   15c8c:	00c12083          	lw	ra,12(sp)
   15c90:	01010113          	addi	sp,sp,16
   15c94:	00008067          	ret

00015c98 <bsp_printf>:
    {
   15c98:	fc010113          	addi	sp,sp,-64
   15c9c:	00112e23          	sw	ra,28(sp)
   15ca0:	00812c23          	sw	s0,24(sp)
   15ca4:	00912a23          	sw	s1,20(sp)
   15ca8:	00050493          	mv	s1,a0
   15cac:	02b12223          	sw	a1,36(sp)
   15cb0:	02c12423          	sw	a2,40(sp)
   15cb4:	02d12623          	sw	a3,44(sp)
   15cb8:	02e12823          	sw	a4,48(sp)
   15cbc:	02f12a23          	sw	a5,52(sp)
   15cc0:	03012c23          	sw	a6,56(sp)
   15cc4:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   15cc8:	02410793          	addi	a5,sp,36
   15ccc:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   15cd0:	00000413          	li	s0,0
   15cd4:	01c0006f          	j	15cf0 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   15cd8:	00c12783          	lw	a5,12(sp)
   15cdc:	00478713          	addi	a4,a5,4
   15ce0:	00e12623          	sw	a4,12(sp)
   15ce4:	0007a503          	lw	a0,0(a5)
   15ce8:	e59ff0ef          	jal	ra,15b40 <bsp_printf_c>
        for (i = 0; format[i]; i++)
   15cec:	00140413          	addi	s0,s0,1
   15cf0:	008487b3          	add	a5,s1,s0
   15cf4:	0007c503          	lbu	a0,0(a5)
   15cf8:	0c050263          	beqz	a0,15dbc <bsp_printf+0x124>
            if (format[i] == '%') {
   15cfc:	02500793          	li	a5,37
   15d00:	06f50663          	beq	a0,a5,15d6c <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   15d04:	e3dff0ef          	jal	ra,15b40 <bsp_printf_c>
   15d08:	fe5ff06f          	j	15cec <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   15d0c:	00c12783          	lw	a5,12(sp)
   15d10:	00478713          	addi	a4,a5,4
   15d14:	00e12623          	sw	a4,12(sp)
   15d18:	0007a503          	lw	a0,0(a5)
   15d1c:	e45ff0ef          	jal	ra,15b60 <bsp_printf_s>
                        break;
   15d20:	fcdff06f          	j	15cec <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   15d24:	00c12783          	lw	a5,12(sp)
   15d28:	00478713          	addi	a4,a5,4
   15d2c:	00e12623          	sw	a4,12(sp)
   15d30:	0007a503          	lw	a0,0(a5)
   15d34:	e65ff0ef          	jal	ra,15b98 <bsp_printf_d>
                        break;
   15d38:	fb5ff06f          	j	15cec <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   15d3c:	00c12783          	lw	a5,12(sp)
   15d40:	00478713          	addi	a4,a5,4
   15d44:	00e12623          	sw	a4,12(sp)
   15d48:	0007a503          	lw	a0,0(a5)
   15d4c:	f0dff0ef          	jal	ra,15c58 <bsp_printf_X>
                        break;
   15d50:	f9dff06f          	j	15cec <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   15d54:	00c12783          	lw	a5,12(sp)
   15d58:	00478713          	addi	a4,a5,4
   15d5c:	00e12623          	sw	a4,12(sp)
   15d60:	0007a503          	lw	a0,0(a5)
   15d64:	eb5ff0ef          	jal	ra,15c18 <bsp_printf_x>
                        break;
   15d68:	f85ff06f          	j	15cec <bsp_printf+0x54>
                while (format[++i]) {
   15d6c:	00140413          	addi	s0,s0,1
   15d70:	008487b3          	add	a5,s1,s0
   15d74:	0007c783          	lbu	a5,0(a5)
   15d78:	f6078ae3          	beqz	a5,15cec <bsp_printf+0x54>
                    if (format[i] == 'c') {
   15d7c:	06300713          	li	a4,99
   15d80:	f4e78ce3          	beq	a5,a4,15cd8 <bsp_printf+0x40>
                    else if (format[i] == 's') {
   15d84:	07300713          	li	a4,115
   15d88:	f8e782e3          	beq	a5,a4,15d0c <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   15d8c:	06400713          	li	a4,100
   15d90:	f8e78ae3          	beq	a5,a4,15d24 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   15d94:	05800713          	li	a4,88
   15d98:	fae782e3          	beq	a5,a4,15d3c <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   15d9c:	07800713          	li	a4,120
   15da0:	fae78ae3          	beq	a5,a4,15d54 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   15da4:	06600713          	li	a4,102
   15da8:	fce792e3          	bne	a5,a4,15d6c <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   15dac:	0001c537          	lui	a0,0x1c
   15db0:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   15db4:	dadff0ef          	jal	ra,15b60 <bsp_printf_s>
                        break;
   15db8:	f35ff06f          	j	15cec <bsp_printf+0x54>
    }
   15dbc:	01c12083          	lw	ra,28(sp)
   15dc0:	01812403          	lw	s0,24(sp)
   15dc4:	01412483          	lw	s1,20(sp)
   15dc8:	04010113          	addi	sp,sp,64
   15dcc:	00008067          	ret

00015dd0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
   15dd0:	fd010113          	addi	sp,sp,-48
   15dd4:	02112623          	sw	ra,44(sp)
   15dd8:	02812423          	sw	s0,40(sp)
   15ddc:	02912223          	sw	s1,36(sp)
   15de0:	03212023          	sw	s2,32(sp)
   15de4:	01312e23          	sw	s3,28(sp)
   15de8:	01412c23          	sw	s4,24(sp)
   15dec:	01512a23          	sw	s5,20(sp)
   15df0:	01612823          	sw	s6,16(sp)
   15df4:	00050993          	mv	s3,a0
   15df8:	00058a93          	mv	s5,a1
   15dfc:	00060a13          	mv	s4,a2
  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
  if (p->tot_len < response_pkt_len) {
   15e00:	00855403          	lhu	s0,8(a0)
   15e04:	01b00793          	li	a5,27
   15e08:	0087f463          	bgeu	a5,s0,15e10 <icmp_send_response+0x40>
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
   15e0c:	01c00413          	li	s0,28
    response_pkt_len = p->tot_len;
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + response_pkt_len, PBUF_RAM);
   15e10:	00840593          	addi	a1,s0,8
   15e14:	28000613          	li	a2,640
   15e18:	01059593          	slli	a1,a1,0x10
   15e1c:	0105d593          	srli	a1,a1,0x10
   15e20:	02200513          	li	a0,34
   15e24:	e45f60ef          	jal	ra,cc68 <pbuf_alloc>
   15e28:	00050493          	mv	s1,a0
  if (q == NULL) {
   15e2c:	0e050063          	beqz	a0,15f0c <icmp_send_response+0x13c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
   15e30:	00a55783          	lhu	a5,10(a0)
   15e34:	00040b13          	mv	s6,s0
   15e38:	00840413          	addi	s0,s0,8
   15e3c:	0e87ec63          	bltu	a5,s0,15f34 <icmp_send_response+0x164>
              (q->len >= (sizeof(struct icmp_echo_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
   15e40:	0049a903          	lw	s2,4(s3)
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
   15e44:	0044a403          	lw	s0,4(s1)
  icmphdr->type = type;
   15e48:	01540023          	sb	s5,0(s0)
  icmphdr->code = code;
   15e4c:	014400a3          	sb	s4,1(s0)
  icmphdr->id = 0;
   15e50:	00040223          	sb	zero,4(s0)
   15e54:	000402a3          	sb	zero,5(s0)
  icmphdr->seqno = 0;
   15e58:	00040323          	sb	zero,6(s0)
   15e5c:	000403a3          	sb	zero,7(s0)

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
   15e60:	0044a503          	lw	a0,4(s1)
   15e64:	000b0613          	mv	a2,s6
   15e68:	0049a583          	lw	a1,4(s3)
   15e6c:	00850513          	addi	a0,a0,8
   15e70:	b55eb0ef          	jal	ra,19c4 <memcpy>
          response_pkt_len);

  ip4_addr_copy(iphdr_src, iphdr->src);
   15e74:	00c94783          	lbu	a5,12(s2)
   15e78:	00d94703          	lbu	a4,13(s2)
   15e7c:	00871713          	slli	a4,a4,0x8
   15e80:	00f76733          	or	a4,a4,a5
   15e84:	00e94783          	lbu	a5,14(s2)
   15e88:	01079793          	slli	a5,a5,0x10
   15e8c:	00e7e733          	or	a4,a5,a4
   15e90:	00f94783          	lbu	a5,15(s2)
   15e94:	01879793          	slli	a5,a5,0x18
   15e98:	00e7e7b3          	or	a5,a5,a4
   15e9c:	00f12623          	sw	a5,12(sp)
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
   15ea0:	00c10513          	addi	a0,sp,12
   15ea4:	03d000ef          	jal	ra,166e0 <ip4_route>
   15ea8:	00050913          	mv	s2,a0
#endif
  if (netif != NULL) {
   15eac:	04050c63          	beqz	a0,15f04 <icmp_send_response+0x134>
    /* calculate checksum */
    icmphdr->chksum = 0;
   15eb0:	00040123          	sb	zero,2(s0)
   15eb4:	000401a3          	sb	zero,3(s0)
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
   15eb8:	00a4d583          	lhu	a1,10(s1)
   15ebc:	00040513          	mv	a0,s0
   15ec0:	e09fe0ef          	jal	ra,14cc8 <inet_chksum>
   15ec4:	00a40123          	sb	a0,2(s0)
   15ec8:	00855513          	srli	a0,a0,0x8
   15ecc:	00a401a3          	sb	a0,3(s0)
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
   15ed0:	000227b7          	lui	a5,0x22
   15ed4:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   15ed8:	0607d703          	lhu	a4,96(a5)
   15edc:	00170713          	addi	a4,a4,1
   15ee0:	06e79023          	sh	a4,96(a5)
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
   15ee4:	00090813          	mv	a6,s2
   15ee8:	00100793          	li	a5,1
   15eec:	00000713          	li	a4,0
   15ef0:	0ff00693          	li	a3,255
   15ef4:	00c10613          	addi	a2,sp,12
   15ef8:	00000593          	li	a1,0
   15efc:	00048513          	mv	a0,s1
   15f00:	194010ef          	jal	ra,17094 <ip4_output_if>
  }
  pbuf_free(q);
   15f04:	00048513          	mv	a0,s1
   15f08:	c49f60ef          	jal	ra,cb50 <pbuf_free>
}
   15f0c:	02c12083          	lw	ra,44(sp)
   15f10:	02812403          	lw	s0,40(sp)
   15f14:	02412483          	lw	s1,36(sp)
   15f18:	02012903          	lw	s2,32(sp)
   15f1c:	01c12983          	lw	s3,28(sp)
   15f20:	01812a03          	lw	s4,24(sp)
   15f24:	01412a83          	lw	s5,20(sp)
   15f28:	01012b03          	lw	s6,16(sp)
   15f2c:	03010113          	addi	sp,sp,48
   15f30:	00008067          	ret
  LWIP_ASSERT("check that first pbuf can hold icmp message",
   15f34:	0001f537          	lui	a0,0x1f
   15f38:	a5c50513          	addi	a0,a0,-1444 # 1ea5c <memp_pools+0x298>
   15f3c:	d5dff0ef          	jal	ra,15c98 <bsp_printf>
   15f40:	f01ff06f          	j	15e40 <icmp_send_response+0x70>

00015f44 <icmp_input>:
{
   15f44:	fe010113          	addi	sp,sp,-32
   15f48:	00112e23          	sw	ra,28(sp)
   15f4c:	00812c23          	sw	s0,24(sp)
   15f50:	00912a23          	sw	s1,20(sp)
   15f54:	01212823          	sw	s2,16(sp)
   15f58:	01312623          	sw	s3,12(sp)
   15f5c:	01412423          	sw	s4,8(sp)
   15f60:	01512223          	sw	s5,4(sp)
   15f64:	00050493          	mv	s1,a0
  ICMP_STATS_INC(icmp.recv);
   15f68:	000227b7          	lui	a5,0x22
   15f6c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   15f70:	0627d703          	lhu	a4,98(a5)
   15f74:	00170713          	addi	a4,a4,1
   15f78:	06e79123          	sh	a4,98(a5)
  iphdr_in = ip4_current_header();
   15f7c:	000227b7          	lui	a5,0x22
   15f80:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   15f84:	0087aa03          	lw	s4,8(a5)
  hlen = IPH_HL_BYTES(iphdr_in);
   15f88:	000a4403          	lbu	s0,0(s4)
   15f8c:	00f47413          	andi	s0,s0,15
   15f90:	00241413          	slli	s0,s0,0x2
   15f94:	01041913          	slli	s2,s0,0x10
   15f98:	01095913          	srli	s2,s2,0x10
  if (hlen < IP_HLEN) {
   15f9c:	01300793          	li	a5,19
   15fa0:	0527fe63          	bgeu	a5,s2,15ffc <icmp_input+0xb8>
   15fa4:	00058993          	mv	s3,a1
  if (p->len < sizeof(u16_t) * 2) {
   15fa8:	00a55703          	lhu	a4,10(a0)
   15fac:	00300793          	li	a5,3
   15fb0:	04e7f663          	bgeu	a5,a4,15ffc <icmp_input+0xb8>
  type = *((u8_t *)p->payload);
   15fb4:	00452783          	lw	a5,4(a0)
   15fb8:	0007c783          	lbu	a5,0(a5)
  switch (type) {
   15fbc:	2c078c63          	beqz	a5,16294 <icmp_input+0x350>
   15fc0:	00800713          	li	a4,8
   15fc4:	2ae79863          	bne	a5,a4,16274 <icmp_input+0x330>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
   15fc8:	000227b7          	lui	a5,0x22
   15fcc:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   15fd0:	0147a503          	lw	a0,20(a5)
   15fd4:	0f057713          	andi	a4,a0,240
   15fd8:	0e000793          	li	a5,224
   15fdc:	08f70a63          	beq	a4,a5,16070 <icmp_input+0x12c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
   15fe0:	000227b7          	lui	a5,0x22
   15fe4:	ee47a583          	lw	a1,-284(a5) # 21ee4 <ip_data>
   15fe8:	438020ef          	jal	ra,18420 <ip4_addr_isbroadcast_u32>
   15fec:	08051263          	bnez	a0,16070 <icmp_input+0x12c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
   15ff0:	0084d703          	lhu	a4,8(s1)
   15ff4:	00700793          	li	a5,7
   15ff8:	04e7e263          	bltu	a5,a4,1603c <icmp_input+0xf8>
  pbuf_free(p);
   15ffc:	00048513          	mv	a0,s1
   16000:	b51f60ef          	jal	ra,cb50 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
   16004:	000227b7          	lui	a5,0x22
   16008:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1600c:	06a7d703          	lhu	a4,106(a5)
   16010:	00170713          	addi	a4,a4,1
   16014:	06e79523          	sh	a4,106(a5)
}
   16018:	01c12083          	lw	ra,28(sp)
   1601c:	01812403          	lw	s0,24(sp)
   16020:	01412483          	lw	s1,20(sp)
   16024:	01012903          	lw	s2,16(sp)
   16028:	00c12983          	lw	s3,12(sp)
   1602c:	00812a03          	lw	s4,8(sp)
   16030:	00412a83          	lw	s5,4(sp)
   16034:	02010113          	addi	sp,sp,32
   16038:	00008067          	ret
        if (inet_chksum_pbuf(p) != 0) {
   1603c:	00048513          	mv	a0,s1
   16040:	cadfe0ef          	jal	ra,14cec <inet_chksum_pbuf>
   16044:	04051663          	bnez	a0,16090 <icmp_input+0x14c>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
   16048:	00e40a93          	addi	s5,s0,14
   1604c:	000a8593          	mv	a1,s5
   16050:	00048513          	mv	a0,s1
   16054:	9c1f60ef          	jal	ra,ca14 <pbuf_add_header>
   16058:	0e050263          	beqz	a0,1613c <icmp_input+0x1f8>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
   1605c:	0084d783          	lhu	a5,8(s1)
   16060:	012785b3          	add	a1,a5,s2
   16064:	01059593          	slli	a1,a1,0x10
   16068:	0105d593          	srli	a1,a1,0x10
        if (alloc_len < p->tot_len) {
   1606c:	04f5f263          	bgeu	a1,a5,160b0 <icmp_input+0x16c>
  pbuf_free(p);
   16070:	00048513          	mv	a0,s1
   16074:	addf60ef          	jal	ra,cb50 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
   16078:	000227b7          	lui	a5,0x22
   1607c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   16080:	0747d703          	lhu	a4,116(a5)
   16084:	00170713          	addi	a4,a4,1
   16088:	06e79a23          	sh	a4,116(a5)
  return;
   1608c:	f8dff06f          	j	16018 <icmp_input+0xd4>
          pbuf_free(p);
   16090:	00048513          	mv	a0,s1
   16094:	abdf60ef          	jal	ra,cb50 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
   16098:	000227b7          	lui	a5,0x22
   1609c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   160a0:	0687d703          	lhu	a4,104(a5)
   160a4:	00170713          	addi	a4,a4,1
   160a8:	06e79423          	sh	a4,104(a5)
          return;
   160ac:	f6dff06f          	j	16018 <icmp_input+0xd4>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
   160b0:	28000613          	li	a2,640
   160b4:	00e00513          	li	a0,14
   160b8:	bb1f60ef          	jal	ra,cc68 <pbuf_alloc>
   160bc:	00050a93          	mv	s5,a0
        if (r == NULL) {
   160c0:	fa0508e3          	beqz	a0,16070 <icmp_input+0x12c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
   160c4:	00a55703          	lhu	a4,10(a0)
   160c8:	00840793          	addi	a5,s0,8
   160cc:	04f76263          	bltu	a4,a5,16110 <icmp_input+0x1cc>
        MEMCPY(r->payload, iphdr_in, hlen);
   160d0:	00040613          	mv	a2,s0
   160d4:	000a0593          	mv	a1,s4
   160d8:	00452503          	lw	a0,4(a0)
   160dc:	8e9eb0ef          	jal	ra,19c4 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
   160e0:	00040593          	mv	a1,s0
   160e4:	000a8513          	mv	a0,s5
   160e8:	965f60ef          	jal	ra,ca4c <pbuf_remove_header>
   160ec:	02051663          	bnez	a0,16118 <icmp_input+0x1d4>
        if (pbuf_copy(r, p) != ERR_OK) {
   160f0:	00048593          	mv	a1,s1
   160f4:	000a8513          	mv	a0,s5
   160f8:	ae0f70ef          	jal	ra,d3d8 <pbuf_copy>
   160fc:	02051a63          	bnez	a0,16130 <icmp_input+0x1ec>
        pbuf_free(p);
   16100:	00048513          	mv	a0,s1
   16104:	a4df60ef          	jal	ra,cb50 <pbuf_free>
        p = r;
   16108:	000a8493          	mv	s1,s5
   1610c:	0400006f          	j	1614c <icmp_input+0x208>
          pbuf_free(r);
   16110:	a41f60ef          	jal	ra,cb50 <pbuf_free>
          goto icmperr;
   16114:	f5dff06f          	j	16070 <icmp_input+0x12c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
   16118:	0001f537          	lui	a0,0x1f
   1611c:	a8850513          	addi	a0,a0,-1400 # 1ea88 <memp_pools+0x2c4>
   16120:	b79ff0ef          	jal	ra,15c98 <bsp_printf>
          pbuf_free(r);
   16124:	000a8513          	mv	a0,s5
   16128:	a29f60ef          	jal	ra,cb50 <pbuf_free>
          goto icmperr;
   1612c:	f45ff06f          	j	16070 <icmp_input+0x12c>
          pbuf_free(r);
   16130:	000a8513          	mv	a0,s5
   16134:	a1df60ef          	jal	ra,cb50 <pbuf_free>
          goto icmperr;
   16138:	f39ff06f          	j	16070 <icmp_input+0x12c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
   1613c:	000a8593          	mv	a1,s5
   16140:	00048513          	mv	a0,s1
   16144:	909f60ef          	jal	ra,ca4c <pbuf_remove_header>
   16148:	10051063          	bnez	a0,16248 <icmp_input+0x304>
      iecho = (struct icmp_echo_hdr *)p->payload;
   1614c:	0044aa03          	lw	s4,4(s1)
      if (pbuf_add_header(p, hlen)) {
   16150:	00040593          	mv	a1,s0
   16154:	00048513          	mv	a0,s1
   16158:	8bdf60ef          	jal	ra,ca14 <pbuf_add_header>
   1615c:	12051c63          	bnez	a0,16294 <icmp_input+0x350>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
   16160:	0044a403          	lw	s0,4(s1)
        ip4_addr_copy(iphdr->src, *src);
   16164:	00022737          	lui	a4,0x22
   16168:	ee470713          	addi	a4,a4,-284 # 21ee4 <ip_data>
   1616c:	01472783          	lw	a5,20(a4)
   16170:	00f40623          	sb	a5,12(s0)
   16174:	0087d693          	srli	a3,a5,0x8
   16178:	00d406a3          	sb	a3,13(s0)
   1617c:	0107d693          	srli	a3,a5,0x10
   16180:	00d40723          	sb	a3,14(s0)
   16184:	0187d793          	srli	a5,a5,0x18
   16188:	00f407a3          	sb	a5,15(s0)
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
   1618c:	01072783          	lw	a5,16(a4)
   16190:	00f40823          	sb	a5,16(s0)
   16194:	0087d713          	srli	a4,a5,0x8
   16198:	00e408a3          	sb	a4,17(s0)
   1619c:	0107d713          	srli	a4,a5,0x10
   161a0:	00e40923          	sb	a4,18(s0)
   161a4:	0187d793          	srli	a5,a5,0x18
   161a8:	00f409a3          	sb	a5,19(s0)
        ICMPH_TYPE_SET(iecho, ICMP_ER);
   161ac:	000a0023          	sb	zero,0(s4)
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
   161b0:	002a4703          	lbu	a4,2(s4)
   161b4:	003a4783          	lbu	a5,3(s4)
   161b8:	00879793          	slli	a5,a5,0x8
   161bc:	00e7e7b3          	or	a5,a5,a4
   161c0:	00010737          	lui	a4,0x10
   161c4:	ff770713          	addi	a4,a4,-9 # fff7 <tcp_input+0x17b>
   161c8:	08f77863          	bgeu	a4,a5,16258 <icmp_input+0x314>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
   161cc:	00978793          	addi	a5,a5,9
   161d0:	01079793          	slli	a5,a5,0x10
   161d4:	0107d793          	srli	a5,a5,0x10
   161d8:	00fa0123          	sb	a5,2(s4)
   161dc:	0087d793          	srli	a5,a5,0x8
   161e0:	00fa01a3          	sb	a5,3(s4)
        IPH_TTL_SET(iphdr, ICMP_TTL);
   161e4:	fff00793          	li	a5,-1
   161e8:	00f40423          	sb	a5,8(s0)
        IPH_CHKSUM_SET(iphdr, 0);
   161ec:	00040523          	sb	zero,10(s0)
   161f0:	000405a3          	sb	zero,11(s0)
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
   161f4:	00090593          	mv	a1,s2
   161f8:	00040513          	mv	a0,s0
   161fc:	acdfe0ef          	jal	ra,14cc8 <inet_chksum>
   16200:	00a40523          	sb	a0,10(s0)
   16204:	00855513          	srli	a0,a0,0x8
   16208:	00a405a3          	sb	a0,11(s0)
        ICMP_STATS_INC(icmp.xmit);
   1620c:	000227b7          	lui	a5,0x22
   16210:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   16214:	0607d703          	lhu	a4,96(a5)
   16218:	00170713          	addi	a4,a4,1
   1621c:	06e79023          	sh	a4,96(a5)
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
   16220:	00098813          	mv	a6,s3
   16224:	00100793          	li	a5,1
   16228:	00000713          	li	a4,0
   1622c:	0ff00693          	li	a3,255
   16230:	00000613          	li	a2,0
   16234:	000225b7          	lui	a1,0x22
   16238:	ef858593          	addi	a1,a1,-264 # 21ef8 <ip_data+0x14>
   1623c:	00048513          	mv	a0,s1
   16240:	655000ef          	jal	ra,17094 <ip4_output_if>
        if (ret != ERR_OK) {
   16244:	0500006f          	j	16294 <icmp_input+0x350>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
   16248:	0001f537          	lui	a0,0x1f
   1624c:	ac050513          	addi	a0,a0,-1344 # 1eac0 <memp_pools+0x2fc>
   16250:	a49ff0ef          	jal	ra,15c98 <bsp_printf>
          goto icmperr;
   16254:	e1dff06f          	j	16070 <icmp_input+0x12c>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
   16258:	00878793          	addi	a5,a5,8
   1625c:	01079793          	slli	a5,a5,0x10
   16260:	0107d793          	srli	a5,a5,0x10
   16264:	00fa0123          	sb	a5,2(s4)
   16268:	0087d793          	srli	a5,a5,0x8
   1626c:	00fa01a3          	sb	a5,3(s4)
   16270:	f75ff06f          	j	161e4 <icmp_input+0x2a0>
      ICMP_STATS_INC(icmp.proterr);
   16274:	000227b7          	lui	a5,0x22
   16278:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1627c:	0707d703          	lhu	a4,112(a5)
   16280:	00170713          	addi	a4,a4,1
   16284:	06e79823          	sh	a4,112(a5)
      ICMP_STATS_INC(icmp.drop);
   16288:	0667d703          	lhu	a4,102(a5)
   1628c:	00170713          	addi	a4,a4,1
   16290:	06e79323          	sh	a4,102(a5)
  pbuf_free(p);
   16294:	00048513          	mv	a0,s1
   16298:	8b9f60ef          	jal	ra,cb50 <pbuf_free>
  return;
   1629c:	d7dff06f          	j	16018 <icmp_input+0xd4>

000162a0 <icmp_dest_unreach>:
{
   162a0:	ff010113          	addi	sp,sp,-16
   162a4:	00112623          	sw	ra,12(sp)
  icmp_send_response(p, ICMP_DUR, t);
   162a8:	0ff5f613          	andi	a2,a1,255
   162ac:	00300593          	li	a1,3
   162b0:	b21ff0ef          	jal	ra,15dd0 <icmp_send_response>
}
   162b4:	00c12083          	lw	ra,12(sp)
   162b8:	01010113          	addi	sp,sp,16
   162bc:	00008067          	ret

000162c0 <icmp_time_exceeded>:
{
   162c0:	ff010113          	addi	sp,sp,-16
   162c4:	00112623          	sw	ra,12(sp)
  icmp_send_response(p, ICMP_TE, t);
   162c8:	0ff5f613          	andi	a2,a1,255
   162cc:	00b00593          	li	a1,11
   162d0:	b01ff0ef          	jal	ra,15dd0 <icmp_send_response>
}
   162d4:	00c12083          	lw	ra,12(sp)
   162d8:	01010113          	addi	sp,sp,16
   162dc:	00008067          	ret

000162e0 <uart_writeAvailability>:
        return *((volatile u32*) address);
   162e0:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   162e4:	01055513          	srli	a0,a0,0x10
    }
   162e8:	0ff57513          	andi	a0,a0,255
   162ec:	00008067          	ret

000162f0 <uart_write>:
    static void uart_write(u32 reg, char data){
   162f0:	ff010113          	addi	sp,sp,-16
   162f4:	00112623          	sw	ra,12(sp)
   162f8:	00812423          	sw	s0,8(sp)
   162fc:	00912223          	sw	s1,4(sp)
   16300:	00050413          	mv	s0,a0
   16304:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   16308:	00040513          	mv	a0,s0
   1630c:	fd5ff0ef          	jal	ra,162e0 <uart_writeAvailability>
   16310:	fe050ce3          	beqz	a0,16308 <uart_write+0x18>
        *((volatile u32*) address) = data;
   16314:	00942023          	sw	s1,0(s0)
    }
   16318:	00c12083          	lw	ra,12(sp)
   1631c:	00812403          	lw	s0,8(sp)
   16320:	00412483          	lw	s1,4(sp)
   16324:	01010113          	addi	sp,sp,16
   16328:	00008067          	ret

0001632c <bsp_printHex>:
    {
   1632c:	ff010113          	addi	sp,sp,-16
   16330:	00112623          	sw	ra,12(sp)
   16334:	00812423          	sw	s0,8(sp)
   16338:	00912223          	sw	s1,4(sp)
   1633c:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   16340:	01c00413          	li	s0,28
   16344:	0280006f          	j	1636c <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   16348:	0084d7b3          	srl	a5,s1,s0
   1634c:	00f7f713          	andi	a4,a5,15
   16350:	0001c7b7          	lui	a5,0x1c
   16354:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   16358:	00e787b3          	add	a5,a5,a4
   1635c:	0007c583          	lbu	a1,0(a5)
   16360:	f8010537          	lui	a0,0xf8010
   16364:	f8dff0ef          	jal	ra,162f0 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   16368:	ffc40413          	addi	s0,s0,-4
   1636c:	fc045ee3          	bgez	s0,16348 <bsp_printHex+0x1c>
    }
   16370:	00c12083          	lw	ra,12(sp)
   16374:	00812403          	lw	s0,8(sp)
   16378:	00412483          	lw	s1,4(sp)
   1637c:	01010113          	addi	sp,sp,16
   16380:	00008067          	ret

00016384 <bsp_printHex_lower>:
        {
   16384:	ff010113          	addi	sp,sp,-16
   16388:	00112623          	sw	ra,12(sp)
   1638c:	00812423          	sw	s0,8(sp)
   16390:	00912223          	sw	s1,4(sp)
   16394:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   16398:	01c00413          	li	s0,28
   1639c:	0280006f          	j	163c4 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   163a0:	0084d7b3          	srl	a5,s1,s0
   163a4:	00f7f713          	andi	a4,a5,15
   163a8:	0001c7b7          	lui	a5,0x1c
   163ac:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   163b0:	00e787b3          	add	a5,a5,a4
   163b4:	0007c583          	lbu	a1,0(a5)
   163b8:	f8010537          	lui	a0,0xf8010
   163bc:	f35ff0ef          	jal	ra,162f0 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   163c0:	ffc40413          	addi	s0,s0,-4
   163c4:	fc045ee3          	bgez	s0,163a0 <bsp_printHex_lower+0x1c>
        }
   163c8:	00c12083          	lw	ra,12(sp)
   163cc:	00812403          	lw	s0,8(sp)
   163d0:	00412483          	lw	s1,4(sp)
   163d4:	01010113          	addi	sp,sp,16
   163d8:	00008067          	ret

000163dc <bsp_printf_c>:
    {
   163dc:	ff010113          	addi	sp,sp,-16
   163e0:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   163e4:	0ff57593          	andi	a1,a0,255
   163e8:	f8010537          	lui	a0,0xf8010
   163ec:	f05ff0ef          	jal	ra,162f0 <uart_write>
    }
   163f0:	00c12083          	lw	ra,12(sp)
   163f4:	01010113          	addi	sp,sp,16
   163f8:	00008067          	ret

000163fc <bsp_printf_s>:
    {
   163fc:	ff010113          	addi	sp,sp,-16
   16400:	00112623          	sw	ra,12(sp)
   16404:	00812423          	sw	s0,8(sp)
   16408:	00050413          	mv	s0,a0
        while (*p)
   1640c:	00044583          	lbu	a1,0(s0)
   16410:	00058a63          	beqz	a1,16424 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   16414:	00140413          	addi	s0,s0,1
   16418:	f8010537          	lui	a0,0xf8010
   1641c:	ed5ff0ef          	jal	ra,162f0 <uart_write>
   16420:	fedff06f          	j	1640c <bsp_printf_s+0x10>
    }
   16424:	00c12083          	lw	ra,12(sp)
   16428:	00812403          	lw	s0,8(sp)
   1642c:	01010113          	addi	sp,sp,16
   16430:	00008067          	ret

00016434 <bsp_printf_d>:
    {
   16434:	fd010113          	addi	sp,sp,-48
   16438:	02112623          	sw	ra,44(sp)
   1643c:	02812423          	sw	s0,40(sp)
   16440:	02912223          	sw	s1,36(sp)
   16444:	00050493          	mv	s1,a0
        if (val < 0) {
   16448:	00054663          	bltz	a0,16454 <bsp_printf_d+0x20>
    {
   1644c:	00010413          	mv	s0,sp
   16450:	02c0006f          	j	1647c <bsp_printf_d+0x48>
            bsp_printf_c('-');
   16454:	02d00513          	li	a0,45
   16458:	f85ff0ef          	jal	ra,163dc <bsp_printf_c>
            val = -val;
   1645c:	409004b3          	neg	s1,s1
   16460:	fedff06f          	j	1644c <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   16464:	00a00713          	li	a4,10
   16468:	02e4e7b3          	rem	a5,s1,a4
   1646c:	03078793          	addi	a5,a5,48
   16470:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   16474:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   16478:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   1647c:	fe0494e3          	bnez	s1,16464 <bsp_printf_d+0x30>
   16480:	00010793          	mv	a5,sp
   16484:	fef400e3          	beq	s0,a5,16464 <bsp_printf_d+0x30>
   16488:	0100006f          	j	16498 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   1648c:	fff40413          	addi	s0,s0,-1
   16490:	00044503          	lbu	a0,0(s0)
   16494:	f49ff0ef          	jal	ra,163dc <bsp_printf_c>
        while (p != buffer)
   16498:	00010793          	mv	a5,sp
   1649c:	fef418e3          	bne	s0,a5,1648c <bsp_printf_d+0x58>
    }
   164a0:	02c12083          	lw	ra,44(sp)
   164a4:	02812403          	lw	s0,40(sp)
   164a8:	02412483          	lw	s1,36(sp)
   164ac:	03010113          	addi	sp,sp,48
   164b0:	00008067          	ret

000164b4 <bsp_printf_x>:
    {
   164b4:	ff010113          	addi	sp,sp,-16
   164b8:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   164bc:	00000713          	li	a4,0
   164c0:	00700793          	li	a5,7
   164c4:	02e7c063          	blt	a5,a4,164e4 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   164c8:	00271693          	slli	a3,a4,0x2
   164cc:	ff000793          	li	a5,-16
   164d0:	00d797b3          	sll	a5,a5,a3
   164d4:	00f577b3          	and	a5,a0,a5
   164d8:	00078663          	beqz	a5,164e4 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   164dc:	00170713          	addi	a4,a4,1
   164e0:	fe1ff06f          	j	164c0 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   164e4:	ea1ff0ef          	jal	ra,16384 <bsp_printHex_lower>
    }
   164e8:	00c12083          	lw	ra,12(sp)
   164ec:	01010113          	addi	sp,sp,16
   164f0:	00008067          	ret

000164f4 <bsp_printf_X>:
        {
   164f4:	ff010113          	addi	sp,sp,-16
   164f8:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   164fc:	00000713          	li	a4,0
   16500:	00700793          	li	a5,7
   16504:	02e7c063          	blt	a5,a4,16524 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   16508:	00271693          	slli	a3,a4,0x2
   1650c:	ff000793          	li	a5,-16
   16510:	00d797b3          	sll	a5,a5,a3
   16514:	00f577b3          	and	a5,a0,a5
   16518:	00078663          	beqz	a5,16524 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   1651c:	00170713          	addi	a4,a4,1
   16520:	fe1ff06f          	j	16500 <bsp_printf_X+0xc>
            bsp_printHex(val);
   16524:	e09ff0ef          	jal	ra,1632c <bsp_printHex>
        }
   16528:	00c12083          	lw	ra,12(sp)
   1652c:	01010113          	addi	sp,sp,16
   16530:	00008067          	ret

00016534 <ip4_input_accept>:
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
   16534:	03554783          	lbu	a5,53(a0) # f8010035 <__freertos_irq_stack_top+0xf7feb105>
   16538:	0017f793          	andi	a5,a5,1
   1653c:	04078663          	beqz	a5,16588 <ip4_input_accept+0x54>
   16540:	00452783          	lw	a5,4(a0)
   16544:	04078663          	beqz	a5,16590 <ip4_input_accept+0x5c>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
   16548:	00022737          	lui	a4,0x22
   1654c:	ee470713          	addi	a4,a4,-284 # 21ee4 <ip_data>
   16550:	01472703          	lw	a4,20(a4)
   16554:	04e78263          	beq	a5,a4,16598 <ip4_input_accept+0x64>
{
   16558:	ff010113          	addi	sp,sp,-16
   1655c:	00112623          	sw	ra,12(sp)
   16560:	00050593          	mv	a1,a0
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
   16564:	00070513          	mv	a0,a4
   16568:	6b9010ef          	jal	ra,18420 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
   1656c:	00051a63          	bnez	a0,16580 <ip4_input_accept+0x4c>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
   16570:	00000513          	li	a0,0
}
   16574:	00c12083          	lw	ra,12(sp)
   16578:	01010113          	addi	sp,sp,16
   1657c:	00008067          	ret
      return 1;
   16580:	00100513          	li	a0,1
   16584:	ff1ff06f          	j	16574 <ip4_input_accept+0x40>
  return 0;
   16588:	00000513          	li	a0,0
   1658c:	00008067          	ret
   16590:	00000513          	li	a0,0
   16594:	00008067          	ret
      return 1;
   16598:	00100513          	li	a0,1
}
   1659c:	00008067          	ret

000165a0 <bsp_printf>:
    {
   165a0:	fc010113          	addi	sp,sp,-64
   165a4:	00112e23          	sw	ra,28(sp)
   165a8:	00812c23          	sw	s0,24(sp)
   165ac:	00912a23          	sw	s1,20(sp)
   165b0:	00050493          	mv	s1,a0
   165b4:	02b12223          	sw	a1,36(sp)
   165b8:	02c12423          	sw	a2,40(sp)
   165bc:	02d12623          	sw	a3,44(sp)
   165c0:	02e12823          	sw	a4,48(sp)
   165c4:	02f12a23          	sw	a5,52(sp)
   165c8:	03012c23          	sw	a6,56(sp)
   165cc:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   165d0:	02410793          	addi	a5,sp,36
   165d4:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   165d8:	00000413          	li	s0,0
   165dc:	01c0006f          	j	165f8 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   165e0:	00c12783          	lw	a5,12(sp)
   165e4:	00478713          	addi	a4,a5,4
   165e8:	00e12623          	sw	a4,12(sp)
   165ec:	0007a503          	lw	a0,0(a5)
   165f0:	dedff0ef          	jal	ra,163dc <bsp_printf_c>
        for (i = 0; format[i]; i++)
   165f4:	00140413          	addi	s0,s0,1
   165f8:	008487b3          	add	a5,s1,s0
   165fc:	0007c503          	lbu	a0,0(a5)
   16600:	0c050263          	beqz	a0,166c4 <bsp_printf+0x124>
            if (format[i] == '%') {
   16604:	02500793          	li	a5,37
   16608:	06f50663          	beq	a0,a5,16674 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   1660c:	dd1ff0ef          	jal	ra,163dc <bsp_printf_c>
   16610:	fe5ff06f          	j	165f4 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   16614:	00c12783          	lw	a5,12(sp)
   16618:	00478713          	addi	a4,a5,4
   1661c:	00e12623          	sw	a4,12(sp)
   16620:	0007a503          	lw	a0,0(a5)
   16624:	dd9ff0ef          	jal	ra,163fc <bsp_printf_s>
                        break;
   16628:	fcdff06f          	j	165f4 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   1662c:	00c12783          	lw	a5,12(sp)
   16630:	00478713          	addi	a4,a5,4
   16634:	00e12623          	sw	a4,12(sp)
   16638:	0007a503          	lw	a0,0(a5)
   1663c:	df9ff0ef          	jal	ra,16434 <bsp_printf_d>
                        break;
   16640:	fb5ff06f          	j	165f4 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   16644:	00c12783          	lw	a5,12(sp)
   16648:	00478713          	addi	a4,a5,4
   1664c:	00e12623          	sw	a4,12(sp)
   16650:	0007a503          	lw	a0,0(a5)
   16654:	ea1ff0ef          	jal	ra,164f4 <bsp_printf_X>
                        break;
   16658:	f9dff06f          	j	165f4 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   1665c:	00c12783          	lw	a5,12(sp)
   16660:	00478713          	addi	a4,a5,4
   16664:	00e12623          	sw	a4,12(sp)
   16668:	0007a503          	lw	a0,0(a5)
   1666c:	e49ff0ef          	jal	ra,164b4 <bsp_printf_x>
                        break;
   16670:	f85ff06f          	j	165f4 <bsp_printf+0x54>
                while (format[++i]) {
   16674:	00140413          	addi	s0,s0,1
   16678:	008487b3          	add	a5,s1,s0
   1667c:	0007c783          	lbu	a5,0(a5)
   16680:	f6078ae3          	beqz	a5,165f4 <bsp_printf+0x54>
                    if (format[i] == 'c') {
   16684:	06300713          	li	a4,99
   16688:	f4e78ce3          	beq	a5,a4,165e0 <bsp_printf+0x40>
                    else if (format[i] == 's') {
   1668c:	07300713          	li	a4,115
   16690:	f8e782e3          	beq	a5,a4,16614 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   16694:	06400713          	li	a4,100
   16698:	f8e78ae3          	beq	a5,a4,1662c <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   1669c:	05800713          	li	a4,88
   166a0:	fae782e3          	beq	a5,a4,16644 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   166a4:	07800713          	li	a4,120
   166a8:	fae78ae3          	beq	a5,a4,1665c <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   166ac:	06600713          	li	a4,102
   166b0:	fce792e3          	bne	a5,a4,16674 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   166b4:	0001c537          	lui	a0,0x1c
   166b8:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   166bc:	d41ff0ef          	jal	ra,163fc <bsp_printf_s>
                        break;
   166c0:	f35ff06f          	j	165f4 <bsp_printf+0x54>
    }
   166c4:	01c12083          	lw	ra,28(sp)
   166c8:	01812403          	lw	s0,24(sp)
   166cc:	01412483          	lw	s1,20(sp)
   166d0:	04010113          	addi	sp,sp,64
   166d4:	00008067          	ret

000166d8 <ip4_set_default_multicast_netif>:
  ip4_default_multicast_netif = default_multicast_netif;
   166d8:	94a1aa23          	sw	a0,-1708(gp) # 1fb24 <ip4_default_multicast_netif>
}
   166dc:	00008067          	ret

000166e0 <ip4_route>:
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
   166e0:	00052603          	lw	a2,0(a0)
   166e4:	0f067713          	andi	a4,a2,240
   166e8:	0e000793          	li	a5,224
   166ec:	00f70863          	beq	a4,a5,166fc <ip4_route+0x1c>
  NETIF_FOREACH(netif) {
   166f0:	000227b7          	lui	a5,0x22
   166f4:	ed47a783          	lw	a5,-300(a5) # 21ed4 <netif_list>
   166f8:	0140006f          	j	1670c <ip4_route+0x2c>
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
   166fc:	9541a503          	lw	a0,-1708(gp) # 1fb24 <ip4_default_multicast_netif>
   16700:	08051463          	bnez	a0,16788 <ip4_route+0xa8>
   16704:	fedff06f          	j	166f0 <ip4_route+0x10>
  NETIF_FOREACH(netif) {
   16708:	0007a783          	lw	a5,0(a5)
   1670c:	04078663          	beqz	a5,16758 <ip4_route+0x78>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
   16710:	0357c703          	lbu	a4,53(a5)
   16714:	00177693          	andi	a3,a4,1
   16718:	fe0688e3          	beqz	a3,16708 <ip4_route+0x28>
   1671c:	00275693          	srli	a3,a4,0x2
   16720:	0016f693          	andi	a3,a3,1
   16724:	fe0682e3          	beqz	a3,16708 <ip4_route+0x28>
   16728:	0047a683          	lw	a3,4(a5)
   1672c:	fc068ee3          	beqz	a3,16708 <ip4_route+0x28>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
   16730:	0087a583          	lw	a1,8(a5)
   16734:	00d646b3          	xor	a3,a2,a3
   16738:	00b6f6b3          	and	a3,a3,a1
   1673c:	06068663          	beqz	a3,167a8 <ip4_route+0xc8>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
   16740:	00277713          	andi	a4,a4,2
   16744:	fc0712e3          	bnez	a4,16708 <ip4_route+0x28>
   16748:	00c7a703          	lw	a4,12(a5)
   1674c:	fae61ee3          	bne	a2,a4,16708 <ip4_route+0x28>
        return netif;
   16750:	00078513          	mv	a0,a5
   16754:	0340006f          	j	16788 <ip4_route+0xa8>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
   16758:	00022737          	lui	a4,0x22
   1675c:	ed872503          	lw	a0,-296(a4) # 21ed8 <netif_default>
   16760:	02050663          	beqz	a0,1678c <ip4_route+0xac>
   16764:	03554703          	lbu	a4,53(a0)
   16768:	00577713          	andi	a4,a4,5
   1676c:	00500693          	li	a3,5
   16770:	00d71e63          	bne	a4,a3,1678c <ip4_route+0xac>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
   16774:	00452703          	lw	a4,4(a0)
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
   16778:	00070a63          	beqz	a4,1678c <ip4_route+0xac>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
   1677c:	0ff67613          	andi	a2,a2,255
   16780:	07f00713          	li	a4,127
   16784:	00e60463          	beq	a2,a4,1678c <ip4_route+0xac>
}
   16788:	00008067          	ret
    IP_STATS_INC(ip.rterr);
   1678c:	00022737          	lui	a4,0x22
   16790:	dc070713          	addi	a4,a4,-576 # 21dc0 <lwip_stats>
   16794:	05675683          	lhu	a3,86(a4)
   16798:	00168693          	addi	a3,a3,1
   1679c:	04d71b23          	sh	a3,86(a4)
    return NULL;
   167a0:	00078513          	mv	a0,a5
   167a4:	00008067          	ret
        return netif;
   167a8:	00078513          	mv	a0,a5
   167ac:	00008067          	ret

000167b0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
   167b0:	fe010113          	addi	sp,sp,-32
   167b4:	00112e23          	sw	ra,28(sp)
   167b8:	00812c23          	sw	s0,24(sp)
   167bc:	00912a23          	sw	s1,20(sp)
   167c0:	01212823          	sw	s2,16(sp)
   167c4:	01312623          	sw	s3,12(sp)
   167c8:	01412423          	sw	s4,8(sp)
   167cc:	01512223          	sw	s5,4(sp)
   167d0:	00050413          	mv	s0,a0
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
   167d4:	000227b7          	lui	a5,0x22
   167d8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   167dc:	04a7d703          	lhu	a4,74(a5)
   167e0:	00170713          	addi	a4,a4,1
   167e4:	04e79523          	sh	a4,74(a5)
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
   167e8:	00452903          	lw	s2,4(a0)
  if (IPH_V(iphdr) != 4) {
   167ec:	00094783          	lbu	a5,0(s2)
   167f0:	0047d693          	srli	a3,a5,0x4
   167f4:	00400713          	li	a4,4
   167f8:	04e68863          	beq	a3,a4,16848 <ip4_input+0x98>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
   167fc:	b54f60ef          	jal	ra,cb50 <pbuf_free>
    IP_STATS_INC(ip.err);
   16800:	000227b7          	lui	a5,0x22
   16804:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   16808:	05c7d703          	lhu	a4,92(a5)
   1680c:	00170713          	addi	a4,a4,1
   16810:	04e79e23          	sh	a4,92(a5)
    IP_STATS_INC(ip.drop);
   16814:	04e7d703          	lhu	a4,78(a5)
   16818:	00170713          	addi	a4,a4,1
   1681c:	04e79723          	sh	a4,78(a5)
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
   16820:	00000513          	li	a0,0
   16824:	01c12083          	lw	ra,28(sp)
   16828:	01812403          	lw	s0,24(sp)
   1682c:	01412483          	lw	s1,20(sp)
   16830:	01012903          	lw	s2,16(sp)
   16834:	00c12983          	lw	s3,12(sp)
   16838:	00812a03          	lw	s4,8(sp)
   1683c:	00412a83          	lw	s5,4(sp)
   16840:	02010113          	addi	sp,sp,32
   16844:	00008067          	ret
   16848:	00058993          	mv	s3,a1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
   1684c:	00f7f793          	andi	a5,a5,15
   16850:	00279493          	slli	s1,a5,0x2
   16854:	01049a93          	slli	s5,s1,0x10
   16858:	010ada93          	srli	s5,s5,0x10
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
   1685c:	00294503          	lbu	a0,2(s2)
   16860:	00394783          	lbu	a5,3(s2)
   16864:	00879793          	slli	a5,a5,0x8
   16868:	00a7e533          	or	a0,a5,a0
   1686c:	c0df30ef          	jal	ra,a478 <lwip_htons>
   16870:	00050a13          	mv	s4,a0
  if (iphdr_len < p->tot_len) {
   16874:	00845783          	lhu	a5,8(s0)
   16878:	04f56463          	bltu	a0,a5,168c0 <ip4_input+0x110>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
   1687c:	00a45783          	lhu	a5,10(s0)
   16880:	0157ea63          	bltu	a5,s5,16894 <ip4_input+0xe4>
   16884:	00845783          	lhu	a5,8(s0)
   16888:	0147e663          	bltu	a5,s4,16894 <ip4_input+0xe4>
   1688c:	01300793          	li	a5,19
   16890:	0557e063          	bltu	a5,s5,168d0 <ip4_input+0x120>
    pbuf_free(p);
   16894:	00040513          	mv	a0,s0
   16898:	ab8f60ef          	jal	ra,cb50 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
   1689c:	000227b7          	lui	a5,0x22
   168a0:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   168a4:	0527d703          	lhu	a4,82(a5)
   168a8:	00170713          	addi	a4,a4,1
   168ac:	04e79923          	sh	a4,82(a5)
    IP_STATS_INC(ip.drop);
   168b0:	04e7d703          	lhu	a4,78(a5)
   168b4:	00170713          	addi	a4,a4,1
   168b8:	04e79723          	sh	a4,78(a5)
    return ERR_OK;
   168bc:	f65ff06f          	j	16820 <ip4_input+0x70>
    pbuf_realloc(p, iphdr_len);
   168c0:	00050593          	mv	a1,a0
   168c4:	00040513          	mv	a0,s0
   168c8:	dfcf60ef          	jal	ra,cec4 <pbuf_realloc>
   168cc:	fb1ff06f          	j	1687c <ip4_input+0xcc>
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
   168d0:	000a8593          	mv	a1,s5
   168d4:	00090513          	mv	a0,s2
   168d8:	bf0fe0ef          	jal	ra,14cc8 <inet_chksum>
   168dc:	14051463          	bnez	a0,16a24 <ip4_input+0x274>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
   168e0:	01094783          	lbu	a5,16(s2)
   168e4:	01194703          	lbu	a4,17(s2)
   168e8:	00871713          	slli	a4,a4,0x8
   168ec:	00f76733          	or	a4,a4,a5
   168f0:	01294783          	lbu	a5,18(s2)
   168f4:	01079793          	slli	a5,a5,0x10
   168f8:	00e7e733          	or	a4,a5,a4
   168fc:	01394783          	lbu	a5,19(s2)
   16900:	01879793          	slli	a5,a5,0x18
   16904:	00e7e7b3          	or	a5,a5,a4
   16908:	00022637          	lui	a2,0x22
   1690c:	ee460613          	addi	a2,a2,-284 # 21ee4 <ip_data>
   16910:	00f62a23          	sw	a5,20(a2)
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
   16914:	00c94703          	lbu	a4,12(s2)
   16918:	00d94683          	lbu	a3,13(s2)
   1691c:	00869693          	slli	a3,a3,0x8
   16920:	00e6e6b3          	or	a3,a3,a4
   16924:	00e94703          	lbu	a4,14(s2)
   16928:	01071713          	slli	a4,a4,0x10
   1692c:	00d766b3          	or	a3,a4,a3
   16930:	00f94703          	lbu	a4,15(s2)
   16934:	01871713          	slli	a4,a4,0x18
   16938:	00d76733          	or	a4,a4,a3
   1693c:	00e62823          	sw	a4,16(a2)
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
   16940:	0f07f793          	andi	a5,a5,240
   16944:	0e000713          	li	a4,224
   16948:	14e79c63          	bne	a5,a4,16aa0 <ip4_input+0x2f0>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
   1694c:	0359c783          	lbu	a5,53(s3)
   16950:	0207f793          	andi	a5,a5,32
   16954:	0e079e63          	bnez	a5,16a50 <ip4_input+0x2a0>
      netif = NULL;
   16958:	00000a13          	li	s4,0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
   1695c:	000227b7          	lui	a5,0x22
   16960:	00098593          	mv	a1,s3
   16964:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   16968:	0107a503          	lw	a0,16(a5)
   1696c:	2b5010ef          	jal	ra,18420 <ip4_addr_isbroadcast_u32>
   16970:	18051463          	bnez	a0,16af8 <ip4_input+0x348>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
   16974:	000227b7          	lui	a5,0x22
   16978:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   1697c:	0107a783          	lw	a5,16(a5)
   16980:	0f07f793          	andi	a5,a5,240
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
   16984:	0e000713          	li	a4,224
   16988:	16e78863          	beq	a5,a4,16af8 <ip4_input+0x348>
  if (netif == NULL) {
   1698c:	180a0a63          	beqz	s4,16b20 <ip4_input+0x370>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
   16990:	00694703          	lbu	a4,6(s2)
   16994:	00794783          	lbu	a5,7(s2)
   16998:	00879793          	slli	a5,a5,0x8
   1699c:	00e7e7b3          	or	a5,a5,a4
   169a0:	f3f7f793          	andi	a5,a5,-193
   169a4:	01079793          	slli	a5,a5,0x10
   169a8:	0107d793          	srli	a5,a5,0x10
   169ac:	00078c63          	beqz	a5,169c4 <ip4_input+0x214>
    p = ip4_reass(p);
   169b0:	00040513          	mv	a0,s0
   169b4:	280040ef          	jal	ra,1ac34 <ip4_reass>
   169b8:	00050413          	mv	s0,a0
    if (p == NULL) {
   169bc:	e60502e3          	beqz	a0,16820 <ip4_input+0x70>
    iphdr = (const struct ip_hdr *)p->payload;
   169c0:	00452903          	lw	s2,4(a0)
  ip_data.current_netif = netif;
   169c4:	000227b7          	lui	a5,0x22
   169c8:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   169cc:	0147a023          	sw	s4,0(a5)
  ip_data.current_input_netif = inp;
   169d0:	0137a223          	sw	s3,4(a5)
  ip_data.current_ip4_header = iphdr;
   169d4:	0127a423          	sw	s2,8(a5)
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
   169d8:	00094703          	lbu	a4,0(s2)
   169dc:	00f77713          	andi	a4,a4,15
   169e0:	00271713          	slli	a4,a4,0x2
   169e4:	00e79623          	sh	a4,12(a5)
  raw_status = raw_input(p, inp);
   169e8:	00098593          	mv	a1,s3
   169ec:	00040513          	mv	a0,s0
   169f0:	a54fa0ef          	jal	ra,10c44 <raw_input>
   169f4:	00050a93          	mv	s5,a0
  if (raw_status != RAW_INPUT_EATEN)
   169f8:	00100793          	li	a5,1
   169fc:	14f51263          	bne	a0,a5,16b40 <ip4_input+0x390>
  ip_data.current_netif = NULL;
   16a00:	000227b7          	lui	a5,0x22
   16a04:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   16a08:	0007a023          	sw	zero,0(a5)
  ip_data.current_input_netif = NULL;
   16a0c:	0007a223          	sw	zero,4(a5)
  ip_data.current_ip4_header = NULL;
   16a10:	0007a423          	sw	zero,8(a5)
  ip_data.current_ip_header_tot_len = 0;
   16a14:	00079623          	sh	zero,12(a5)
  ip4_addr_set_any(ip4_current_src_addr());
   16a18:	0007a823          	sw	zero,16(a5)
  ip4_addr_set_any(ip4_current_dest_addr());
   16a1c:	0007aa23          	sw	zero,20(a5)
  return ERR_OK;
   16a20:	e01ff06f          	j	16820 <ip4_input+0x70>
      pbuf_free(p);
   16a24:	00040513          	mv	a0,s0
   16a28:	928f60ef          	jal	ra,cb50 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
   16a2c:	000227b7          	lui	a5,0x22
   16a30:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   16a34:	0507d703          	lhu	a4,80(a5)
   16a38:	00170713          	addi	a4,a4,1
   16a3c:	04e79823          	sh	a4,80(a5)
      IP_STATS_INC(ip.drop);
   16a40:	04e7d703          	lhu	a4,78(a5)
   16a44:	00170713          	addi	a4,a4,1
   16a48:	04e79723          	sh	a4,78(a5)
      return ERR_OK;
   16a4c:	dd5ff06f          	j	16820 <ip4_input+0x70>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
   16a50:	000225b7          	lui	a1,0x22
   16a54:	ef858593          	addi	a1,a1,-264 # 21ef8 <ip_data+0x14>
   16a58:	00098513          	mv	a0,s3
   16a5c:	691000ef          	jal	ra,178ec <igmp_lookfor_group>
   16a60:	00050a13          	mv	s4,a0
   16a64:	ee050ce3          	beqz	a0,1695c <ip4_input+0x1ac>
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
   16a68:	000227b7          	lui	a5,0x22
   16a6c:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   16a70:	0147a703          	lw	a4,20(a5)
   16a74:	010007b7          	lui	a5,0x1000
   16a78:	0e078793          	addi	a5,a5,224 # 10000e0 <__freertos_irq_stack_top+0xfdb1b0>
   16a7c:	00f70663          	beq	a4,a5,16a88 <ip4_input+0x2d8>
      netif = inp;
   16a80:	00098a13          	mv	s4,s3
   16a84:	ed9ff06f          	j	1695c <ip4_input+0x1ac>
          ip4_addr_isany(ip4_current_src_addr())) {
   16a88:	000227b7          	lui	a5,0x22
   16a8c:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   16a90:	0107a783          	lw	a5,16(a5)
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
   16a94:	08078263          	beqz	a5,16b18 <ip4_input+0x368>
      netif = inp;
   16a98:	00098a13          	mv	s4,s3
   16a9c:	ec1ff06f          	j	1695c <ip4_input+0x1ac>
    if (ip4_input_accept(inp)) {
   16aa0:	00098513          	mv	a0,s3
   16aa4:	a91ff0ef          	jal	ra,16534 <ip4_input_accept>
   16aa8:	04051063          	bnez	a0,16ae8 <ip4_input+0x338>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
   16aac:	000227b7          	lui	a5,0x22
   16ab0:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   16ab4:	0147c703          	lbu	a4,20(a5)
   16ab8:	07f00793          	li	a5,127
   16abc:	02f70a63          	beq	a4,a5,16af0 <ip4_input+0x340>
        NETIF_FOREACH(netif) {
   16ac0:	000227b7          	lui	a5,0x22
   16ac4:	ed47aa03          	lw	s4,-300(a5) # 21ed4 <netif_list>
   16ac8:	0080006f          	j	16ad0 <ip4_input+0x320>
   16acc:	000a2a03          	lw	s4,0(s4)
   16ad0:	e80a06e3          	beqz	s4,1695c <ip4_input+0x1ac>
          if (netif == inp) {
   16ad4:	ff3a0ce3          	beq	s4,s3,16acc <ip4_input+0x31c>
          if (ip4_input_accept(netif)) {
   16ad8:	000a0513          	mv	a0,s4
   16adc:	a59ff0ef          	jal	ra,16534 <ip4_input_accept>
   16ae0:	fe0506e3          	beqz	a0,16acc <ip4_input+0x31c>
   16ae4:	e79ff06f          	j	1695c <ip4_input+0x1ac>
      netif = inp;
   16ae8:	00098a13          	mv	s4,s3
   16aec:	e71ff06f          	j	1695c <ip4_input+0x1ac>
      netif = NULL;
   16af0:	00000a13          	li	s4,0
   16af4:	e69ff06f          	j	1695c <ip4_input+0x1ac>
      pbuf_free(p);
   16af8:	00040513          	mv	a0,s0
   16afc:	854f60ef          	jal	ra,cb50 <pbuf_free>
      IP_STATS_INC(ip.drop);
   16b00:	000227b7          	lui	a5,0x22
   16b04:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   16b08:	04e7d703          	lhu	a4,78(a5)
   16b0c:	00170713          	addi	a4,a4,1
   16b10:	04e79723          	sh	a4,78(a5)
      return ERR_OK;
   16b14:	d0dff06f          	j	16820 <ip4_input+0x70>
      netif = inp;
   16b18:	00098a13          	mv	s4,s3
   16b1c:	e71ff06f          	j	1698c <ip4_input+0x1dc>
      IP_STATS_INC(ip.drop);
   16b20:	000227b7          	lui	a5,0x22
   16b24:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   16b28:	04e7d703          	lhu	a4,78(a5)
   16b2c:	00170713          	addi	a4,a4,1
   16b30:	04e79723          	sh	a4,78(a5)
    pbuf_free(p);
   16b34:	00040513          	mv	a0,s0
   16b38:	818f60ef          	jal	ra,cb50 <pbuf_free>
    return ERR_OK;
   16b3c:	ce5ff06f          	j	16820 <ip4_input+0x70>
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
   16b40:	00048593          	mv	a1,s1
   16b44:	00040513          	mv	a0,s0
   16b48:	f05f50ef          	jal	ra,ca4c <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
   16b4c:	00994783          	lbu	a5,9(s2)
   16b50:	00200713          	li	a4,2
   16b54:	04e78463          	beq	a5,a4,16b9c <ip4_input+0x3ec>
   16b58:	00600713          	li	a4,6
   16b5c:	02e78063          	beq	a5,a4,16b7c <ip4_input+0x3cc>
   16b60:	00100713          	li	a4,1
   16b64:	02e78463          	beq	a5,a4,16b8c <ip4_input+0x3dc>
        if (raw_status == RAW_INPUT_DELIVERED) {
   16b68:	00200793          	li	a5,2
   16b6c:	04fa9463          	bne	s5,a5,16bb4 <ip4_input+0x404>
        pbuf_free(p);
   16b70:	00040513          	mv	a0,s0
   16b74:	fddf50ef          	jal	ra,cb50 <pbuf_free>
        break;
   16b78:	e89ff06f          	j	16a00 <ip4_input+0x250>
        tcp_input(p, inp);
   16b7c:	00098593          	mv	a1,s3
   16b80:	00040513          	mv	a0,s0
   16b84:	af8f90ef          	jal	ra,fe7c <tcp_input>
        break;
   16b88:	e79ff06f          	j	16a00 <ip4_input+0x250>
        icmp_input(p, inp);
   16b8c:	00098593          	mv	a1,s3
   16b90:	00040513          	mv	a0,s0
   16b94:	bb0ff0ef          	jal	ra,15f44 <icmp_input>
        break;
   16b98:	e69ff06f          	j	16a00 <ip4_input+0x250>
        igmp_input(p, inp, ip4_current_dest_addr());
   16b9c:	00022637          	lui	a2,0x22
   16ba0:	ef860613          	addi	a2,a2,-264 # 21ef8 <ip_data+0x14>
   16ba4:	00098593          	mv	a1,s3
   16ba8:	00040513          	mv	a0,s0
   16bac:	6a1000ef          	jal	ra,17a4c <igmp_input>
        break;
   16bb0:	e51ff06f          	j	16a00 <ip4_input+0x250>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
   16bb4:	000227b7          	lui	a5,0x22
   16bb8:	000a0593          	mv	a1,s4
   16bbc:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   16bc0:	0147a503          	lw	a0,20(a5)
   16bc4:	05d010ef          	jal	ra,18420 <ip4_addr_isbroadcast_u32>
   16bc8:	00051e63          	bnez	a0,16be4 <ip4_input+0x434>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
   16bcc:	000227b7          	lui	a5,0x22
   16bd0:	ee478793          	addi	a5,a5,-284 # 21ee4 <ip_data>
   16bd4:	0147a783          	lw	a5,20(a5)
   16bd8:	0f07f793          	andi	a5,a5,240
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
   16bdc:	0e000713          	li	a4,224
   16be0:	02e79463          	bne	a5,a4,16c08 <ip4_input+0x458>
          IP_STATS_INC(ip.proterr);
   16be4:	000227b7          	lui	a5,0x22
   16be8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   16bec:	0587d703          	lhu	a4,88(a5)
   16bf0:	00170713          	addi	a4,a4,1
   16bf4:	04e79c23          	sh	a4,88(a5)
          IP_STATS_INC(ip.drop);
   16bf8:	04e7d703          	lhu	a4,78(a5)
   16bfc:	00170713          	addi	a4,a4,1
   16c00:	04e79723          	sh	a4,78(a5)
   16c04:	f6dff06f          	j	16b70 <ip4_input+0x3c0>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
   16c08:	00048593          	mv	a1,s1
   16c0c:	00040513          	mv	a0,s0
   16c10:	f25f50ef          	jal	ra,cb34 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
   16c14:	00200593          	li	a1,2
   16c18:	00040513          	mv	a0,s0
   16c1c:	e84ff0ef          	jal	ra,162a0 <icmp_dest_unreach>
   16c20:	fc5ff06f          	j	16be4 <ip4_input+0x434>

00016c24 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
   16c24:	fc010113          	addi	sp,sp,-64
   16c28:	02112e23          	sw	ra,60(sp)
   16c2c:	02812c23          	sw	s0,56(sp)
   16c30:	02912a23          	sw	s1,52(sp)
   16c34:	03212823          	sw	s2,48(sp)
   16c38:	03312623          	sw	s3,44(sp)
   16c3c:	03412423          	sw	s4,40(sp)
   16c40:	03512223          	sw	s5,36(sp)
   16c44:	03612023          	sw	s6,32(sp)
   16c48:	01712e23          	sw	s7,28(sp)
   16c4c:	01812c23          	sw	s8,24(sp)
   16c50:	01912a23          	sw	s9,20(sp)
   16c54:	01a12823          	sw	s10,16(sp)
   16c58:	00050493          	mv	s1,a0
   16c5c:	00058c93          	mv	s9,a1
   16c60:	00060b93          	mv	s7,a2
   16c64:	00068c13          	mv	s8,a3
   16c68:	00070913          	mv	s2,a4
   16c6c:	00078993          	mv	s3,a5
   16c70:	00080b13          	mv	s6,a6
   16c74:	00088d13          	mv	s10,a7
   16c78:	04015a03          	lhu	s4,64(sp)
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
   16c7c:	00e54703          	lbu	a4,14(a0)
   16c80:	00100793          	li	a5,1
   16c84:	08f71463          	bne	a4,a5,16d0c <ip4_output_if_opt_src+0xe8>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
   16c88:	340b8263          	beqz	s7,16fcc <ip4_output_if_opt_src+0x3a8>
    u16_t ip_hlen = IP_HLEN;
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
    if (optlen != 0) {
   16c8c:	0e0a0063          	beqz	s4,16d6c <ip4_output_if_opt_src+0x148>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
   16c90:	02800793          	li	a5,40
   16c94:	0947e463          	bltu	a5,s4,16d1c <ip4_output_if_opt_src+0xf8>
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
   16c98:	003a0413          	addi	s0,s4,3
   16c9c:	01041413          	slli	s0,s0,0x10
   16ca0:	01045413          	srli	s0,s0,0x10
   16ca4:	ffc47413          	andi	s0,s0,-4
   16ca8:	01041413          	slli	s0,s0,0x10
   16cac:	01045413          	srli	s0,s0,0x10
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
   16cb0:	01440a93          	addi	s5,s0,20
   16cb4:	010a9a93          	slli	s5,s5,0x10
   16cb8:	010ada93          	srli	s5,s5,0x10
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
   16cbc:	00040593          	mv	a1,s0
   16cc0:	00048513          	mv	a0,s1
   16cc4:	d51f50ef          	jal	ra,ca14 <pbuf_add_header>
   16cc8:	06051863          	bnez	a0,16d38 <ip4_output_if_opt_src+0x114>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
      }
      MEMCPY(p->payload, ip_options, optlen);
   16ccc:	000a0613          	mv	a2,s4
   16cd0:	000d0593          	mv	a1,s10
   16cd4:	0044a503          	lw	a0,4(s1)
   16cd8:	cedea0ef          	jal	ra,19c4 <memcpy>
      if (optlen < optlen_aligned) {
   16cdc:	068a6c63          	bltu	s4,s0,16d54 <ip4_output_if_opt_src+0x130>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned / 2; i++) {
   16ce0:	00000793          	li	a5,0
  u32_t chk_sum = 0;
   16ce4:	00000a13          	li	s4,0
      for (i = 0; i < optlen_aligned / 2; i++) {
   16ce8:	00145713          	srli	a4,s0,0x1
   16cec:	08e7d463          	bge	a5,a4,16d74 <ip4_output_if_opt_src+0x150>
        chk_sum += ((u16_t *)p->payload)[i];
   16cf0:	0044a703          	lw	a4,4(s1)
   16cf4:	00179693          	slli	a3,a5,0x1
   16cf8:	00d70733          	add	a4,a4,a3
   16cfc:	00075703          	lhu	a4,0(a4)
   16d00:	00ea0a33          	add	s4,s4,a4
      for (i = 0; i < optlen_aligned / 2; i++) {
   16d04:	00178793          	addi	a5,a5,1
   16d08:	fe1ff06f          	j	16ce8 <ip4_output_if_opt_src+0xc4>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
   16d0c:	0001f537          	lui	a0,0x1f
   16d10:	af450513          	addi	a0,a0,-1292 # 1eaf4 <memp_pools+0x330>
   16d14:	88dff0ef          	jal	ra,165a0 <bsp_printf>
   16d18:	f71ff06f          	j	16c88 <ip4_output_if_opt_src+0x64>
        IP_STATS_INC(ip.err);
   16d1c:	000227b7          	lui	a5,0x22
   16d20:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   16d24:	05c7d703          	lhu	a4,92(a5)
   16d28:	00170713          	addi	a4,a4,1
   16d2c:	04e79e23          	sh	a4,92(a5)
        return ERR_VAL;
   16d30:	ffa00513          	li	a0,-6
   16d34:	2100006f          	j	16f44 <ip4_output_if_opt_src+0x320>
        IP_STATS_INC(ip.err);
   16d38:	000227b7          	lui	a5,0x22
   16d3c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   16d40:	05c7d703          	lhu	a4,92(a5)
   16d44:	00170713          	addi	a4,a4,1
   16d48:	04e79e23          	sh	a4,92(a5)
        return ERR_BUF;
   16d4c:	ffe00513          	li	a0,-2
   16d50:	1f40006f          	j	16f44 <ip4_output_if_opt_src+0x320>
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
   16d54:	0044a503          	lw	a0,4(s1)
   16d58:	41440633          	sub	a2,s0,s4
   16d5c:	00000593          	li	a1,0
   16d60:	01450533          	add	a0,a0,s4
   16d64:	e9dea0ef          	jal	ra,1c00 <memset>
   16d68:	f79ff06f          	j	16ce0 <ip4_output_if_opt_src+0xbc>
    u16_t ip_hlen = IP_HLEN;
   16d6c:	01400a93          	li	s5,20
  u32_t chk_sum = 0;
   16d70:	00000a13          	li	s4,0
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
   16d74:	01400593          	li	a1,20
   16d78:	00048513          	mv	a0,s1
   16d7c:	c99f50ef          	jal	ra,ca14 <pbuf_add_header>
   16d80:	1e051e63          	bnez	a0,16f7c <ip4_output_if_opt_src+0x358>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
   16d84:	0044a403          	lw	s0,4(s1)
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
   16d88:	00a4d703          	lhu	a4,10(s1)
   16d8c:	01300793          	li	a5,19
   16d90:	20e7f463          	bgeu	a5,a4,16f98 <ip4_output_if_opt_src+0x374>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
   16d94:	01840423          	sb	s8,8(s0)
    IPH_PROTO_SET(iphdr, proto);
   16d98:	013404a3          	sb	s3,9(s0)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
   16d9c:	008c1c13          	slli	s8,s8,0x8
   16da0:	0189e9b3          	or	s3,s3,s8
   16da4:	00899793          	slli	a5,s3,0x8
   16da8:	0089d993          	srli	s3,s3,0x8
   16dac:	00f9e9b3          	or	s3,s3,a5
   16db0:	01099993          	slli	s3,s3,0x10
   16db4:	0109d993          	srli	s3,s3,0x10
   16db8:	01498a33          	add	s4,s3,s4
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
   16dbc:	000ba783          	lw	a5,0(s7)
   16dc0:	00f40823          	sb	a5,16(s0)
   16dc4:	0087d713          	srli	a4,a5,0x8
   16dc8:	00e408a3          	sb	a4,17(s0)
   16dcc:	0107d713          	srli	a4,a5,0x10
   16dd0:	00e40923          	sb	a4,18(s0)
   16dd4:	0187d693          	srli	a3,a5,0x18
   16dd8:	00d409a3          	sb	a3,19(s0)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
   16ddc:	01079793          	slli	a5,a5,0x10
   16de0:	0107d793          	srli	a5,a5,0x10
   16de4:	01478a33          	add	s4,a5,s4
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
   16de8:	01470a33          	add	s4,a4,s4
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
   16dec:	002ada93          	srli	s5,s5,0x2
   16df0:	040aea93          	ori	s5,s5,64
   16df4:	0ffafa93          	andi	s5,s5,255
   16df8:	01540023          	sb	s5,0(s0)
    IPH_TOS_SET(iphdr, tos);
   16dfc:	012400a3          	sb	s2,1(s0)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
   16e00:	008a9a93          	slli	s5,s5,0x8
   16e04:	01596933          	or	s2,s2,s5
   16e08:	00891793          	slli	a5,s2,0x8
   16e0c:	00895913          	srli	s2,s2,0x8
   16e10:	00f96933          	or	s2,s2,a5
   16e14:	01091913          	slli	s2,s2,0x10
   16e18:	01095913          	srli	s2,s2,0x10
   16e1c:	01490933          	add	s2,s2,s4
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
   16e20:	0084d503          	lhu	a0,8(s1)
   16e24:	e54f30ef          	jal	ra,a478 <lwip_htons>
   16e28:	00a40123          	sb	a0,2(s0)
   16e2c:	00855793          	srli	a5,a0,0x8
   16e30:	00f401a3          	sb	a5,3(s0)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
   16e34:	01250933          	add	s2,a0,s2
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
   16e38:	00040323          	sb	zero,6(s0)
   16e3c:	000403a3          	sb	zero,7(s0)
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
   16e40:	9581d503          	lhu	a0,-1704(gp) # 1fb28 <ip_id>
   16e44:	e34f30ef          	jal	ra,a478 <lwip_htons>
   16e48:	00a40223          	sb	a0,4(s0)
   16e4c:	00855793          	srli	a5,a0,0x8
   16e50:	00f402a3          	sb	a5,5(s0)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
   16e54:	01250533          	add	a0,a0,s2
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
   16e58:	9581d703          	lhu	a4,-1704(gp) # 1fb28 <ip_id>
   16e5c:	00170713          	addi	a4,a4,1
   16e60:	94e19c23          	sh	a4,-1704(gp) # 1fb28 <ip_id>

    if (src == NULL) {
   16e64:	140c8263          	beqz	s9,16fa8 <ip4_output_if_opt_src+0x384>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
   16e68:	000ca703          	lw	a4,0(s9)
   16e6c:	00e40623          	sb	a4,12(s0)
   16e70:	00875793          	srli	a5,a4,0x8
   16e74:	00f406a3          	sb	a5,13(s0)
   16e78:	01075793          	srli	a5,a4,0x10
   16e7c:	00f40723          	sb	a5,14(s0)
   16e80:	01875713          	srli	a4,a4,0x18
   16e84:	00e407a3          	sb	a4,15(s0)
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
   16e88:	00c44703          	lbu	a4,12(s0)
   16e8c:	00d44783          	lbu	a5,13(s0)
   16e90:	00879793          	slli	a5,a5,0x8
   16e94:	00e7e7b3          	or	a5,a5,a4
   16e98:	00e44703          	lbu	a4,14(s0)
   16e9c:	01071713          	slli	a4,a4,0x10
   16ea0:	00f767b3          	or	a5,a4,a5
   16ea4:	00f44703          	lbu	a4,15(s0)
   16ea8:	01871713          	slli	a4,a4,0x18
   16eac:	00f76733          	or	a4,a4,a5
   16eb0:	000107b7          	lui	a5,0x10
   16eb4:	fff78693          	addi	a3,a5,-1 # ffff <tcp_input+0x183>
   16eb8:	00d777b3          	and	a5,a4,a3
   16ebc:	00a787b3          	add	a5,a5,a0
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
   16ec0:	01075713          	srli	a4,a4,0x10
   16ec4:	00f707b3          	add	a5,a4,a5
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
   16ec8:	0107d713          	srli	a4,a5,0x10
   16ecc:	00d7f7b3          	and	a5,a5,a3
   16ed0:	00f70733          	add	a4,a4,a5
    chk_sum = (chk_sum >> 16) + chk_sum;
   16ed4:	01075793          	srli	a5,a4,0x10
   16ed8:	00e787b3          	add	a5,a5,a4
    chk_sum = ~chk_sum;
   16edc:	fff7c793          	not	a5,a5
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
   16ee0:	01079793          	slli	a5,a5,0x10
   16ee4:	0107d793          	srli	a5,a5,0x10
   16ee8:	00f40523          	sb	a5,10(s0)
   16eec:	0087d793          	srli	a5,a5,0x8
   16ef0:	00f405a3          	sb	a5,11(s0)
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
   16ef4:	000227b7          	lui	a5,0x22
   16ef8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   16efc:	0487d703          	lhu	a4,72(a5)
   16f00:	00170713          	addi	a4,a4,1
   16f04:	04e79423          	sh	a4,72(a5)

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
   16f08:	000ba703          	lw	a4,0(s7)
   16f0c:	004b2783          	lw	a5,4(s6)
   16f10:	10f70e63          	beq	a4,a5,1702c <ip4_output_if_opt_src+0x408>
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
  }
#if LWIP_MULTICAST_TX_OPTIONS
  if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
   16f14:	00d4c783          	lbu	a5,13(s1)
   16f18:	0047f793          	andi	a5,a5,4
   16f1c:	12079063          	bnez	a5,1703c <ip4_output_if_opt_src+0x418>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
   16f20:	02cb5783          	lhu	a5,44(s6)
   16f24:	00078663          	beqz	a5,16f30 <ip4_output_if_opt_src+0x30c>
   16f28:	0084d703          	lhu	a4,8(s1)
   16f2c:	12e7e063          	bltu	a5,a4,1704c <ip4_output_if_opt_src+0x428>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
   16f30:	014b2783          	lw	a5,20(s6)
   16f34:	000b8613          	mv	a2,s7
   16f38:	00048593          	mv	a1,s1
   16f3c:	000b0513          	mv	a0,s6
   16f40:	000780e7          	jalr	a5
}
   16f44:	03c12083          	lw	ra,60(sp)
   16f48:	03812403          	lw	s0,56(sp)
   16f4c:	03412483          	lw	s1,52(sp)
   16f50:	03012903          	lw	s2,48(sp)
   16f54:	02c12983          	lw	s3,44(sp)
   16f58:	02812a03          	lw	s4,40(sp)
   16f5c:	02412a83          	lw	s5,36(sp)
   16f60:	02012b03          	lw	s6,32(sp)
   16f64:	01c12b83          	lw	s7,28(sp)
   16f68:	01812c03          	lw	s8,24(sp)
   16f6c:	01412c83          	lw	s9,20(sp)
   16f70:	01012d03          	lw	s10,16(sp)
   16f74:	04010113          	addi	sp,sp,64
   16f78:	00008067          	ret
      IP_STATS_INC(ip.err);
   16f7c:	000227b7          	lui	a5,0x22
   16f80:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   16f84:	05c7d703          	lhu	a4,92(a5)
   16f88:	00170713          	addi	a4,a4,1
   16f8c:	04e79e23          	sh	a4,92(a5)
      return ERR_BUF;
   16f90:	ffe00513          	li	a0,-2
   16f94:	fb1ff06f          	j	16f44 <ip4_output_if_opt_src+0x320>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
   16f98:	0001f537          	lui	a0,0x1f
   16f9c:	b0050513          	addi	a0,a0,-1280 # 1eb00 <memp_pools+0x33c>
   16fa0:	e00ff0ef          	jal	ra,165a0 <bsp_printf>
   16fa4:	df1ff06f          	j	16d94 <ip4_output_if_opt_src+0x170>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
   16fa8:	8ac1a783          	lw	a5,-1876(gp) # 1fa7c <ip_addr_any>
   16fac:	00f40623          	sb	a5,12(s0)
   16fb0:	0087d713          	srli	a4,a5,0x8
   16fb4:	00e406a3          	sb	a4,13(s0)
   16fb8:	0107d713          	srli	a4,a5,0x10
   16fbc:	00e40723          	sb	a4,14(s0)
   16fc0:	0187d793          	srli	a5,a5,0x18
   16fc4:	00f407a3          	sb	a5,15(s0)
   16fc8:	ec1ff06f          	j	16e88 <ip4_output_if_opt_src+0x264>
    if (p->len < IP_HLEN) {
   16fcc:	00a4d703          	lhu	a4,10(s1)
   16fd0:	01300793          	li	a5,19
   16fd4:	02e7fe63          	bgeu	a5,a4,17010 <ip4_output_if_opt_src+0x3ec>
    iphdr = (struct ip_hdr *)p->payload;
   16fd8:	0044a683          	lw	a3,4(s1)
    ip4_addr_copy(dest_addr, iphdr->dest);
   16fdc:	0106c783          	lbu	a5,16(a3)
   16fe0:	0116c703          	lbu	a4,17(a3)
   16fe4:	00871713          	slli	a4,a4,0x8
   16fe8:	00f76733          	or	a4,a4,a5
   16fec:	0126c783          	lbu	a5,18(a3)
   16ff0:	01079793          	slli	a5,a5,0x10
   16ff4:	00e7e733          	or	a4,a5,a4
   16ff8:	0136c783          	lbu	a5,19(a3)
   16ffc:	01879793          	slli	a5,a5,0x18
   17000:	00e7e7b3          	or	a5,a5,a4
   17004:	00f12623          	sw	a5,12(sp)
    dest = &dest_addr;
   17008:	00c10b93          	addi	s7,sp,12
   1700c:	ee9ff06f          	j	16ef4 <ip4_output_if_opt_src+0x2d0>
      IP_STATS_INC(ip.err);
   17010:	000227b7          	lui	a5,0x22
   17014:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17018:	05c7d703          	lhu	a4,92(a5)
   1701c:	00170713          	addi	a4,a4,1
   17020:	04e79e23          	sh	a4,92(a5)
      return ERR_BUF;
   17024:	ffe00513          	li	a0,-2
   17028:	f1dff06f          	j	16f44 <ip4_output_if_opt_src+0x320>
    return netif_loop_output(netif, p);
   1702c:	00048593          	mv	a1,s1
   17030:	000b0513          	mv	a0,s6
   17034:	f10f40ef          	jal	ra,b744 <netif_loop_output>
   17038:	f0dff06f          	j	16f44 <ip4_output_if_opt_src+0x320>
    netif_loop_output(netif, p);
   1703c:	00048593          	mv	a1,s1
   17040:	000b0513          	mv	a0,s6
   17044:	f00f40ef          	jal	ra,b744 <netif_loop_output>
   17048:	ed9ff06f          	j	16f20 <ip4_output_if_opt_src+0x2fc>
    return ip4_frag(p, netif, dest);
   1704c:	000b8613          	mv	a2,s7
   17050:	000b0593          	mv	a1,s6
   17054:	00048513          	mv	a0,s1
   17058:	044040ef          	jal	ra,1b09c <ip4_frag>
   1705c:	ee9ff06f          	j	16f44 <ip4_output_if_opt_src+0x320>

00017060 <ip4_output_if_opt>:
{
   17060:	fe010113          	addi	sp,sp,-32
   17064:	00112e23          	sw	ra,28(sp)
  if (dest != LWIP_IP_HDRINCL) {
   17068:	00060a63          	beqz	a2,1707c <ip4_output_if_opt+0x1c>
    if (ip4_addr_isany(src)) {
   1706c:	00058663          	beqz	a1,17078 <ip4_output_if_opt+0x18>
   17070:	0005a303          	lw	t1,0(a1)
   17074:	00031463          	bnez	t1,1707c <ip4_output_if_opt+0x1c>
      src_used = netif_ip4_addr(netif);
   17078:	00480593          	addi	a1,a6,4
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
   1707c:	02015303          	lhu	t1,32(sp)
   17080:	00612023          	sw	t1,0(sp)
   17084:	ba1ff0ef          	jal	ra,16c24 <ip4_output_if_opt_src>
}
   17088:	01c12083          	lw	ra,28(sp)
   1708c:	02010113          	addi	sp,sp,32
   17090:	00008067          	ret

00017094 <ip4_output_if>:
{
   17094:	fe010113          	addi	sp,sp,-32
   17098:	00112e23          	sw	ra,28(sp)
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
   1709c:	00012023          	sw	zero,0(sp)
   170a0:	00000893          	li	a7,0
   170a4:	fbdff0ef          	jal	ra,17060 <ip4_output_if_opt>
}
   170a8:	01c12083          	lw	ra,28(sp)
   170ac:	02010113          	addi	sp,sp,32
   170b0:	00008067          	ret

000170b4 <ip4_output_if_src>:
{
   170b4:	fe010113          	addi	sp,sp,-32
   170b8:	00112e23          	sw	ra,28(sp)
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
   170bc:	00012023          	sw	zero,0(sp)
   170c0:	00000893          	li	a7,0
   170c4:	b61ff0ef          	jal	ra,16c24 <ip4_output_if_opt_src>
}
   170c8:	01c12083          	lw	ra,28(sp)
   170cc:	02010113          	addi	sp,sp,32
   170d0:	00008067          	ret

000170d4 <ip4_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
           u8_t ttl, u8_t tos, u8_t proto)
{
   170d4:	fe010113          	addi	sp,sp,-32
   170d8:	00112e23          	sw	ra,28(sp)
   170dc:	00812c23          	sw	s0,24(sp)
   170e0:	00912a23          	sw	s1,20(sp)
   170e4:	01212823          	sw	s2,16(sp)
   170e8:	01312623          	sw	s3,12(sp)
   170ec:	01412423          	sw	s4,8(sp)
   170f0:	01512223          	sw	s5,4(sp)
   170f4:	00050413          	mv	s0,a0
   170f8:	00058913          	mv	s2,a1
   170fc:	00060493          	mv	s1,a2
   17100:	00068993          	mv	s3,a3
   17104:	00070a13          	mv	s4,a4
   17108:	00078a93          	mv	s5,a5
  struct netif *netif;

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
   1710c:	00e54703          	lbu	a4,14(a0)
   17110:	00100793          	li	a5,1
   17114:	04f71a63          	bne	a4,a5,17168 <ip4_output+0x94>

  if ((netif = ip4_route_src(src, dest)) == NULL) {
   17118:	00048513          	mv	a0,s1
   1711c:	dc4ff0ef          	jal	ra,166e0 <ip4_route>
   17120:	04050c63          	beqz	a0,17178 <ip4_output+0xa4>
                           ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  }

  return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
   17124:	00050813          	mv	a6,a0
   17128:	000a8793          	mv	a5,s5
   1712c:	000a0713          	mv	a4,s4
   17130:	00098693          	mv	a3,s3
   17134:	00048613          	mv	a2,s1
   17138:	00090593          	mv	a1,s2
   1713c:	00040513          	mv	a0,s0
   17140:	f55ff0ef          	jal	ra,17094 <ip4_output_if>
}
   17144:	01c12083          	lw	ra,28(sp)
   17148:	01812403          	lw	s0,24(sp)
   1714c:	01412483          	lw	s1,20(sp)
   17150:	01012903          	lw	s2,16(sp)
   17154:	00c12983          	lw	s3,12(sp)
   17158:	00812a03          	lw	s4,8(sp)
   1715c:	00412a83          	lw	s5,4(sp)
   17160:	02010113          	addi	sp,sp,32
   17164:	00008067          	ret
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
   17168:	0001f537          	lui	a0,0x1f
   1716c:	af450513          	addi	a0,a0,-1292 # 1eaf4 <memp_pools+0x330>
   17170:	c30ff0ef          	jal	ra,165a0 <bsp_printf>
   17174:	fa5ff06f          	j	17118 <ip4_output+0x44>
    IP_STATS_INC(ip.rterr);
   17178:	000227b7          	lui	a5,0x22
   1717c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17180:	0567d703          	lhu	a4,86(a5)
   17184:	00170713          	addi	a4,a4,1
   17188:	04e79b23          	sh	a4,86(a5)
    return ERR_RTE;
   1718c:	ffc00513          	li	a0,-4
   17190:	fb5ff06f          	j	17144 <ip4_output+0x70>

00017194 <uart_writeAvailability>:
        return *((volatile u32*) address);
   17194:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   17198:	01055513          	srli	a0,a0,0x10
    }
   1719c:	0ff57513          	andi	a0,a0,255
   171a0:	00008067          	ret

000171a4 <uart_write>:
    static void uart_write(u32 reg, char data){
   171a4:	ff010113          	addi	sp,sp,-16
   171a8:	00112623          	sw	ra,12(sp)
   171ac:	00812423          	sw	s0,8(sp)
   171b0:	00912223          	sw	s1,4(sp)
   171b4:	00050413          	mv	s0,a0
   171b8:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   171bc:	00040513          	mv	a0,s0
   171c0:	fd5ff0ef          	jal	ra,17194 <uart_writeAvailability>
   171c4:	fe050ce3          	beqz	a0,171bc <uart_write+0x18>
        *((volatile u32*) address) = data;
   171c8:	00942023          	sw	s1,0(s0)
    }
   171cc:	00c12083          	lw	ra,12(sp)
   171d0:	00812403          	lw	s0,8(sp)
   171d4:	00412483          	lw	s1,4(sp)
   171d8:	01010113          	addi	sp,sp,16
   171dc:	00008067          	ret

000171e0 <bsp_printHex>:
    {
   171e0:	ff010113          	addi	sp,sp,-16
   171e4:	00112623          	sw	ra,12(sp)
   171e8:	00812423          	sw	s0,8(sp)
   171ec:	00912223          	sw	s1,4(sp)
   171f0:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   171f4:	01c00413          	li	s0,28
   171f8:	0280006f          	j	17220 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   171fc:	0084d7b3          	srl	a5,s1,s0
   17200:	00f7f713          	andi	a4,a5,15
   17204:	0001c7b7          	lui	a5,0x1c
   17208:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   1720c:	00e787b3          	add	a5,a5,a4
   17210:	0007c583          	lbu	a1,0(a5)
   17214:	f8010537          	lui	a0,0xf8010
   17218:	f8dff0ef          	jal	ra,171a4 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   1721c:	ffc40413          	addi	s0,s0,-4
   17220:	fc045ee3          	bgez	s0,171fc <bsp_printHex+0x1c>
    }
   17224:	00c12083          	lw	ra,12(sp)
   17228:	00812403          	lw	s0,8(sp)
   1722c:	00412483          	lw	s1,4(sp)
   17230:	01010113          	addi	sp,sp,16
   17234:	00008067          	ret

00017238 <bsp_printHex_lower>:
        {
   17238:	ff010113          	addi	sp,sp,-16
   1723c:	00112623          	sw	ra,12(sp)
   17240:	00812423          	sw	s0,8(sp)
   17244:	00912223          	sw	s1,4(sp)
   17248:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   1724c:	01c00413          	li	s0,28
   17250:	0280006f          	j	17278 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   17254:	0084d7b3          	srl	a5,s1,s0
   17258:	00f7f713          	andi	a4,a5,15
   1725c:	0001c7b7          	lui	a5,0x1c
   17260:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   17264:	00e787b3          	add	a5,a5,a4
   17268:	0007c583          	lbu	a1,0(a5)
   1726c:	f8010537          	lui	a0,0xf8010
   17270:	f35ff0ef          	jal	ra,171a4 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   17274:	ffc40413          	addi	s0,s0,-4
   17278:	fc045ee3          	bgez	s0,17254 <bsp_printHex_lower+0x1c>
        }
   1727c:	00c12083          	lw	ra,12(sp)
   17280:	00812403          	lw	s0,8(sp)
   17284:	00412483          	lw	s1,4(sp)
   17288:	01010113          	addi	sp,sp,16
   1728c:	00008067          	ret

00017290 <bsp_printf_c>:
    {
   17290:	ff010113          	addi	sp,sp,-16
   17294:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   17298:	0ff57593          	andi	a1,a0,255
   1729c:	f8010537          	lui	a0,0xf8010
   172a0:	f05ff0ef          	jal	ra,171a4 <uart_write>
    }
   172a4:	00c12083          	lw	ra,12(sp)
   172a8:	01010113          	addi	sp,sp,16
   172ac:	00008067          	ret

000172b0 <bsp_printf_s>:
    {
   172b0:	ff010113          	addi	sp,sp,-16
   172b4:	00112623          	sw	ra,12(sp)
   172b8:	00812423          	sw	s0,8(sp)
   172bc:	00050413          	mv	s0,a0
        while (*p)
   172c0:	00044583          	lbu	a1,0(s0)
   172c4:	00058a63          	beqz	a1,172d8 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   172c8:	00140413          	addi	s0,s0,1
   172cc:	f8010537          	lui	a0,0xf8010
   172d0:	ed5ff0ef          	jal	ra,171a4 <uart_write>
   172d4:	fedff06f          	j	172c0 <bsp_printf_s+0x10>
    }
   172d8:	00c12083          	lw	ra,12(sp)
   172dc:	00812403          	lw	s0,8(sp)
   172e0:	01010113          	addi	sp,sp,16
   172e4:	00008067          	ret

000172e8 <bsp_printf_d>:
    {
   172e8:	fd010113          	addi	sp,sp,-48
   172ec:	02112623          	sw	ra,44(sp)
   172f0:	02812423          	sw	s0,40(sp)
   172f4:	02912223          	sw	s1,36(sp)
   172f8:	00050493          	mv	s1,a0
        if (val < 0) {
   172fc:	00054663          	bltz	a0,17308 <bsp_printf_d+0x20>
    {
   17300:	00010413          	mv	s0,sp
   17304:	02c0006f          	j	17330 <bsp_printf_d+0x48>
            bsp_printf_c('-');
   17308:	02d00513          	li	a0,45
   1730c:	f85ff0ef          	jal	ra,17290 <bsp_printf_c>
            val = -val;
   17310:	409004b3          	neg	s1,s1
   17314:	fedff06f          	j	17300 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   17318:	00a00713          	li	a4,10
   1731c:	02e4e7b3          	rem	a5,s1,a4
   17320:	03078793          	addi	a5,a5,48
   17324:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   17328:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   1732c:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   17330:	fe0494e3          	bnez	s1,17318 <bsp_printf_d+0x30>
   17334:	00010793          	mv	a5,sp
   17338:	fef400e3          	beq	s0,a5,17318 <bsp_printf_d+0x30>
   1733c:	0100006f          	j	1734c <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   17340:	fff40413          	addi	s0,s0,-1
   17344:	00044503          	lbu	a0,0(s0)
   17348:	f49ff0ef          	jal	ra,17290 <bsp_printf_c>
        while (p != buffer)
   1734c:	00010793          	mv	a5,sp
   17350:	fef418e3          	bne	s0,a5,17340 <bsp_printf_d+0x58>
    }
   17354:	02c12083          	lw	ra,44(sp)
   17358:	02812403          	lw	s0,40(sp)
   1735c:	02412483          	lw	s1,36(sp)
   17360:	03010113          	addi	sp,sp,48
   17364:	00008067          	ret

00017368 <bsp_printf_x>:
    {
   17368:	ff010113          	addi	sp,sp,-16
   1736c:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   17370:	00000713          	li	a4,0
   17374:	00700793          	li	a5,7
   17378:	02e7c063          	blt	a5,a4,17398 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   1737c:	00271693          	slli	a3,a4,0x2
   17380:	ff000793          	li	a5,-16
   17384:	00d797b3          	sll	a5,a5,a3
   17388:	00f577b3          	and	a5,a0,a5
   1738c:	00078663          	beqz	a5,17398 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   17390:	00170713          	addi	a4,a4,1
   17394:	fe1ff06f          	j	17374 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   17398:	ea1ff0ef          	jal	ra,17238 <bsp_printHex_lower>
    }
   1739c:	00c12083          	lw	ra,12(sp)
   173a0:	01010113          	addi	sp,sp,16
   173a4:	00008067          	ret

000173a8 <bsp_printf_X>:
        {
   173a8:	ff010113          	addi	sp,sp,-16
   173ac:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   173b0:	00000713          	li	a4,0
   173b4:	00700793          	li	a5,7
   173b8:	02e7c063          	blt	a5,a4,173d8 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   173bc:	00271693          	slli	a3,a4,0x2
   173c0:	ff000793          	li	a5,-16
   173c4:	00d797b3          	sll	a5,a5,a3
   173c8:	00f577b3          	and	a5,a0,a5
   173cc:	00078663          	beqz	a5,173d8 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   173d0:	00170713          	addi	a4,a4,1
   173d4:	fe1ff06f          	j	173b4 <bsp_printf_X+0xc>
            bsp_printHex(val);
   173d8:	e09ff0ef          	jal	ra,171e0 <bsp_printHex>
        }
   173dc:	00c12083          	lw	ra,12(sp)
   173e0:	01010113          	addi	sp,sp,16
   173e4:	00008067          	ret

000173e8 <igmp_remove_group>:
{
  err_t err = ERR_OK;
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
   173e8:	02852783          	lw	a5,40(a0) # f8010028 <__freertos_irq_stack_top+0xf7feb0f8>
   173ec:	00078e63          	beqz	a5,17408 <igmp_remove_group+0x20>
    if (tmp_group->next == group) {
   173f0:	0007a703          	lw	a4,0(a5)
   173f4:	00b70663          	beq	a4,a1,17400 <igmp_remove_group+0x18>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
   173f8:	00070793          	mv	a5,a4
   173fc:	ff1ff06f          	j	173ec <igmp_remove_group+0x4>
      tmp_group->next = group->next;
   17400:	0005a703          	lw	a4,0(a1)
   17404:	00e7a023          	sw	a4,0(a5)
      break;
    }
  }
  /* Group not found in netif's igmp group list */
  if (tmp_group == NULL) {
   17408:	00078663          	beqz	a5,17414 <igmp_remove_group+0x2c>
  err_t err = ERR_OK;
   1740c:	00000513          	li	a0,0
   17410:	00008067          	ret
    err = ERR_ARG;
   17414:	ff000513          	li	a0,-16
  }

  return err;
}
   17418:	00008067          	ret

0001741c <bsp_printf>:
    {
   1741c:	fc010113          	addi	sp,sp,-64
   17420:	00112e23          	sw	ra,28(sp)
   17424:	00812c23          	sw	s0,24(sp)
   17428:	00912a23          	sw	s1,20(sp)
   1742c:	00050493          	mv	s1,a0
   17430:	02b12223          	sw	a1,36(sp)
   17434:	02c12423          	sw	a2,40(sp)
   17438:	02d12623          	sw	a3,44(sp)
   1743c:	02e12823          	sw	a4,48(sp)
   17440:	02f12a23          	sw	a5,52(sp)
   17444:	03012c23          	sw	a6,56(sp)
   17448:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   1744c:	02410793          	addi	a5,sp,36
   17450:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   17454:	00000413          	li	s0,0
   17458:	01c0006f          	j	17474 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   1745c:	00c12783          	lw	a5,12(sp)
   17460:	00478713          	addi	a4,a5,4
   17464:	00e12623          	sw	a4,12(sp)
   17468:	0007a503          	lw	a0,0(a5)
   1746c:	e25ff0ef          	jal	ra,17290 <bsp_printf_c>
        for (i = 0; format[i]; i++)
   17470:	00140413          	addi	s0,s0,1
   17474:	008487b3          	add	a5,s1,s0
   17478:	0007c503          	lbu	a0,0(a5)
   1747c:	0c050263          	beqz	a0,17540 <bsp_printf+0x124>
            if (format[i] == '%') {
   17480:	02500793          	li	a5,37
   17484:	06f50663          	beq	a0,a5,174f0 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   17488:	e09ff0ef          	jal	ra,17290 <bsp_printf_c>
   1748c:	fe5ff06f          	j	17470 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   17490:	00c12783          	lw	a5,12(sp)
   17494:	00478713          	addi	a4,a5,4
   17498:	00e12623          	sw	a4,12(sp)
   1749c:	0007a503          	lw	a0,0(a5)
   174a0:	e11ff0ef          	jal	ra,172b0 <bsp_printf_s>
                        break;
   174a4:	fcdff06f          	j	17470 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   174a8:	00c12783          	lw	a5,12(sp)
   174ac:	00478713          	addi	a4,a5,4
   174b0:	00e12623          	sw	a4,12(sp)
   174b4:	0007a503          	lw	a0,0(a5)
   174b8:	e31ff0ef          	jal	ra,172e8 <bsp_printf_d>
                        break;
   174bc:	fb5ff06f          	j	17470 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   174c0:	00c12783          	lw	a5,12(sp)
   174c4:	00478713          	addi	a4,a5,4
   174c8:	00e12623          	sw	a4,12(sp)
   174cc:	0007a503          	lw	a0,0(a5)
   174d0:	ed9ff0ef          	jal	ra,173a8 <bsp_printf_X>
                        break;
   174d4:	f9dff06f          	j	17470 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   174d8:	00c12783          	lw	a5,12(sp)
   174dc:	00478713          	addi	a4,a5,4
   174e0:	00e12623          	sw	a4,12(sp)
   174e4:	0007a503          	lw	a0,0(a5)
   174e8:	e81ff0ef          	jal	ra,17368 <bsp_printf_x>
                        break;
   174ec:	f85ff06f          	j	17470 <bsp_printf+0x54>
                while (format[++i]) {
   174f0:	00140413          	addi	s0,s0,1
   174f4:	008487b3          	add	a5,s1,s0
   174f8:	0007c783          	lbu	a5,0(a5)
   174fc:	f6078ae3          	beqz	a5,17470 <bsp_printf+0x54>
                    if (format[i] == 'c') {
   17500:	06300713          	li	a4,99
   17504:	f4e78ce3          	beq	a5,a4,1745c <bsp_printf+0x40>
                    else if (format[i] == 's') {
   17508:	07300713          	li	a4,115
   1750c:	f8e782e3          	beq	a5,a4,17490 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   17510:	06400713          	li	a4,100
   17514:	f8e78ae3          	beq	a5,a4,174a8 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   17518:	05800713          	li	a4,88
   1751c:	fae782e3          	beq	a5,a4,174c0 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   17520:	07800713          	li	a4,120
   17524:	fae78ae3          	beq	a5,a4,174d8 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   17528:	06600713          	li	a4,102
   1752c:	fce792e3          	bne	a5,a4,174f0 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   17530:	0001c537          	lui	a0,0x1c
   17534:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   17538:	d79ff0ef          	jal	ra,172b0 <bsp_printf_s>
                        break;
   1753c:	f35ff06f          	j	17470 <bsp_printf+0x54>
    }
   17540:	01c12083          	lw	ra,28(sp)
   17544:	01812403          	lw	s0,24(sp)
   17548:	01412483          	lw	s1,20(sp)
   1754c:	04010113          	addi	sp,sp,64
   17550:	00008067          	ret

00017554 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
   17554:	ff010113          	addi	sp,sp,-16
   17558:	00112623          	sw	ra,12(sp)
   1755c:	00812423          	sw	s0,8(sp)
   17560:	00912223          	sw	s1,4(sp)
   17564:	00050493          	mv	s1,a0
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
   17568:	00200793          	li	a5,2
   1756c:	02b7e663          	bltu	a5,a1,17598 <igmp_start_timer+0x44>
   17570:	00100513          	li	a0,1
   17574:	00a49523          	sh	a0,10(s1)
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
   17578:	00051663          	bnez	a0,17584 <igmp_start_timer+0x30>
    group->timer = 1;
   1757c:	00100793          	li	a5,1
   17580:	00f49523          	sh	a5,10(s1)
  }
}
   17584:	00c12083          	lw	ra,12(sp)
   17588:	00812403          	lw	s0,8(sp)
   1758c:	00412483          	lw	s1,4(sp)
   17590:	01010113          	addi	sp,sp,16
   17594:	00008067          	ret
   17598:	00058413          	mv	s0,a1
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
   1759c:	f5cea0ef          	jal	ra,1cf8 <rand>
   175a0:	02857533          	remu	a0,a0,s0
   175a4:	fd1ff06f          	j	17574 <igmp_start_timer+0x20>

000175a8 <igmp_delaying_member>:
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
   175a8:	00954783          	lbu	a5,9(a0)
   175ac:	00200713          	li	a4,2
   175b0:	02e78263          	beq	a5,a4,175d4 <igmp_delaying_member+0x2c>
   175b4:	00100713          	li	a4,1
   175b8:	00e78463          	beq	a5,a4,175c0 <igmp_delaying_member+0x18>
   175bc:	00008067          	ret
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
       ((group->timer == 0) || (maxresp < group->timer)))) {
   175c0:	00a55783          	lhu	a5,10(a0)
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
   175c4:	00078863          	beqz	a5,175d4 <igmp_delaying_member+0x2c>
       ((group->timer == 0) || (maxresp < group->timer)))) {
   175c8:	01059713          	slli	a4,a1,0x10
   175cc:	01075713          	srli	a4,a4,0x10
   175d0:	fef776e3          	bgeu	a4,a5,175bc <igmp_delaying_member+0x14>
{
   175d4:	ff010113          	addi	sp,sp,-16
   175d8:	00112623          	sw	ra,12(sp)
   175dc:	00812423          	sw	s0,8(sp)
   175e0:	00050413          	mv	s0,a0
    igmp_start_timer(group, maxresp);
   175e4:	f71ff0ef          	jal	ra,17554 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
   175e8:	00100793          	li	a5,1
   175ec:	00f404a3          	sb	a5,9(s0)
  }
}
   175f0:	00c12083          	lw	ra,12(sp)
   175f4:	00812403          	lw	s0,8(sp)
   175f8:	01010113          	addi	sp,sp,16
   175fc:	00008067          	ret

00017600 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
   17600:	fd010113          	addi	sp,sp,-48
   17604:	02112623          	sw	ra,44(sp)
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
   17608:	49400793          	li	a5,1172
   1760c:	00f11e23          	sh	a5,28(sp)
  ra[1] = 0x0000; /* Router shall examine packet */
   17610:	00011f23          	sh	zero,30(sp)
  IGMP_STATS_INC(igmp.xmit);
   17614:	000227b7          	lui	a5,0x22
   17618:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1761c:	0787d703          	lhu	a4,120(a5)
   17620:	00170713          	addi	a4,a4,1
   17624:	06e79c23          	sh	a4,120(a5)
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
   17628:	00400793          	li	a5,4
   1762c:	00f12023          	sw	a5,0(sp)
   17630:	01c10893          	addi	a7,sp,28
   17634:	00068813          	mv	a6,a3
   17638:	00200793          	li	a5,2
   1763c:	00000713          	li	a4,0
   17640:	00100693          	li	a3,1
   17644:	a1dff0ef          	jal	ra,17060 <ip4_output_if_opt>
}
   17648:	02c12083          	lw	ra,44(sp)
   1764c:	03010113          	addi	sp,sp,48
   17650:	00008067          	ret

00017654 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
   17654:	fd010113          	addi	sp,sp,-48
   17658:	02112623          	sw	ra,44(sp)
   1765c:	02812423          	sw	s0,40(sp)
   17660:	02912223          	sw	s1,36(sp)
   17664:	03212023          	sw	s2,32(sp)
   17668:	01312e23          	sw	s3,28(sp)
   1766c:	01412c23          	sw	s4,24(sp)
   17670:	01512a23          	sw	s5,20(sp)
   17674:	00050993          	mv	s3,a0
   17678:	00058a13          	mv	s4,a1
   1767c:	00060913          	mv	s2,a2
  struct pbuf     *p    = NULL;
  struct igmp_msg *igmp = NULL;
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
   17680:	8ac1a783          	lw	a5,-1876(gp) # 1fa7c <ip_addr_any>
   17684:	00f12623          	sw	a5,12(sp)
  ip4_addr_t  *dest = NULL;

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
   17688:	28000613          	li	a2,640
   1768c:	00800593          	li	a1,8
   17690:	03600513          	li	a0,54
   17694:	dd4f50ef          	jal	ra,cc68 <pbuf_alloc>

  if (p) {
   17698:	10050c63          	beqz	a0,177b0 <igmp_send+0x15c>
   1769c:	00050413          	mv	s0,a0
    igmp = (struct igmp_msg *)p->payload;
   176a0:	00452483          	lw	s1,4(a0)
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
   176a4:	00a55703          	lhu	a4,10(a0)
   176a8:	00700793          	li	a5,7
   176ac:	04e7fe63          	bgeu	a5,a4,17708 <igmp_send+0xb4>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
   176b0:	0049a783          	lw	a5,4(s3)
   176b4:	00f12623          	sw	a5,12(sp)

    if (type == IGMP_V2_MEMB_REPORT) {
   176b8:	01600793          	li	a5,22
   176bc:	04f90e63          	beq	s2,a5,17718 <igmp_send+0xc4>
      dest = &(group->group_address);
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
      group->last_reporter_flag = 1; /* Remember we were the last to report */
    } else {
      if (type == IGMP_LEAVE_GROUP) {
   176c0:	01700793          	li	a5,23
   176c4:	08f90263          	beq	s2,a5,17748 <igmp_send+0xf4>
  ip4_addr_t  *dest = NULL;
   176c8:	00000a93          	li	s5,0
        dest = &allrouters;
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
   176cc:	fea90793          	addi	a5,s2,-22
   176d0:	0ff7f793          	andi	a5,a5,255
   176d4:	00100713          	li	a4,1
   176d8:	08f77c63          	bgeu	a4,a5,17770 <igmp_send+0x11c>
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);

      igmp_ip_output_if(p, &src, dest, netif);
    }

    pbuf_free(p);
   176dc:	00040513          	mv	a0,s0
   176e0:	c70f50ef          	jal	ra,cb50 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
   176e4:	02c12083          	lw	ra,44(sp)
   176e8:	02812403          	lw	s0,40(sp)
   176ec:	02412483          	lw	s1,36(sp)
   176f0:	02012903          	lw	s2,32(sp)
   176f4:	01c12983          	lw	s3,28(sp)
   176f8:	01812a03          	lw	s4,24(sp)
   176fc:	01412a83          	lw	s5,20(sp)
   17700:	03010113          	addi	sp,sp,48
   17704:	00008067          	ret
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
   17708:	0001f537          	lui	a0,0x1f
   1770c:	b3050513          	addi	a0,a0,-1232 # 1eb30 <memp_pools+0x36c>
   17710:	d0dff0ef          	jal	ra,1741c <bsp_printf>
   17714:	f9dff06f          	j	176b0 <igmp_send+0x5c>
      dest = &(group->group_address);
   17718:	004a0a93          	addi	s5,s4,4
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
   1771c:	004a2783          	lw	a5,4(s4)
   17720:	00f48223          	sb	a5,4(s1)
   17724:	0087d713          	srli	a4,a5,0x8
   17728:	00e482a3          	sb	a4,5(s1)
   1772c:	0107d713          	srli	a4,a5,0x10
   17730:	00e48323          	sb	a4,6(s1)
   17734:	0187d793          	srli	a5,a5,0x18
   17738:	00f483a3          	sb	a5,7(s1)
      group->last_reporter_flag = 1; /* Remember we were the last to report */
   1773c:	00100793          	li	a5,1
   17740:	00fa0423          	sb	a5,8(s4)
   17744:	f89ff06f          	j	176cc <igmp_send+0x78>
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
   17748:	004a2783          	lw	a5,4(s4)
   1774c:	00f48223          	sb	a5,4(s1)
   17750:	0087d713          	srli	a4,a5,0x8
   17754:	00e482a3          	sb	a4,5(s1)
   17758:	0107d713          	srli	a4,a5,0x10
   1775c:	00e48323          	sb	a4,6(s1)
   17760:	0187d793          	srli	a5,a5,0x18
   17764:	00f483a3          	sb	a5,7(s1)
        dest = &allrouters;
   17768:	95c18a93          	addi	s5,gp,-1700 # 1fb2c <allrouters>
   1776c:	f61ff06f          	j	176cc <igmp_send+0x78>
      igmp->igmp_msgtype  = type;
   17770:	01248023          	sb	s2,0(s1)
      igmp->igmp_maxresp  = 0;
   17774:	000480a3          	sb	zero,1(s1)
      igmp->igmp_checksum = 0;
   17778:	00048123          	sb	zero,2(s1)
   1777c:	000481a3          	sb	zero,3(s1)
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
   17780:	00800593          	li	a1,8
   17784:	00048513          	mv	a0,s1
   17788:	d40fd0ef          	jal	ra,14cc8 <inet_chksum>
   1778c:	00a48123          	sb	a0,2(s1)
   17790:	00855513          	srli	a0,a0,0x8
   17794:	00a481a3          	sb	a0,3(s1)
      igmp_ip_output_if(p, &src, dest, netif);
   17798:	00098693          	mv	a3,s3
   1779c:	000a8613          	mv	a2,s5
   177a0:	00c10593          	addi	a1,sp,12
   177a4:	00040513          	mv	a0,s0
   177a8:	e59ff0ef          	jal	ra,17600 <igmp_ip_output_if>
   177ac:	f31ff06f          	j	176dc <igmp_send+0x88>
    IGMP_STATS_INC(igmp.memerr);
   177b0:	000227b7          	lui	a5,0x22
   177b4:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   177b8:	0827d703          	lhu	a4,130(a5)
   177bc:	00170713          	addi	a4,a4,1
   177c0:	08e79123          	sh	a4,130(a5)
}
   177c4:	f21ff06f          	j	176e4 <igmp_send+0x90>

000177c8 <igmp_timeout>:
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
   177c8:	0095c703          	lbu	a4,9(a1)
   177cc:	00100793          	li	a5,1
   177d0:	00f70463          	beq	a4,a5,177d8 <igmp_timeout+0x10>
   177d4:	00008067          	ret
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
   177d8:	0045a703          	lw	a4,4(a1)
   177dc:	9601a783          	lw	a5,-1696(gp) # 1fb30 <allsystems>
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
   177e0:	fef70ae3          	beq	a4,a5,177d4 <igmp_timeout+0xc>
{
   177e4:	ff010113          	addi	sp,sp,-16
   177e8:	00112623          	sw	ra,12(sp)
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
   177ec:	00200793          	li	a5,2
   177f0:	00f584a3          	sb	a5,9(a1)
    IGMP_STATS_INC(igmp.tx_report);
   177f4:	000227b7          	lui	a5,0x22
   177f8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   177fc:	0927d703          	lhu	a4,146(a5)
   17800:	00170713          	addi	a4,a4,1
   17804:	08e79923          	sh	a4,146(a5)
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
   17808:	01600613          	li	a2,22
   1780c:	e49ff0ef          	jal	ra,17654 <igmp_send>
}
   17810:	00c12083          	lw	ra,12(sp)
   17814:	01010113          	addi	sp,sp,16
   17818:	00008067          	ret

0001781c <igmp_init>:
  IP4_ADDR(&allsystems, 224, 0, 0, 1);
   1781c:	010007b7          	lui	a5,0x1000
   17820:	0e078793          	addi	a5,a5,224 # 10000e0 <__freertos_irq_stack_top+0xfdb1b0>
   17824:	96f1a023          	sw	a5,-1696(gp) # 1fb30 <allsystems>
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
   17828:	020007b7          	lui	a5,0x2000
   1782c:	0e078793          	addi	a5,a5,224 # 20000e0 <__freertos_irq_stack_top+0x1fdb1b0>
   17830:	94f1ae23          	sw	a5,-1700(gp) # 1fb2c <allrouters>
}
   17834:	00008067          	ret

00017838 <igmp_stop>:
{
   17838:	ff010113          	addi	sp,sp,-16
   1783c:	00112623          	sw	ra,12(sp)
   17840:	00812423          	sw	s0,8(sp)
   17844:	00912223          	sw	s1,4(sp)
   17848:	01212023          	sw	s2,0(sp)
   1784c:	00050493          	mv	s1,a0
  struct igmp_group *group = netif_igmp_data(netif);
   17850:	02852403          	lw	s0,40(a0)
  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, NULL);
   17854:	02052423          	sw	zero,40(a0)
  while (group != NULL) {
   17858:	0140006f          	j	1786c <igmp_stop+0x34>
    memp_free(MEMP_IGMP_GROUP, group);
   1785c:	00040593          	mv	a1,s0
   17860:	00800513          	li	a0,8
   17864:	c79fc0ef          	jal	ra,144dc <memp_free>
    group = next;
   17868:	00090413          	mv	s0,s2
  while (group != NULL) {
   1786c:	02040263          	beqz	s0,17890 <igmp_stop+0x58>
    struct igmp_group *next = group->next; /* avoid use-after-free below */
   17870:	00042903          	lw	s2,0(s0)
    if (netif->igmp_mac_filter != NULL) {
   17874:	03c4a783          	lw	a5,60(s1)
   17878:	fe0782e3          	beqz	a5,1785c <igmp_stop+0x24>
      netif->igmp_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
   1787c:	00000613          	li	a2,0
   17880:	00440593          	addi	a1,s0,4
   17884:	00048513          	mv	a0,s1
   17888:	000780e7          	jalr	a5
   1788c:	fd1ff06f          	j	1785c <igmp_stop+0x24>
}
   17890:	00000513          	li	a0,0
   17894:	00c12083          	lw	ra,12(sp)
   17898:	00812403          	lw	s0,8(sp)
   1789c:	00412483          	lw	s1,4(sp)
   178a0:	00012903          	lw	s2,0(sp)
   178a4:	01010113          	addi	sp,sp,16
   178a8:	00008067          	ret

000178ac <igmp_report_groups>:
{
   178ac:	ff010113          	addi	sp,sp,-16
   178b0:	00112623          	sw	ra,12(sp)
   178b4:	00812423          	sw	s0,8(sp)
  struct igmp_group *group = netif_igmp_data(netif);
   178b8:	02852403          	lw	s0,40(a0)
  if (group != NULL) {
   178bc:	00040463          	beqz	s0,178c4 <igmp_report_groups+0x18>
    group = group->next;
   178c0:	00042403          	lw	s0,0(s0)
  while (group != NULL) {
   178c4:	00040c63          	beqz	s0,178dc <igmp_report_groups+0x30>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
   178c8:	00500593          	li	a1,5
   178cc:	00040513          	mv	a0,s0
   178d0:	cd9ff0ef          	jal	ra,175a8 <igmp_delaying_member>
    group = group->next;
   178d4:	00042403          	lw	s0,0(s0)
   178d8:	fedff06f          	j	178c4 <igmp_report_groups+0x18>
}
   178dc:	00c12083          	lw	ra,12(sp)
   178e0:	00812403          	lw	s0,8(sp)
   178e4:	01010113          	addi	sp,sp,16
   178e8:	00008067          	ret

000178ec <igmp_lookfor_group>:
  struct igmp_group *group = netif_igmp_data(ifp);
   178ec:	02852503          	lw	a0,40(a0)
  while (group != NULL) {
   178f0:	00050c63          	beqz	a0,17908 <igmp_lookfor_group+0x1c>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
   178f4:	00452703          	lw	a4,4(a0)
   178f8:	0005a783          	lw	a5,0(a1)
   178fc:	00f70663          	beq	a4,a5,17908 <igmp_lookfor_group+0x1c>
    group = group->next;
   17900:	00052503          	lw	a0,0(a0)
   17904:	fedff06f          	j	178f0 <igmp_lookfor_group+0x4>
}
   17908:	00008067          	ret

0001790c <igmp_lookup_group>:
{
   1790c:	fe010113          	addi	sp,sp,-32
   17910:	00112e23          	sw	ra,28(sp)
   17914:	00812c23          	sw	s0,24(sp)
   17918:	00912a23          	sw	s1,20(sp)
   1791c:	01212823          	sw	s2,16(sp)
   17920:	01312623          	sw	s3,12(sp)
   17924:	00050493          	mv	s1,a0
   17928:	00058913          	mv	s2,a1
  struct igmp_group *list_head = netif_igmp_data(ifp);
   1792c:	02852983          	lw	s3,40(a0)
  group = igmp_lookfor_group(ifp, addr);
   17930:	fbdff0ef          	jal	ra,178ec <igmp_lookfor_group>
   17934:	00050413          	mv	s0,a0
  if (group != NULL) {
   17938:	02050263          	beqz	a0,1795c <igmp_lookup_group+0x50>
}
   1793c:	00040513          	mv	a0,s0
   17940:	01c12083          	lw	ra,28(sp)
   17944:	01812403          	lw	s0,24(sp)
   17948:	01412483          	lw	s1,20(sp)
   1794c:	01012903          	lw	s2,16(sp)
   17950:	00c12983          	lw	s3,12(sp)
   17954:	02010113          	addi	sp,sp,32
   17958:	00008067          	ret
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
   1795c:	00800513          	li	a0,8
   17960:	aedfc0ef          	jal	ra,1444c <memp_malloc>
   17964:	00050413          	mv	s0,a0
  if (group != NULL) {
   17968:	fc050ae3          	beqz	a0,1793c <igmp_lookup_group+0x30>
    ip4_addr_set(&(group->group_address), addr);
   1796c:	02090e63          	beqz	s2,179a8 <igmp_lookup_group+0x9c>
   17970:	00092783          	lw	a5,0(s2)
   17974:	00f42223          	sw	a5,4(s0)
    group->timer              = 0; /* Not running */
   17978:	00041523          	sh	zero,10(s0)
    group->group_state        = IGMP_GROUP_NON_MEMBER;
   1797c:	000404a3          	sb	zero,9(s0)
    group->last_reporter_flag = 0;
   17980:	00040423          	sb	zero,8(s0)
    group->use                = 0;
   17984:	00040623          	sb	zero,12(s0)
    if (list_head == NULL) {
   17988:	02098463          	beqz	s3,179b0 <igmp_lookup_group+0xa4>
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
   1798c:	00092703          	lw	a4,0(s2)
   17990:	9601a783          	lw	a5,-1696(gp) # 1fb30 <allsystems>
   17994:	04f70263          	beq	a4,a5,179d8 <igmp_lookup_group+0xcc>
      group->next = list_head->next;
   17998:	0009a783          	lw	a5,0(s3)
   1799c:	00f42023          	sw	a5,0(s0)
      list_head->next = group;
   179a0:	0089a023          	sw	s0,0(s3)
   179a4:	f99ff06f          	j	1793c <igmp_lookup_group+0x30>
    ip4_addr_set(&(group->group_address), addr);
   179a8:	00000793          	li	a5,0
   179ac:	fc9ff06f          	j	17974 <igmp_lookup_group+0x68>
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
   179b0:	00092703          	lw	a4,0(s2)
   179b4:	9601a783          	lw	a5,-1696(gp) # 1fb30 <allsystems>
   179b8:	00f71863          	bne	a4,a5,179c8 <igmp_lookup_group+0xbc>
      group->next = NULL;
   179bc:	00042023          	sw	zero,0(s0)
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
   179c0:	0284a423          	sw	s0,40(s1)
   179c4:	f79ff06f          	j	1793c <igmp_lookup_group+0x30>
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
   179c8:	0001f537          	lui	a0,0x1f
   179cc:	b6c50513          	addi	a0,a0,-1172 # 1eb6c <memp_pools+0x3a8>
   179d0:	a4dff0ef          	jal	ra,1741c <bsp_printf>
   179d4:	fe9ff06f          	j	179bc <igmp_lookup_group+0xb0>
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
   179d8:	0001f537          	lui	a0,0x1f
   179dc:	ba050513          	addi	a0,a0,-1120 # 1eba0 <memp_pools+0x3dc>
   179e0:	a3dff0ef          	jal	ra,1741c <bsp_printf>
   179e4:	fb5ff06f          	j	17998 <igmp_lookup_group+0x8c>

000179e8 <igmp_start>:
{
   179e8:	ff010113          	addi	sp,sp,-16
   179ec:	00112623          	sw	ra,12(sp)
   179f0:	00812423          	sw	s0,8(sp)
   179f4:	00050413          	mv	s0,a0
  group = igmp_lookup_group(netif, &allsystems);
   179f8:	96018593          	addi	a1,gp,-1696 # 1fb30 <allsystems>
   179fc:	f11ff0ef          	jal	ra,1790c <igmp_lookup_group>
  if (group != NULL) {
   17a00:	04050263          	beqz	a0,17a44 <igmp_start+0x5c>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
   17a04:	00200793          	li	a5,2
   17a08:	00f504a3          	sb	a5,9(a0)
    group->use++;
   17a0c:	00c54783          	lbu	a5,12(a0)
   17a10:	00178793          	addi	a5,a5,1
   17a14:	00f50623          	sb	a5,12(a0)
    if (netif->igmp_mac_filter != NULL) {
   17a18:	03c42783          	lw	a5,60(s0)
   17a1c:	00078a63          	beqz	a5,17a30 <igmp_start+0x48>
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
   17a20:	00100613          	li	a2,1
   17a24:	96018593          	addi	a1,gp,-1696 # 1fb30 <allsystems>
   17a28:	00040513          	mv	a0,s0
   17a2c:	000780e7          	jalr	a5
    return ERR_OK;
   17a30:	00000513          	li	a0,0
}
   17a34:	00c12083          	lw	ra,12(sp)
   17a38:	00812403          	lw	s0,8(sp)
   17a3c:	01010113          	addi	sp,sp,16
   17a40:	00008067          	ret
  return ERR_MEM;
   17a44:	fff00513          	li	a0,-1
   17a48:	fedff06f          	j	17a34 <igmp_start+0x4c>

00017a4c <igmp_input>:
{
   17a4c:	fd010113          	addi	sp,sp,-48
   17a50:	02112623          	sw	ra,44(sp)
   17a54:	02812423          	sw	s0,40(sp)
   17a58:	02912223          	sw	s1,36(sp)
   17a5c:	03212023          	sw	s2,32(sp)
   17a60:	01312e23          	sw	s3,28(sp)
   17a64:	00050413          	mv	s0,a0
   17a68:	00058993          	mv	s3,a1
  IGMP_STATS_INC(igmp.recv);
   17a6c:	000227b7          	lui	a5,0x22
   17a70:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17a74:	07a7d703          	lhu	a4,122(a5)
   17a78:	00170713          	addi	a4,a4,1
   17a7c:	06e79d23          	sh	a4,122(a5)
  if (p->len < IGMP_MINLEN) {
   17a80:	00a55583          	lhu	a1,10(a0)
   17a84:	00700793          	li	a5,7
   17a88:	06b7fa63          	bgeu	a5,a1,17afc <igmp_input+0xb0>
   17a8c:	00060913          	mv	s2,a2
  igmp = (struct igmp_msg *)p->payload;
   17a90:	00452483          	lw	s1,4(a0)
  if (inet_chksum(igmp, p->len)) {
   17a94:	00048513          	mv	a0,s1
   17a98:	a30fd0ef          	jal	ra,14cc8 <inet_chksum>
   17a9c:	06051e63          	bnez	a0,17b18 <igmp_input+0xcc>
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
   17aa0:	00090593          	mv	a1,s2
   17aa4:	00098513          	mv	a0,s3
   17aa8:	e45ff0ef          	jal	ra,178ec <igmp_lookfor_group>
  if (!group) {
   17aac:	08050663          	beqz	a0,17b38 <igmp_input+0xec>
  switch (igmp->igmp_msgtype) {
   17ab0:	0004c783          	lbu	a5,0(s1)
   17ab4:	01100713          	li	a4,17
   17ab8:	0ae78063          	beq	a5,a4,17b58 <igmp_input+0x10c>
   17abc:	01600713          	li	a4,22
   17ac0:	1ce78e63          	beq	a5,a4,17c9c <igmp_input+0x250>
      IGMP_STATS_INC(igmp.proterr);
   17ac4:	000227b7          	lui	a5,0x22
   17ac8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17acc:	0847d703          	lhu	a4,132(a5)
   17ad0:	00170713          	addi	a4,a4,1
   17ad4:	08e79223          	sh	a4,132(a5)
  pbuf_free(p);
   17ad8:	00040513          	mv	a0,s0
   17adc:	874f50ef          	jal	ra,cb50 <pbuf_free>
}
   17ae0:	02c12083          	lw	ra,44(sp)
   17ae4:	02812403          	lw	s0,40(sp)
   17ae8:	02412483          	lw	s1,36(sp)
   17aec:	02012903          	lw	s2,32(sp)
   17af0:	01c12983          	lw	s3,28(sp)
   17af4:	03010113          	addi	sp,sp,48
   17af8:	00008067          	ret
    pbuf_free(p);
   17afc:	854f50ef          	jal	ra,cb50 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
   17b00:	000227b7          	lui	a5,0x22
   17b04:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17b08:	0807d703          	lhu	a4,128(a5)
   17b0c:	00170713          	addi	a4,a4,1
   17b10:	08e79023          	sh	a4,128(a5)
    return;
   17b14:	fcdff06f          	j	17ae0 <igmp_input+0x94>
    pbuf_free(p);
   17b18:	00040513          	mv	a0,s0
   17b1c:	834f50ef          	jal	ra,cb50 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
   17b20:	000227b7          	lui	a5,0x22
   17b24:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17b28:	07e7d703          	lhu	a4,126(a5)
   17b2c:	00170713          	addi	a4,a4,1
   17b30:	06e79f23          	sh	a4,126(a5)
    return;
   17b34:	fadff06f          	j	17ae0 <igmp_input+0x94>
    pbuf_free(p);
   17b38:	00040513          	mv	a0,s0
   17b3c:	814f50ef          	jal	ra,cb50 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
   17b40:	000227b7          	lui	a5,0x22
   17b44:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17b48:	07c7d703          	lhu	a4,124(a5)
   17b4c:	00170713          	addi	a4,a4,1
   17b50:	06e79e23          	sh	a4,124(a5)
    return;
   17b54:	f8dff06f          	j	17ae0 <igmp_input+0x94>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
   17b58:	00092603          	lw	a2,0(s2)
   17b5c:	9601a683          	lw	a3,-1696(gp) # 1fb30 <allsystems>
   17b60:	06d60063          	beq	a2,a3,17bc0 <igmp_input+0x174>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
   17b64:	00448793          	addi	a5,s1,4
   17b68:	10078e63          	beqz	a5,17c84 <igmp_input+0x238>
   17b6c:	0044c783          	lbu	a5,4(s1)
   17b70:	0054c703          	lbu	a4,5(s1)
   17b74:	00871713          	slli	a4,a4,0x8
   17b78:	00f76733          	or	a4,a4,a5
   17b7c:	0064c783          	lbu	a5,6(s1)
   17b80:	01079793          	slli	a5,a5,0x10
   17b84:	00e7e733          	or	a4,a5,a4
   17b88:	0074c783          	lbu	a5,7(s1)
   17b8c:	01879793          	slli	a5,a5,0x18
   17b90:	00e7e7b3          	or	a5,a5,a4
   17b94:	0e078863          	beqz	a5,17c84 <igmp_input+0x238>
          if (ip4_addr_cmp(dest, &allsystems)) {
   17b98:	0cd60063          	beq	a2,a3,17c58 <igmp_input+0x20c>
          if (group != NULL) {
   17b9c:	0c050863          	beqz	a0,17c6c <igmp_input+0x220>
            IGMP_STATS_INC(igmp.rx_group);
   17ba0:	000227b7          	lui	a5,0x22
   17ba4:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17ba8:	0887d703          	lhu	a4,136(a5)
   17bac:	00170713          	addi	a4,a4,1
   17bb0:	08e79423          	sh	a4,136(a5)
            igmp_delaying_member(group, igmp->igmp_maxresp);
   17bb4:	0014c583          	lbu	a1,1(s1)
   17bb8:	9f1ff0ef          	jal	ra,175a8 <igmp_delaying_member>
   17bbc:	f1dff06f          	j	17ad8 <igmp_input+0x8c>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
   17bc0:	00448793          	addi	a5,s1,4
   17bc4:	02078863          	beqz	a5,17bf4 <igmp_input+0x1a8>
   17bc8:	0044c783          	lbu	a5,4(s1)
   17bcc:	0054c703          	lbu	a4,5(s1)
   17bd0:	00871713          	slli	a4,a4,0x8
   17bd4:	00f76733          	or	a4,a4,a5
   17bd8:	0064c783          	lbu	a5,6(s1)
   17bdc:	01079793          	slli	a5,a5,0x10
   17be0:	00e7e733          	or	a4,a5,a4
   17be4:	0074c783          	lbu	a5,7(s1)
   17be8:	01879793          	slli	a5,a5,0x18
   17bec:	00e7e7b3          	or	a5,a5,a4
   17bf0:	f6079ae3          	bnez	a5,17b64 <igmp_input+0x118>
        if (igmp->igmp_maxresp == 0) {
   17bf4:	0014c783          	lbu	a5,1(s1)
   17bf8:	02079863          	bnez	a5,17c28 <igmp_input+0x1dc>
          IGMP_STATS_INC(igmp.rx_v1);
   17bfc:	000227b7          	lui	a5,0x22
   17c00:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17c04:	0867d703          	lhu	a4,134(a5)
   17c08:	00170713          	addi	a4,a4,1
   17c0c:	08e79323          	sh	a4,134(a5)
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
   17c10:	00a00793          	li	a5,10
   17c14:	00f480a3          	sb	a5,1(s1)
        groupref = netif_igmp_data(inp);
   17c18:	0289a903          	lw	s2,40(s3)
        if (groupref != NULL) {
   17c1c:	02090a63          	beqz	s2,17c50 <igmp_input+0x204>
          groupref = groupref->next;
   17c20:	00092903          	lw	s2,0(s2)
   17c24:	02c0006f          	j	17c50 <igmp_input+0x204>
          IGMP_STATS_INC(igmp.rx_general);
   17c28:	000227b7          	lui	a5,0x22
   17c2c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17c30:	08a7d703          	lhu	a4,138(a5)
   17c34:	00170713          	addi	a4,a4,1
   17c38:	08e79523          	sh	a4,138(a5)
   17c3c:	fddff06f          	j	17c18 <igmp_input+0x1cc>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
   17c40:	0014c583          	lbu	a1,1(s1)
   17c44:	00090513          	mv	a0,s2
   17c48:	961ff0ef          	jal	ra,175a8 <igmp_delaying_member>
          groupref = groupref->next;
   17c4c:	00092903          	lw	s2,0(s2)
        while (groupref) {
   17c50:	fe0918e3          	bnez	s2,17c40 <igmp_input+0x1f4>
   17c54:	e85ff06f          	j	17ad8 <igmp_input+0x8c>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
   17c58:	00f12623          	sw	a5,12(sp)
            group = igmp_lookfor_group(inp, &groupaddr);
   17c5c:	00c10593          	addi	a1,sp,12
   17c60:	00098513          	mv	a0,s3
   17c64:	c89ff0ef          	jal	ra,178ec <igmp_lookfor_group>
   17c68:	f35ff06f          	j	17b9c <igmp_input+0x150>
            IGMP_STATS_INC(igmp.drop);
   17c6c:	000227b7          	lui	a5,0x22
   17c70:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17c74:	07c7d703          	lhu	a4,124(a5)
   17c78:	00170713          	addi	a4,a4,1
   17c7c:	06e79e23          	sh	a4,124(a5)
   17c80:	e59ff06f          	j	17ad8 <igmp_input+0x8c>
          IGMP_STATS_INC(igmp.proterr);
   17c84:	000227b7          	lui	a5,0x22
   17c88:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17c8c:	0847d703          	lhu	a4,132(a5)
   17c90:	00170713          	addi	a4,a4,1
   17c94:	08e79223          	sh	a4,132(a5)
   17c98:	e41ff06f          	j	17ad8 <igmp_input+0x8c>
      IGMP_STATS_INC(igmp.rx_report);
   17c9c:	000227b7          	lui	a5,0x22
   17ca0:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17ca4:	08c7d703          	lhu	a4,140(a5)
   17ca8:	00170713          	addi	a4,a4,1
   17cac:	08e79623          	sh	a4,140(a5)
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
   17cb0:	00954703          	lbu	a4,9(a0)
   17cb4:	00100793          	li	a5,1
   17cb8:	e2f710e3          	bne	a4,a5,17ad8 <igmp_input+0x8c>
        group->timer = 0; /* stopped */
   17cbc:	00051523          	sh	zero,10(a0)
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
   17cc0:	00200793          	li	a5,2
   17cc4:	00f504a3          	sb	a5,9(a0)
        group->last_reporter_flag = 0;
   17cc8:	00050423          	sb	zero,8(a0)
   17ccc:	e0dff06f          	j	17ad8 <igmp_input+0x8c>

00017cd0 <igmp_joingroup_netif>:
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
   17cd0:	0005a783          	lw	a5,0(a1)
   17cd4:	0f07f693          	andi	a3,a5,240
   17cd8:	0e000713          	li	a4,224
   17cdc:	0ce69463          	bne	a3,a4,17da4 <igmp_joingroup_netif+0xd4>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
   17ce0:	9601a703          	lw	a4,-1696(gp) # 1fb30 <allsystems>
   17ce4:	0ce78463          	beq	a5,a4,17dac <igmp_joingroup_netif+0xdc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
   17ce8:	03554783          	lbu	a5,53(a0)
   17cec:	0207f793          	andi	a5,a5,32
   17cf0:	0c078263          	beqz	a5,17db4 <igmp_joingroup_netif+0xe4>
{
   17cf4:	ff010113          	addi	sp,sp,-16
   17cf8:	00112623          	sw	ra,12(sp)
   17cfc:	00812423          	sw	s0,8(sp)
   17d00:	00912223          	sw	s1,4(sp)
   17d04:	01212023          	sw	s2,0(sp)
   17d08:	00058913          	mv	s2,a1
   17d0c:	00050493          	mv	s1,a0
  group = igmp_lookup_group(netif, groupaddr);
   17d10:	bfdff0ef          	jal	ra,1790c <igmp_lookup_group>
   17d14:	00050413          	mv	s0,a0
  if (group != NULL) {
   17d18:	0a050263          	beqz	a0,17dbc <igmp_joingroup_netif+0xec>
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
   17d1c:	00954783          	lbu	a5,9(a0)
   17d20:	04079e63          	bnez	a5,17d7c <igmp_joingroup_netif+0xac>
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
   17d24:	00c54783          	lbu	a5,12(a0)
   17d28:	00079e63          	bnez	a5,17d44 <igmp_joingroup_netif+0x74>
   17d2c:	03c4a783          	lw	a5,60(s1)
   17d30:	00078a63          	beqz	a5,17d44 <igmp_joingroup_netif+0x74>
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
   17d34:	00100613          	li	a2,1
   17d38:	00090593          	mv	a1,s2
   17d3c:	00048513          	mv	a0,s1
   17d40:	000780e7          	jalr	a5
      IGMP_STATS_INC(igmp.tx_join);
   17d44:	000227b7          	lui	a5,0x22
   17d48:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17d4c:	08e7d703          	lhu	a4,142(a5)
   17d50:	00170713          	addi	a4,a4,1
   17d54:	08e79723          	sh	a4,142(a5)
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
   17d58:	01600613          	li	a2,22
   17d5c:	00040593          	mv	a1,s0
   17d60:	00048513          	mv	a0,s1
   17d64:	8f1ff0ef          	jal	ra,17654 <igmp_send>
      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
   17d68:	00500593          	li	a1,5
   17d6c:	00040513          	mv	a0,s0
   17d70:	fe4ff0ef          	jal	ra,17554 <igmp_start_timer>
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
   17d74:	00100793          	li	a5,1
   17d78:	00f404a3          	sb	a5,9(s0)
    group->use++;
   17d7c:	00c44783          	lbu	a5,12(s0)
   17d80:	00178793          	addi	a5,a5,1
   17d84:	00f40623          	sb	a5,12(s0)
    return ERR_OK;
   17d88:	00000513          	li	a0,0
}
   17d8c:	00c12083          	lw	ra,12(sp)
   17d90:	00812403          	lw	s0,8(sp)
   17d94:	00412483          	lw	s1,4(sp)
   17d98:	00012903          	lw	s2,0(sp)
   17d9c:	01010113          	addi	sp,sp,16
   17da0:	00008067          	ret
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
   17da4:	ffa00513          	li	a0,-6
   17da8:	00008067          	ret
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
   17dac:	ffa00513          	li	a0,-6
   17db0:	00008067          	ret
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
   17db4:	ffa00513          	li	a0,-6
}
   17db8:	00008067          	ret
    return ERR_MEM;
   17dbc:	fff00513          	li	a0,-1
   17dc0:	fcdff06f          	j	17d8c <igmp_joingroup_netif+0xbc>

00017dc4 <igmp_joingroup>:
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
   17dc4:	0005a783          	lw	a5,0(a1)
   17dc8:	0f07f693          	andi	a3,a5,240
   17dcc:	0e000713          	li	a4,224
   17dd0:	06e69a63          	bne	a3,a4,17e44 <igmp_joingroup+0x80>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
   17dd4:	9601a703          	lw	a4,-1696(gp) # 1fb30 <allsystems>
   17dd8:	06e78a63          	beq	a5,a4,17e4c <igmp_joingroup+0x88>
{
   17ddc:	ff010113          	addi	sp,sp,-16
   17de0:	00112623          	sw	ra,12(sp)
   17de4:	00812423          	sw	s0,8(sp)
   17de8:	00912223          	sw	s1,4(sp)
   17dec:	01212023          	sw	s2,0(sp)
   17df0:	00058913          	mv	s2,a1
   17df4:	00050493          	mv	s1,a0
  NETIF_FOREACH(netif) {
   17df8:	000227b7          	lui	a5,0x22
   17dfc:	ed47a403          	lw	s0,-300(a5) # 21ed4 <netif_list>
  err_t err = ERR_VAL; /* no matching interface */
   17e00:	ffa00513          	li	a0,-6
  NETIF_FOREACH(netif) {
   17e04:	0180006f          	j	17e1c <igmp_joingroup+0x58>
      err = igmp_joingroup_netif(netif, groupaddr);
   17e08:	00090593          	mv	a1,s2
   17e0c:	00040513          	mv	a0,s0
   17e10:	ec1ff0ef          	jal	ra,17cd0 <igmp_joingroup_netif>
      if (err != ERR_OK) {
   17e14:	04051063          	bnez	a0,17e54 <igmp_joingroup+0x90>
  NETIF_FOREACH(netif) {
   17e18:	00042403          	lw	s0,0(s0)
   17e1c:	02040c63          	beqz	s0,17e54 <igmp_joingroup+0x90>
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
   17e20:	03544783          	lbu	a5,53(s0)
   17e24:	0207f793          	andi	a5,a5,32
   17e28:	fe0788e3          	beqz	a5,17e18 <igmp_joingroup+0x54>
   17e2c:	fc048ee3          	beqz	s1,17e08 <igmp_joingroup+0x44>
   17e30:	0004a783          	lw	a5,0(s1)
   17e34:	fc078ae3          	beqz	a5,17e08 <igmp_joingroup+0x44>
   17e38:	00442703          	lw	a4,4(s0)
   17e3c:	fce79ee3          	bne	a5,a4,17e18 <igmp_joingroup+0x54>
   17e40:	fc9ff06f          	j	17e08 <igmp_joingroup+0x44>
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
   17e44:	ffa00513          	li	a0,-6
   17e48:	00008067          	ret
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
   17e4c:	ffa00513          	li	a0,-6
}
   17e50:	00008067          	ret
   17e54:	00c12083          	lw	ra,12(sp)
   17e58:	00812403          	lw	s0,8(sp)
   17e5c:	00412483          	lw	s1,4(sp)
   17e60:	00012903          	lw	s2,0(sp)
   17e64:	01010113          	addi	sp,sp,16
   17e68:	00008067          	ret

00017e6c <igmp_leavegroup_netif>:
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
   17e6c:	0005a783          	lw	a5,0(a1)
   17e70:	0f07f693          	andi	a3,a5,240
   17e74:	0e000713          	li	a4,224
   17e78:	0ce69a63          	bne	a3,a4,17f4c <igmp_leavegroup_netif+0xe0>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
   17e7c:	9601a703          	lw	a4,-1696(gp) # 1fb30 <allsystems>
   17e80:	0ce78a63          	beq	a5,a4,17f54 <igmp_leavegroup_netif+0xe8>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
   17e84:	03554783          	lbu	a5,53(a0)
   17e88:	0207f793          	andi	a5,a5,32
   17e8c:	0c078863          	beqz	a5,17f5c <igmp_leavegroup_netif+0xf0>
{
   17e90:	ff010113          	addi	sp,sp,-16
   17e94:	00112623          	sw	ra,12(sp)
   17e98:	00812423          	sw	s0,8(sp)
   17e9c:	00912223          	sw	s1,4(sp)
   17ea0:	01212023          	sw	s2,0(sp)
   17ea4:	00058493          	mv	s1,a1
   17ea8:	00050413          	mv	s0,a0
  group = igmp_lookfor_group(netif, groupaddr);
   17eac:	a41ff0ef          	jal	ra,178ec <igmp_lookfor_group>
   17eb0:	00050913          	mv	s2,a0
  if (group != NULL) {
   17eb4:	0a050863          	beqz	a0,17f64 <igmp_leavegroup_netif+0xf8>
    if (group->use <= 1) {
   17eb8:	00c54783          	lbu	a5,12(a0)
   17ebc:	00100713          	li	a4,1
   17ec0:	02f77463          	bgeu	a4,a5,17ee8 <igmp_leavegroup_netif+0x7c>
      group->use--;
   17ec4:	fff78793          	addi	a5,a5,-1
   17ec8:	00f50623          	sb	a5,12(a0)
    return ERR_OK;
   17ecc:	00000513          	li	a0,0
}
   17ed0:	00c12083          	lw	ra,12(sp)
   17ed4:	00812403          	lw	s0,8(sp)
   17ed8:	00412483          	lw	s1,4(sp)
   17edc:	00012903          	lw	s2,0(sp)
   17ee0:	01010113          	addi	sp,sp,16
   17ee4:	00008067          	ret
      igmp_remove_group(netif, group);
   17ee8:	00050593          	mv	a1,a0
   17eec:	00040513          	mv	a0,s0
   17ef0:	cf8ff0ef          	jal	ra,173e8 <igmp_remove_group>
      if (group->last_reporter_flag) {
   17ef4:	00894783          	lbu	a5,8(s2)
   17ef8:	02079663          	bnez	a5,17f24 <igmp_leavegroup_netif+0xb8>
      if (netif->igmp_mac_filter != NULL) {
   17efc:	03c42783          	lw	a5,60(s0)
   17f00:	00078a63          	beqz	a5,17f14 <igmp_leavegroup_netif+0xa8>
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
   17f04:	00000613          	li	a2,0
   17f08:	00048593          	mv	a1,s1
   17f0c:	00040513          	mv	a0,s0
   17f10:	000780e7          	jalr	a5
      memp_free(MEMP_IGMP_GROUP, group);
   17f14:	00090593          	mv	a1,s2
   17f18:	00800513          	li	a0,8
   17f1c:	dc0fc0ef          	jal	ra,144dc <memp_free>
   17f20:	fadff06f          	j	17ecc <igmp_leavegroup_netif+0x60>
        IGMP_STATS_INC(igmp.tx_leave);
   17f24:	000227b7          	lui	a5,0x22
   17f28:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   17f2c:	0907d703          	lhu	a4,144(a5)
   17f30:	00170713          	addi	a4,a4,1
   17f34:	08e79823          	sh	a4,144(a5)
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
   17f38:	01700613          	li	a2,23
   17f3c:	00090593          	mv	a1,s2
   17f40:	00040513          	mv	a0,s0
   17f44:	f10ff0ef          	jal	ra,17654 <igmp_send>
   17f48:	fb5ff06f          	j	17efc <igmp_leavegroup_netif+0x90>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
   17f4c:	ffa00513          	li	a0,-6
   17f50:	00008067          	ret
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
   17f54:	ffa00513          	li	a0,-6
   17f58:	00008067          	ret
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
   17f5c:	ffa00513          	li	a0,-6
}
   17f60:	00008067          	ret
    return ERR_VAL;
   17f64:	ffa00513          	li	a0,-6
   17f68:	f69ff06f          	j	17ed0 <igmp_leavegroup_netif+0x64>

00017f6c <igmp_leavegroup>:
{
   17f6c:	fe010113          	addi	sp,sp,-32
   17f70:	00112e23          	sw	ra,28(sp)
   17f74:	00812c23          	sw	s0,24(sp)
   17f78:	00912a23          	sw	s1,20(sp)
   17f7c:	01212823          	sw	s2,16(sp)
   17f80:	01312623          	sw	s3,12(sp)
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
   17f84:	0005a783          	lw	a5,0(a1)
   17f88:	0f07f693          	andi	a3,a5,240
   17f8c:	0e000713          	li	a4,224
   17f90:	06e69263          	bne	a3,a4,17ff4 <igmp_leavegroup+0x88>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
   17f94:	9601a703          	lw	a4,-1696(gp) # 1fb30 <allsystems>
   17f98:	08e78063          	beq	a5,a4,18018 <igmp_leavegroup+0xac>
   17f9c:	00058913          	mv	s2,a1
   17fa0:	00050493          	mv	s1,a0
  NETIF_FOREACH(netif) {
   17fa4:	000227b7          	lui	a5,0x22
   17fa8:	ed47a403          	lw	s0,-300(a5) # 21ed4 <netif_list>
  err_t err = ERR_VAL; /* no matching interface */
   17fac:	ffa00993          	li	s3,-6
  NETIF_FOREACH(netif) {
   17fb0:	01c0006f          	j	17fcc <igmp_leavegroup+0x60>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
   17fb4:	00090593          	mv	a1,s2
   17fb8:	00040513          	mv	a0,s0
   17fbc:	eb1ff0ef          	jal	ra,17e6c <igmp_leavegroup_netif>
      if (err != ERR_OK) {
   17fc0:	00098463          	beqz	s3,17fc8 <igmp_leavegroup+0x5c>
        err = res;
   17fc4:	00050993          	mv	s3,a0
  NETIF_FOREACH(netif) {
   17fc8:	00042403          	lw	s0,0(s0)
   17fcc:	02040663          	beqz	s0,17ff8 <igmp_leavegroup+0x8c>
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
   17fd0:	03544783          	lbu	a5,53(s0)
   17fd4:	0207f793          	andi	a5,a5,32
   17fd8:	fe0788e3          	beqz	a5,17fc8 <igmp_leavegroup+0x5c>
   17fdc:	fc048ce3          	beqz	s1,17fb4 <igmp_leavegroup+0x48>
   17fe0:	0004a783          	lw	a5,0(s1)
   17fe4:	fc0788e3          	beqz	a5,17fb4 <igmp_leavegroup+0x48>
   17fe8:	00442703          	lw	a4,4(s0)
   17fec:	fce79ee3          	bne	a5,a4,17fc8 <igmp_leavegroup+0x5c>
   17ff0:	fc5ff06f          	j	17fb4 <igmp_leavegroup+0x48>
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
   17ff4:	ffa00993          	li	s3,-6
}
   17ff8:	00098513          	mv	a0,s3
   17ffc:	01c12083          	lw	ra,28(sp)
   18000:	01812403          	lw	s0,24(sp)
   18004:	01412483          	lw	s1,20(sp)
   18008:	01012903          	lw	s2,16(sp)
   1800c:	00c12983          	lw	s3,12(sp)
   18010:	02010113          	addi	sp,sp,32
   18014:	00008067          	ret
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
   18018:	ffa00993          	li	s3,-6
   1801c:	fddff06f          	j	17ff8 <igmp_leavegroup+0x8c>

00018020 <igmp_tmr>:
{
   18020:	ff010113          	addi	sp,sp,-16
   18024:	00112623          	sw	ra,12(sp)
   18028:	00812423          	sw	s0,8(sp)
   1802c:	00912223          	sw	s1,4(sp)
  NETIF_FOREACH(netif) {
   18030:	000227b7          	lui	a5,0x22
   18034:	ed47a483          	lw	s1,-300(a5) # 21ed4 <netif_list>
   18038:	03c0006f          	j	18074 <igmp_tmr+0x54>
          igmp_timeout(netif, group);
   1803c:	00040593          	mv	a1,s0
   18040:	00048513          	mv	a0,s1
   18044:	f84ff0ef          	jal	ra,177c8 <igmp_timeout>
      group = group->next;
   18048:	00042403          	lw	s0,0(s0)
    while (group != NULL) {
   1804c:	02040263          	beqz	s0,18070 <igmp_tmr+0x50>
      if (group->timer > 0) {
   18050:	00a45783          	lhu	a5,10(s0)
   18054:	fe078ae3          	beqz	a5,18048 <igmp_tmr+0x28>
        group->timer--;
   18058:	fff78793          	addi	a5,a5,-1
   1805c:	01079793          	slli	a5,a5,0x10
   18060:	0107d793          	srli	a5,a5,0x10
   18064:	00f41523          	sh	a5,10(s0)
        if (group->timer == 0) {
   18068:	fe0790e3          	bnez	a5,18048 <igmp_tmr+0x28>
   1806c:	fd1ff06f          	j	1803c <igmp_tmr+0x1c>
  NETIF_FOREACH(netif) {
   18070:	0004a483          	lw	s1,0(s1)
   18074:	00048663          	beqz	s1,18080 <igmp_tmr+0x60>
    struct igmp_group *group = netif_igmp_data(netif);
   18078:	0284a403          	lw	s0,40(s1)
    while (group != NULL) {
   1807c:	fd1ff06f          	j	1804c <igmp_tmr+0x2c>
}
   18080:	00c12083          	lw	ra,12(sp)
   18084:	00812403          	lw	s0,8(sp)
   18088:	00412483          	lw	s1,4(sp)
   1808c:	01010113          	addi	sp,sp,16
   18090:	00008067          	ret

00018094 <uart_writeAvailability>:
        return *((volatile u32*) address);
   18094:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   18098:	01055513          	srli	a0,a0,0x10
    }
   1809c:	0ff57513          	andi	a0,a0,255
   180a0:	00008067          	ret

000180a4 <uart_write>:
    static void uart_write(u32 reg, char data){
   180a4:	ff010113          	addi	sp,sp,-16
   180a8:	00112623          	sw	ra,12(sp)
   180ac:	00812423          	sw	s0,8(sp)
   180b0:	00912223          	sw	s1,4(sp)
   180b4:	00050413          	mv	s0,a0
   180b8:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   180bc:	00040513          	mv	a0,s0
   180c0:	fd5ff0ef          	jal	ra,18094 <uart_writeAvailability>
   180c4:	fe050ce3          	beqz	a0,180bc <uart_write+0x18>
        *((volatile u32*) address) = data;
   180c8:	00942023          	sw	s1,0(s0)
    }
   180cc:	00c12083          	lw	ra,12(sp)
   180d0:	00812403          	lw	s0,8(sp)
   180d4:	00412483          	lw	s1,4(sp)
   180d8:	01010113          	addi	sp,sp,16
   180dc:	00008067          	ret

000180e0 <bsp_printHex>:
    {
   180e0:	ff010113          	addi	sp,sp,-16
   180e4:	00112623          	sw	ra,12(sp)
   180e8:	00812423          	sw	s0,8(sp)
   180ec:	00912223          	sw	s1,4(sp)
   180f0:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   180f4:	01c00413          	li	s0,28
   180f8:	0280006f          	j	18120 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   180fc:	0084d7b3          	srl	a5,s1,s0
   18100:	00f7f713          	andi	a4,a5,15
   18104:	0001c7b7          	lui	a5,0x1c
   18108:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   1810c:	00e787b3          	add	a5,a5,a4
   18110:	0007c583          	lbu	a1,0(a5)
   18114:	f8010537          	lui	a0,0xf8010
   18118:	f8dff0ef          	jal	ra,180a4 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   1811c:	ffc40413          	addi	s0,s0,-4
   18120:	fc045ee3          	bgez	s0,180fc <bsp_printHex+0x1c>
    }
   18124:	00c12083          	lw	ra,12(sp)
   18128:	00812403          	lw	s0,8(sp)
   1812c:	00412483          	lw	s1,4(sp)
   18130:	01010113          	addi	sp,sp,16
   18134:	00008067          	ret

00018138 <bsp_printHex_lower>:
        {
   18138:	ff010113          	addi	sp,sp,-16
   1813c:	00112623          	sw	ra,12(sp)
   18140:	00812423          	sw	s0,8(sp)
   18144:	00912223          	sw	s1,4(sp)
   18148:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   1814c:	01c00413          	li	s0,28
   18150:	0280006f          	j	18178 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   18154:	0084d7b3          	srl	a5,s1,s0
   18158:	00f7f713          	andi	a4,a5,15
   1815c:	0001c7b7          	lui	a5,0x1c
   18160:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   18164:	00e787b3          	add	a5,a5,a4
   18168:	0007c583          	lbu	a1,0(a5)
   1816c:	f8010537          	lui	a0,0xf8010
   18170:	f35ff0ef          	jal	ra,180a4 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   18174:	ffc40413          	addi	s0,s0,-4
   18178:	fc045ee3          	bgez	s0,18154 <bsp_printHex_lower+0x1c>
        }
   1817c:	00c12083          	lw	ra,12(sp)
   18180:	00812403          	lw	s0,8(sp)
   18184:	00412483          	lw	s1,4(sp)
   18188:	01010113          	addi	sp,sp,16
   1818c:	00008067          	ret

00018190 <bsp_printf_c>:
    {
   18190:	ff010113          	addi	sp,sp,-16
   18194:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   18198:	0ff57593          	andi	a1,a0,255
   1819c:	f8010537          	lui	a0,0xf8010
   181a0:	f05ff0ef          	jal	ra,180a4 <uart_write>
    }
   181a4:	00c12083          	lw	ra,12(sp)
   181a8:	01010113          	addi	sp,sp,16
   181ac:	00008067          	ret

000181b0 <bsp_printf_s>:
    {
   181b0:	ff010113          	addi	sp,sp,-16
   181b4:	00112623          	sw	ra,12(sp)
   181b8:	00812423          	sw	s0,8(sp)
   181bc:	00050413          	mv	s0,a0
        while (*p)
   181c0:	00044583          	lbu	a1,0(s0)
   181c4:	00058a63          	beqz	a1,181d8 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   181c8:	00140413          	addi	s0,s0,1
   181cc:	f8010537          	lui	a0,0xf8010
   181d0:	ed5ff0ef          	jal	ra,180a4 <uart_write>
   181d4:	fedff06f          	j	181c0 <bsp_printf_s+0x10>
    }
   181d8:	00c12083          	lw	ra,12(sp)
   181dc:	00812403          	lw	s0,8(sp)
   181e0:	01010113          	addi	sp,sp,16
   181e4:	00008067          	ret

000181e8 <bsp_printf_d>:
    {
   181e8:	fd010113          	addi	sp,sp,-48
   181ec:	02112623          	sw	ra,44(sp)
   181f0:	02812423          	sw	s0,40(sp)
   181f4:	02912223          	sw	s1,36(sp)
   181f8:	00050493          	mv	s1,a0
        if (val < 0) {
   181fc:	00054663          	bltz	a0,18208 <bsp_printf_d+0x20>
    {
   18200:	00010413          	mv	s0,sp
   18204:	02c0006f          	j	18230 <bsp_printf_d+0x48>
            bsp_printf_c('-');
   18208:	02d00513          	li	a0,45
   1820c:	f85ff0ef          	jal	ra,18190 <bsp_printf_c>
            val = -val;
   18210:	409004b3          	neg	s1,s1
   18214:	fedff06f          	j	18200 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   18218:	00a00713          	li	a4,10
   1821c:	02e4e7b3          	rem	a5,s1,a4
   18220:	03078793          	addi	a5,a5,48
   18224:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   18228:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   1822c:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   18230:	fe0494e3          	bnez	s1,18218 <bsp_printf_d+0x30>
   18234:	00010793          	mv	a5,sp
   18238:	fef400e3          	beq	s0,a5,18218 <bsp_printf_d+0x30>
   1823c:	0100006f          	j	1824c <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   18240:	fff40413          	addi	s0,s0,-1
   18244:	00044503          	lbu	a0,0(s0)
   18248:	f49ff0ef          	jal	ra,18190 <bsp_printf_c>
        while (p != buffer)
   1824c:	00010793          	mv	a5,sp
   18250:	fef418e3          	bne	s0,a5,18240 <bsp_printf_d+0x58>
    }
   18254:	02c12083          	lw	ra,44(sp)
   18258:	02812403          	lw	s0,40(sp)
   1825c:	02412483          	lw	s1,36(sp)
   18260:	03010113          	addi	sp,sp,48
   18264:	00008067          	ret

00018268 <bsp_printf_x>:
    {
   18268:	ff010113          	addi	sp,sp,-16
   1826c:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   18270:	00000713          	li	a4,0
   18274:	00700793          	li	a5,7
   18278:	02e7c063          	blt	a5,a4,18298 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   1827c:	00271693          	slli	a3,a4,0x2
   18280:	ff000793          	li	a5,-16
   18284:	00d797b3          	sll	a5,a5,a3
   18288:	00f577b3          	and	a5,a0,a5
   1828c:	00078663          	beqz	a5,18298 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   18290:	00170713          	addi	a4,a4,1
   18294:	fe1ff06f          	j	18274 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   18298:	ea1ff0ef          	jal	ra,18138 <bsp_printHex_lower>
    }
   1829c:	00c12083          	lw	ra,12(sp)
   182a0:	01010113          	addi	sp,sp,16
   182a4:	00008067          	ret

000182a8 <bsp_printf_X>:
        {
   182a8:	ff010113          	addi	sp,sp,-16
   182ac:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   182b0:	00000713          	li	a4,0
   182b4:	00700793          	li	a5,7
   182b8:	02e7c063          	blt	a5,a4,182d8 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   182bc:	00271693          	slli	a3,a4,0x2
   182c0:	ff000793          	li	a5,-16
   182c4:	00d797b3          	sll	a5,a5,a3
   182c8:	00f577b3          	and	a5,a0,a5
   182cc:	00078663          	beqz	a5,182d8 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   182d0:	00170713          	addi	a4,a4,1
   182d4:	fe1ff06f          	j	182b4 <bsp_printf_X+0xc>
            bsp_printHex(val);
   182d8:	e09ff0ef          	jal	ra,180e0 <bsp_printHex>
        }
   182dc:	00c12083          	lw	ra,12(sp)
   182e0:	01010113          	addi	sp,sp,16
   182e4:	00008067          	ret

000182e8 <bsp_printf>:
    {
   182e8:	fc010113          	addi	sp,sp,-64
   182ec:	00112e23          	sw	ra,28(sp)
   182f0:	00812c23          	sw	s0,24(sp)
   182f4:	00912a23          	sw	s1,20(sp)
   182f8:	00050493          	mv	s1,a0
   182fc:	02b12223          	sw	a1,36(sp)
   18300:	02c12423          	sw	a2,40(sp)
   18304:	02d12623          	sw	a3,44(sp)
   18308:	02e12823          	sw	a4,48(sp)
   1830c:	02f12a23          	sw	a5,52(sp)
   18310:	03012c23          	sw	a6,56(sp)
   18314:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   18318:	02410793          	addi	a5,sp,36
   1831c:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   18320:	00000413          	li	s0,0
   18324:	01c0006f          	j	18340 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   18328:	00c12783          	lw	a5,12(sp)
   1832c:	00478713          	addi	a4,a5,4
   18330:	00e12623          	sw	a4,12(sp)
   18334:	0007a503          	lw	a0,0(a5)
   18338:	e59ff0ef          	jal	ra,18190 <bsp_printf_c>
        for (i = 0; format[i]; i++)
   1833c:	00140413          	addi	s0,s0,1
   18340:	008487b3          	add	a5,s1,s0
   18344:	0007c503          	lbu	a0,0(a5)
   18348:	0c050263          	beqz	a0,1840c <bsp_printf+0x124>
            if (format[i] == '%') {
   1834c:	02500793          	li	a5,37
   18350:	06f50663          	beq	a0,a5,183bc <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   18354:	e3dff0ef          	jal	ra,18190 <bsp_printf_c>
   18358:	fe5ff06f          	j	1833c <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   1835c:	00c12783          	lw	a5,12(sp)
   18360:	00478713          	addi	a4,a5,4
   18364:	00e12623          	sw	a4,12(sp)
   18368:	0007a503          	lw	a0,0(a5)
   1836c:	e45ff0ef          	jal	ra,181b0 <bsp_printf_s>
                        break;
   18370:	fcdff06f          	j	1833c <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   18374:	00c12783          	lw	a5,12(sp)
   18378:	00478713          	addi	a4,a5,4
   1837c:	00e12623          	sw	a4,12(sp)
   18380:	0007a503          	lw	a0,0(a5)
   18384:	e65ff0ef          	jal	ra,181e8 <bsp_printf_d>
                        break;
   18388:	fb5ff06f          	j	1833c <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   1838c:	00c12783          	lw	a5,12(sp)
   18390:	00478713          	addi	a4,a5,4
   18394:	00e12623          	sw	a4,12(sp)
   18398:	0007a503          	lw	a0,0(a5)
   1839c:	f0dff0ef          	jal	ra,182a8 <bsp_printf_X>
                        break;
   183a0:	f9dff06f          	j	1833c <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   183a4:	00c12783          	lw	a5,12(sp)
   183a8:	00478713          	addi	a4,a5,4
   183ac:	00e12623          	sw	a4,12(sp)
   183b0:	0007a503          	lw	a0,0(a5)
   183b4:	eb5ff0ef          	jal	ra,18268 <bsp_printf_x>
                        break;
   183b8:	f85ff06f          	j	1833c <bsp_printf+0x54>
                while (format[++i]) {
   183bc:	00140413          	addi	s0,s0,1
   183c0:	008487b3          	add	a5,s1,s0
   183c4:	0007c783          	lbu	a5,0(a5)
   183c8:	f6078ae3          	beqz	a5,1833c <bsp_printf+0x54>
                    if (format[i] == 'c') {
   183cc:	06300713          	li	a4,99
   183d0:	f4e78ce3          	beq	a5,a4,18328 <bsp_printf+0x40>
                    else if (format[i] == 's') {
   183d4:	07300713          	li	a4,115
   183d8:	f8e782e3          	beq	a5,a4,1835c <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   183dc:	06400713          	li	a4,100
   183e0:	f8e78ae3          	beq	a5,a4,18374 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   183e4:	05800713          	li	a4,88
   183e8:	fae782e3          	beq	a5,a4,1838c <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   183ec:	07800713          	li	a4,120
   183f0:	fae78ae3          	beq	a5,a4,183a4 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   183f4:	06600713          	li	a4,102
   183f8:	fce792e3          	bne	a5,a4,183bc <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   183fc:	0001c537          	lui	a0,0x1c
   18400:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   18404:	dadff0ef          	jal	ra,181b0 <bsp_printf_s>
                        break;
   18408:	f35ff06f          	j	1833c <bsp_printf+0x54>
    }
   1840c:	01c12083          	lw	ra,28(sp)
   18410:	01812403          	lw	s0,24(sp)
   18414:	01412483          	lw	s1,20(sp)
   18418:	04010113          	addi	sp,sp,64
   1841c:	00008067          	ret

00018420 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
   18420:	fff50713          	addi	a4,a0,-1
   18424:	ffd00793          	li	a5,-3
   18428:	02e7ee63          	bltu	a5,a4,18464 <ip4_addr_isbroadcast_u32+0x44>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
   1842c:	0355c783          	lbu	a5,53(a1)
   18430:	0027f793          	andi	a5,a5,2
   18434:	02078a63          	beqz	a5,18468 <ip4_addr_isbroadcast_u32+0x48>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
   18438:	0045a783          	lw	a5,4(a1)
   1843c:	02a78a63          	beq	a5,a0,18470 <ip4_addr_isbroadcast_u32+0x50>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
   18440:	0085a703          	lw	a4,8(a1)
   18444:	00a7c7b3          	xor	a5,a5,a0
   18448:	00e7f7b3          	and	a5,a5,a4
   1844c:	02079663          	bnez	a5,18478 <ip4_addr_isbroadcast_u32+0x58>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
   18450:	fff74713          	not	a4,a4
   18454:	00a77533          	and	a0,a4,a0
   18458:	00a71863          	bne	a4,a0,18468 <ip4_addr_isbroadcast_u32+0x48>
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
   1845c:	00100793          	li	a5,1
   18460:	0080006f          	j	18468 <ip4_addr_isbroadcast_u32+0x48>
    return 1;
   18464:	00100793          	li	a5,1
  } else {
    return 0;
  }
}
   18468:	00078513          	mv	a0,a5
   1846c:	00008067          	ret
    return 0;
   18470:	00000793          	li	a5,0
   18474:	ff5ff06f          	j	18468 <ip4_addr_isbroadcast_u32+0x48>
    return 0;
   18478:	00000793          	li	a5,0
   1847c:	fedff06f          	j	18468 <ip4_addr_isbroadcast_u32+0x48>

00018480 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
   18480:	ff010113          	addi	sp,sp,-16
   18484:	00112623          	sw	ra,12(sp)
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
   18488:	808f20ef          	jal	ra,a490 <lwip_htonl>

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
   1848c:	800007b7          	lui	a5,0x80000
   18490:	00078a63          	beqz	a5,184a4 <ip4_addr_netmask_valid+0x24>
    if ((nm_hostorder & mask) == 0) {
   18494:	00a7f733          	and	a4,a5,a0
   18498:	00070663          	beqz	a4,184a4 <ip4_addr_netmask_valid+0x24>
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
   1849c:	0017d793          	srli	a5,a5,0x1
   184a0:	ff1ff06f          	j	18490 <ip4_addr_netmask_valid+0x10>
      break;
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
   184a4:	00078a63          	beqz	a5,184b8 <ip4_addr_netmask_valid+0x38>
    if ((nm_hostorder & mask) != 0) {
   184a8:	00a7f733          	and	a4,a5,a0
   184ac:	00071e63          	bnez	a4,184c8 <ip4_addr_netmask_valid+0x48>
  for (; mask != 0; mask >>= 1) {
   184b0:	0017d793          	srli	a5,a5,0x1
   184b4:	ff1ff06f          	j	184a4 <ip4_addr_netmask_valid+0x24>
      /* there is a one after the first zero -> invalid */
      return 0;
    }
  }
  /* no one after the first zero -> valid */
  return 1;
   184b8:	00100513          	li	a0,1
}
   184bc:	00c12083          	lw	ra,12(sp)
   184c0:	01010113          	addi	sp,sp,16
   184c4:	00008067          	ret
      return 0;
   184c8:	00000513          	li	a0,0
   184cc:	ff1ff06f          	j	184bc <ip4_addr_netmask_valid+0x3c>

000184d0 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
   184d0:	fe010113          	addi	sp,sp,-32
   184d4:	00112e23          	sw	ra,28(sp)
   184d8:	00812c23          	sw	s0,24(sp)
   184dc:	00912a23          	sw	s1,20(sp)
   184e0:	00058413          	mv	s0,a1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
   184e4:	00054703          	lbu	a4,0(a0)
  u32_t *pp = parts;
   184e8:	00010893          	mv	a7,sp
   184ec:	09c0006f          	j	18588 <ip4addr_aton+0xb8>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
   184f0:	00150693          	addi	a3,a0,1
   184f4:	00154703          	lbu	a4,1(a0)
      if (c == 'x' || c == 'X') {
   184f8:	07800793          	li	a5,120
   184fc:	00f70c63          	beq	a4,a5,18514 <ip4addr_aton+0x44>
   18500:	05800793          	li	a5,88
   18504:	00f70863          	beq	a4,a5,18514 <ip4addr_aton+0x44>
      c = *++cp;
   18508:	00068513          	mv	a0,a3
        base = 16;
        c = *++cp;
      } else {
        base = 8;
   1850c:	00800593          	li	a1,8
   18510:	09c0006f          	j	185ac <ip4addr_aton+0xdc>
        c = *++cp;
   18514:	00254703          	lbu	a4,2(a0)
   18518:	00250513          	addi	a0,a0,2
        base = 16;
   1851c:	01000593          	li	a1,16
        c = *++cp;
   18520:	08c0006f          	j	185ac <ip4addr_aton+0xdc>
    }
    for (;;) {
      if (lwip_isdigit(c)) {
        if((base == 8) && ((u32_t)(c - '0') >= 8))
          break;
        val = (val * base) + (u32_t)(c - '0');
   18524:	02958733          	mul	a4,a1,s1
   18528:	00e686b3          	add	a3,a3,a4
   1852c:	fd068493          	addi	s1,a3,-48
        c = *++cp;
   18530:	00150513          	addi	a0,a0,1
   18534:	00054703          	lbu	a4,0(a0)
      if (lwip_isdigit(c)) {
   18538:	00070693          	mv	a3,a4
   1853c:	0001f7b7          	lui	a5,0x1f
   18540:	f6d78793          	addi	a5,a5,-147 # 1ef6d <_ctype_+0x1>
   18544:	00f707b3          	add	a5,a4,a5
   18548:	0007c783          	lbu	a5,0(a5)
   1854c:	0047f613          	andi	a2,a5,4
   18550:	06060263          	beqz	a2,185b4 <ip4addr_aton+0xe4>
        if((base == 8) && ((u32_t)(c - '0') >= 8))
   18554:	00800613          	li	a2,8
   18558:	fcc596e3          	bne	a1,a2,18524 <ip4addr_aton+0x54>
   1855c:	fd070613          	addi	a2,a4,-48
   18560:	00700813          	li	a6,7
   18564:	fcc870e3          	bgeu	a6,a2,18524 <ip4addr_aton+0x54>
        c = *++cp;
      } else {
        break;
      }
    }
    if (c == '.') {
   18568:	02e00693          	li	a3,46
   1856c:	08d71663          	bne	a4,a3,185f8 <ip4addr_aton+0x128>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
   18570:	00c10793          	addi	a5,sp,12
   18574:	18f8f263          	bgeu	a7,a5,186f8 <ip4addr_aton+0x228>
        return 0;
      }
      *pp++ = val;
   18578:	0098a023          	sw	s1,0(a7)
      c = *++cp;
   1857c:	00154703          	lbu	a4,1(a0)
      *pp++ = val;
   18580:	00488893          	addi	a7,a7,4
      c = *++cp;
   18584:	00150513          	addi	a0,a0,1
    if (!lwip_isdigit(c)) {
   18588:	0001f7b7          	lui	a5,0x1f
   1858c:	f6d78793          	addi	a5,a5,-147 # 1ef6d <_ctype_+0x1>
   18590:	00f707b3          	add	a5,a4,a5
   18594:	0007c783          	lbu	a5,0(a5)
   18598:	0047f793          	andi	a5,a5,4
   1859c:	14078a63          	beqz	a5,186f0 <ip4addr_aton+0x220>
    if (c == '0') {
   185a0:	03000793          	li	a5,48
   185a4:	f4f706e3          	beq	a4,a5,184f0 <ip4addr_aton+0x20>
    base = 10;
   185a8:	00a00593          	li	a1,10
        base = 8;
   185ac:	00000493          	li	s1,0
   185b0:	f89ff06f          	j	18538 <ip4addr_aton+0x68>
      } else if (base == 16 && lwip_isxdigit(c)) {
   185b4:	01000693          	li	a3,16
   185b8:	fad598e3          	bne	a1,a3,18568 <ip4addr_aton+0x98>
   185bc:	0447f693          	andi	a3,a5,68
   185c0:	fa0684e3          	beqz	a3,18568 <ip4addr_aton+0x98>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
   185c4:	00449693          	slli	a3,s1,0x4
   185c8:	00a70713          	addi	a4,a4,10
   185cc:	0037f793          	andi	a5,a5,3
   185d0:	00200613          	li	a2,2
   185d4:	00c78e63          	beq	a5,a2,185f0 <ip4addr_aton+0x120>
   185d8:	04100793          	li	a5,65
   185dc:	40f70733          	sub	a4,a4,a5
   185e0:	00e6e4b3          	or	s1,a3,a4
        c = *++cp;
   185e4:	00150513          	addi	a0,a0,1
   185e8:	00054703          	lbu	a4,0(a0)
   185ec:	f4dff06f          	j	18538 <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
   185f0:	06100793          	li	a5,97
   185f4:	fe9ff06f          	j	185dc <ip4addr_aton+0x10c>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
   185f8:	00070663          	beqz	a4,18604 <ip4addr_aton+0x134>
   185fc:	0087f793          	andi	a5,a5,8
   18600:	10078863          	beqz	a5,18710 <ip4addr_aton+0x240>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
   18604:	00010513          	mv	a0,sp
   18608:	40a88533          	sub	a0,a7,a0
   1860c:	40255513          	srai	a0,a0,0x2
   18610:	00150513          	addi	a0,a0,1
   18614:	00400793          	li	a5,4
   18618:	0aa7ea63          	bltu	a5,a0,186cc <ip4addr_aton+0x1fc>
   1861c:	00251793          	slli	a5,a0,0x2
   18620:	0001f737          	lui	a4,0x1f
   18624:	be470713          	addi	a4,a4,-1052 # 1ebe4 <memp_pools+0x420>
   18628:	00e787b3          	add	a5,a5,a4
   1862c:	0007a783          	lw	a5,0(a5)
   18630:	00078067          	jr	a5

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
   18634:	010007b7          	lui	a5,0x1000
   18638:	0ef4f063          	bgeu	s1,a5,18718 <ip4addr_aton+0x248>
        return 0;
      }
      if (parts[0] > 0xff) {
   1863c:	00012783          	lw	a5,0(sp)
   18640:	0ff00713          	li	a4,255
   18644:	0cf76e63          	bltu	a4,a5,18720 <ip4addr_aton+0x250>
        return 0;
      }
      val |= parts[0] << 24;
   18648:	01879793          	slli	a5,a5,0x18
   1864c:	00f4e4b3          	or	s1,s1,a5
      break;
   18650:	0880006f          	j	186d8 <ip4addr_aton+0x208>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
   18654:	000107b7          	lui	a5,0x10
   18658:	0cf4f863          	bgeu	s1,a5,18728 <ip4addr_aton+0x258>
        return 0;
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
   1865c:	00012783          	lw	a5,0(sp)
   18660:	0ff00713          	li	a4,255
   18664:	0cf76663          	bltu	a4,a5,18730 <ip4addr_aton+0x260>
   18668:	00412703          	lw	a4,4(sp)
   1866c:	0ff00693          	li	a3,255
   18670:	0ce6e463          	bltu	a3,a4,18738 <ip4addr_aton+0x268>
        return 0;
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
   18674:	01879793          	slli	a5,a5,0x18
   18678:	01071713          	slli	a4,a4,0x10
   1867c:	00e7e7b3          	or	a5,a5,a4
   18680:	00f4e4b3          	or	s1,s1,a5
      break;
   18684:	0540006f          	j	186d8 <ip4addr_aton+0x208>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
   18688:	0ff00793          	li	a5,255
   1868c:	0a97ea63          	bltu	a5,s1,18740 <ip4addr_aton+0x270>
        return 0;
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
   18690:	00012783          	lw	a5,0(sp)
   18694:	0ff00713          	li	a4,255
   18698:	0af76863          	bltu	a4,a5,18748 <ip4addr_aton+0x278>
   1869c:	00412683          	lw	a3,4(sp)
   186a0:	0ad76863          	bltu	a4,a3,18750 <ip4addr_aton+0x280>
   186a4:	00812703          	lw	a4,8(sp)
   186a8:	0ff00613          	li	a2,255
   186ac:	0ae66663          	bltu	a2,a4,18758 <ip4addr_aton+0x288>
        return 0;
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
   186b0:	01879793          	slli	a5,a5,0x18
   186b4:	01069693          	slli	a3,a3,0x10
   186b8:	00d7e7b3          	or	a5,a5,a3
   186bc:	00871713          	slli	a4,a4,0x8
   186c0:	00e7e7b3          	or	a5,a5,a4
   186c4:	00f4e4b3          	or	s1,s1,a5
      break;
   186c8:	0100006f          	j	186d8 <ip4addr_aton+0x208>
    default:
      LWIP_ASSERT("unhandled", 0);
   186cc:	0001f537          	lui	a0,0x1f
   186d0:	bf850513          	addi	a0,a0,-1032 # 1ebf8 <memp_pools+0x434>
   186d4:	c15ff0ef          	jal	ra,182e8 <bsp_printf>
      break;
  }
  if (addr) {
   186d8:	08040463          	beqz	s0,18760 <ip4addr_aton+0x290>
    ip4_addr_set_u32(addr, lwip_htonl(val));
   186dc:	00048513          	mv	a0,s1
   186e0:	db1f10ef          	jal	ra,a490 <lwip_htonl>
   186e4:	00a42023          	sw	a0,0(s0)
  }
  return 1;
   186e8:	00100513          	li	a0,1
   186ec:	0100006f          	j	186fc <ip4addr_aton+0x22c>
      return 0;
   186f0:	00000513          	li	a0,0
   186f4:	0080006f          	j	186fc <ip4addr_aton+0x22c>
        return 0;
   186f8:	00000513          	li	a0,0
}
   186fc:	01c12083          	lw	ra,28(sp)
   18700:	01812403          	lw	s0,24(sp)
   18704:	01412483          	lw	s1,20(sp)
   18708:	02010113          	addi	sp,sp,32
   1870c:	00008067          	ret
    return 0;
   18710:	00000513          	li	a0,0
   18714:	fe9ff06f          	j	186fc <ip4addr_aton+0x22c>
        return 0;
   18718:	00000513          	li	a0,0
   1871c:	fe1ff06f          	j	186fc <ip4addr_aton+0x22c>
        return 0;
   18720:	00000513          	li	a0,0
   18724:	fd9ff06f          	j	186fc <ip4addr_aton+0x22c>
        return 0;
   18728:	00000513          	li	a0,0
   1872c:	fd1ff06f          	j	186fc <ip4addr_aton+0x22c>
        return 0;
   18730:	00000513          	li	a0,0
   18734:	fc9ff06f          	j	186fc <ip4addr_aton+0x22c>
   18738:	00000513          	li	a0,0
   1873c:	fc1ff06f          	j	186fc <ip4addr_aton+0x22c>
        return 0;
   18740:	00000513          	li	a0,0
   18744:	fb9ff06f          	j	186fc <ip4addr_aton+0x22c>
        return 0;
   18748:	00000513          	li	a0,0
   1874c:	fb1ff06f          	j	186fc <ip4addr_aton+0x22c>
   18750:	00000513          	li	a0,0
   18754:	fa9ff06f          	j	186fc <ip4addr_aton+0x22c>
   18758:	00000513          	li	a0,0
   1875c:	fa1ff06f          	j	186fc <ip4addr_aton+0x22c>
  return 1;
   18760:	00100513          	li	a0,1
   18764:	f99ff06f          	j	186fc <ip4addr_aton+0x22c>

00018768 <ipaddr_addr>:
{
   18768:	fe010113          	addi	sp,sp,-32
   1876c:	00112e23          	sw	ra,28(sp)
  if (ip4addr_aton(cp, &val)) {
   18770:	00c10593          	addi	a1,sp,12
   18774:	d5dff0ef          	jal	ra,184d0 <ip4addr_aton>
   18778:	00051a63          	bnez	a0,1878c <ipaddr_addr+0x24>
  return (IPADDR_NONE);
   1877c:	fff00513          	li	a0,-1
}
   18780:	01c12083          	lw	ra,28(sp)
   18784:	02010113          	addi	sp,sp,32
   18788:	00008067          	ret
    return ip4_addr_get_u32(&val);
   1878c:	00c12503          	lw	a0,12(sp)
   18790:	ff1ff06f          	j	18780 <ipaddr_addr+0x18>

00018794 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
   18794:	ff010113          	addi	sp,sp,-16
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
   18798:	00052783          	lw	a5,0(a0)
   1879c:	00f12623          	sw	a5,12(sp)

  rp = buf;
   187a0:	00058313          	mv	t1,a1
  int len = 0;
   187a4:	00000893          	li	a7,0
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
   187a8:	00000e93          	li	t4,0
  ap = (u8_t *)&s_addr;
   187ac:	00c10e13          	addi	t3,sp,12
  for (n = 0; n < 4; n++) {
   187b0:	00300793          	li	a5,3
   187b4:	09d7ec63          	bltu	a5,t4,1884c <ip4addr_ntoa_r+0xb8>
    i = 0;
   187b8:	00000693          	li	a3,0
    do {
      rem = *ap % (u8_t)10;
   187bc:	000e4703          	lbu	a4,0(t3)
   187c0:	00a00793          	li	a5,10
   187c4:	02f77833          	remu	a6,a4,a5
      *ap /= (u8_t)10;
   187c8:	02f75733          	divu	a4,a4,a5
   187cc:	00ee0023          	sb	a4,0(t3)
      inv[i++] = (char)('0' + rem);
   187d0:	00168793          	addi	a5,a3,1
   187d4:	0ff7f793          	andi	a5,a5,255
   187d8:	03080813          	addi	a6,a6,48
   187dc:	01010513          	addi	a0,sp,16
   187e0:	00d506b3          	add	a3,a0,a3
   187e4:	ff068c23          	sb	a6,-8(a3)
   187e8:	00078693          	mv	a3,a5
    } while (*ap);
   187ec:	fc0718e3          	bnez	a4,187bc <ip4addr_ntoa_r+0x28>
    while (i--) {
   187f0:	fff78713          	addi	a4,a5,-1 # ffff <tcp_input+0x183>
   187f4:	0ff77713          	andi	a4,a4,255
   187f8:	02078663          	beqz	a5,18824 <ip4addr_ntoa_r+0x90>
      if (len++ >= buflen) {
   187fc:	00188793          	addi	a5,a7,1
   18800:	04c8dc63          	bge	a7,a2,18858 <ip4addr_ntoa_r+0xc4>
        return NULL;
      }
      *rp++ = inv[i];
   18804:	01010693          	addi	a3,sp,16
   18808:	00e686b3          	add	a3,a3,a4
   1880c:	ff86c683          	lbu	a3,-8(a3)
   18810:	00d30023          	sb	a3,0(t1) # 80000 <__freertos_irq_stack_top+0x5b0d0>
      if (len++ >= buflen) {
   18814:	00078893          	mv	a7,a5
    while (i--) {
   18818:	00070793          	mv	a5,a4
      *rp++ = inv[i];
   1881c:	00130313          	addi	t1,t1,1
   18820:	fd1ff06f          	j	187f0 <ip4addr_ntoa_r+0x5c>
    }
    if (len++ >= buflen) {
   18824:	00188793          	addi	a5,a7,1
   18828:	02c8de63          	bge	a7,a2,18864 <ip4addr_ntoa_r+0xd0>
      return NULL;
    }
    *rp++ = '.';
   1882c:	02e00713          	li	a4,46
   18830:	00e30023          	sb	a4,0(t1)
    ap++;
   18834:	001e0e13          	addi	t3,t3,1
  for (n = 0; n < 4; n++) {
   18838:	001e8e93          	addi	t4,t4,1
   1883c:	0ffefe93          	andi	t4,t4,255
    if (len++ >= buflen) {
   18840:	00078893          	mv	a7,a5
    *rp++ = '.';
   18844:	00130313          	addi	t1,t1,1
   18848:	f69ff06f          	j	187b0 <ip4addr_ntoa_r+0x1c>
  }
  *--rp = 0;
   1884c:	fe030fa3          	sb	zero,-1(t1)
  return buf;
   18850:	00058513          	mv	a0,a1
   18854:	0080006f          	j	1885c <ip4addr_ntoa_r+0xc8>
        return NULL;
   18858:	00000513          	li	a0,0
}
   1885c:	01010113          	addi	sp,sp,16
   18860:	00008067          	ret
      return NULL;
   18864:	00000513          	li	a0,0
   18868:	ff5ff06f          	j	1885c <ip4addr_ntoa_r+0xc8>

0001886c <ip4addr_ntoa>:
{
   1886c:	ff010113          	addi	sp,sp,-16
   18870:	00112623          	sw	ra,12(sp)
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
   18874:	01000613          	li	a2,16
   18878:	ab818593          	addi	a1,gp,-1352 # 1fc88 <str.4682>
   1887c:	f19ff0ef          	jal	ra,18794 <ip4addr_ntoa_r>
}
   18880:	00c12083          	lw	ra,12(sp)
   18884:	01010113          	addi	sp,sp,16
   18888:	00008067          	ret

0001888c <uart_writeAvailability>:
        return *((volatile u32*) address);
   1888c:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   18890:	01055513          	srli	a0,a0,0x10
    }
   18894:	0ff57513          	andi	a0,a0,255
   18898:	00008067          	ret

0001889c <uart_write>:
    static void uart_write(u32 reg, char data){
   1889c:	ff010113          	addi	sp,sp,-16
   188a0:	00112623          	sw	ra,12(sp)
   188a4:	00812423          	sw	s0,8(sp)
   188a8:	00912223          	sw	s1,4(sp)
   188ac:	00050413          	mv	s0,a0
   188b0:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   188b4:	00040513          	mv	a0,s0
   188b8:	fd5ff0ef          	jal	ra,1888c <uart_writeAvailability>
   188bc:	fe050ce3          	beqz	a0,188b4 <uart_write+0x18>
        *((volatile u32*) address) = data;
   188c0:	00942023          	sw	s1,0(s0)
    }
   188c4:	00c12083          	lw	ra,12(sp)
   188c8:	00812403          	lw	s0,8(sp)
   188cc:	00412483          	lw	s1,4(sp)
   188d0:	01010113          	addi	sp,sp,16
   188d4:	00008067          	ret

000188d8 <bsp_printHex>:
    {
   188d8:	ff010113          	addi	sp,sp,-16
   188dc:	00112623          	sw	ra,12(sp)
   188e0:	00812423          	sw	s0,8(sp)
   188e4:	00912223          	sw	s1,4(sp)
   188e8:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   188ec:	01c00413          	li	s0,28
   188f0:	0280006f          	j	18918 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   188f4:	0084d7b3          	srl	a5,s1,s0
   188f8:	00f7f713          	andi	a4,a5,15
   188fc:	0001c7b7          	lui	a5,0x1c
   18900:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   18904:	00e787b3          	add	a5,a5,a4
   18908:	0007c583          	lbu	a1,0(a5)
   1890c:	f8010537          	lui	a0,0xf8010
   18910:	f8dff0ef          	jal	ra,1889c <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   18914:	ffc40413          	addi	s0,s0,-4
   18918:	fc045ee3          	bgez	s0,188f4 <bsp_printHex+0x1c>
    }
   1891c:	00c12083          	lw	ra,12(sp)
   18920:	00812403          	lw	s0,8(sp)
   18924:	00412483          	lw	s1,4(sp)
   18928:	01010113          	addi	sp,sp,16
   1892c:	00008067          	ret

00018930 <bsp_printHex_lower>:
        {
   18930:	ff010113          	addi	sp,sp,-16
   18934:	00112623          	sw	ra,12(sp)
   18938:	00812423          	sw	s0,8(sp)
   1893c:	00912223          	sw	s1,4(sp)
   18940:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   18944:	01c00413          	li	s0,28
   18948:	0280006f          	j	18970 <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   1894c:	0084d7b3          	srl	a5,s1,s0
   18950:	00f7f713          	andi	a4,a5,15
   18954:	0001c7b7          	lui	a5,0x1c
   18958:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   1895c:	00e787b3          	add	a5,a5,a4
   18960:	0007c583          	lbu	a1,0(a5)
   18964:	f8010537          	lui	a0,0xf8010
   18968:	f35ff0ef          	jal	ra,1889c <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   1896c:	ffc40413          	addi	s0,s0,-4
   18970:	fc045ee3          	bgez	s0,1894c <bsp_printHex_lower+0x1c>
        }
   18974:	00c12083          	lw	ra,12(sp)
   18978:	00812403          	lw	s0,8(sp)
   1897c:	00412483          	lw	s1,4(sp)
   18980:	01010113          	addi	sp,sp,16
   18984:	00008067          	ret

00018988 <bsp_printf_c>:
    {
   18988:	ff010113          	addi	sp,sp,-16
   1898c:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   18990:	0ff57593          	andi	a1,a0,255
   18994:	f8010537          	lui	a0,0xf8010
   18998:	f05ff0ef          	jal	ra,1889c <uart_write>
    }
   1899c:	00c12083          	lw	ra,12(sp)
   189a0:	01010113          	addi	sp,sp,16
   189a4:	00008067          	ret

000189a8 <bsp_printf_s>:
    {
   189a8:	ff010113          	addi	sp,sp,-16
   189ac:	00112623          	sw	ra,12(sp)
   189b0:	00812423          	sw	s0,8(sp)
   189b4:	00050413          	mv	s0,a0
        while (*p)
   189b8:	00044583          	lbu	a1,0(s0)
   189bc:	00058a63          	beqz	a1,189d0 <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   189c0:	00140413          	addi	s0,s0,1
   189c4:	f8010537          	lui	a0,0xf8010
   189c8:	ed5ff0ef          	jal	ra,1889c <uart_write>
   189cc:	fedff06f          	j	189b8 <bsp_printf_s+0x10>
    }
   189d0:	00c12083          	lw	ra,12(sp)
   189d4:	00812403          	lw	s0,8(sp)
   189d8:	01010113          	addi	sp,sp,16
   189dc:	00008067          	ret

000189e0 <bsp_printf_d>:
    {
   189e0:	fd010113          	addi	sp,sp,-48
   189e4:	02112623          	sw	ra,44(sp)
   189e8:	02812423          	sw	s0,40(sp)
   189ec:	02912223          	sw	s1,36(sp)
   189f0:	00050493          	mv	s1,a0
        if (val < 0) {
   189f4:	00054663          	bltz	a0,18a00 <bsp_printf_d+0x20>
    {
   189f8:	00010413          	mv	s0,sp
   189fc:	02c0006f          	j	18a28 <bsp_printf_d+0x48>
            bsp_printf_c('-');
   18a00:	02d00513          	li	a0,45
   18a04:	f85ff0ef          	jal	ra,18988 <bsp_printf_c>
            val = -val;
   18a08:	409004b3          	neg	s1,s1
   18a0c:	fedff06f          	j	189f8 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   18a10:	00a00713          	li	a4,10
   18a14:	02e4e7b3          	rem	a5,s1,a4
   18a18:	03078793          	addi	a5,a5,48
   18a1c:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   18a20:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   18a24:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   18a28:	fe0494e3          	bnez	s1,18a10 <bsp_printf_d+0x30>
   18a2c:	00010793          	mv	a5,sp
   18a30:	fef400e3          	beq	s0,a5,18a10 <bsp_printf_d+0x30>
   18a34:	0100006f          	j	18a44 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   18a38:	fff40413          	addi	s0,s0,-1
   18a3c:	00044503          	lbu	a0,0(s0)
   18a40:	f49ff0ef          	jal	ra,18988 <bsp_printf_c>
        while (p != buffer)
   18a44:	00010793          	mv	a5,sp
   18a48:	fef418e3          	bne	s0,a5,18a38 <bsp_printf_d+0x58>
    }
   18a4c:	02c12083          	lw	ra,44(sp)
   18a50:	02812403          	lw	s0,40(sp)
   18a54:	02412483          	lw	s1,36(sp)
   18a58:	03010113          	addi	sp,sp,48
   18a5c:	00008067          	ret

00018a60 <bsp_printf_x>:
    {
   18a60:	ff010113          	addi	sp,sp,-16
   18a64:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   18a68:	00000713          	li	a4,0
   18a6c:	00700793          	li	a5,7
   18a70:	02e7c063          	blt	a5,a4,18a90 <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   18a74:	00271693          	slli	a3,a4,0x2
   18a78:	ff000793          	li	a5,-16
   18a7c:	00d797b3          	sll	a5,a5,a3
   18a80:	00f577b3          	and	a5,a0,a5
   18a84:	00078663          	beqz	a5,18a90 <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   18a88:	00170713          	addi	a4,a4,1
   18a8c:	fe1ff06f          	j	18a6c <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   18a90:	ea1ff0ef          	jal	ra,18930 <bsp_printHex_lower>
    }
   18a94:	00c12083          	lw	ra,12(sp)
   18a98:	01010113          	addi	sp,sp,16
   18a9c:	00008067          	ret

00018aa0 <bsp_printf_X>:
        {
   18aa0:	ff010113          	addi	sp,sp,-16
   18aa4:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   18aa8:	00000713          	li	a4,0
   18aac:	00700793          	li	a5,7
   18ab0:	02e7c063          	blt	a5,a4,18ad0 <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   18ab4:	00271693          	slli	a3,a4,0x2
   18ab8:	ff000793          	li	a5,-16
   18abc:	00d797b3          	sll	a5,a5,a3
   18ac0:	00f577b3          	and	a5,a0,a5
   18ac4:	00078663          	beqz	a5,18ad0 <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   18ac8:	00170713          	addi	a4,a4,1
   18acc:	fe1ff06f          	j	18aac <bsp_printf_X+0xc>
            bsp_printHex(val);
   18ad0:	e09ff0ef          	jal	ra,188d8 <bsp_printHex>
        }
   18ad4:	00c12083          	lw	ra,12(sp)
   18ad8:	01010113          	addi	sp,sp,16
   18adc:	00008067          	ret

00018ae0 <bsp_printf>:
    {
   18ae0:	fc010113          	addi	sp,sp,-64
   18ae4:	00112e23          	sw	ra,28(sp)
   18ae8:	00812c23          	sw	s0,24(sp)
   18aec:	00912a23          	sw	s1,20(sp)
   18af0:	00050493          	mv	s1,a0
   18af4:	02b12223          	sw	a1,36(sp)
   18af8:	02c12423          	sw	a2,40(sp)
   18afc:	02d12623          	sw	a3,44(sp)
   18b00:	02e12823          	sw	a4,48(sp)
   18b04:	02f12a23          	sw	a5,52(sp)
   18b08:	03012c23          	sw	a6,56(sp)
   18b0c:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   18b10:	02410793          	addi	a5,sp,36
   18b14:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   18b18:	00000413          	li	s0,0
   18b1c:	01c0006f          	j	18b38 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   18b20:	00c12783          	lw	a5,12(sp)
   18b24:	00478713          	addi	a4,a5,4
   18b28:	00e12623          	sw	a4,12(sp)
   18b2c:	0007a503          	lw	a0,0(a5)
   18b30:	e59ff0ef          	jal	ra,18988 <bsp_printf_c>
        for (i = 0; format[i]; i++)
   18b34:	00140413          	addi	s0,s0,1
   18b38:	008487b3          	add	a5,s1,s0
   18b3c:	0007c503          	lbu	a0,0(a5)
   18b40:	0c050263          	beqz	a0,18c04 <bsp_printf+0x124>
            if (format[i] == '%') {
   18b44:	02500793          	li	a5,37
   18b48:	06f50663          	beq	a0,a5,18bb4 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   18b4c:	e3dff0ef          	jal	ra,18988 <bsp_printf_c>
   18b50:	fe5ff06f          	j	18b34 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   18b54:	00c12783          	lw	a5,12(sp)
   18b58:	00478713          	addi	a4,a5,4
   18b5c:	00e12623          	sw	a4,12(sp)
   18b60:	0007a503          	lw	a0,0(a5)
   18b64:	e45ff0ef          	jal	ra,189a8 <bsp_printf_s>
                        break;
   18b68:	fcdff06f          	j	18b34 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   18b6c:	00c12783          	lw	a5,12(sp)
   18b70:	00478713          	addi	a4,a5,4
   18b74:	00e12623          	sw	a4,12(sp)
   18b78:	0007a503          	lw	a0,0(a5)
   18b7c:	e65ff0ef          	jal	ra,189e0 <bsp_printf_d>
                        break;
   18b80:	fb5ff06f          	j	18b34 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   18b84:	00c12783          	lw	a5,12(sp)
   18b88:	00478713          	addi	a4,a5,4
   18b8c:	00e12623          	sw	a4,12(sp)
   18b90:	0007a503          	lw	a0,0(a5)
   18b94:	f0dff0ef          	jal	ra,18aa0 <bsp_printf_X>
                        break;
   18b98:	f9dff06f          	j	18b34 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   18b9c:	00c12783          	lw	a5,12(sp)
   18ba0:	00478713          	addi	a4,a5,4
   18ba4:	00e12623          	sw	a4,12(sp)
   18ba8:	0007a503          	lw	a0,0(a5)
   18bac:	eb5ff0ef          	jal	ra,18a60 <bsp_printf_x>
                        break;
   18bb0:	f85ff06f          	j	18b34 <bsp_printf+0x54>
                while (format[++i]) {
   18bb4:	00140413          	addi	s0,s0,1
   18bb8:	008487b3          	add	a5,s1,s0
   18bbc:	0007c783          	lbu	a5,0(a5)
   18bc0:	f6078ae3          	beqz	a5,18b34 <bsp_printf+0x54>
                    if (format[i] == 'c') {
   18bc4:	06300713          	li	a4,99
   18bc8:	f4e78ce3          	beq	a5,a4,18b20 <bsp_printf+0x40>
                    else if (format[i] == 's') {
   18bcc:	07300713          	li	a4,115
   18bd0:	f8e782e3          	beq	a5,a4,18b54 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   18bd4:	06400713          	li	a4,100
   18bd8:	f8e78ae3          	beq	a5,a4,18b6c <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   18bdc:	05800713          	li	a4,88
   18be0:	fae782e3          	beq	a5,a4,18b84 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   18be4:	07800713          	li	a4,120
   18be8:	fae78ae3          	beq	a5,a4,18b9c <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   18bec:	06600713          	li	a4,102
   18bf0:	fce792e3          	bne	a5,a4,18bb4 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   18bf4:	0001c537          	lui	a0,0x1c
   18bf8:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   18bfc:	dadff0ef          	jal	ra,189a8 <bsp_printf_s>
                        break;
   18c00:	f35ff06f          	j	18b34 <bsp_printf+0x54>
    }
   18c04:	01c12083          	lw	ra,28(sp)
   18c08:	01812403          	lw	s0,24(sp)
   18c0c:	01412483          	lw	s1,20(sp)
   18c10:	04010113          	addi	sp,sp,64
   18c14:	00008067          	ret

00018c18 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
   18c18:	ff010113          	addi	sp,sp,-16
   18c1c:	00112623          	sw	ra,12(sp)
   18c20:	00812423          	sw	s0,8(sp)
   18c24:	00912223          	sw	s1,4(sp)
   18c28:	00050413          	mv	s0,a0
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
   18c2c:	02051663          	bnez	a0,18c58 <free_etharp_q+0x40>
   18c30:	0001f537          	lui	a0,0x1f
   18c34:	c0450513          	addi	a0,a0,-1020 # 1ec04 <memp_pools+0x440>
   18c38:	ea9ff0ef          	jal	ra,18ae0 <bsp_printf>
   18c3c:	01c0006f          	j	18c58 <free_etharp_q+0x40>
  while (q) {
    r = q;
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
   18c40:	00442503          	lw	a0,4(s0)
   18c44:	f0df30ef          	jal	ra,cb50 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
   18c48:	00040593          	mv	a1,s0
   18c4c:	00700513          	li	a0,7
   18c50:	88dfb0ef          	jal	ra,144dc <memp_free>
    q = q->next;
   18c54:	00048413          	mv	s0,s1
  while (q) {
   18c58:	02040063          	beqz	s0,18c78 <free_etharp_q+0x60>
    q = q->next;
   18c5c:	00042483          	lw	s1,0(s0)
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
   18c60:	00442783          	lw	a5,4(s0)
   18c64:	fc079ee3          	bnez	a5,18c40 <free_etharp_q+0x28>
   18c68:	0001f537          	lui	a0,0x1f
   18c6c:	c1050513          	addi	a0,a0,-1008 # 1ec10 <memp_pools+0x44c>
   18c70:	e71ff0ef          	jal	ra,18ae0 <bsp_printf>
   18c74:	fcdff06f          	j	18c40 <free_etharp_q+0x28>
  }
}
   18c78:	00c12083          	lw	ra,12(sp)
   18c7c:	00812403          	lw	s0,8(sp)
   18c80:	00412483          	lw	s1,4(sp)
   18c84:	01010113          	addi	sp,sp,16
   18c88:	00008067          	ret

00018c8c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
   18c8c:	ff010113          	addi	sp,sp,-16
   18c90:	00112623          	sw	ra,12(sp)
   18c94:	00812423          	sw	s0,8(sp)
   18c98:	00050413          	mv	s0,a0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
   18c9c:	00151713          	slli	a4,a0,0x1
   18ca0:	00a70733          	add	a4,a4,a0
   18ca4:	00371693          	slli	a3,a4,0x3
   18ca8:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   18cac:	00d787b3          	add	a5,a5,a3
   18cb0:	0007a503          	lw	a0,0(a5)
   18cb4:	02050063          	beqz	a0,18cd4 <etharp_free_entry+0x48>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
   18cb8:	f61ff0ef          	jal	ra,18c18 <free_etharp_q>
    arp_table[i].q = NULL;
   18cbc:	00141713          	slli	a4,s0,0x1
   18cc0:	00870733          	add	a4,a4,s0
   18cc4:	00371693          	slli	a3,a4,0x3
   18cc8:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   18ccc:	00d787b3          	add	a5,a5,a3
   18cd0:	0007a023          	sw	zero,0(a5)
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
   18cd4:	00141793          	slli	a5,s0,0x1
   18cd8:	00878433          	add	s0,a5,s0
   18cdc:	00341713          	slli	a4,s0,0x3
   18ce0:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   18ce4:	00e787b3          	add	a5,a5,a4
   18ce8:	00078a23          	sb	zero,20(a5)
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
   18cec:	00c12083          	lw	ra,12(sp)
   18cf0:	00812403          	lw	s0,8(sp)
   18cf4:	01010113          	addi	sp,sp,16
   18cf8:	00008067          	ret

00018cfc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
   18cfc:	fe010113          	addi	sp,sp,-32
   18d00:	00112e23          	sw	ra,28(sp)
   18d04:	00812c23          	sw	s0,24(sp)
   18d08:	00912a23          	sw	s1,20(sp)
   18d0c:	01212823          	sw	s2,16(sp)
   18d10:	01312623          	sw	s3,12(sp)
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
   18d14:	00000313          	li	t1,0
   18d18:	00000f13          	li	t5,0
   18d1c:	00000e13          	li	t3,0
  s16_t old_queue = ARP_TABLE_SIZE;
   18d20:	00a00e93          	li	t4,10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   18d24:	00000793          	li	a5,0
  s16_t empty = ARP_TABLE_SIZE;
   18d28:	00a00413          	li	s0,10
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   18d2c:	00a00493          	li	s1,10
   18d30:	00a00f93          	li	t6,10
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   18d34:	0180006f          	j	18d4c <etharp_find_entry+0x50>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   18d38:	04071063          	bnez	a4,18d78 <etharp_find_entry+0x7c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
   18d3c:	00078413          	mv	s0,a5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   18d40:	00178793          	addi	a5,a5,1
   18d44:	01079793          	slli	a5,a5,0x10
   18d48:	4107d793          	srai	a5,a5,0x10
   18d4c:	00900713          	li	a4,9
   18d50:	10f74263          	blt	a4,a5,18e54 <etharp_find_entry+0x158>
    u8_t state = arp_table[i].state;
   18d54:	00078893          	mv	a7,a5
   18d58:	00179693          	slli	a3,a5,0x1
   18d5c:	00f686b3          	add	a3,a3,a5
   18d60:	00369813          	slli	a6,a3,0x3
   18d64:	ac818713          	addi	a4,gp,-1336 # 1fc98 <arp_table>
   18d68:	01070733          	add	a4,a4,a6
   18d6c:	01474703          	lbu	a4,20(a4)
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   18d70:	00a00693          	li	a3,10
   18d74:	fcd402e3          	beq	s0,a3,18d38 <etharp_find_entry+0x3c>
    } else if (state != ETHARP_STATE_EMPTY) {
   18d78:	fc0704e3          	beqz	a4,18d40 <etharp_find_entry+0x44>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
   18d7c:	02050263          	beqz	a0,18da0 <etharp_find_entry+0xa4>
   18d80:	00052383          	lw	t2,0(a0)
   18d84:	00189813          	slli	a6,a7,0x1
   18d88:	01180833          	add	a6,a6,a7
   18d8c:	00381293          	slli	t0,a6,0x3
   18d90:	ac818693          	addi	a3,gp,-1336 # 1fc98 <arp_table>
   18d94:	005686b3          	add	a3,a3,t0
   18d98:	0046a683          	lw	a3,4(a3)
   18d9c:	02d38e63          	beq	t2,a3,18dd8 <etharp_find_entry+0xdc>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
   18da0:	00100693          	li	a3,1
   18da4:	04d70863          	beq	a4,a3,18df4 <etharp_find_entry+0xf8>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
   18da8:	00100693          	li	a3,1
   18dac:	f8e6fae3          	bgeu	a3,a4,18d40 <etharp_find_entry+0x44>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
   18db0:	00189713          	slli	a4,a7,0x1
   18db4:	011708b3          	add	a7,a4,a7
   18db8:	00389693          	slli	a3,a7,0x3
   18dbc:	ac818713          	addi	a4,gp,-1336 # 1fc98 <arp_table>
   18dc0:	00d70733          	add	a4,a4,a3
   18dc4:	01275703          	lhu	a4,18(a4)
   18dc8:	f6676ce3          	bltu	a4,t1,18d40 <etharp_find_entry+0x44>
            old_stable = i;
            age_stable = arp_table[i].ctime;
   18dcc:	00070313          	mv	t1,a4
            old_stable = i;
   18dd0:	00078493          	mv	s1,a5
   18dd4:	f6dff06f          	j	18d40 <etharp_find_entry+0x44>
          && ((netif == NULL) || (netif == arp_table[i].netif))
   18dd8:	1c060663          	beqz	a2,18fa4 <etharp_find_entry+0x2a8>
   18ddc:	ac818693          	addi	a3,gp,-1336 # 1fc98 <arp_table>
   18de0:	005686b3          	add	a3,a3,t0
   18de4:	0086a683          	lw	a3,8(a3)
   18de8:	fac69ce3          	bne	a3,a2,18da0 <etharp_find_entry+0xa4>
        return i;
   18dec:	00078413          	mv	s0,a5
   18df0:	1300006f          	j	18f20 <etharp_find_entry+0x224>
        if (arp_table[i].q != NULL) {
   18df4:	00189693          	slli	a3,a7,0x1
   18df8:	011686b3          	add	a3,a3,a7
   18dfc:	00369813          	slli	a6,a3,0x3
   18e00:	ac818713          	addi	a4,gp,-1336 # 1fc98 <arp_table>
   18e04:	01070733          	add	a4,a4,a6
   18e08:	00072703          	lw	a4,0(a4)
   18e0c:	02070063          	beqz	a4,18e2c <etharp_find_entry+0x130>
          if (arp_table[i].ctime >= age_queue) {
   18e10:	ac818713          	addi	a4,gp,-1336 # 1fc98 <arp_table>
   18e14:	01070733          	add	a4,a4,a6
   18e18:	01275703          	lhu	a4,18(a4)
   18e1c:	f3c762e3          	bltu	a4,t3,18d40 <etharp_find_entry+0x44>
            age_queue = arp_table[i].ctime;
   18e20:	00070e13          	mv	t3,a4
            old_queue = i;
   18e24:	00078e93          	mv	t4,a5
   18e28:	f19ff06f          	j	18d40 <etharp_find_entry+0x44>
          if (arp_table[i].ctime >= age_pending) {
   18e2c:	00189713          	slli	a4,a7,0x1
   18e30:	011708b3          	add	a7,a4,a7
   18e34:	00389693          	slli	a3,a7,0x3
   18e38:	ac818713          	addi	a4,gp,-1336 # 1fc98 <arp_table>
   18e3c:	00d70733          	add	a4,a4,a3
   18e40:	01275703          	lhu	a4,18(a4)
   18e44:	efe76ee3          	bltu	a4,t5,18d40 <etharp_find_entry+0x44>
            age_pending = arp_table[i].ctime;
   18e48:	00070f13          	mv	t5,a4
            old_pending = i;
   18e4c:	00078f93          	mv	t6,a5
   18e50:	ef1ff06f          	j	18d40 <etharp_find_entry+0x44>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
   18e54:	0025f793          	andi	a5,a1,2
   18e58:	14079a63          	bnez	a5,18fac <etharp_find_entry+0x2b0>
   18e5c:	00a00793          	li	a5,10
   18e60:	0ef40063          	beq	s0,a5,18f40 <etharp_find_entry+0x244>
   18e64:	00060913          	mv	s2,a2
   18e68:	00050993          	mv	s3,a0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
   18e6c:	00900793          	li	a5,9
   18e70:	0487d263          	bge	a5,s0,18eb4 <etharp_find_entry+0x1b8>
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
   18e74:	0c97ce63          	blt	a5,s1,18f50 <etharp_find_entry+0x254>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
   18e78:	00149713          	slli	a4,s1,0x1
   18e7c:	00970733          	add	a4,a4,s1
   18e80:	00371693          	slli	a3,a4,0x3
   18e84:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   18e88:	00d787b3          	add	a5,a5,a3
   18e8c:	0007a783          	lw	a5,0(a5)
   18e90:	0c078a63          	beqz	a5,18f64 <etharp_find_entry+0x268>
   18e94:	0001f537          	lui	a0,0x1f
   18e98:	c2050513          	addi	a0,a0,-992 # 1ec20 <memp_pools+0x45c>
   18e9c:	c45ff0ef          	jal	ra,18ae0 <bsp_printf>
      i = old_stable;
   18ea0:	00048413          	mv	s0,s1
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
   18ea4:	00900793          	li	a5,9
   18ea8:	0c87c663          	blt	a5,s0,18f74 <etharp_find_entry+0x278>
    etharp_free_entry(i);
   18eac:	00040513          	mv	a0,s0
   18eb0:	dddff0ef          	jal	ra,18c8c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
   18eb4:	00900793          	li	a5,9
   18eb8:	0c87c663          	blt	a5,s0,18f84 <etharp_find_entry+0x288>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
   18ebc:	00040493          	mv	s1,s0
   18ec0:	00141713          	slli	a4,s0,0x1
   18ec4:	00870733          	add	a4,a4,s0
   18ec8:	00371693          	slli	a3,a4,0x3
   18ecc:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   18ed0:	00d787b3          	add	a5,a5,a3
   18ed4:	0147c783          	lbu	a5,20(a5)
   18ed8:	0a079e63          	bnez	a5,18f94 <etharp_find_entry+0x298>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
   18edc:	02098063          	beqz	s3,18efc <etharp_find_entry+0x200>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
   18ee0:	0009a603          	lw	a2,0(s3)
   18ee4:	00149713          	slli	a4,s1,0x1
   18ee8:	00970733          	add	a4,a4,s1
   18eec:	00371693          	slli	a3,a4,0x3
   18ef0:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   18ef4:	00d787b3          	add	a5,a5,a3
   18ef8:	00c7a223          	sw	a2,4(a5)
  }
  arp_table[i].ctime = 0;
   18efc:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   18f00:	00149713          	slli	a4,s1,0x1
   18f04:	00970633          	add	a2,a4,s1
   18f08:	00361693          	slli	a3,a2,0x3
   18f0c:	00068613          	mv	a2,a3
   18f10:	00d786b3          	add	a3,a5,a3
   18f14:	00069923          	sh	zero,18(a3)
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
   18f18:	00c787b3          	add	a5,a5,a2
   18f1c:	0127a423          	sw	s2,8(a5)
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
   18f20:	00040513          	mv	a0,s0
   18f24:	01c12083          	lw	ra,28(sp)
   18f28:	01812403          	lw	s0,24(sp)
   18f2c:	01412483          	lw	s1,20(sp)
   18f30:	01012903          	lw	s2,16(sp)
   18f34:	00c12983          	lw	s3,12(sp)
   18f38:	02010113          	addi	sp,sp,32
   18f3c:	00008067          	ret
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
   18f40:	0015f593          	andi	a1,a1,1
   18f44:	f20590e3          	bnez	a1,18e64 <etharp_find_entry+0x168>
    return (s16_t)ERR_MEM;
   18f48:	fff00413          	li	s0,-1
   18f4c:	fd5ff06f          	j	18f20 <etharp_find_entry+0x224>
    } else if (old_pending < ARP_TABLE_SIZE) {
   18f50:	00900793          	li	a5,9
   18f54:	01f7dc63          	bge	a5,t6,18f6c <etharp_find_entry+0x270>
    } else if (old_queue < ARP_TABLE_SIZE) {
   18f58:	05d7ce63          	blt	a5,t4,18fb4 <etharp_find_entry+0x2b8>
      i = old_queue;
   18f5c:	000e8413          	mv	s0,t4
   18f60:	f45ff06f          	j	18ea4 <etharp_find_entry+0x1a8>
      i = old_stable;
   18f64:	00048413          	mv	s0,s1
   18f68:	f3dff06f          	j	18ea4 <etharp_find_entry+0x1a8>
      i = old_pending;
   18f6c:	000f8413          	mv	s0,t6
   18f70:	f35ff06f          	j	18ea4 <etharp_find_entry+0x1a8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
   18f74:	0001f537          	lui	a0,0x1f
   18f78:	c3850513          	addi	a0,a0,-968 # 1ec38 <memp_pools+0x474>
   18f7c:	b65ff0ef          	jal	ra,18ae0 <bsp_printf>
   18f80:	f2dff06f          	j	18eac <etharp_find_entry+0x1b0>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
   18f84:	0001f537          	lui	a0,0x1f
   18f88:	c3850513          	addi	a0,a0,-968 # 1ec38 <memp_pools+0x474>
   18f8c:	b55ff0ef          	jal	ra,18ae0 <bsp_printf>
   18f90:	f2dff06f          	j	18ebc <etharp_find_entry+0x1c0>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
   18f94:	0001f537          	lui	a0,0x1f
   18f98:	c4c50513          	addi	a0,a0,-948 # 1ec4c <memp_pools+0x488>
   18f9c:	b45ff0ef          	jal	ra,18ae0 <bsp_printf>
   18fa0:	f3dff06f          	j	18edc <etharp_find_entry+0x1e0>
        return i;
   18fa4:	00078413          	mv	s0,a5
   18fa8:	f79ff06f          	j	18f20 <etharp_find_entry+0x224>
    return (s16_t)ERR_MEM;
   18fac:	fff00413          	li	s0,-1
   18fb0:	f71ff06f          	j	18f20 <etharp_find_entry+0x224>
      return (s16_t)ERR_MEM;
   18fb4:	fff00413          	li	s0,-1
   18fb8:	f69ff06f          	j	18f20 <etharp_find_entry+0x224>

00018fbc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
   18fbc:	fe010113          	addi	sp,sp,-32
   18fc0:	00112e23          	sw	ra,28(sp)
   18fc4:	00812c23          	sw	s0,24(sp)
   18fc8:	00912a23          	sw	s1,20(sp)
   18fcc:	01212823          	sw	s2,16(sp)
   18fd0:	01312623          	sw	s3,12(sp)
   18fd4:	00050493          	mv	s1,a0
   18fd8:	00058413          	mv	s0,a1
   18fdc:	00060913          	mv	s2,a2
   18fe0:	00068993          	mv	s3,a3
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
   18fe4:	03454703          	lbu	a4,52(a0)
   18fe8:	00600793          	li	a5,6
   18fec:	10f71263          	bne	a4,a5,190f0 <etharp_update_arp_entry+0x134>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
   18ff0:	10040863          	beqz	s0,19100 <etharp_update_arp_entry+0x144>
   18ff4:	00042503          	lw	a0,0(s0)
   18ff8:	10050463          	beqz	a0,19100 <etharp_update_arp_entry+0x144>
      ip4_addr_isbroadcast(ipaddr, netif) ||
   18ffc:	00048593          	mv	a1,s1
   19000:	c20ff0ef          	jal	ra,18420 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
   19004:	0e051e63          	bnez	a0,19100 <etharp_update_arp_entry+0x144>
      ip4_addr_ismulticast(ipaddr)) {
   19008:	00042783          	lw	a5,0(s0)
   1900c:	0f07f793          	andi	a5,a5,240
      ip4_addr_isbroadcast(ipaddr, netif) ||
   19010:	0e000713          	li	a4,224
   19014:	0ee78663          	beq	a5,a4,19100 <etharp_update_arp_entry+0x144>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
   19018:	00048613          	mv	a2,s1
   1901c:	00098593          	mv	a1,s3
   19020:	00040513          	mv	a0,s0
   19024:	cd9ff0ef          	jal	ra,18cfc <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
   19028:	0e054063          	bltz	a0,19108 <etharp_update_arp_entry+0x14c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
   1902c:	00050413          	mv	s0,a0
   19030:	00151793          	slli	a5,a0,0x1
   19034:	00a78533          	add	a0,a5,a0
   19038:	00351713          	slli	a4,a0,0x3
   1903c:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19040:	00e787b3          	add	a5,a5,a4
   19044:	00200713          	li	a4,2
   19048:	00e78a23          	sb	a4,20(a5)
  }

  /* record network interface */
  arp_table[i].netif = netif;
   1904c:	0097a423          	sw	s1,8(a5)
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
   19050:	00094883          	lbu	a7,0(s2)
   19054:	00194803          	lbu	a6,1(s2)
   19058:	00294503          	lbu	a0,2(s2)
   1905c:	00394583          	lbu	a1,3(s2)
   19060:	00494603          	lbu	a2,4(s2)
   19064:	00594683          	lbu	a3,5(s2)
   19068:	01178623          	sb	a7,12(a5)
   1906c:	010786a3          	sb	a6,13(a5)
   19070:	00a78723          	sb	a0,14(a5)
   19074:	00b787a3          	sb	a1,15(a5)
   19078:	00c78823          	sb	a2,16(a5)
   1907c:	00d788a3          	sb	a3,17(a5)
  /* reset time stamp */
  arp_table[i].ctime = 0;
   19080:	00079923          	sh	zero,18(a5)
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
   19084:	00141713          	slli	a4,s0,0x1
   19088:	00870733          	add	a4,a4,s0
   1908c:	00371693          	slli	a3,a4,0x3
   19090:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19094:	00d787b3          	add	a5,a5,a3
   19098:	0007a583          	lw	a1,0(a5)
   1909c:	06058c63          	beqz	a1,19114 <etharp_update_arp_entry+0x158>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
    /* pop first item off the queue */
    arp_table[i].q = q->next;
   190a0:	0005a603          	lw	a2,0(a1)
   190a4:	00141713          	slli	a4,s0,0x1
   190a8:	00870733          	add	a4,a4,s0
   190ac:	00371693          	slli	a3,a4,0x3
   190b0:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   190b4:	00d787b3          	add	a5,a5,a3
   190b8:	00c7a023          	sw	a2,0(a5)
    /* get the packet pointer */
    p = q->p;
   190bc:	0045a983          	lw	s3,4(a1)
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
   190c0:	00700513          	li	a0,7
   190c4:	c18fb0ef          	jal	ra,144dc <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
   190c8:	00001737          	lui	a4,0x1
   190cc:	80070713          	addi	a4,a4,-2048 # 800 <regnum_t6+0x7e1>
   190d0:	00090693          	mv	a3,s2
   190d4:	02e48613          	addi	a2,s1,46
   190d8:	00098593          	mv	a1,s3
   190dc:	00048513          	mv	a0,s1
   190e0:	a95ed0ef          	jal	ra,6b74 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
   190e4:	00098513          	mv	a0,s3
   190e8:	a69f30ef          	jal	ra,cb50 <pbuf_free>
   190ec:	f99ff06f          	j	19084 <etharp_update_arp_entry+0xc8>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
   190f0:	0001f537          	lui	a0,0x1f
   190f4:	c7850513          	addi	a0,a0,-904 # 1ec78 <memp_pools+0x4b4>
   190f8:	9e9ff0ef          	jal	ra,18ae0 <bsp_printf>
   190fc:	ef5ff06f          	j	18ff0 <etharp_update_arp_entry+0x34>
    return ERR_ARG;
   19100:	ff000513          	li	a0,-16
   19104:	0140006f          	j	19118 <etharp_update_arp_entry+0x15c>
    return (err_t)i;
   19108:	01851513          	slli	a0,a0,0x18
   1910c:	41855513          	srai	a0,a0,0x18
   19110:	0080006f          	j	19118 <etharp_update_arp_entry+0x15c>
  }
  return ERR_OK;
   19114:	00000513          	li	a0,0
}
   19118:	01c12083          	lw	ra,28(sp)
   1911c:	01812403          	lw	s0,24(sp)
   19120:	01412483          	lw	s1,20(sp)
   19124:	01012903          	lw	s2,16(sp)
   19128:	00c12983          	lw	s3,12(sp)
   1912c:	02010113          	addi	sp,sp,32
   19130:	00008067          	ret

00019134 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
   19134:	fd010113          	addi	sp,sp,-48
   19138:	02112623          	sw	ra,44(sp)
   1913c:	02812423          	sw	s0,40(sp)
   19140:	02912223          	sw	s1,36(sp)
   19144:	03212023          	sw	s2,32(sp)
   19148:	01312e23          	sw	s3,28(sp)
   1914c:	01412c23          	sw	s4,24(sp)
   19150:	01512a23          	sw	s5,20(sp)
   19154:	01612823          	sw	s6,16(sp)
   19158:	01712623          	sw	s7,12(sp)
   1915c:	01812423          	sw	s8,8(sp)
   19160:	01912223          	sw	s9,4(sp)
   19164:	00050b13          	mv	s6,a0
   19168:	00058b93          	mv	s7,a1
   1916c:	00060c13          	mv	s8,a2
   19170:	00068913          	mv	s2,a3
   19174:	00070a93          	mv	s5,a4
   19178:	00078493          	mv	s1,a5
   1917c:	00080a13          	mv	s4,a6
   19180:	00088c93          	mv	s9,a7
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
   19184:	18050263          	beqz	a0,19308 <etharp_raw+0x1d4>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
   19188:	28000613          	li	a2,640
   1918c:	01c00593          	li	a1,28
   19190:	00e00513          	li	a0,14
   19194:	ad5f30ef          	jal	ra,cc68 <pbuf_alloc>
   19198:	00050993          	mv	s3,a0
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
   1919c:	16050e63          	beqz	a0,19318 <etharp_raw+0x1e4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
   191a0:	00a55703          	lhu	a4,10(a0)
   191a4:	01b00793          	li	a5,27
   191a8:	18e7f663          	bgeu	a5,a4,19334 <etharp_raw+0x200>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
   191ac:	0049a403          	lw	s0,4(s3)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
   191b0:	000c8513          	mv	a0,s9
   191b4:	ac4f10ef          	jal	ra,a478 <lwip_htons>
   191b8:	00a40323          	sb	a0,6(s0)
   191bc:	00855513          	srli	a0,a0,0x8
   191c0:	00a403a3          	sb	a0,7(s0)

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
   191c4:	034b4703          	lbu	a4,52(s6)
   191c8:	00600793          	li	a5,6
   191cc:	16f71c63          	bne	a4,a5,19344 <etharp_raw+0x210>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
   191d0:	00094803          	lbu	a6,0(s2)
   191d4:	00194503          	lbu	a0,1(s2)
   191d8:	00294583          	lbu	a1,2(s2)
   191dc:	00394603          	lbu	a2,3(s2)
   191e0:	00494683          	lbu	a3,4(s2)
   191e4:	00594703          	lbu	a4,5(s2)
   191e8:	01040423          	sb	a6,8(s0)
   191ec:	00a404a3          	sb	a0,9(s0)
   191f0:	00b40523          	sb	a1,10(s0)
   191f4:	00c405a3          	sb	a2,11(s0)
   191f8:	00d40623          	sb	a3,12(s0)
   191fc:	00e406a3          	sb	a4,13(s0)
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
   19200:	0004c803          	lbu	a6,0(s1)
   19204:	0014c503          	lbu	a0,1(s1)
   19208:	0024c583          	lbu	a1,2(s1)
   1920c:	0034c603          	lbu	a2,3(s1)
   19210:	0044c683          	lbu	a3,4(s1)
   19214:	0054c703          	lbu	a4,5(s1)
   19218:	01040923          	sb	a6,18(s0)
   1921c:	00a409a3          	sb	a0,19(s0)
   19220:	00b40a23          	sb	a1,20(s0)
   19224:	00c40aa3          	sb	a2,21(s0)
   19228:	00d40b23          	sb	a3,22(s0)
   1922c:	00e40ba3          	sb	a4,23(s0)
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
   19230:	000ac583          	lbu	a1,0(s5)
   19234:	001ac603          	lbu	a2,1(s5)
   19238:	002ac683          	lbu	a3,2(s5)
   1923c:	003ac703          	lbu	a4,3(s5)
   19240:	00b40723          	sb	a1,14(s0)
   19244:	00c407a3          	sb	a2,15(s0)
   19248:	00d40823          	sb	a3,16(s0)
   1924c:	00e408a3          	sb	a4,17(s0)
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
   19250:	000a4583          	lbu	a1,0(s4)
   19254:	001a4603          	lbu	a2,1(s4)
   19258:	002a4683          	lbu	a3,2(s4)
   1925c:	003a4703          	lbu	a4,3(s4)
   19260:	00b40c23          	sb	a1,24(s0)
   19264:	00c40ca3          	sb	a2,25(s0)
   19268:	00d40d23          	sb	a3,26(s0)
   1926c:	00e40da3          	sb	a4,27(s0)

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
   19270:	00040023          	sb	zero,0(s0)
   19274:	00100793          	li	a5,1
   19278:	00f400a3          	sb	a5,1(s0)
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   1927c:	00800793          	li	a5,8
   19280:	00f40123          	sb	a5,2(s0)
   19284:	000401a3          	sb	zero,3(s0)
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
   19288:	00600793          	li	a5,6
   1928c:	00f40223          	sb	a5,4(s0)
  hdr->protolen = sizeof(ip4_addr_t);
   19290:	00400793          	li	a5,4
   19294:	00f402a3          	sb	a5,5(s0)
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
   19298:	00001737          	lui	a4,0x1
   1929c:	80670713          	addi	a4,a4,-2042 # 806 <regnum_t6+0x7e7>
   192a0:	000c0693          	mv	a3,s8
   192a4:	000b8613          	mv	a2,s7
   192a8:	00098593          	mv	a1,s3
   192ac:	000b0513          	mv	a0,s6
   192b0:	8c5ed0ef          	jal	ra,6b74 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
   192b4:	000227b7          	lui	a5,0x22
   192b8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   192bc:	0187d703          	lhu	a4,24(a5)
   192c0:	00170713          	addi	a4,a4,1
   192c4:	00e79c23          	sh	a4,24(a5)
  /* free ARP query packet */
  pbuf_free(p);
   192c8:	00098513          	mv	a0,s3
   192cc:	885f30ef          	jal	ra,cb50 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
   192d0:	00000513          	li	a0,0
}
   192d4:	02c12083          	lw	ra,44(sp)
   192d8:	02812403          	lw	s0,40(sp)
   192dc:	02412483          	lw	s1,36(sp)
   192e0:	02012903          	lw	s2,32(sp)
   192e4:	01c12983          	lw	s3,28(sp)
   192e8:	01812a03          	lw	s4,24(sp)
   192ec:	01412a83          	lw	s5,20(sp)
   192f0:	01012b03          	lw	s6,16(sp)
   192f4:	00c12b83          	lw	s7,12(sp)
   192f8:	00812c03          	lw	s8,8(sp)
   192fc:	00412c83          	lw	s9,4(sp)
   19300:	03010113          	addi	sp,sp,48
   19304:	00008067          	ret
  LWIP_ASSERT("netif != NULL", netif != NULL);
   19308:	0001d537          	lui	a0,0x1d
   1930c:	f5450513          	addi	a0,a0,-172 # 1cf54 <lwiperf_txbuf_const+0x774>
   19310:	fd0ff0ef          	jal	ra,18ae0 <bsp_printf>
   19314:	e75ff06f          	j	19188 <etharp_raw+0x54>
    ETHARP_STATS_INC(etharp.memerr);
   19318:	000227b7          	lui	a5,0x22
   1931c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   19320:	0247d703          	lhu	a4,36(a5)
   19324:	00170713          	addi	a4,a4,1
   19328:	02e79223          	sh	a4,36(a5)
    return ERR_MEM;
   1932c:	fff00513          	li	a0,-1
   19330:	fa5ff06f          	j	192d4 <etharp_raw+0x1a0>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
   19334:	0001f537          	lui	a0,0x1f
   19338:	c9c50513          	addi	a0,a0,-868 # 1ec9c <memp_pools+0x4d8>
   1933c:	fa4ff0ef          	jal	ra,18ae0 <bsp_printf>
   19340:	e6dff06f          	j	191ac <etharp_raw+0x78>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
   19344:	0001f537          	lui	a0,0x1f
   19348:	cd050513          	addi	a0,a0,-816 # 1ecd0 <memp_pools+0x50c>
   1934c:	f94ff0ef          	jal	ra,18ae0 <bsp_printf>
   19350:	e81ff06f          	j	191d0 <etharp_raw+0x9c>

00019354 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
   19354:	ff010113          	addi	sp,sp,-16
   19358:	00112623          	sw	ra,12(sp)
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
   1935c:	02e50313          	addi	t1,a0,46
   19360:	00100893          	li	a7,1
   19364:	00058813          	mv	a6,a1
   19368:	82c18793          	addi	a5,gp,-2004 # 1f9fc <ethzero>
   1936c:	00450713          	addi	a4,a0,4
   19370:	00030693          	mv	a3,t1
   19374:	00030593          	mv	a1,t1
   19378:	dbdff0ef          	jal	ra,19134 <etharp_raw>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
                    ipaddr, ARP_REQUEST);
}
   1937c:	00c12083          	lw	ra,12(sp)
   19380:	01010113          	addi	sp,sp,16
   19384:	00008067          	ret

00019388 <etharp_cleanup_netif>:
{
   19388:	ff010113          	addi	sp,sp,-16
   1938c:	00112623          	sw	ra,12(sp)
   19390:	00812423          	sw	s0,8(sp)
   19394:	00912223          	sw	s1,4(sp)
   19398:	00050493          	mv	s1,a0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   1939c:	00000413          	li	s0,0
   193a0:	0080006f          	j	193a8 <etharp_cleanup_netif+0x20>
   193a4:	00140413          	addi	s0,s0,1
   193a8:	00900793          	li	a5,9
   193ac:	0287ce63          	blt	a5,s0,193e8 <etharp_cleanup_netif+0x60>
    u8_t state = arp_table[i].state;
   193b0:	00141713          	slli	a4,s0,0x1
   193b4:	00870733          	add	a4,a4,s0
   193b8:	00371693          	slli	a3,a4,0x3
   193bc:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   193c0:	00d787b3          	add	a5,a5,a3
   193c4:	0147c783          	lbu	a5,20(a5)
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
   193c8:	fc078ee3          	beqz	a5,193a4 <etharp_cleanup_netif+0x1c>
   193cc:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   193d0:	00d787b3          	add	a5,a5,a3
   193d4:	0087a783          	lw	a5,8(a5)
   193d8:	fc9796e3          	bne	a5,s1,193a4 <etharp_cleanup_netif+0x1c>
      etharp_free_entry(i);
   193dc:	00040513          	mv	a0,s0
   193e0:	8adff0ef          	jal	ra,18c8c <etharp_free_entry>
   193e4:	fc1ff06f          	j	193a4 <etharp_cleanup_netif+0x1c>
}
   193e8:	00c12083          	lw	ra,12(sp)
   193ec:	00812403          	lw	s0,8(sp)
   193f0:	00412483          	lw	s1,4(sp)
   193f4:	01010113          	addi	sp,sp,16
   193f8:	00008067          	ret

000193fc <etharp_find_addr>:
{
   193fc:	fe010113          	addi	sp,sp,-32
   19400:	00112e23          	sw	ra,28(sp)
   19404:	00812c23          	sw	s0,24(sp)
   19408:	00912a23          	sw	s1,20(sp)
   1940c:	01212823          	sw	s2,16(sp)
   19410:	01312623          	sw	s3,12(sp)
   19414:	00050993          	mv	s3,a0
   19418:	00058913          	mv	s2,a1
   1941c:	00060493          	mv	s1,a2
   19420:	00068413          	mv	s0,a3
  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
   19424:	06060863          	beqz	a2,19494 <etharp_find_addr+0x98>
   19428:	06068663          	beqz	a3,19494 <etharp_find_addr+0x98>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
   1942c:	00098613          	mv	a2,s3
   19430:	00200593          	li	a1,2
   19434:	00090513          	mv	a0,s2
   19438:	8c5ff0ef          	jal	ra,18cfc <etharp_find_entry>
  if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
   1943c:	06054463          	bltz	a0,194a4 <etharp_find_addr+0xa8>
   19440:	00151693          	slli	a3,a0,0x1
   19444:	00a686b3          	add	a3,a3,a0
   19448:	00369613          	slli	a2,a3,0x3
   1944c:	ac818713          	addi	a4,gp,-1336 # 1fc98 <arp_table>
   19450:	00c70733          	add	a4,a4,a2
   19454:	01474683          	lbu	a3,20(a4)
   19458:	00100713          	li	a4,1
   1945c:	04d77863          	bgeu	a4,a3,194ac <etharp_find_addr+0xb0>
    *eth_ret = &arp_table[i].ethaddr;
   19460:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19464:	00c787b3          	add	a5,a5,a2
   19468:	00c78713          	addi	a4,a5,12
   1946c:	00e4a023          	sw	a4,0(s1)
    *ip_ret = &arp_table[i].ipaddr;
   19470:	00478793          	addi	a5,a5,4
   19474:	00f42023          	sw	a5,0(s0)
}
   19478:	01c12083          	lw	ra,28(sp)
   1947c:	01812403          	lw	s0,24(sp)
   19480:	01412483          	lw	s1,20(sp)
   19484:	01012903          	lw	s2,16(sp)
   19488:	00c12983          	lw	s3,12(sp)
   1948c:	02010113          	addi	sp,sp,32
   19490:	00008067          	ret
  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
   19494:	0001f537          	lui	a0,0x1f
   19498:	d1450513          	addi	a0,a0,-748 # 1ed14 <memp_pools+0x550>
   1949c:	e44ff0ef          	jal	ra,18ae0 <bsp_printf>
   194a0:	f8dff06f          	j	1942c <etharp_find_addr+0x30>
  return -1;
   194a4:	fff00513          	li	a0,-1
   194a8:	fd1ff06f          	j	19478 <etharp_find_addr+0x7c>
   194ac:	fff00513          	li	a0,-1
   194b0:	fc9ff06f          	j	19478 <etharp_find_addr+0x7c>

000194b4 <etharp_get_entry>:
{
   194b4:	fe010113          	addi	sp,sp,-32
   194b8:	00112e23          	sw	ra,28(sp)
   194bc:	00812c23          	sw	s0,24(sp)
   194c0:	00912a23          	sw	s1,20(sp)
   194c4:	01212823          	sw	s2,16(sp)
   194c8:	01312623          	sw	s3,12(sp)
   194cc:	00050413          	mv	s0,a0
   194d0:	00058993          	mv	s3,a1
   194d4:	00060913          	mv	s2,a2
   194d8:	00068493          	mv	s1,a3
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
   194dc:	08058263          	beqz	a1,19560 <etharp_get_entry+0xac>
  LWIP_ASSERT("netif != NULL", netif != NULL);
   194e0:	08090863          	beqz	s2,19570 <etharp_get_entry+0xbc>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
   194e4:	08048e63          	beqz	s1,19580 <etharp_get_entry+0xcc>
  if ((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
   194e8:	00900793          	li	a5,9
   194ec:	0a87e263          	bltu	a5,s0,19590 <etharp_get_entry+0xdc>
   194f0:	00141713          	slli	a4,s0,0x1
   194f4:	00870733          	add	a4,a4,s0
   194f8:	00371693          	slli	a3,a4,0x3
   194fc:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19500:	00d787b3          	add	a5,a5,a3
   19504:	0147c703          	lbu	a4,20(a5)
   19508:	00100793          	li	a5,1
   1950c:	08e7f663          	bgeu	a5,a4,19598 <etharp_get_entry+0xe4>
    *ipaddr  = &arp_table[i].ipaddr;
   19510:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19514:	00141713          	slli	a4,s0,0x1
   19518:	00d786b3          	add	a3,a5,a3
   1951c:	00468613          	addi	a2,a3,4
   19520:	00c9a023          	sw	a2,0(s3)
    *netif   = arp_table[i].netif;
   19524:	0086a683          	lw	a3,8(a3)
   19528:	00d92023          	sw	a3,0(s2)
    *eth_ret = &arp_table[i].ethaddr;
   1952c:	00870433          	add	s0,a4,s0
   19530:	00341713          	slli	a4,s0,0x3
   19534:	00e787b3          	add	a5,a5,a4
   19538:	00c78793          	addi	a5,a5,12
   1953c:	00f4a023          	sw	a5,0(s1)
    return 1;
   19540:	00100513          	li	a0,1
}
   19544:	01c12083          	lw	ra,28(sp)
   19548:	01812403          	lw	s0,24(sp)
   1954c:	01412483          	lw	s1,20(sp)
   19550:	01012903          	lw	s2,16(sp)
   19554:	00c12983          	lw	s3,12(sp)
   19558:	02010113          	addi	sp,sp,32
   1955c:	00008067          	ret
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
   19560:	0001f537          	lui	a0,0x1f
   19564:	d3850513          	addi	a0,a0,-712 # 1ed38 <memp_pools+0x574>
   19568:	d78ff0ef          	jal	ra,18ae0 <bsp_printf>
   1956c:	f75ff06f          	j	194e0 <etharp_get_entry+0x2c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
   19570:	0001d537          	lui	a0,0x1d
   19574:	f5450513          	addi	a0,a0,-172 # 1cf54 <lwiperf_txbuf_const+0x774>
   19578:	d68ff0ef          	jal	ra,18ae0 <bsp_printf>
   1957c:	f69ff06f          	j	194e4 <etharp_get_entry+0x30>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
   19580:	0001f537          	lui	a0,0x1f
   19584:	d4850513          	addi	a0,a0,-696 # 1ed48 <memp_pools+0x584>
   19588:	d58ff0ef          	jal	ra,18ae0 <bsp_printf>
   1958c:	f5dff06f          	j	194e8 <etharp_get_entry+0x34>
    return 0;
   19590:	00000513          	li	a0,0
   19594:	fb1ff06f          	j	19544 <etharp_get_entry+0x90>
   19598:	00000513          	li	a0,0
   1959c:	fa9ff06f          	j	19544 <etharp_get_entry+0x90>

000195a0 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
   195a0:	1c058263          	beqz	a1,19764 <etharp_input+0x1c4>
{
   195a4:	fd010113          	addi	sp,sp,-48
   195a8:	02112623          	sw	ra,44(sp)
   195ac:	02812423          	sw	s0,40(sp)
   195b0:	02912223          	sw	s1,36(sp)
   195b4:	03212023          	sw	s2,32(sp)
   195b8:	01312e23          	sw	s3,28(sp)
   195bc:	01412c23          	sw	s4,24(sp)
   195c0:	00058913          	mv	s2,a1
   195c4:	00050413          	mv	s0,a0
  hdr = (struct etharp_hdr *)p->payload;
   195c8:	00452483          	lw	s1,4(a0)
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
   195cc:	0004c703          	lbu	a4,0(s1)
   195d0:	0014c783          	lbu	a5,1(s1)
   195d4:	00879793          	slli	a5,a5,0x8
   195d8:	00e7e7b3          	or	a5,a5,a4
   195dc:	10000713          	li	a4,256
   195e0:	02e79a63          	bne	a5,a4,19614 <etharp_input+0x74>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
   195e4:	0044c703          	lbu	a4,4(s1)
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
   195e8:	00600793          	li	a5,6
   195ec:	02f71463          	bne	a4,a5,19614 <etharp_input+0x74>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
   195f0:	0054c703          	lbu	a4,5(s1)
      (hdr->hwlen != ETH_HWADDR_LEN) ||
   195f4:	00400793          	li	a5,4
   195f8:	00f71e63          	bne	a4,a5,19614 <etharp_input+0x74>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
   195fc:	0024c703          	lbu	a4,2(s1)
   19600:	0034c783          	lbu	a5,3(s1)
   19604:	00879793          	slli	a5,a5,0x8
   19608:	00e7e7b3          	or	a5,a5,a4
      (hdr->protolen != sizeof(ip4_addr_t)) ||
   1960c:	00800713          	li	a4,8
   19610:	04e78663          	beq	a5,a4,1965c <etharp_input+0xbc>
    ETHARP_STATS_INC(etharp.proterr);
   19614:	000227b7          	lui	a5,0x22
   19618:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1961c:	0287d703          	lhu	a4,40(a5)
   19620:	00170713          	addi	a4,a4,1
   19624:	02e79423          	sh	a4,40(a5)
    ETHARP_STATS_INC(etharp.drop);
   19628:	01e7d703          	lhu	a4,30(a5)
   1962c:	00170713          	addi	a4,a4,1
   19630:	00e79f23          	sh	a4,30(a5)
    pbuf_free(p);
   19634:	00040513          	mv	a0,s0
   19638:	d18f30ef          	jal	ra,cb50 <pbuf_free>
}
   1963c:	02c12083          	lw	ra,44(sp)
   19640:	02812403          	lw	s0,40(sp)
   19644:	02412483          	lw	s1,36(sp)
   19648:	02012903          	lw	s2,32(sp)
   1964c:	01c12983          	lw	s3,28(sp)
   19650:	01812a03          	lw	s4,24(sp)
   19654:	03010113          	addi	sp,sp,48
   19658:	00008067          	ret
  ETHARP_STATS_INC(etharp.recv);
   1965c:	000227b7          	lui	a5,0x22
   19660:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   19664:	01a7d703          	lhu	a4,26(a5)
   19668:	00170713          	addi	a4,a4,1
   1966c:	00e79d23          	sh	a4,26(a5)
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
   19670:	00e4c603          	lbu	a2,14(s1)
   19674:	00f4c683          	lbu	a3,15(s1)
   19678:	0104c703          	lbu	a4,16(s1)
   1967c:	0114c783          	lbu	a5,17(s1)
   19680:	00c10623          	sb	a2,12(sp)
   19684:	00d106a3          	sb	a3,13(sp)
   19688:	00e10723          	sb	a4,14(sp)
   1968c:	00f107a3          	sb	a5,15(sp)
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
   19690:	0184c603          	lbu	a2,24(s1)
   19694:	0194c683          	lbu	a3,25(s1)
   19698:	01a4c703          	lbu	a4,26(s1)
   1969c:	01b4c783          	lbu	a5,27(s1)
   196a0:	00c10423          	sb	a2,8(sp)
   196a4:	00d104a3          	sb	a3,9(sp)
   196a8:	00e10523          	sb	a4,10(sp)
   196ac:	00f105a3          	sb	a5,11(sp)
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
   196b0:	0045a783          	lw	a5,4(a1)
   196b4:	06079063          	bnez	a5,19714 <etharp_input+0x174>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
   196b8:	00848a13          	addi	s4,s1,8
    for_us = 0;
   196bc:	00000993          	li	s3,0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
   196c0:	00200693          	li	a3,2
   196c4:	000a0613          	mv	a2,s4
   196c8:	00c10593          	addi	a1,sp,12
   196cc:	00090513          	mv	a0,s2
   196d0:	8edff0ef          	jal	ra,18fbc <etharp_update_arp_entry>
  switch (hdr->opcode) {
   196d4:	0064c703          	lbu	a4,6(s1)
   196d8:	0074c783          	lbu	a5,7(s1)
   196dc:	00879793          	slli	a5,a5,0x8
   196e0:	00e7e7b3          	or	a5,a5,a4
   196e4:	10000713          	li	a4,256
   196e8:	04e78863          	beq	a5,a4,19738 <etharp_input+0x198>
   196ec:	20000713          	li	a4,512
   196f0:	00e78c63          	beq	a5,a4,19708 <etharp_input+0x168>
      ETHARP_STATS_INC(etharp.err);
   196f4:	000227b7          	lui	a5,0x22
   196f8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   196fc:	02c7d703          	lhu	a4,44(a5)
   19700:	00170713          	addi	a4,a4,1
   19704:	02e79623          	sh	a4,44(a5)
  pbuf_free(p);
   19708:	00040513          	mv	a0,s0
   1970c:	c44f30ef          	jal	ra,cb50 <pbuf_free>
   19710:	f2dff06f          	j	1963c <etharp_input+0x9c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
   19714:	00812983          	lw	s3,8(sp)
   19718:	413787b3          	sub	a5,a5,s3
   1971c:	0017b993          	seqz	s3,a5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
   19720:	00848a13          	addi	s4,s1,8
   19724:	00098663          	beqz	s3,19730 <etharp_input+0x190>
   19728:	00098693          	mv	a3,s3
   1972c:	f99ff06f          	j	196c4 <etharp_input+0x124>
   19730:	00200693          	li	a3,2
   19734:	f91ff06f          	j	196c4 <etharp_input+0x124>
      if (for_us) {
   19738:	fc0988e3          	beqz	s3,19708 <etharp_input+0x168>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
   1973c:	02e90593          	addi	a1,s2,46
        etharp_raw(netif,
   19740:	00200893          	li	a7,2
   19744:	00c10813          	addi	a6,sp,12
   19748:	000a0793          	mv	a5,s4
   1974c:	00490713          	addi	a4,s2,4
   19750:	00058693          	mv	a3,a1
   19754:	000a0613          	mv	a2,s4
   19758:	00090513          	mv	a0,s2
   1975c:	9d9ff0ef          	jal	ra,19134 <etharp_raw>
   19760:	fa9ff06f          	j	19708 <etharp_input+0x168>
   19764:	00008067          	ret

00019768 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
   19768:	ff010113          	addi	sp,sp,-16
   1976c:	00112623          	sw	ra,12(sp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
   19770:	83418613          	addi	a2,gp,-1996 # 1fa04 <ethbroadcast>
   19774:	be1ff0ef          	jal	ra,19354 <etharp_request_dst>
}
   19778:	00c12083          	lw	ra,12(sp)
   1977c:	01010113          	addi	sp,sp,16
   19780:	00008067          	ret

00019784 <etharp_tmr>:
{
   19784:	ff010113          	addi	sp,sp,-16
   19788:	00112623          	sw	ra,12(sp)
   1978c:	00812423          	sw	s0,8(sp)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   19790:	00000413          	li	s0,0
   19794:	0180006f          	j	197ac <etharp_tmr+0x28>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
   19798:	00400713          	li	a4,4
   1979c:	06f77463          	bgeu	a4,a5,19804 <etharp_tmr+0x80>
        etharp_free_entry(i);
   197a0:	00040513          	mv	a0,s0
   197a4:	ce8ff0ef          	jal	ra,18c8c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   197a8:	00140413          	addi	s0,s0,1
   197ac:	00900793          	li	a5,9
   197b0:	0c87c863          	blt	a5,s0,19880 <etharp_tmr+0xfc>
    u8_t state = arp_table[i].state;
   197b4:	00141713          	slli	a4,s0,0x1
   197b8:	00870733          	add	a4,a4,s0
   197bc:	00371693          	slli	a3,a4,0x3
   197c0:	00068713          	mv	a4,a3
   197c4:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   197c8:	00d787b3          	add	a5,a5,a3
   197cc:	0147c683          	lbu	a3,20(a5)
    if (state != ETHARP_STATE_EMPTY
   197d0:	fc068ce3          	beqz	a3,197a8 <etharp_tmr+0x24>
      arp_table[i].ctime++;
   197d4:	00070613          	mv	a2,a4
   197d8:	ac818713          	addi	a4,gp,-1336 # 1fc98 <arp_table>
   197dc:	00c70733          	add	a4,a4,a2
   197e0:	01275783          	lhu	a5,18(a4)
   197e4:	00178793          	addi	a5,a5,1
   197e8:	01079793          	slli	a5,a5,0x10
   197ec:	0107d793          	srli	a5,a5,0x10
   197f0:	00f71923          	sh	a5,18(a4)
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
   197f4:	12b00713          	li	a4,299
   197f8:	faf764e3          	bltu	a4,a5,197a0 <etharp_tmr+0x1c>
   197fc:	00100713          	li	a4,1
   19800:	f8e68ce3          	beq	a3,a4,19798 <etharp_tmr+0x14>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
   19804:	00300793          	li	a5,3
   19808:	02f68c63          	beq	a3,a5,19840 <etharp_tmr+0xbc>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
   1980c:	00400793          	li	a5,4
   19810:	04f68863          	beq	a3,a5,19860 <etharp_tmr+0xdc>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
   19814:	00100793          	li	a5,1
   19818:	f8f698e3          	bne	a3,a5,197a8 <etharp_tmr+0x24>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
   1981c:	00141713          	slli	a4,s0,0x1
   19820:	00870733          	add	a4,a4,s0
   19824:	00371693          	slli	a3,a4,0x3
   19828:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   1982c:	00d787b3          	add	a5,a5,a3
   19830:	00478593          	addi	a1,a5,4
   19834:	0087a503          	lw	a0,8(a5)
   19838:	f31ff0ef          	jal	ra,19768 <etharp_request>
   1983c:	f6dff06f          	j	197a8 <etharp_tmr+0x24>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
   19840:	00141713          	slli	a4,s0,0x1
   19844:	00870733          	add	a4,a4,s0
   19848:	00371693          	slli	a3,a4,0x3
   1984c:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19850:	00d787b3          	add	a5,a5,a3
   19854:	00400713          	li	a4,4
   19858:	00e78a23          	sb	a4,20(a5)
   1985c:	f4dff06f          	j	197a8 <etharp_tmr+0x24>
        arp_table[i].state = ETHARP_STATE_STABLE;
   19860:	00141713          	slli	a4,s0,0x1
   19864:	00870733          	add	a4,a4,s0
   19868:	00371693          	slli	a3,a4,0x3
   1986c:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19870:	00d787b3          	add	a5,a5,a3
   19874:	00200713          	li	a4,2
   19878:	00e78a23          	sb	a4,20(a5)
   1987c:	f2dff06f          	j	197a8 <etharp_tmr+0x24>
}
   19880:	00c12083          	lw	ra,12(sp)
   19884:	00812403          	lw	s0,8(sp)
   19888:	01010113          	addi	sp,sp,16
   1988c:	00008067          	ret

00019890 <etharp_output_to_arp_index>:
{
   19890:	ff010113          	addi	sp,sp,-16
   19894:	00112623          	sw	ra,12(sp)
   19898:	00812423          	sw	s0,8(sp)
   1989c:	00912223          	sw	s1,4(sp)
   198a0:	01212023          	sw	s2,0(sp)
   198a4:	00050493          	mv	s1,a0
   198a8:	00058913          	mv	s2,a1
   198ac:	00060413          	mv	s0,a2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
   198b0:	00161713          	slli	a4,a2,0x1
   198b4:	00c70733          	add	a4,a4,a2
   198b8:	00371693          	slli	a3,a4,0x3
   198bc:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   198c0:	00d787b3          	add	a5,a5,a3
   198c4:	0147c703          	lbu	a4,20(a5)
   198c8:	00100793          	li	a5,1
   198cc:	06e7f663          	bgeu	a5,a4,19938 <etharp_output_to_arp_index+0xa8>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
   198d0:	00141713          	slli	a4,s0,0x1
   198d4:	00870733          	add	a4,a4,s0
   198d8:	00371693          	slli	a3,a4,0x3
   198dc:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   198e0:	00d787b3          	add	a5,a5,a3
   198e4:	0147c703          	lbu	a4,20(a5)
   198e8:	00200793          	li	a5,2
   198ec:	04f70e63          	beq	a4,a5,19948 <etharp_output_to_arp_index+0xb8>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
   198f0:	00141793          	slli	a5,s0,0x1
   198f4:	00878433          	add	s0,a5,s0
   198f8:	00341793          	slli	a5,s0,0x3
   198fc:	ac818693          	addi	a3,gp,-1336 # 1fc98 <arp_table>
   19900:	00f686b3          	add	a3,a3,a5
   19904:	00001737          	lui	a4,0x1
   19908:	80070713          	addi	a4,a4,-2048 # 800 <regnum_t6+0x7e1>
   1990c:	00c68693          	addi	a3,a3,12
   19910:	02e48613          	addi	a2,s1,46
   19914:	00090593          	mv	a1,s2
   19918:	00048513          	mv	a0,s1
   1991c:	a58ed0ef          	jal	ra,6b74 <ethernet_output>
}
   19920:	00c12083          	lw	ra,12(sp)
   19924:	00812403          	lw	s0,8(sp)
   19928:	00412483          	lw	s1,4(sp)
   1992c:	00012903          	lw	s2,0(sp)
   19930:	01010113          	addi	sp,sp,16
   19934:	00008067          	ret
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
   19938:	0001f537          	lui	a0,0x1f
   1993c:	d5850513          	addi	a0,a0,-680 # 1ed58 <memp_pools+0x594>
   19940:	9a0ff0ef          	jal	ra,18ae0 <bsp_printf>
   19944:	f8dff06f          	j	198d0 <etharp_output_to_arp_index+0x40>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
   19948:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   1994c:	00d787b3          	add	a5,a5,a3
   19950:	0127d783          	lhu	a5,18(a5)
   19954:	11c00713          	li	a4,284
   19958:	04f76a63          	bltu	a4,a5,199ac <etharp_output_to_arp_index+0x11c>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
   1995c:	10d00713          	li	a4,269
   19960:	f8f778e3          	bgeu	a4,a5,198f0 <etharp_output_to_arp_index+0x60>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
   19964:	00141793          	slli	a5,s0,0x1
   19968:	008787b3          	add	a5,a5,s0
   1996c:	00379713          	slli	a4,a5,0x3
   19970:	ac818593          	addi	a1,gp,-1336 # 1fc98 <arp_table>
   19974:	00e585b3          	add	a1,a1,a4
   19978:	00c58613          	addi	a2,a1,12
   1997c:	00458593          	addi	a1,a1,4
   19980:	00048513          	mv	a0,s1
   19984:	9d1ff0ef          	jal	ra,19354 <etharp_request_dst>
   19988:	f60514e3          	bnez	a0,198f0 <etharp_output_to_arp_index+0x60>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
   1998c:	00141713          	slli	a4,s0,0x1
   19990:	00870733          	add	a4,a4,s0
   19994:	00371693          	slli	a3,a4,0x3
   19998:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   1999c:	00d787b3          	add	a5,a5,a3
   199a0:	00300713          	li	a4,3
   199a4:	00e78a23          	sb	a4,20(a5)
   199a8:	f49ff06f          	j	198f0 <etharp_output_to_arp_index+0x60>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
   199ac:	ac818593          	addi	a1,gp,-1336 # 1fc98 <arp_table>
   199b0:	00d585b3          	add	a1,a1,a3
   199b4:	00458593          	addi	a1,a1,4
   199b8:	00048513          	mv	a0,s1
   199bc:	dadff0ef          	jal	ra,19768 <etharp_request>
   199c0:	f20518e3          	bnez	a0,198f0 <etharp_output_to_arp_index+0x60>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
   199c4:	00141713          	slli	a4,s0,0x1
   199c8:	00870733          	add	a4,a4,s0
   199cc:	00371693          	slli	a3,a4,0x3
   199d0:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   199d4:	00d787b3          	add	a5,a5,a3
   199d8:	00300713          	li	a4,3
   199dc:	00e78a23          	sb	a4,20(a5)
   199e0:	f11ff06f          	j	198f0 <etharp_output_to_arp_index+0x60>

000199e4 <etharp_query>:
{
   199e4:	fe010113          	addi	sp,sp,-32
   199e8:	00112e23          	sw	ra,28(sp)
   199ec:	00812c23          	sw	s0,24(sp)
   199f0:	00912a23          	sw	s1,20(sp)
   199f4:	01212823          	sw	s2,16(sp)
   199f8:	01312623          	sw	s3,12(sp)
   199fc:	01412423          	sw	s4,8(sp)
   19a00:	01512223          	sw	s5,4(sp)
   19a04:	00050413          	mv	s0,a0
   19a08:	00058a13          	mv	s4,a1
   19a0c:	00060913          	mv	s2,a2
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
   19a10:	02e50993          	addi	s3,a0,46
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
   19a14:	00050593          	mv	a1,a0
   19a18:	000a2503          	lw	a0,0(s4)
   19a1c:	a05fe0ef          	jal	ra,18420 <ip4_addr_isbroadcast_u32>
   19a20:	32051a63          	bnez	a0,19d54 <etharp_query+0x370>
      ip4_addr_ismulticast(ipaddr) ||
   19a24:	000a2783          	lw	a5,0(s4)
   19a28:	0f07f693          	andi	a3,a5,240
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
   19a2c:	0e000713          	li	a4,224
   19a30:	32e68663          	beq	a3,a4,19d5c <etharp_query+0x378>
      ip4_addr_ismulticast(ipaddr) ||
   19a34:	320a0863          	beqz	s4,19d64 <etharp_query+0x380>
      ip4_addr_isany(ipaddr)) {
   19a38:	32078a63          	beqz	a5,19d6c <etharp_query+0x388>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
   19a3c:	00040613          	mv	a2,s0
   19a40:	00100593          	li	a1,1
   19a44:	000a0513          	mv	a0,s4
   19a48:	ab4ff0ef          	jal	ra,18cfc <etharp_find_entry>
   19a4c:	00050493          	mv	s1,a0
  if (i_err < 0) {
   19a50:	0a054463          	bltz	a0,19af8 <etharp_query+0x114>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
   19a54:	01051793          	slli	a5,a0,0x10
   19a58:	0107d793          	srli	a5,a5,0x10
   19a5c:	07e00713          	li	a4,126
   19a60:	0af76e63          	bltu	a4,a5,19b1c <etharp_query+0x138>
  i = (netif_addr_idx_t)i_err;
   19a64:	0ff4f493          	andi	s1,s1,255
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
   19a68:	00149713          	slli	a4,s1,0x1
   19a6c:	00970733          	add	a4,a4,s1
   19a70:	00371693          	slli	a3,a4,0x3
   19a74:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19a78:	00d787b3          	add	a5,a5,a3
   19a7c:	0147c783          	lbu	a5,20(a5)
   19a80:	0a079663          	bnez	a5,19b2c <etharp_query+0x148>
    arp_table[i].state = ETHARP_STATE_PENDING;
   19a84:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19a88:	00d787b3          	add	a5,a5,a3
   19a8c:	00100713          	li	a4,1
   19a90:	00e78a23          	sb	a4,20(a5)
    arp_table[i].netif = netif;
   19a94:	0087a423          	sw	s0,8(a5)
    is_new_entry = 1;
   19a98:	00100a93          	li	s5,1
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
   19a9c:	00149713          	slli	a4,s1,0x1
   19aa0:	00970733          	add	a4,a4,s1
   19aa4:	00371693          	slli	a3,a4,0x3
   19aa8:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19aac:	00d787b3          	add	a5,a5,a3
   19ab0:	0147c783          	lbu	a5,20(a5)
   19ab4:	08078063          	beqz	a5,19b34 <etharp_query+0x150>
  if (is_new_entry || (q == NULL)) {
   19ab8:	080a9663          	bnez	s5,19b44 <etharp_query+0x160>
   19abc:	08090463          	beqz	s2,19b44 <etharp_query+0x160>
  err_t result = ERR_MEM;
   19ac0:	fff00a13          	li	s4,-1
  LWIP_ASSERT("q != NULL", q != NULL);
   19ac4:	0c090863          	beqz	s2,19b94 <etharp_query+0x1b0>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
   19ac8:	00149713          	slli	a4,s1,0x1
   19acc:	00970733          	add	a4,a4,s1
   19ad0:	00371693          	slli	a3,a4,0x3
   19ad4:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19ad8:	00d787b3          	add	a5,a5,a3
   19adc:	0147c783          	lbu	a5,20(a5)
   19ae0:	00100713          	li	a4,1
   19ae4:	0cf76063          	bltu	a4,a5,19ba4 <etharp_query+0x1c0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
   19ae8:	00100713          	li	a4,1
   19aec:	0ee79463          	bne	a5,a4,19bd4 <etharp_query+0x1f0>
    p = q;
   19af0:	00090413          	mv	s0,s2
   19af4:	1240006f          	j	19c18 <etharp_query+0x234>
    if (q) {
   19af8:	00090c63          	beqz	s2,19b10 <etharp_query+0x12c>
      ETHARP_STATS_INC(etharp.memerr);
   19afc:	000227b7          	lui	a5,0x22
   19b00:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   19b04:	0247d703          	lhu	a4,36(a5)
   19b08:	00170713          	addi	a4,a4,1
   19b0c:	02e79223          	sh	a4,36(a5)
    return (err_t)i_err;
   19b10:	01849a13          	slli	s4,s1,0x18
   19b14:	418a5a13          	srai	s4,s4,0x18
   19b18:	0bc0006f          	j	19bd4 <etharp_query+0x1f0>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
   19b1c:	0001f537          	lui	a0,0x1f
   19b20:	d8850513          	addi	a0,a0,-632 # 1ed88 <memp_pools+0x5c4>
   19b24:	fbdfe0ef          	jal	ra,18ae0 <bsp_printf>
   19b28:	f3dff06f          	j	19a64 <etharp_query+0x80>
  int is_new_entry = 0;
   19b2c:	00000a93          	li	s5,0
   19b30:	f6dff06f          	j	19a9c <etharp_query+0xb8>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
   19b34:	0001f537          	lui	a0,0x1f
   19b38:	d9850513          	addi	a0,a0,-616 # 1ed98 <memp_pools+0x5d4>
   19b3c:	fa5fe0ef          	jal	ra,18ae0 <bsp_printf>
   19b40:	f79ff06f          	j	19ab8 <etharp_query+0xd4>
    result = etharp_request(netif, ipaddr);
   19b44:	000a0593          	mv	a1,s4
   19b48:	00040513          	mv	a0,s0
   19b4c:	c1dff0ef          	jal	ra,19768 <etharp_request>
   19b50:	00050a13          	mv	s4,a0
    if (result != ERR_OK) {
   19b54:	02051263          	bnez	a0,19b78 <etharp_query+0x194>
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
   19b58:	00149713          	slli	a4,s1,0x1
   19b5c:	00970733          	add	a4,a4,s1
   19b60:	00371693          	slli	a3,a4,0x3
   19b64:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19b68:	00d787b3          	add	a5,a5,a3
   19b6c:	0147c703          	lbu	a4,20(a5)
   19b70:	00100793          	li	a5,1
   19b74:	00f70663          	beq	a4,a5,19b80 <etharp_query+0x19c>
    if (q == NULL) {
   19b78:	f40916e3          	bnez	s2,19ac4 <etharp_query+0xe0>
   19b7c:	0580006f          	j	19bd4 <etharp_query+0x1f0>
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
   19b80:	fe0a9ce3          	bnez	s5,19b78 <etharp_query+0x194>
        arp_table[i].ctime = 0;
   19b84:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19b88:	00d787b3          	add	a5,a5,a3
   19b8c:	00079923          	sh	zero,18(a5)
   19b90:	fe9ff06f          	j	19b78 <etharp_query+0x194>
  LWIP_ASSERT("q != NULL", q != NULL);
   19b94:	0001f537          	lui	a0,0x1f
   19b98:	c0450513          	addi	a0,a0,-1020 # 1ec04 <memp_pools+0x440>
   19b9c:	f45fe0ef          	jal	ra,18ae0 <bsp_printf>
   19ba0:	f29ff06f          	j	19ac8 <etharp_query+0xe4>
    ETHARP_SET_ADDRHINT(netif, i);
   19ba4:	96918223          	sb	s1,-1692(gp) # 1fb34 <etharp_cached_entry>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
   19ba8:	00068793          	mv	a5,a3
   19bac:	ac818693          	addi	a3,gp,-1336 # 1fc98 <arp_table>
   19bb0:	00f686b3          	add	a3,a3,a5
   19bb4:	00001737          	lui	a4,0x1
   19bb8:	80070713          	addi	a4,a4,-2048 # 800 <regnum_t6+0x7e1>
   19bbc:	00c68693          	addi	a3,a3,12
   19bc0:	00098613          	mv	a2,s3
   19bc4:	00090593          	mv	a1,s2
   19bc8:	00040513          	mv	a0,s0
   19bcc:	fa9ec0ef          	jal	ra,6b74 <ethernet_output>
   19bd0:	00050a13          	mv	s4,a0
}
   19bd4:	000a0513          	mv	a0,s4
   19bd8:	01c12083          	lw	ra,28(sp)
   19bdc:	01812403          	lw	s0,24(sp)
   19be0:	01412483          	lw	s1,20(sp)
   19be4:	01012903          	lw	s2,16(sp)
   19be8:	00c12983          	lw	s3,12(sp)
   19bec:	00812a03          	lw	s4,8(sp)
   19bf0:	00412a83          	lw	s5,4(sp)
   19bf4:	02010113          	addi	sp,sp,32
   19bf8:	00008067          	ret
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
   19bfc:	0001f537          	lui	a0,0x1f
   19c00:	dc050513          	addi	a0,a0,-576 # 1edc0 <memp_pools+0x5fc>
   19c04:	eddfe0ef          	jal	ra,18ae0 <bsp_printf>
      if (PBUF_NEEDS_COPY(p)) {
   19c08:	00c44783          	lbu	a5,12(s0)
   19c0c:	0407f793          	andi	a5,a5,64
   19c10:	06079e63          	bnez	a5,19c8c <etharp_query+0x2a8>
      p = p->next;
   19c14:	00042403          	lw	s0,0(s0)
    while (p) {
   19c18:	00040e63          	beqz	s0,19c34 <etharp_query+0x250>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
   19c1c:	00a45703          	lhu	a4,10(s0)
   19c20:	00845783          	lhu	a5,8(s0)
   19c24:	fef712e3          	bne	a4,a5,19c08 <etharp_query+0x224>
   19c28:	00042783          	lw	a5,0(s0)
   19c2c:	fc0798e3          	bnez	a5,19bfc <etharp_query+0x218>
   19c30:	fd9ff06f          	j	19c08 <etharp_query+0x224>
    int copy_needed = 0;
   19c34:	00000793          	li	a5,0
    if (copy_needed) {
   19c38:	04078e63          	beqz	a5,19c94 <etharp_query+0x2b0>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
   19c3c:	00090613          	mv	a2,s2
   19c40:	28000593          	li	a1,640
   19c44:	00e00513          	li	a0,14
   19c48:	b09f30ef          	jal	ra,d750 <pbuf_clone>
   19c4c:	00050913          	mv	s2,a0
    if (p != NULL) {
   19c50:	0e090463          	beqz	s2,19d38 <etharp_query+0x354>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
   19c54:	00700513          	li	a0,7
   19c58:	ff4fa0ef          	jal	ra,1444c <memp_malloc>
      if (new_entry != NULL) {
   19c5c:	0c050663          	beqz	a0,19d28 <etharp_query+0x344>
        new_entry->next = 0;
   19c60:	00052023          	sw	zero,0(a0)
        new_entry->p = p;
   19c64:	01252223          	sw	s2,4(a0)
        if (arp_table[i].q != NULL) {
   19c68:	00149713          	slli	a4,s1,0x1
   19c6c:	00970733          	add	a4,a4,s1
   19c70:	00371693          	slli	a3,a4,0x3
   19c74:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19c78:	00d787b3          	add	a5,a5,a3
   19c7c:	0007a703          	lw	a4,0(a5)
   19c80:	04070263          	beqz	a4,19cc4 <etharp_query+0x2e0>
          qlen++;
   19c84:	00100693          	li	a3,1
   19c88:	0200006f          	j	19ca8 <etharp_query+0x2c4>
        copy_needed = 1;
   19c8c:	00100793          	li	a5,1
   19c90:	fa9ff06f          	j	19c38 <etharp_query+0x254>
      pbuf_ref(p);
   19c94:	00090513          	mv	a0,s2
   19c98:	bc8f30ef          	jal	ra,d060 <pbuf_ref>
   19c9c:	fb5ff06f          	j	19c50 <etharp_query+0x26c>
            qlen++;
   19ca0:	00168693          	addi	a3,a3,1
            r = r->next;
   19ca4:	00078713          	mv	a4,a5
          while (r->next != NULL) {
   19ca8:	00072783          	lw	a5,0(a4)
   19cac:	fe079ae3          	bnez	a5,19ca0 <etharp_query+0x2bc>
          r->next = new_entry;
   19cb0:	00a72023          	sw	a0,0(a4)
        if (qlen >= ARP_QUEUE_LEN) {
   19cb4:	00200793          	li	a5,2
   19cb8:	02d7e663          	bltu	a5,a3,19ce4 <etharp_query+0x300>
        result = ERR_OK;
   19cbc:	00000a13          	li	s4,0
   19cc0:	f15ff06f          	j	19bd4 <etharp_query+0x1f0>
          arp_table[i].q = new_entry;
   19cc4:	00149793          	slli	a5,s1,0x1
   19cc8:	009784b3          	add	s1,a5,s1
   19ccc:	00349713          	slli	a4,s1,0x3
   19cd0:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19cd4:	00e787b3          	add	a5,a5,a4
   19cd8:	00a7a023          	sw	a0,0(a5)
        result = ERR_OK;
   19cdc:	00000a13          	li	s4,0
   19ce0:	ef5ff06f          	j	19bd4 <etharp_query+0x1f0>
          old = arp_table[i].q;
   19ce4:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19ce8:	00149713          	slli	a4,s1,0x1
   19cec:	00970633          	add	a2,a4,s1
   19cf0:	00361693          	slli	a3,a2,0x3
   19cf4:	00068613          	mv	a2,a3
   19cf8:	00d786b3          	add	a3,a5,a3
   19cfc:	0006a403          	lw	s0,0(a3)
          arp_table[i].q = arp_table[i].q->next;
   19d00:	00042683          	lw	a3,0(s0)
   19d04:	00c787b3          	add	a5,a5,a2
   19d08:	00d7a023          	sw	a3,0(a5)
          pbuf_free(old->p);
   19d0c:	00442503          	lw	a0,4(s0)
   19d10:	e41f20ef          	jal	ra,cb50 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
   19d14:	00040593          	mv	a1,s0
   19d18:	00700513          	li	a0,7
   19d1c:	fc0fa0ef          	jal	ra,144dc <memp_free>
        result = ERR_OK;
   19d20:	00000a13          	li	s4,0
   19d24:	eb1ff06f          	j	19bd4 <etharp_query+0x1f0>
        pbuf_free(p);
   19d28:	00090513          	mv	a0,s2
   19d2c:	e25f20ef          	jal	ra,cb50 <pbuf_free>
        result = ERR_MEM;
   19d30:	fff00a13          	li	s4,-1
   19d34:	ea1ff06f          	j	19bd4 <etharp_query+0x1f0>
      ETHARP_STATS_INC(etharp.memerr);
   19d38:	000227b7          	lui	a5,0x22
   19d3c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   19d40:	0247d703          	lhu	a4,36(a5)
   19d44:	00170713          	addi	a4,a4,1
   19d48:	02e79223          	sh	a4,36(a5)
      result = ERR_MEM;
   19d4c:	fff00a13          	li	s4,-1
   19d50:	e85ff06f          	j	19bd4 <etharp_query+0x1f0>
    return ERR_ARG;
   19d54:	ff000a13          	li	s4,-16
   19d58:	e7dff06f          	j	19bd4 <etharp_query+0x1f0>
   19d5c:	ff000a13          	li	s4,-16
   19d60:	e75ff06f          	j	19bd4 <etharp_query+0x1f0>
   19d64:	ff000a13          	li	s4,-16
   19d68:	e6dff06f          	j	19bd4 <etharp_query+0x1f0>
   19d6c:	ff000a13          	li	s4,-16
   19d70:	e65ff06f          	j	19bd4 <etharp_query+0x1f0>

00019d74 <etharp_output>:
{
   19d74:	fe010113          	addi	sp,sp,-32
   19d78:	00112e23          	sw	ra,28(sp)
   19d7c:	00812c23          	sw	s0,24(sp)
   19d80:	00912a23          	sw	s1,20(sp)
   19d84:	01212823          	sw	s2,16(sp)
   19d88:	00050413          	mv	s0,a0
   19d8c:	00058913          	mv	s2,a1
   19d90:	00060493          	mv	s1,a2
  LWIP_ASSERT("netif != NULL", netif != NULL);
   19d94:	0c050663          	beqz	a0,19e60 <etharp_output+0xec>
  LWIP_ASSERT("q != NULL", q != NULL);
   19d98:	0c090c63          	beqz	s2,19e70 <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
   19d9c:	0e048263          	beqz	s1,19e80 <etharp_output+0x10c>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
   19da0:	00040593          	mv	a1,s0
   19da4:	0004a503          	lw	a0,0(s1)
   19da8:	e78fe0ef          	jal	ra,18420 <ip4_addr_isbroadcast_u32>
   19dac:	1a051063          	bnez	a0,19f4c <etharp_output+0x1d8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
   19db0:	0004a703          	lw	a4,0(s1)
   19db4:	0f077693          	andi	a3,a4,240
   19db8:	0e000793          	li	a5,224
   19dbc:	0cf68a63          	beq	a3,a5,19e90 <etharp_output+0x11c>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
   19dc0:	00442783          	lw	a5,4(s0)
   19dc4:	00842683          	lw	a3,8(s0)
   19dc8:	00f747b3          	xor	a5,a4,a5
   19dcc:	00d7f7b3          	and	a5,a5,a3
   19dd0:	02078263          	beqz	a5,19df4 <etharp_output+0x80>
        !ip4_addr_islinklocal(ipaddr)) {
   19dd4:	01071713          	slli	a4,a4,0x10
   19dd8:	01075713          	srli	a4,a4,0x10
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
   19ddc:	000107b7          	lui	a5,0x10
   19de0:	ea978793          	addi	a5,a5,-343 # fea9 <tcp_input+0x2d>
   19de4:	00f70863          	beq	a4,a5,19df4 <etharp_output+0x80>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
   19de8:	00c42783          	lw	a5,12(s0)
   19dec:	18078a63          	beqz	a5,19f80 <etharp_output+0x20c>
            dst_addr = netif_ip4_gw(netif);
   19df0:	00c40493          	addi	s1,s0,12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
   19df4:	9641c603          	lbu	a2,-1692(gp) # 1fb34 <etharp_cached_entry>
   19df8:	00161713          	slli	a4,a2,0x1
   19dfc:	00c70733          	add	a4,a4,a2
   19e00:	00371693          	slli	a3,a4,0x3
   19e04:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19e08:	00d787b3          	add	a5,a5,a3
   19e0c:	0147c703          	lbu	a4,20(a5)
   19e10:	00100793          	li	a5,1
   19e14:	0ae7fe63          	bgeu	a5,a4,19ed0 <etharp_output+0x15c>
            (arp_table[etharp_cached_entry].netif == netif) &&
   19e18:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19e1c:	00d787b3          	add	a5,a5,a3
   19e20:	0087a783          	lw	a5,8(a5)
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
   19e24:	0a879663          	bne	a5,s0,19ed0 <etharp_output+0x15c>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
   19e28:	0004a583          	lw	a1,0(s1)
   19e2c:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19e30:	00d787b3          	add	a5,a5,a3
   19e34:	0047a783          	lw	a5,4(a5)
            (arp_table[etharp_cached_entry].netif == netif) &&
   19e38:	08f59c63          	bne	a1,a5,19ed0 <etharp_output+0x15c>
          ETHARP_STATS_INC(etharp.cachehit);
   19e3c:	000227b7          	lui	a5,0x22
   19e40:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   19e44:	02e7d703          	lhu	a4,46(a5)
   19e48:	00170713          	addi	a4,a4,1
   19e4c:	02e79723          	sh	a4,46(a5)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
   19e50:	00090593          	mv	a1,s2
   19e54:	00040513          	mv	a0,s0
   19e58:	a39ff0ef          	jal	ra,19890 <etharp_output_to_arp_index>
   19e5c:	10c0006f          	j	19f68 <etharp_output+0x1f4>
  LWIP_ASSERT("netif != NULL", netif != NULL);
   19e60:	0001d537          	lui	a0,0x1d
   19e64:	f5450513          	addi	a0,a0,-172 # 1cf54 <lwiperf_txbuf_const+0x774>
   19e68:	c79fe0ef          	jal	ra,18ae0 <bsp_printf>
   19e6c:	f2dff06f          	j	19d98 <etharp_output+0x24>
  LWIP_ASSERT("q != NULL", q != NULL);
   19e70:	0001f537          	lui	a0,0x1f
   19e74:	c0450513          	addi	a0,a0,-1020 # 1ec04 <memp_pools+0x440>
   19e78:	c69fe0ef          	jal	ra,18ae0 <bsp_printf>
   19e7c:	f21ff06f          	j	19d9c <etharp_output+0x28>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
   19e80:	0001f537          	lui	a0,0x1f
   19e84:	d3850513          	addi	a0,a0,-712 # 1ed38 <memp_pools+0x574>
   19e88:	c59fe0ef          	jal	ra,18ae0 <bsp_printf>
   19e8c:	f15ff06f          	j	19da0 <etharp_output+0x2c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
   19e90:	00100793          	li	a5,1
   19e94:	00f10423          	sb	a5,8(sp)
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
   19e98:	000104a3          	sb	zero,9(sp)
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
   19e9c:	05e00793          	li	a5,94
   19ea0:	00f10523          	sb	a5,10(sp)
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
   19ea4:	0014c783          	lbu	a5,1(s1)
   19ea8:	07f7f793          	andi	a5,a5,127
   19eac:	00f105a3          	sb	a5,11(sp)
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
   19eb0:	0024c783          	lbu	a5,2(s1)
   19eb4:	00f10623          	sb	a5,12(sp)
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
   19eb8:	0034c783          	lbu	a5,3(s1)
   19ebc:	00f106a3          	sb	a5,13(sp)
    dest = &mcastaddr;
   19ec0:	00810693          	addi	a3,sp,8
   19ec4:	08c0006f          	j	19f50 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   19ec8:	00150513          	addi	a0,a0,1
   19ecc:	0ff57513          	andi	a0,a0,255
   19ed0:	00900793          	li	a5,9
   19ed4:	06a7e263          	bltu	a5,a0,19f38 <etharp_output+0x1c4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   19ed8:	00151713          	slli	a4,a0,0x1
   19edc:	00a70733          	add	a4,a4,a0
   19ee0:	00371693          	slli	a3,a4,0x3
   19ee4:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19ee8:	00d787b3          	add	a5,a5,a3
   19eec:	0147c703          	lbu	a4,20(a5)
   19ef0:	00100793          	li	a5,1
   19ef4:	fce7fae3          	bgeu	a5,a4,19ec8 <etharp_output+0x154>
          (arp_table[i].netif == netif) &&
   19ef8:	00068713          	mv	a4,a3
   19efc:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19f00:	00d787b3          	add	a5,a5,a3
   19f04:	0087a783          	lw	a5,8(a5)
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   19f08:	fc8790e3          	bne	a5,s0,19ec8 <etharp_output+0x154>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
   19f0c:	0004a683          	lw	a3,0(s1)
   19f10:	ac818793          	addi	a5,gp,-1336 # 1fc98 <arp_table>
   19f14:	00e787b3          	add	a5,a5,a4
   19f18:	0047a783          	lw	a5,4(a5)
          (arp_table[i].netif == netif) &&
   19f1c:	faf696e3          	bne	a3,a5,19ec8 <etharp_output+0x154>
        ETHARP_SET_ADDRHINT(netif, i);
   19f20:	96a18223          	sb	a0,-1692(gp) # 1fb34 <etharp_cached_entry>
        return etharp_output_to_arp_index(netif, q, i);
   19f24:	00050613          	mv	a2,a0
   19f28:	00090593          	mv	a1,s2
   19f2c:	00040513          	mv	a0,s0
   19f30:	961ff0ef          	jal	ra,19890 <etharp_output_to_arp_index>
   19f34:	0340006f          	j	19f68 <etharp_output+0x1f4>
    return etharp_query(netif, dst_addr, q);
   19f38:	00090613          	mv	a2,s2
   19f3c:	00048593          	mv	a1,s1
   19f40:	00040513          	mv	a0,s0
   19f44:	aa1ff0ef          	jal	ra,199e4 <etharp_query>
   19f48:	0200006f          	j	19f68 <etharp_output+0x1f4>
    dest = (const struct eth_addr *)&ethbroadcast;
   19f4c:	83418693          	addi	a3,gp,-1996 # 1fa04 <ethbroadcast>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
   19f50:	00001737          	lui	a4,0x1
   19f54:	80070713          	addi	a4,a4,-2048 # 800 <regnum_t6+0x7e1>
   19f58:	02e40613          	addi	a2,s0,46
   19f5c:	00090593          	mv	a1,s2
   19f60:	00040513          	mv	a0,s0
   19f64:	c11ec0ef          	jal	ra,6b74 <ethernet_output>
}
   19f68:	01c12083          	lw	ra,28(sp)
   19f6c:	01812403          	lw	s0,24(sp)
   19f70:	01412483          	lw	s1,20(sp)
   19f74:	01012903          	lw	s2,16(sp)
   19f78:	02010113          	addi	sp,sp,32
   19f7c:	00008067          	ret
            return ERR_RTE;
   19f80:	ffc00513          	li	a0,-4
   19f84:	fe5ff06f          	j	19f68 <etharp_output+0x1f4>

00019f88 <uart_writeAvailability>:
        return *((volatile u32*) address);
   19f88:	00452503          	lw	a0,4(a0)
        return (read_u32(reg + UART_STATUS) >> 16) & 0xFF;
   19f8c:	01055513          	srli	a0,a0,0x10
    }
   19f90:	0ff57513          	andi	a0,a0,255
   19f94:	00008067          	ret

00019f98 <uart_write>:
    static void uart_write(u32 reg, char data){
   19f98:	ff010113          	addi	sp,sp,-16
   19f9c:	00112623          	sw	ra,12(sp)
   19fa0:	00812423          	sw	s0,8(sp)
   19fa4:	00912223          	sw	s1,4(sp)
   19fa8:	00050413          	mv	s0,a0
   19fac:	00058493          	mv	s1,a1
        while(uart_writeAvailability(reg) == 0);
   19fb0:	00040513          	mv	a0,s0
   19fb4:	fd5ff0ef          	jal	ra,19f88 <uart_writeAvailability>
   19fb8:	fe050ce3          	beqz	a0,19fb0 <uart_write+0x18>
        *((volatile u32*) address) = data;
   19fbc:	00942023          	sw	s1,0(s0)
    }
   19fc0:	00c12083          	lw	ra,12(sp)
   19fc4:	00812403          	lw	s0,8(sp)
   19fc8:	00412483          	lw	s1,4(sp)
   19fcc:	01010113          	addi	sp,sp,16
   19fd0:	00008067          	ret

00019fd4 <bsp_printHex>:
    {
   19fd4:	ff010113          	addi	sp,sp,-16
   19fd8:	00112623          	sw	ra,12(sp)
   19fdc:	00812423          	sw	s0,8(sp)
   19fe0:	00912223          	sw	s1,4(sp)
   19fe4:	00050493          	mv	s1,a0
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   19fe8:	01c00413          	li	s0,28
   19fec:	0280006f          	j	1a014 <bsp_printHex+0x40>
            uart_write(BSP_UART_TERMINAL, "0123456789ABCDEF"[(val >> i) % 16]);
   19ff0:	0084d7b3          	srl	a5,s1,s0
   19ff4:	00f7f713          	andi	a4,a5,15
   19ff8:	0001c7b7          	lui	a5,0x1c
   19ffc:	53878793          	addi	a5,a5,1336 # 1c538 <packet_anomaly_detector_means+0x18>
   1a000:	00e787b3          	add	a5,a5,a4
   1a004:	0007c583          	lbu	a1,0(a5)
   1a008:	f8010537          	lui	a0,0xf8010
   1a00c:	f8dff0ef          	jal	ra,19f98 <uart_write>
        for (int i = (4*digits)-4; i >= 0; i -= 4) {
   1a010:	ffc40413          	addi	s0,s0,-4
   1a014:	fc045ee3          	bgez	s0,19ff0 <bsp_printHex+0x1c>
    }
   1a018:	00c12083          	lw	ra,12(sp)
   1a01c:	00812403          	lw	s0,8(sp)
   1a020:	00412483          	lw	s1,4(sp)
   1a024:	01010113          	addi	sp,sp,16
   1a028:	00008067          	ret

0001a02c <bsp_printHex_lower>:
        {
   1a02c:	ff010113          	addi	sp,sp,-16
   1a030:	00112623          	sw	ra,12(sp)
   1a034:	00812423          	sw	s0,8(sp)
   1a038:	00912223          	sw	s1,4(sp)
   1a03c:	00050493          	mv	s1,a0
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   1a040:	01c00413          	li	s0,28
   1a044:	0280006f          	j	1a06c <bsp_printHex_lower+0x40>
                uart_write(BSP_UART_TERMINAL, "0123456789abcdef"[(val >> i) % 16]);
   1a048:	0084d7b3          	srl	a5,s1,s0
   1a04c:	00f7f713          	andi	a4,a5,15
   1a050:	0001c7b7          	lui	a5,0x1c
   1a054:	54c78793          	addi	a5,a5,1356 # 1c54c <packet_anomaly_detector_means+0x2c>
   1a058:	00e787b3          	add	a5,a5,a4
   1a05c:	0007c583          	lbu	a1,0(a5)
   1a060:	f8010537          	lui	a0,0xf8010
   1a064:	f35ff0ef          	jal	ra,19f98 <uart_write>
            for (int i = (4*digits)-4; i >= 0; i -= 4) {
   1a068:	ffc40413          	addi	s0,s0,-4
   1a06c:	fc045ee3          	bgez	s0,1a048 <bsp_printHex_lower+0x1c>
        }
   1a070:	00c12083          	lw	ra,12(sp)
   1a074:	00812403          	lw	s0,8(sp)
   1a078:	00412483          	lw	s1,4(sp)
   1a07c:	01010113          	addi	sp,sp,16
   1a080:	00008067          	ret

0001a084 <bsp_printf_c>:
    {
   1a084:	ff010113          	addi	sp,sp,-16
   1a088:	00112623          	sw	ra,12(sp)
        bsp_putChar(c);
   1a08c:	0ff57593          	andi	a1,a0,255
   1a090:	f8010537          	lui	a0,0xf8010
   1a094:	f05ff0ef          	jal	ra,19f98 <uart_write>
    }
   1a098:	00c12083          	lw	ra,12(sp)
   1a09c:	01010113          	addi	sp,sp,16
   1a0a0:	00008067          	ret

0001a0a4 <bsp_printf_s>:
    {
   1a0a4:	ff010113          	addi	sp,sp,-16
   1a0a8:	00112623          	sw	ra,12(sp)
   1a0ac:	00812423          	sw	s0,8(sp)
   1a0b0:	00050413          	mv	s0,a0
        while (*p)
   1a0b4:	00044583          	lbu	a1,0(s0)
   1a0b8:	00058a63          	beqz	a1,1a0cc <bsp_printf_s+0x28>
            bsp_putChar(*(p++));
   1a0bc:	00140413          	addi	s0,s0,1
   1a0c0:	f8010537          	lui	a0,0xf8010
   1a0c4:	ed5ff0ef          	jal	ra,19f98 <uart_write>
   1a0c8:	fedff06f          	j	1a0b4 <bsp_printf_s+0x10>
    }
   1a0cc:	00c12083          	lw	ra,12(sp)
   1a0d0:	00812403          	lw	s0,8(sp)
   1a0d4:	01010113          	addi	sp,sp,16
   1a0d8:	00008067          	ret

0001a0dc <bsp_printf_d>:
    {
   1a0dc:	fd010113          	addi	sp,sp,-48
   1a0e0:	02112623          	sw	ra,44(sp)
   1a0e4:	02812423          	sw	s0,40(sp)
   1a0e8:	02912223          	sw	s1,36(sp)
   1a0ec:	00050493          	mv	s1,a0
        if (val < 0) {
   1a0f0:	00054663          	bltz	a0,1a0fc <bsp_printf_d+0x20>
    {
   1a0f4:	00010413          	mv	s0,sp
   1a0f8:	02c0006f          	j	1a124 <bsp_printf_d+0x48>
            bsp_printf_c('-');
   1a0fc:	02d00513          	li	a0,45
   1a100:	f85ff0ef          	jal	ra,1a084 <bsp_printf_c>
            val = -val;
   1a104:	409004b3          	neg	s1,s1
   1a108:	fedff06f          	j	1a0f4 <bsp_printf_d+0x18>
            *(p++) = '0' + val % 10;
   1a10c:	00a00713          	li	a4,10
   1a110:	02e4e7b3          	rem	a5,s1,a4
   1a114:	03078793          	addi	a5,a5,48
   1a118:	00f40023          	sb	a5,0(s0)
            val = val / 10;
   1a11c:	02e4c4b3          	div	s1,s1,a4
            *(p++) = '0' + val % 10;
   1a120:	00140413          	addi	s0,s0,1
        while (val || p == buffer) {
   1a124:	fe0494e3          	bnez	s1,1a10c <bsp_printf_d+0x30>
   1a128:	00010793          	mv	a5,sp
   1a12c:	fef400e3          	beq	s0,a5,1a10c <bsp_printf_d+0x30>
   1a130:	0100006f          	j	1a140 <bsp_printf_d+0x64>
            bsp_printf_c(*(--p));
   1a134:	fff40413          	addi	s0,s0,-1
   1a138:	00044503          	lbu	a0,0(s0)
   1a13c:	f49ff0ef          	jal	ra,1a084 <bsp_printf_c>
        while (p != buffer)
   1a140:	00010793          	mv	a5,sp
   1a144:	fef418e3          	bne	s0,a5,1a134 <bsp_printf_d+0x58>
    }
   1a148:	02c12083          	lw	ra,44(sp)
   1a14c:	02812403          	lw	s0,40(sp)
   1a150:	02412483          	lw	s1,36(sp)
   1a154:	03010113          	addi	sp,sp,48
   1a158:	00008067          	ret

0001a15c <bsp_printf_x>:
    {
   1a15c:	ff010113          	addi	sp,sp,-16
   1a160:	00112623          	sw	ra,12(sp)
        for(i=0;i<8;i++)
   1a164:	00000713          	li	a4,0
   1a168:	00700793          	li	a5,7
   1a16c:	02e7c063          	blt	a5,a4,1a18c <bsp_printf_x+0x30>
            if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   1a170:	00271693          	slli	a3,a4,0x2
   1a174:	ff000793          	li	a5,-16
   1a178:	00d797b3          	sll	a5,a5,a3
   1a17c:	00f577b3          	and	a5,a0,a5
   1a180:	00078663          	beqz	a5,1a18c <bsp_printf_x+0x30>
        for(i=0;i<8;i++)
   1a184:	00170713          	addi	a4,a4,1
   1a188:	fe1ff06f          	j	1a168 <bsp_printf_x+0xc>
        bsp_printHex_lower(val);
   1a18c:	ea1ff0ef          	jal	ra,1a02c <bsp_printHex_lower>
    }
   1a190:	00c12083          	lw	ra,12(sp)
   1a194:	01010113          	addi	sp,sp,16
   1a198:	00008067          	ret

0001a19c <bsp_printf_X>:
        {
   1a19c:	ff010113          	addi	sp,sp,-16
   1a1a0:	00112623          	sw	ra,12(sp)
            for(i=0;i<8;i++)
   1a1a4:	00000713          	li	a4,0
   1a1a8:	00700793          	li	a5,7
   1a1ac:	02e7c063          	blt	a5,a4,1a1cc <bsp_printf_X+0x30>
                if((val & (0xFFFFFFF0 <<(4*i))) == 0)
   1a1b0:	00271693          	slli	a3,a4,0x2
   1a1b4:	ff000793          	li	a5,-16
   1a1b8:	00d797b3          	sll	a5,a5,a3
   1a1bc:	00f577b3          	and	a5,a0,a5
   1a1c0:	00078663          	beqz	a5,1a1cc <bsp_printf_X+0x30>
            for(i=0;i<8;i++)
   1a1c4:	00170713          	addi	a4,a4,1
   1a1c8:	fe1ff06f          	j	1a1a8 <bsp_printf_X+0xc>
            bsp_printHex(val);
   1a1cc:	e09ff0ef          	jal	ra,19fd4 <bsp_printHex>
        }
   1a1d0:	00c12083          	lw	ra,12(sp)
   1a1d4:	01010113          	addi	sp,sp,16
   1a1d8:	00008067          	ret

0001a1dc <bsp_printf>:
    {
   1a1dc:	fc010113          	addi	sp,sp,-64
   1a1e0:	00112e23          	sw	ra,28(sp)
   1a1e4:	00812c23          	sw	s0,24(sp)
   1a1e8:	00912a23          	sw	s1,20(sp)
   1a1ec:	00050493          	mv	s1,a0
   1a1f0:	02b12223          	sw	a1,36(sp)
   1a1f4:	02c12423          	sw	a2,40(sp)
   1a1f8:	02d12623          	sw	a3,44(sp)
   1a1fc:	02e12823          	sw	a4,48(sp)
   1a200:	02f12a23          	sw	a5,52(sp)
   1a204:	03012c23          	sw	a6,56(sp)
   1a208:	03112e23          	sw	a7,60(sp)
        va_start(ap, format);
   1a20c:	02410793          	addi	a5,sp,36
   1a210:	00f12623          	sw	a5,12(sp)
        for (i = 0; format[i]; i++)
   1a214:	00000413          	li	s0,0
   1a218:	01c0006f          	j	1a234 <bsp_printf+0x58>
                        bsp_printf_c(va_arg(ap,int));
   1a21c:	00c12783          	lw	a5,12(sp)
   1a220:	00478713          	addi	a4,a5,4
   1a224:	00e12623          	sw	a4,12(sp)
   1a228:	0007a503          	lw	a0,0(a5)
   1a22c:	e59ff0ef          	jal	ra,1a084 <bsp_printf_c>
        for (i = 0; format[i]; i++)
   1a230:	00140413          	addi	s0,s0,1
   1a234:	008487b3          	add	a5,s1,s0
   1a238:	0007c503          	lbu	a0,0(a5)
   1a23c:	0c050263          	beqz	a0,1a300 <bsp_printf+0x124>
            if (format[i] == '%') {
   1a240:	02500793          	li	a5,37
   1a244:	06f50663          	beq	a0,a5,1a2b0 <bsp_printf+0xd4>
                bsp_printf_c(format[i]);
   1a248:	e3dff0ef          	jal	ra,1a084 <bsp_printf_c>
   1a24c:	fe5ff06f          	j	1a230 <bsp_printf+0x54>
                        bsp_printf_s(va_arg(ap,char*));
   1a250:	00c12783          	lw	a5,12(sp)
   1a254:	00478713          	addi	a4,a5,4
   1a258:	00e12623          	sw	a4,12(sp)
   1a25c:	0007a503          	lw	a0,0(a5)
   1a260:	e45ff0ef          	jal	ra,1a0a4 <bsp_printf_s>
                        break;
   1a264:	fcdff06f          	j	1a230 <bsp_printf+0x54>
                        bsp_printf_d(va_arg(ap,int));
   1a268:	00c12783          	lw	a5,12(sp)
   1a26c:	00478713          	addi	a4,a5,4
   1a270:	00e12623          	sw	a4,12(sp)
   1a274:	0007a503          	lw	a0,0(a5)
   1a278:	e65ff0ef          	jal	ra,1a0dc <bsp_printf_d>
                        break;
   1a27c:	fb5ff06f          	j	1a230 <bsp_printf+0x54>
                        bsp_printf_X(va_arg(ap,int));
   1a280:	00c12783          	lw	a5,12(sp)
   1a284:	00478713          	addi	a4,a5,4
   1a288:	00e12623          	sw	a4,12(sp)
   1a28c:	0007a503          	lw	a0,0(a5)
   1a290:	f0dff0ef          	jal	ra,1a19c <bsp_printf_X>
                        break;
   1a294:	f9dff06f          	j	1a230 <bsp_printf+0x54>
                        bsp_printf_x(va_arg(ap,int));
   1a298:	00c12783          	lw	a5,12(sp)
   1a29c:	00478713          	addi	a4,a5,4
   1a2a0:	00e12623          	sw	a4,12(sp)
   1a2a4:	0007a503          	lw	a0,0(a5)
   1a2a8:	eb5ff0ef          	jal	ra,1a15c <bsp_printf_x>
                        break;
   1a2ac:	f85ff06f          	j	1a230 <bsp_printf+0x54>
                while (format[++i]) {
   1a2b0:	00140413          	addi	s0,s0,1
   1a2b4:	008487b3          	add	a5,s1,s0
   1a2b8:	0007c783          	lbu	a5,0(a5)
   1a2bc:	f6078ae3          	beqz	a5,1a230 <bsp_printf+0x54>
                    if (format[i] == 'c') {
   1a2c0:	06300713          	li	a4,99
   1a2c4:	f4e78ce3          	beq	a5,a4,1a21c <bsp_printf+0x40>
                    else if (format[i] == 's') {
   1a2c8:	07300713          	li	a4,115
   1a2cc:	f8e782e3          	beq	a5,a4,1a250 <bsp_printf+0x74>
                    else if (format[i] == 'd') {
   1a2d0:	06400713          	li	a4,100
   1a2d4:	f8e78ae3          	beq	a5,a4,1a268 <bsp_printf+0x8c>
                    else if (format[i] == 'X') {
   1a2d8:	05800713          	li	a4,88
   1a2dc:	fae782e3          	beq	a5,a4,1a280 <bsp_printf+0xa4>
                    else if (format[i] == 'x') {
   1a2e0:	07800713          	li	a4,120
   1a2e4:	fae78ae3          	beq	a5,a4,1a298 <bsp_printf+0xbc>
                    else if (format[i] == 'f') {
   1a2e8:	06600713          	li	a4,102
   1a2ec:	fce792e3          	bne	a5,a4,1a2b0 <bsp_printf+0xd4>
                        bsp_printf_s("<Floating point printing not enable. Please Enable it at bsp.h first...>");
   1a2f0:	0001c537          	lui	a0,0x1c
   1a2f4:	56050513          	addi	a0,a0,1376 # 1c560 <packet_anomaly_detector_means+0x40>
   1a2f8:	dadff0ef          	jal	ra,1a0a4 <bsp_printf_s>
                        break;
   1a2fc:	f35ff06f          	j	1a230 <bsp_printf+0x54>
    }
   1a300:	01c12083          	lw	ra,28(sp)
   1a304:	01812403          	lw	s0,24(sp)
   1a308:	01412483          	lw	s1,20(sp)
   1a30c:	04010113          	addi	sp,sp,64
   1a310:	00008067          	ret

0001a314 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
   1a314:	ff010113          	addi	sp,sp,-16
   1a318:	00112623          	sw	ra,12(sp)
   1a31c:	00812423          	sw	s0,8(sp)
   1a320:	00912223          	sw	s1,4(sp)
   1a324:	00050413          	mv	s0,a0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
   1a328:	96c1a783          	lw	a5,-1684(gp) # 1fb3c <reassdatagrams>
   1a32c:	02a78a63          	beq	a5,a0,1a360 <ip_reass_dequeue_datagram+0x4c>
   1a330:	00058493          	mv	s1,a1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
   1a334:	02058c63          	beqz	a1,1a36c <ip_reass_dequeue_datagram+0x58>
    prev->next = ipr->next;
   1a338:	00042783          	lw	a5,0(s0)
   1a33c:	00f4a023          	sw	a5,0(s1)
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
   1a340:	00040593          	mv	a1,s0
   1a344:	00500513          	li	a0,5
   1a348:	994fa0ef          	jal	ra,144dc <memp_free>
}
   1a34c:	00c12083          	lw	ra,12(sp)
   1a350:	00812403          	lw	s0,8(sp)
   1a354:	00412483          	lw	s1,4(sp)
   1a358:	01010113          	addi	sp,sp,16
   1a35c:	00008067          	ret
    reassdatagrams = ipr->next;
   1a360:	00052703          	lw	a4,0(a0)
   1a364:	96e1a623          	sw	a4,-1684(gp) # 1fb3c <reassdatagrams>
   1a368:	fd9ff06f          	j	1a340 <ip_reass_dequeue_datagram+0x2c>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
   1a36c:	0001f537          	lui	a0,0x1f
   1a370:	ddc50513          	addi	a0,a0,-548 # 1eddc <memp_pools+0x618>
   1a374:	e69ff0ef          	jal	ra,1a1dc <bsp_printf>
   1a378:	fc1ff06f          	j	1a338 <ip_reass_dequeue_datagram+0x24>

0001a37c <ip_reass_free_complete_datagram>:
{
   1a37c:	fe010113          	addi	sp,sp,-32
   1a380:	00112e23          	sw	ra,28(sp)
   1a384:	00812c23          	sw	s0,24(sp)
   1a388:	00912a23          	sw	s1,20(sp)
   1a38c:	01212823          	sw	s2,16(sp)
   1a390:	01312623          	sw	s3,12(sp)
   1a394:	01412423          	sw	s4,8(sp)
   1a398:	01512223          	sw	s5,4(sp)
   1a39c:	00050993          	mv	s3,a0
   1a3a0:	00058a13          	mv	s4,a1
  LWIP_ASSERT("prev != ipr", prev != ipr);
   1a3a4:	04a58263          	beq	a1,a0,1a3e8 <ip_reass_free_complete_datagram+0x6c>
  if (prev != NULL) {
   1a3a8:	000a0c63          	beqz	s4,1a3c0 <ip_reass_free_complete_datagram+0x44>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
   1a3ac:	000a2783          	lw	a5,0(s4)
   1a3b0:	01378863          	beq	a5,s3,1a3c0 <ip_reass_free_complete_datagram+0x44>
   1a3b4:	0001f537          	lui	a0,0x1f
   1a3b8:	e0450513          	addi	a0,a0,-508 # 1ee04 <memp_pools+0x640>
   1a3bc:	e21ff0ef          	jal	ra,1a1dc <bsp_printf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
   1a3c0:	0049a403          	lw	s0,4(s3)
   1a3c4:	00442703          	lw	a4,4(s0)
  if (iprh->start == 0) {
   1a3c8:	00474683          	lbu	a3,4(a4)
   1a3cc:	00574783          	lbu	a5,5(a4)
   1a3d0:	00879793          	slli	a5,a5,0x8
   1a3d4:	00d7e7b3          	or	a5,a5,a3
   1a3d8:	02078063          	beqz	a5,1a3f8 <ip_reass_free_complete_datagram+0x7c>
  u16_t pbufs_freed = 0;
   1a3dc:	00000913          	li	s2,0
  p = ipr->p;
   1a3e0:	0049a483          	lw	s1,4(s3)
  while (p != NULL) {
   1a3e4:	0980006f          	j	1a47c <ip_reass_free_complete_datagram+0x100>
  LWIP_ASSERT("prev != ipr", prev != ipr);
   1a3e8:	0001f537          	lui	a0,0x1f
   1a3ec:	df850513          	addi	a0,a0,-520 # 1edf8 <memp_pools+0x634>
   1a3f0:	dedff0ef          	jal	ra,1a1dc <bsp_printf>
   1a3f4:	fb5ff06f          	j	1a3a8 <ip_reass_free_complete_datagram+0x2c>
    ipr->p = iprh->next_pbuf;
   1a3f8:	00074783          	lbu	a5,0(a4)
   1a3fc:	00174683          	lbu	a3,1(a4)
   1a400:	00869693          	slli	a3,a3,0x8
   1a404:	00f6e6b3          	or	a3,a3,a5
   1a408:	00274783          	lbu	a5,2(a4)
   1a40c:	01079793          	slli	a5,a5,0x10
   1a410:	00d7e6b3          	or	a3,a5,a3
   1a414:	00374783          	lbu	a5,3(a4)
   1a418:	01879793          	slli	a5,a5,0x18
   1a41c:	00d7e7b3          	or	a5,a5,a3
   1a420:	00f9a223          	sw	a5,4(s3)
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
   1a424:	01400613          	li	a2,20
   1a428:	00898593          	addi	a1,s3,8
   1a42c:	00442503          	lw	a0,4(s0)
   1a430:	d94e70ef          	jal	ra,19c4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
   1a434:	00100593          	li	a1,1
   1a438:	00040513          	mv	a0,s0
   1a43c:	e85fb0ef          	jal	ra,162c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
   1a440:	00040513          	mv	a0,s0
   1a444:	bf9f20ef          	jal	ra,d03c <pbuf_clen>
   1a448:	00050913          	mv	s2,a0
    pbuf_free(p);
   1a44c:	00040513          	mv	a0,s0
   1a450:	f00f20ef          	jal	ra,cb50 <pbuf_free>
   1a454:	f8dff06f          	j	1a3e0 <ip_reass_free_complete_datagram+0x64>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
   1a458:	0001f537          	lui	a0,0x1f
   1a45c:	e1850513          	addi	a0,a0,-488 # 1ee18 <memp_pools+0x654>
   1a460:	d7dff0ef          	jal	ra,1a1dc <bsp_printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
   1a464:	01590933          	add	s2,s2,s5
   1a468:	01091913          	slli	s2,s2,0x10
   1a46c:	01095913          	srli	s2,s2,0x10
    pbuf_free(pcur);
   1a470:	00048513          	mv	a0,s1
   1a474:	edcf20ef          	jal	ra,cb50 <pbuf_free>
    p = iprh->next_pbuf;
   1a478:	00040493          	mv	s1,s0
  while (p != NULL) {
   1a47c:	04048663          	beqz	s1,1a4c8 <ip_reass_free_complete_datagram+0x14c>
    iprh = (struct ip_reass_helper *)p->payload;
   1a480:	0044a703          	lw	a4,4(s1)
    p = iprh->next_pbuf;
   1a484:	00074403          	lbu	s0,0(a4)
   1a488:	00174783          	lbu	a5,1(a4)
   1a48c:	00879793          	slli	a5,a5,0x8
   1a490:	0087e7b3          	or	a5,a5,s0
   1a494:	00274403          	lbu	s0,2(a4)
   1a498:	01041413          	slli	s0,s0,0x10
   1a49c:	00f467b3          	or	a5,s0,a5
   1a4a0:	00374403          	lbu	s0,3(a4)
   1a4a4:	01841413          	slli	s0,s0,0x18
   1a4a8:	00f46433          	or	s0,s0,a5
    clen = pbuf_clen(pcur);
   1a4ac:	00048513          	mv	a0,s1
   1a4b0:	b8df20ef          	jal	ra,d03c <pbuf_clen>
   1a4b4:	00050a93          	mv	s5,a0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
   1a4b8:	00a90733          	add	a4,s2,a0
   1a4bc:	000107b7          	lui	a5,0x10
   1a4c0:	faf742e3          	blt	a4,a5,1a464 <ip_reass_free_complete_datagram+0xe8>
   1a4c4:	f95ff06f          	j	1a458 <ip_reass_free_complete_datagram+0xdc>
  ip_reass_dequeue_datagram(ipr, prev);
   1a4c8:	000a0593          	mv	a1,s4
   1a4cc:	00098513          	mv	a0,s3
   1a4d0:	e45ff0ef          	jal	ra,1a314 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
   1a4d4:	9681d783          	lhu	a5,-1688(gp) # 1fb38 <ip_reass_pbufcount>
   1a4d8:	0327ec63          	bltu	a5,s2,1a510 <ip_reass_free_complete_datagram+0x194>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
   1a4dc:	9681d783          	lhu	a5,-1688(gp) # 1fb38 <ip_reass_pbufcount>
   1a4e0:	412787b3          	sub	a5,a5,s2
   1a4e4:	96f19423          	sh	a5,-1688(gp) # 1fb38 <ip_reass_pbufcount>
}
   1a4e8:	00090513          	mv	a0,s2
   1a4ec:	01c12083          	lw	ra,28(sp)
   1a4f0:	01812403          	lw	s0,24(sp)
   1a4f4:	01412483          	lw	s1,20(sp)
   1a4f8:	01012903          	lw	s2,16(sp)
   1a4fc:	00c12983          	lw	s3,12(sp)
   1a500:	00812a03          	lw	s4,8(sp)
   1a504:	00412a83          	lw	s5,4(sp)
   1a508:	02010113          	addi	sp,sp,32
   1a50c:	00008067          	ret
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
   1a510:	0001f537          	lui	a0,0x1f
   1a514:	e3850513          	addi	a0,a0,-456 # 1ee38 <memp_pools+0x674>
   1a518:	cc5ff0ef          	jal	ra,1a1dc <bsp_printf>
   1a51c:	fc1ff06f          	j	1a4dc <ip_reass_free_complete_datagram+0x160>

0001a520 <ip_reass_remove_oldest_datagram>:
{
   1a520:	fe010113          	addi	sp,sp,-32
   1a524:	00112e23          	sw	ra,28(sp)
   1a528:	00812c23          	sw	s0,24(sp)
   1a52c:	00912a23          	sw	s1,20(sp)
   1a530:	01212823          	sw	s2,16(sp)
   1a534:	01312623          	sw	s3,12(sp)
   1a538:	00050413          	mv	s0,a0
   1a53c:	00058993          	mv	s3,a1
  int pbufs_freed = 0, pbufs_freed_current;
   1a540:	00000913          	li	s2,0
   1a544:	0dc0006f          	j	1a620 <ip_reass_remove_oldest_datagram+0x100>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
   1a548:	0187a803          	lw	a6,24(a5) # 10018 <tcp_input+0x19c>
   1a54c:	01044703          	lbu	a4,16(s0)
   1a550:	01144683          	lbu	a3,17(s0)
   1a554:	00869693          	slli	a3,a3,0x8
   1a558:	00e6e6b3          	or	a3,a3,a4
   1a55c:	01244703          	lbu	a4,18(s0)
   1a560:	01071713          	slli	a4,a4,0x10
   1a564:	00d766b3          	or	a3,a4,a3
   1a568:	01344703          	lbu	a4,19(s0)
   1a56c:	01871713          	slli	a4,a4,0x18
   1a570:	00d76733          	or	a4,a4,a3
   1a574:	06e81663          	bne	a6,a4,1a5e0 <ip_reass_remove_oldest_datagram+0xc0>
   1a578:	00c7d683          	lhu	a3,12(a5)
   1a57c:	00444803          	lbu	a6,4(s0)
   1a580:	00544703          	lbu	a4,5(s0)
   1a584:	00871713          	slli	a4,a4,0x8
   1a588:	01076733          	or	a4,a4,a6
   1a58c:	04e69a63          	bne	a3,a4,1a5e0 <ip_reass_remove_oldest_datagram+0xc0>
   1a590:	00c0006f          	j	1a59c <ip_reass_remove_oldest_datagram+0x7c>
          oldest_prev = prev;
   1a594:	00060593          	mv	a1,a2
          oldest = r;
   1a598:	00078513          	mv	a0,a5
      if (r->next != NULL) {
   1a59c:	0007a703          	lw	a4,0(a5)
   1a5a0:	06070063          	beqz	a4,1a600 <ip_reass_remove_oldest_datagram+0xe0>
   1a5a4:	00078613          	mv	a2,a5
   1a5a8:	00070793          	mv	a5,a4
    while (r != NULL) {
   1a5ac:	04078e63          	beqz	a5,1a608 <ip_reass_remove_oldest_datagram+0xe8>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
   1a5b0:	0147a803          	lw	a6,20(a5)
   1a5b4:	00c44703          	lbu	a4,12(s0)
   1a5b8:	00d44683          	lbu	a3,13(s0)
   1a5bc:	00869693          	slli	a3,a3,0x8
   1a5c0:	00e6e6b3          	or	a3,a3,a4
   1a5c4:	00e44703          	lbu	a4,14(s0)
   1a5c8:	01071713          	slli	a4,a4,0x10
   1a5cc:	00d766b3          	or	a3,a4,a3
   1a5d0:	00f44703          	lbu	a4,15(s0)
   1a5d4:	01871713          	slli	a4,a4,0x18
   1a5d8:	00d76733          	or	a4,a4,a3
   1a5dc:	f6e806e3          	beq	a6,a4,1a548 <ip_reass_remove_oldest_datagram+0x28>
        other_datagrams++;
   1a5e0:	00148493          	addi	s1,s1,1
        if (oldest == NULL) {
   1a5e4:	fa0508e3          	beqz	a0,1a594 <ip_reass_remove_oldest_datagram+0x74>
        } else if (r->timer <= oldest->timer) {
   1a5e8:	01f7c683          	lbu	a3,31(a5)
   1a5ec:	01f54703          	lbu	a4,31(a0)
   1a5f0:	fad766e3          	bltu	a4,a3,1a59c <ip_reass_remove_oldest_datagram+0x7c>
          oldest_prev = prev;
   1a5f4:	00060593          	mv	a1,a2
          oldest = r;
   1a5f8:	00078513          	mv	a0,a5
   1a5fc:	fa1ff06f          	j	1a59c <ip_reass_remove_oldest_datagram+0x7c>
      if (r->next != NULL) {
   1a600:	00060793          	mv	a5,a2
   1a604:	fa1ff06f          	j	1a5a4 <ip_reass_remove_oldest_datagram+0x84>
    if (oldest != NULL) {
   1a608:	00050663          	beqz	a0,1a614 <ip_reass_remove_oldest_datagram+0xf4>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
   1a60c:	d71ff0ef          	jal	ra,1a37c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
   1a610:	00a90933          	add	s2,s2,a0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
   1a614:	03395263          	bge	s2,s3,1a638 <ip_reass_remove_oldest_datagram+0x118>
   1a618:	00100793          	li	a5,1
   1a61c:	0097de63          	bge	a5,s1,1a638 <ip_reass_remove_oldest_datagram+0x118>
    r = reassdatagrams;
   1a620:	96c1a783          	lw	a5,-1684(gp) # 1fb3c <reassdatagrams>
    other_datagrams = 0;
   1a624:	00000493          	li	s1,0
    oldest_prev = NULL;
   1a628:	00000593          	li	a1,0
    prev = NULL;
   1a62c:	00000613          	li	a2,0
    oldest = NULL;
   1a630:	00000513          	li	a0,0
    while (r != NULL) {
   1a634:	f79ff06f          	j	1a5ac <ip_reass_remove_oldest_datagram+0x8c>
}
   1a638:	00090513          	mv	a0,s2
   1a63c:	01c12083          	lw	ra,28(sp)
   1a640:	01812403          	lw	s0,24(sp)
   1a644:	01412483          	lw	s1,20(sp)
   1a648:	01012903          	lw	s2,16(sp)
   1a64c:	00c12983          	lw	s3,12(sp)
   1a650:	02010113          	addi	sp,sp,32
   1a654:	00008067          	ret

0001a658 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
   1a658:	ff010113          	addi	sp,sp,-16
   1a65c:	00112623          	sw	ra,12(sp)
   1a660:	00812423          	sw	s0,8(sp)
   1a664:	00050413          	mv	s0,a0
  LWIP_ASSERT("p != NULL", p != NULL);
   1a668:	02050063          	beqz	a0,1a688 <ip_frag_free_pbuf_custom_ref+0x30>
  memp_free(MEMP_FRAG_PBUF, p);
   1a66c:	00040593          	mv	a1,s0
   1a670:	00600513          	li	a0,6
   1a674:	e69f90ef          	jal	ra,144dc <memp_free>
}
   1a678:	00c12083          	lw	ra,12(sp)
   1a67c:	00812403          	lw	s0,8(sp)
   1a680:	01010113          	addi	sp,sp,16
   1a684:	00008067          	ret
  LWIP_ASSERT("p != NULL", p != NULL);
   1a688:	0001d537          	lui	a0,0x1d
   1a68c:	f0850513          	addi	a0,a0,-248 # 1cf08 <lwiperf_txbuf_const+0x728>
   1a690:	b4dff0ef          	jal	ra,1a1dc <bsp_printf>
   1a694:	fd9ff06f          	j	1a66c <ip_frag_free_pbuf_custom_ref+0x14>

0001a698 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
   1a698:	ff010113          	addi	sp,sp,-16
   1a69c:	00112623          	sw	ra,12(sp)
   1a6a0:	00812423          	sw	s0,8(sp)
   1a6a4:	00050413          	mv	s0,a0
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
   1a6a8:	02050463          	beqz	a0,1a6d0 <ipfrag_free_pbuf_custom+0x38>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
   1a6ac:	01442503          	lw	a0,20(s0)
   1a6b0:	00050463          	beqz	a0,1a6b8 <ipfrag_free_pbuf_custom+0x20>
    pbuf_free(pcr->original);
   1a6b4:	c9cf20ef          	jal	ra,cb50 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
   1a6b8:	00040513          	mv	a0,s0
   1a6bc:	f9dff0ef          	jal	ra,1a658 <ip_frag_free_pbuf_custom_ref>
}
   1a6c0:	00c12083          	lw	ra,12(sp)
   1a6c4:	00812403          	lw	s0,8(sp)
   1a6c8:	01010113          	addi	sp,sp,16
   1a6cc:	00008067          	ret
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
   1a6d0:	0001f537          	lui	a0,0x1f
   1a6d4:	e5c50513          	addi	a0,a0,-420 # 1ee5c <memp_pools+0x698>
   1a6d8:	b05ff0ef          	jal	ra,1a1dc <bsp_printf>
   1a6dc:	fd1ff06f          	j	1a6ac <ipfrag_free_pbuf_custom+0x14>

0001a6e0 <ip_reass_chain_frag_into_datagram_and_validate>:
{
   1a6e0:	fe010113          	addi	sp,sp,-32
   1a6e4:	00112e23          	sw	ra,28(sp)
   1a6e8:	00812c23          	sw	s0,24(sp)
   1a6ec:	00912a23          	sw	s1,20(sp)
   1a6f0:	01212823          	sw	s2,16(sp)
   1a6f4:	01312623          	sw	s3,12(sp)
   1a6f8:	01412423          	sw	s4,8(sp)
   1a6fc:	01512223          	sw	s5,4(sp)
   1a700:	00050a93          	mv	s5,a0
   1a704:	00058993          	mv	s3,a1
   1a708:	00060913          	mv	s2,a2
  fraghdr = (struct ip_hdr *)new_p->payload;
   1a70c:	0045a483          	lw	s1,4(a1)
  len = lwip_ntohs(IPH_LEN(fraghdr));
   1a710:	0024c503          	lbu	a0,2(s1)
   1a714:	0034c783          	lbu	a5,3(s1)
   1a718:	00879793          	slli	a5,a5,0x8
   1a71c:	00a7e533          	or	a0,a5,a0
   1a720:	d59ef0ef          	jal	ra,a478 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
   1a724:	0004c783          	lbu	a5,0(s1)
   1a728:	00f7f793          	andi	a5,a5,15
  if (hlen > len) {
   1a72c:	00279793          	slli	a5,a5,0x2
   1a730:	02f57663          	bgeu	a0,a5,1a75c <ip_reass_chain_frag_into_datagram_and_validate+0x7c>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
   1a734:	fff00513          	li	a0,-1
}
   1a738:	01c12083          	lw	ra,28(sp)
   1a73c:	01812403          	lw	s0,24(sp)
   1a740:	01412483          	lw	s1,20(sp)
   1a744:	01012903          	lw	s2,16(sp)
   1a748:	00c12983          	lw	s3,12(sp)
   1a74c:	00812a03          	lw	s4,8(sp)
   1a750:	00412a83          	lw	s5,4(sp)
   1a754:	02010113          	addi	sp,sp,32
   1a758:	00008067          	ret
  len = (u16_t)(len - hlen);
   1a75c:	40f50533          	sub	a0,a0,a5
   1a760:	01051413          	slli	s0,a0,0x10
   1a764:	01045413          	srli	s0,s0,0x10
  offset = IPH_OFFSET_BYTES(fraghdr);
   1a768:	0064c503          	lbu	a0,6(s1)
   1a76c:	0074c783          	lbu	a5,7(s1)
   1a770:	00879793          	slli	a5,a5,0x8
   1a774:	00a7e533          	or	a0,a5,a0
   1a778:	d01ef0ef          	jal	ra,a478 <lwip_htons>
   1a77c:	000027b7          	lui	a5,0x2
   1a780:	fff78793          	addi	a5,a5,-1 # 1fff <_strtol_l.isra.0+0xd7>
   1a784:	00f57633          	and	a2,a0,a5
   1a788:	01061613          	slli	a2,a2,0x10
   1a78c:	01065613          	srli	a2,a2,0x10
   1a790:	00361613          	slli	a2,a2,0x3
   1a794:	01061613          	slli	a2,a2,0x10
   1a798:	01065613          	srli	a2,a2,0x10
  iprh = (struct ip_reass_helper *)new_p->payload;
   1a79c:	0049a483          	lw	s1,4(s3)
  iprh->next_pbuf = NULL;
   1a7a0:	00048023          	sb	zero,0(s1)
   1a7a4:	000480a3          	sb	zero,1(s1)
   1a7a8:	00048123          	sb	zero,2(s1)
   1a7ac:	000481a3          	sb	zero,3(s1)
  iprh->start = offset;
   1a7b0:	00c48223          	sb	a2,4(s1)
   1a7b4:	00865793          	srli	a5,a2,0x8
   1a7b8:	00f482a3          	sb	a5,5(s1)
  iprh->end = (u16_t)(offset + len);
   1a7bc:	00c405b3          	add	a1,s0,a2
   1a7c0:	01059593          	slli	a1,a1,0x10
   1a7c4:	0105d593          	srli	a1,a1,0x10
   1a7c8:	00b48323          	sb	a1,6(s1)
   1a7cc:	0085d793          	srli	a5,a1,0x8
   1a7d0:	00f483a3          	sb	a5,7(s1)
  if (iprh->end < offset) {
   1a7d4:	2ec5ee63          	bltu	a1,a2,1aad0 <ip_reass_chain_frag_into_datagram_and_validate+0x3f0>
  for (q = ipr->p; q != NULL;) {
   1a7d8:	004aa683          	lw	a3,4(s5)
  int valid = 1;
   1a7dc:	00100a13          	li	s4,1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
   1a7e0:	00000413          	li	s0,0
  for (q = ipr->p; q != NULL;) {
   1a7e4:	0e40006f          	j	1a8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1e8>
      iprh->next_pbuf = q;
   1a7e8:	00d48023          	sb	a3,0(s1)
   1a7ec:	0086d713          	srli	a4,a3,0x8
   1a7f0:	00e480a3          	sb	a4,1(s1)
   1a7f4:	0106d713          	srli	a4,a3,0x10
   1a7f8:	00e48123          	sb	a4,2(s1)
   1a7fc:	0186d713          	srli	a4,a3,0x18
   1a800:	00e481a3          	sb	a4,3(s1)
      if (iprh_prev != NULL) {
   1a804:	06040e63          	beqz	s0,1a880 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
   1a808:	00644503          	lbu	a0,6(s0)
   1a80c:	00744703          	lbu	a4,7(s0)
   1a810:	00871713          	slli	a4,a4,0x8
   1a814:	00a76733          	or	a4,a4,a0
   1a818:	2ce66063          	bltu	a2,a4,1aad8 <ip_reass_chain_frag_into_datagram_and_validate+0x3f8>
   1a81c:	0047c603          	lbu	a2,4(a5)
   1a820:	0057c783          	lbu	a5,5(a5)
   1a824:	00879793          	slli	a5,a5,0x8
   1a828:	00c7e7b3          	or	a5,a5,a2
   1a82c:	2ab7ea63          	bltu	a5,a1,1aae0 <ip_reass_chain_frag_into_datagram_and_validate+0x400>
        iprh_prev->next_pbuf = new_p;
   1a830:	01340023          	sb	s3,0(s0)
   1a834:	0089d793          	srli	a5,s3,0x8
   1a838:	00f400a3          	sb	a5,1(s0)
   1a83c:	0109d793          	srli	a5,s3,0x10
   1a840:	00f40123          	sb	a5,2(s0)
   1a844:	0189d793          	srli	a5,s3,0x18
   1a848:	00f401a3          	sb	a5,3(s0)
        if (iprh_prev->end != iprh->start) {
   1a84c:	0044c603          	lbu	a2,4(s1)
   1a850:	0054c783          	lbu	a5,5(s1)
   1a854:	00879793          	slli	a5,a5,0x8
   1a858:	00c7e7b3          	or	a5,a5,a2
   1a85c:	00f70463          	beq	a4,a5,1a864 <ip_reass_chain_frag_into_datagram_and_validate+0x184>
          valid = 0;
   1a860:	00000a13          	li	s4,0
  if (q == NULL) {
   1a864:	0a068c63          	beqz	a3,1a91c <ip_reass_chain_frag_into_datagram_and_validate+0x23c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
   1a868:	14091863          	bnez	s2,1a9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d8>
   1a86c:	01eac783          	lbu	a5,30(s5)
   1a870:	0017f793          	andi	a5,a5,1
   1a874:	14079263          	bnez	a5,1a9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d8>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
   1a878:	00090513          	mv	a0,s2
   1a87c:	ebdff06f          	j	1a738 <ip_reass_chain_frag_into_datagram_and_validate+0x58>
        if (iprh->end > iprh_tmp->start) {
   1a880:	0047c703          	lbu	a4,4(a5)
   1a884:	0057c783          	lbu	a5,5(a5)
   1a888:	00879793          	slli	a5,a5,0x8
   1a88c:	00e7e7b3          	or	a5,a5,a4
   1a890:	24b7ec63          	bltu	a5,a1,1aae8 <ip_reass_chain_frag_into_datagram_and_validate+0x408>
        ipr->p = new_p;
   1a894:	013aa223          	sw	s3,4(s5)
   1a898:	fcdff06f          	j	1a864 <ip_reass_chain_frag_into_datagram_and_validate+0x184>
    q = iprh_tmp->next_pbuf;
   1a89c:	0007c683          	lbu	a3,0(a5)
   1a8a0:	0017c703          	lbu	a4,1(a5)
   1a8a4:	00871713          	slli	a4,a4,0x8
   1a8a8:	00d76733          	or	a4,a4,a3
   1a8ac:	0027c683          	lbu	a3,2(a5)
   1a8b0:	01069693          	slli	a3,a3,0x10
   1a8b4:	00e6e733          	or	a4,a3,a4
   1a8b8:	0037c683          	lbu	a3,3(a5)
   1a8bc:	01869693          	slli	a3,a3,0x18
   1a8c0:	00e6e6b3          	or	a3,a3,a4
    iprh_prev = iprh_tmp;
   1a8c4:	00078413          	mv	s0,a5
  for (q = ipr->p; q != NULL;) {
   1a8c8:	f8068ee3          	beqz	a3,1a864 <ip_reass_chain_frag_into_datagram_and_validate+0x184>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
   1a8cc:	0046a783          	lw	a5,4(a3)
    if (iprh->start < iprh_tmp->start) {
   1a8d0:	0047c503          	lbu	a0,4(a5)
   1a8d4:	0057c703          	lbu	a4,5(a5)
   1a8d8:	00871713          	slli	a4,a4,0x8
   1a8dc:	00a76733          	or	a4,a4,a0
   1a8e0:	f0e664e3          	bltu	a2,a4,1a7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x108>
    } else if (iprh->start == iprh_tmp->start) {
   1a8e4:	20c70663          	beq	a4,a2,1aaf0 <ip_reass_chain_frag_into_datagram_and_validate+0x410>
    } else if (iprh->start < iprh_tmp->end) {
   1a8e8:	0067c503          	lbu	a0,6(a5)
   1a8ec:	0077c683          	lbu	a3,7(a5)
   1a8f0:	00869693          	slli	a3,a3,0x8
   1a8f4:	00a6e6b3          	or	a3,a3,a0
   1a8f8:	20d66063          	bltu	a2,a3,1aaf8 <ip_reass_chain_frag_into_datagram_and_validate+0x418>
      if (iprh_prev != NULL) {
   1a8fc:	fa0400e3          	beqz	s0,1a89c <ip_reass_chain_frag_into_datagram_and_validate+0x1bc>
        if (iprh_prev->end != iprh_tmp->start) {
   1a900:	00644503          	lbu	a0,6(s0)
   1a904:	00744683          	lbu	a3,7(s0)
   1a908:	00869693          	slli	a3,a3,0x8
   1a90c:	00a6e6b3          	or	a3,a3,a0
   1a910:	f8d706e3          	beq	a4,a3,1a89c <ip_reass_chain_frag_into_datagram_and_validate+0x1bc>
          valid = 0;
   1a914:	00000a13          	li	s4,0
   1a918:	f85ff06f          	j	1a89c <ip_reass_chain_frag_into_datagram_and_validate+0x1bc>
    if (iprh_prev != NULL) {
   1a91c:	08040063          	beqz	s0,1a99c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
   1a920:	00644783          	lbu	a5,6(s0)
   1a924:	00744703          	lbu	a4,7(s0)
   1a928:	00871713          	slli	a4,a4,0x8
   1a92c:	00f76733          	or	a4,a4,a5
   1a930:	0044c683          	lbu	a3,4(s1)
   1a934:	0054c783          	lbu	a5,5(s1)
   1a938:	00879793          	slli	a5,a5,0x8
   1a93c:	00d7e7b3          	or	a5,a5,a3
   1a940:	04e7e663          	bltu	a5,a4,1a98c <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
      iprh_prev->next_pbuf = new_p;
   1a944:	01340023          	sb	s3,0(s0)
   1a948:	0089d793          	srli	a5,s3,0x8
   1a94c:	00f400a3          	sb	a5,1(s0)
   1a950:	0109d793          	srli	a5,s3,0x10
   1a954:	00f40123          	sb	a5,2(s0)
   1a958:	0189d993          	srli	s3,s3,0x18
   1a95c:	013401a3          	sb	s3,3(s0)
      if (iprh_prev->end != iprh->start) {
   1a960:	00644783          	lbu	a5,6(s0)
   1a964:	00744703          	lbu	a4,7(s0)
   1a968:	00871713          	slli	a4,a4,0x8
   1a96c:	00f76733          	or	a4,a4,a5
   1a970:	0044c683          	lbu	a3,4(s1)
   1a974:	0054c783          	lbu	a5,5(s1)
   1a978:	00879793          	slli	a5,a5,0x8
   1a97c:	00d7e7b3          	or	a5,a5,a3
   1a980:	eef704e3          	beq	a4,a5,1a868 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        valid = 0;
   1a984:	00000a13          	li	s4,0
   1a988:	ee1ff06f          	j	1a868 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
   1a98c:	0001f537          	lui	a0,0x1f
   1a990:	e6850513          	addi	a0,a0,-408 # 1ee68 <memp_pools+0x6a4>
   1a994:	849ff0ef          	jal	ra,1a1dc <bsp_printf>
   1a998:	fadff06f          	j	1a944 <ip_reass_chain_frag_into_datagram_and_validate+0x264>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
   1a99c:	004aa783          	lw	a5,4(s5)
   1a9a0:	00078863          	beqz	a5,1a9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>
   1a9a4:	0001f537          	lui	a0,0x1f
   1a9a8:	e8850513          	addi	a0,a0,-376 # 1ee88 <memp_pools+0x6c4>
   1a9ac:	831ff0ef          	jal	ra,1a1dc <bsp_printf>
      ipr->p = new_p;
   1a9b0:	013aa223          	sw	s3,4(s5)
   1a9b4:	eb5ff06f          	j	1a868 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    if (valid) {
   1a9b8:	100a0863          	beqz	s4,1aac8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
   1a9bc:	004aa783          	lw	a5,4(s5)
   1a9c0:	0e078e63          	beqz	a5,1aabc <ip_reass_chain_frag_into_datagram_and_validate+0x3dc>
   1a9c4:	0047a583          	lw	a1,4(a5)
   1a9c8:	0045c703          	lbu	a4,4(a1)
   1a9cc:	0055c783          	lbu	a5,5(a1)
   1a9d0:	00879793          	slli	a5,a5,0x8
   1a9d4:	00e7e7b3          	or	a5,a5,a4
   1a9d8:	0e079663          	bnez	a5,1aac4 <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
        q = iprh->next_pbuf;
   1a9dc:	0004c703          	lbu	a4,0(s1)
   1a9e0:	0014c783          	lbu	a5,1(s1)
   1a9e4:	00879793          	slli	a5,a5,0x8
   1a9e8:	00e7e733          	or	a4,a5,a4
   1a9ec:	0024c783          	lbu	a5,2(s1)
   1a9f0:	01079793          	slli	a5,a5,0x10
   1a9f4:	00e7e7b3          	or	a5,a5,a4
   1a9f8:	0034c703          	lbu	a4,3(s1)
   1a9fc:	01871713          	slli	a4,a4,0x18
   1aa00:	00f76733          	or	a4,a4,a5
        while (q != NULL) {
   1aa04:	06070263          	beqz	a4,1aa68 <ip_reass_chain_frag_into_datagram_and_validate+0x388>
          iprh = (struct ip_reass_helper *)q->payload;
   1aa08:	00472783          	lw	a5,4(a4)
          if (iprh_prev->end != iprh->start) {
   1aa0c:	0064c703          	lbu	a4,6(s1)
   1aa10:	0074c683          	lbu	a3,7(s1)
   1aa14:	00869693          	slli	a3,a3,0x8
   1aa18:	00e6e6b3          	or	a3,a3,a4
   1aa1c:	0047c603          	lbu	a2,4(a5)
   1aa20:	0057c703          	lbu	a4,5(a5)
   1aa24:	00871713          	slli	a4,a4,0x8
   1aa28:	00c76733          	or	a4,a4,a2
   1aa2c:	02e69a63          	bne	a3,a4,1aa60 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
          q = iprh->next_pbuf;
   1aa30:	0007c703          	lbu	a4,0(a5)
   1aa34:	0017c683          	lbu	a3,1(a5)
   1aa38:	00869693          	slli	a3,a3,0x8
   1aa3c:	00e6e6b3          	or	a3,a3,a4
   1aa40:	0027c703          	lbu	a4,2(a5)
   1aa44:	01071713          	slli	a4,a4,0x10
   1aa48:	00d766b3          	or	a3,a4,a3
   1aa4c:	0037c703          	lbu	a4,3(a5)
   1aa50:	01871713          	slli	a4,a4,0x18
   1aa54:	00d76733          	or	a4,a4,a3
          iprh = (struct ip_reass_helper *)q->payload;
   1aa58:	00078493          	mv	s1,a5
   1aa5c:	fa9ff06f          	j	1aa04 <ip_reass_chain_frag_into_datagram_and_validate+0x324>
   1aa60:	00078493          	mv	s1,a5
            valid = 0;
   1aa64:	00000a13          	li	s4,0
        if (valid) {
   1aa68:	060a0063          	beqz	s4,1aac8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
          LWIP_ASSERT("sanity check",
   1aa6c:	04958063          	beq	a1,s1,1aaac <ip_reass_chain_frag_into_datagram_and_validate+0x3cc>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
   1aa70:	0004c783          	lbu	a5,0(s1)
   1aa74:	0014c703          	lbu	a4,1(s1)
   1aa78:	00871713          	slli	a4,a4,0x8
   1aa7c:	00f76733          	or	a4,a4,a5
   1aa80:	0024c783          	lbu	a5,2(s1)
   1aa84:	01079793          	slli	a5,a5,0x10
   1aa88:	00e7e733          	or	a4,a5,a4
   1aa8c:	0034c783          	lbu	a5,3(s1)
   1aa90:	01879793          	slli	a5,a5,0x18
   1aa94:	00e7e7b3          	or	a5,a5,a4
   1aa98:	02078863          	beqz	a5,1aac8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
   1aa9c:	0001f537          	lui	a0,0x1f
   1aaa0:	ed050513          	addi	a0,a0,-304 # 1eed0 <memp_pools+0x70c>
   1aaa4:	f38ff0ef          	jal	ra,1a1dc <bsp_printf>
   1aaa8:	0200006f          	j	1aac8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
          LWIP_ASSERT("sanity check",
   1aaac:	0001f537          	lui	a0,0x1f
   1aab0:	ec050513          	addi	a0,a0,-320 # 1eec0 <memp_pools+0x6fc>
   1aab4:	f28ff0ef          	jal	ra,1a1dc <bsp_printf>
   1aab8:	fb9ff06f          	j	1aa70 <ip_reass_chain_frag_into_datagram_and_validate+0x390>
        valid = 0;
   1aabc:	00000a13          	li	s4,0
   1aac0:	0080006f          	j	1aac8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
   1aac4:	00000a13          	li	s4,0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
   1aac8:	01403533          	snez	a0,s4
   1aacc:	c6dff06f          	j	1a738 <ip_reass_chain_frag_into_datagram_and_validate+0x58>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
   1aad0:	fff00513          	li	a0,-1
   1aad4:	c65ff06f          	j	1a738 <ip_reass_chain_frag_into_datagram_and_validate+0x58>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
   1aad8:	fff00513          	li	a0,-1
   1aadc:	c5dff06f          	j	1a738 <ip_reass_chain_frag_into_datagram_and_validate+0x58>
   1aae0:	fff00513          	li	a0,-1
   1aae4:	c55ff06f          	j	1a738 <ip_reass_chain_frag_into_datagram_and_validate+0x58>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
   1aae8:	fff00513          	li	a0,-1
   1aaec:	c4dff06f          	j	1a738 <ip_reass_chain_frag_into_datagram_and_validate+0x58>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
   1aaf0:	fff00513          	li	a0,-1
   1aaf4:	c45ff06f          	j	1a738 <ip_reass_chain_frag_into_datagram_and_validate+0x58>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
   1aaf8:	fff00513          	li	a0,-1
   1aafc:	c3dff06f          	j	1a738 <ip_reass_chain_frag_into_datagram_and_validate+0x58>

0001ab00 <ip_frag_alloc_pbuf_custom_ref>:
{
   1ab00:	ff010113          	addi	sp,sp,-16
   1ab04:	00112623          	sw	ra,12(sp)
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
   1ab08:	00600513          	li	a0,6
   1ab0c:	941f90ef          	jal	ra,1444c <memp_malloc>
}
   1ab10:	00c12083          	lw	ra,12(sp)
   1ab14:	01010113          	addi	sp,sp,16
   1ab18:	00008067          	ret

0001ab1c <ip_reass_enqueue_new_datagram>:
{
   1ab1c:	ff010113          	addi	sp,sp,-16
   1ab20:	00112623          	sw	ra,12(sp)
   1ab24:	00812423          	sw	s0,8(sp)
   1ab28:	00912223          	sw	s1,4(sp)
   1ab2c:	01212023          	sw	s2,0(sp)
   1ab30:	00050493          	mv	s1,a0
   1ab34:	00058913          	mv	s2,a1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
   1ab38:	00500513          	li	a0,5
   1ab3c:	911f90ef          	jal	ra,1444c <memp_malloc>
   1ab40:	00050413          	mv	s0,a0
  if (ipr == NULL) {
   1ab44:	04050a63          	beqz	a0,1ab98 <ip_reass_enqueue_new_datagram+0x7c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
   1ab48:	01c00613          	li	a2,28
   1ab4c:	00000593          	li	a1,0
   1ab50:	00440513          	addi	a0,s0,4
   1ab54:	8ace70ef          	jal	ra,1c00 <memset>
  ipr->timer = IP_REASS_MAXAGE;
   1ab58:	00f00793          	li	a5,15
   1ab5c:	00f40fa3          	sb	a5,31(s0)
  ipr->next = reassdatagrams;
   1ab60:	96c1a703          	lw	a4,-1684(gp) # 1fb3c <reassdatagrams>
   1ab64:	00e42023          	sw	a4,0(s0)
  reassdatagrams = ipr;
   1ab68:	9681a623          	sw	s0,-1684(gp) # 1fb3c <reassdatagrams>
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
   1ab6c:	01400613          	li	a2,20
   1ab70:	00048593          	mv	a1,s1
   1ab74:	00840513          	addi	a0,s0,8
   1ab78:	e4de60ef          	jal	ra,19c4 <memcpy>
}
   1ab7c:	00040513          	mv	a0,s0
   1ab80:	00c12083          	lw	ra,12(sp)
   1ab84:	00812403          	lw	s0,8(sp)
   1ab88:	00412483          	lw	s1,4(sp)
   1ab8c:	00012903          	lw	s2,0(sp)
   1ab90:	01010113          	addi	sp,sp,16
   1ab94:	00008067          	ret
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
   1ab98:	00090593          	mv	a1,s2
   1ab9c:	00048513          	mv	a0,s1
   1aba0:	981ff0ef          	jal	ra,1a520 <ip_reass_remove_oldest_datagram>
   1aba4:	03255063          	bge	a0,s2,1abc4 <ip_reass_enqueue_new_datagram+0xa8>
    if (ipr == NULL)
   1aba8:	fa0410e3          	bnez	s0,1ab48 <ip_reass_enqueue_new_datagram+0x2c>
      IPFRAG_STATS_INC(ip_frag.memerr);
   1abac:	000227b7          	lui	a5,0x22
   1abb0:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1abb4:	03c7d703          	lhu	a4,60(a5)
   1abb8:	00170713          	addi	a4,a4,1
   1abbc:	02e79e23          	sh	a4,60(a5)
      return NULL;
   1abc0:	fbdff06f          	j	1ab7c <ip_reass_enqueue_new_datagram+0x60>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
   1abc4:	00500513          	li	a0,5
   1abc8:	885f90ef          	jal	ra,1444c <memp_malloc>
   1abcc:	00050413          	mv	s0,a0
   1abd0:	fd9ff06f          	j	1aba8 <ip_reass_enqueue_new_datagram+0x8c>

0001abd4 <ip_reass_tmr>:
{
   1abd4:	ff010113          	addi	sp,sp,-16
   1abd8:	00112623          	sw	ra,12(sp)
   1abdc:	00812423          	sw	s0,8(sp)
   1abe0:	00912223          	sw	s1,4(sp)
  r = reassdatagrams;
   1abe4:	96c1a503          	lw	a0,-1684(gp) # 1fb3c <reassdatagrams>
  struct ip_reassdata *r, *prev = NULL;
   1abe8:	00000413          	li	s0,0
  while (r != NULL) {
   1abec:	0140006f          	j	1ac00 <ip_reass_tmr+0x2c>
      r = r->next;
   1abf0:	00052483          	lw	s1,0(a0)
      ip_reass_free_complete_datagram(tmp, prev);
   1abf4:	00040593          	mv	a1,s0
   1abf8:	f84ff0ef          	jal	ra,1a37c <ip_reass_free_complete_datagram>
      r = r->next;
   1abfc:	00048513          	mv	a0,s1
  while (r != NULL) {
   1ac00:	02050063          	beqz	a0,1ac20 <ip_reass_tmr+0x4c>
    if (r->timer > 0) {
   1ac04:	01f54783          	lbu	a5,31(a0)
   1ac08:	fe0784e3          	beqz	a5,1abf0 <ip_reass_tmr+0x1c>
      r->timer--;
   1ac0c:	fff78793          	addi	a5,a5,-1
   1ac10:	00f50fa3          	sb	a5,31(a0)
      prev = r;
   1ac14:	00050413          	mv	s0,a0
      r = r->next;
   1ac18:	00052503          	lw	a0,0(a0)
   1ac1c:	fe5ff06f          	j	1ac00 <ip_reass_tmr+0x2c>
}
   1ac20:	00c12083          	lw	ra,12(sp)
   1ac24:	00812403          	lw	s0,8(sp)
   1ac28:	00412483          	lw	s1,4(sp)
   1ac2c:	01010113          	addi	sp,sp,16
   1ac30:	00008067          	ret

0001ac34 <ip4_reass>:
{
   1ac34:	fe010113          	addi	sp,sp,-32
   1ac38:	00112e23          	sw	ra,28(sp)
   1ac3c:	00812c23          	sw	s0,24(sp)
   1ac40:	00912a23          	sw	s1,20(sp)
   1ac44:	01212823          	sw	s2,16(sp)
   1ac48:	01312623          	sw	s3,12(sp)
   1ac4c:	01412423          	sw	s4,8(sp)
   1ac50:	01512223          	sw	s5,4(sp)
   1ac54:	00050993          	mv	s3,a0
  IPFRAG_STATS_INC(ip_frag.recv);
   1ac58:	000227b7          	lui	a5,0x22
   1ac5c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1ac60:	0327d703          	lhu	a4,50(a5)
   1ac64:	00170713          	addi	a4,a4,1
   1ac68:	02e79923          	sh	a4,50(a5)
  fraghdr = (struct ip_hdr *)p->payload;
   1ac6c:	00452403          	lw	s0,4(a0)
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
   1ac70:	00044783          	lbu	a5,0(s0)
   1ac74:	00f7f793          	andi	a5,a5,15
   1ac78:	00279793          	slli	a5,a5,0x2
   1ac7c:	01400713          	li	a4,20
   1ac80:	08e79663          	bne	a5,a4,1ad0c <ip4_reass+0xd8>
  offset = IPH_OFFSET_BYTES(fraghdr);
   1ac84:	00644503          	lbu	a0,6(s0)
   1ac88:	00744783          	lbu	a5,7(s0)
   1ac8c:	00879793          	slli	a5,a5,0x8
   1ac90:	00a7e533          	or	a0,a5,a0
   1ac94:	fe4ef0ef          	jal	ra,a478 <lwip_htons>
   1ac98:	000027b7          	lui	a5,0x2
   1ac9c:	fff78793          	addi	a5,a5,-1 # 1fff <_strtol_l.isra.0+0xd7>
   1aca0:	00f57933          	and	s2,a0,a5
   1aca4:	01091913          	slli	s2,s2,0x10
   1aca8:	01095913          	srli	s2,s2,0x10
   1acac:	00391913          	slli	s2,s2,0x3
   1acb0:	01091913          	slli	s2,s2,0x10
   1acb4:	01095913          	srli	s2,s2,0x10
  len = lwip_ntohs(IPH_LEN(fraghdr));
   1acb8:	00244503          	lbu	a0,2(s0)
   1acbc:	00344783          	lbu	a5,3(s0)
   1acc0:	00879793          	slli	a5,a5,0x8
   1acc4:	00a7e533          	or	a0,a5,a0
   1acc8:	fb0ef0ef          	jal	ra,a478 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
   1accc:	00044783          	lbu	a5,0(s0)
   1acd0:	00f7f793          	andi	a5,a5,15
  if (hlen > len) {
   1acd4:	00279793          	slli	a5,a5,0x2
   1acd8:	04f56463          	bltu	a0,a5,1ad20 <ip4_reass+0xec>
  len = (u16_t)(len - hlen);
   1acdc:	40f50a33          	sub	s4,a0,a5
   1ace0:	010a1a13          	slli	s4,s4,0x10
   1ace4:	010a5a13          	srli	s4,s4,0x10
  clen = pbuf_clen(p);
   1ace8:	00098513          	mv	a0,s3
   1acec:	b50f20ef          	jal	ra,d03c <pbuf_clen>
   1acf0:	00050a93          	mv	s5,a0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
   1acf4:	9681d783          	lhu	a5,-1688(gp) # 1fb38 <ip_reass_pbufcount>
   1acf8:	00a787b3          	add	a5,a5,a0
   1acfc:	00a00713          	li	a4,10
   1ad00:	06f76463          	bltu	a4,a5,1ad68 <ip4_reass+0x134>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
   1ad04:	96c1a483          	lw	s1,-1684(gp) # 1fb3c <reassdatagrams>
   1ad08:	09c0006f          	j	1ada4 <ip4_reass+0x170>
    IPFRAG_STATS_INC(ip_frag.err);
   1ad0c:	000227b7          	lui	a5,0x22
   1ad10:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1ad14:	0447d703          	lhu	a4,68(a5)
   1ad18:	00170713          	addi	a4,a4,1
   1ad1c:	04e79223          	sh	a4,68(a5)
  IPFRAG_STATS_INC(ip_frag.drop);
   1ad20:	000227b7          	lui	a5,0x22
   1ad24:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1ad28:	0367d703          	lhu	a4,54(a5)
   1ad2c:	00170713          	addi	a4,a4,1
   1ad30:	02e79b23          	sh	a4,54(a5)
  pbuf_free(p);
   1ad34:	00098513          	mv	a0,s3
   1ad38:	e19f10ef          	jal	ra,cb50 <pbuf_free>
  return NULL;
   1ad3c:	00000913          	li	s2,0
}
   1ad40:	00090513          	mv	a0,s2
   1ad44:	01c12083          	lw	ra,28(sp)
   1ad48:	01812403          	lw	s0,24(sp)
   1ad4c:	01412483          	lw	s1,20(sp)
   1ad50:	01012903          	lw	s2,16(sp)
   1ad54:	00c12983          	lw	s3,12(sp)
   1ad58:	00812a03          	lw	s4,8(sp)
   1ad5c:	00412a83          	lw	s5,4(sp)
   1ad60:	02010113          	addi	sp,sp,32
   1ad64:	00008067          	ret
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
   1ad68:	00050593          	mv	a1,a0
   1ad6c:	00040513          	mv	a0,s0
   1ad70:	fb0ff0ef          	jal	ra,1a520 <ip_reass_remove_oldest_datagram>
   1ad74:	00050a63          	beqz	a0,1ad88 <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
   1ad78:	9681d783          	lhu	a5,-1688(gp) # 1fb38 <ip_reass_pbufcount>
   1ad7c:	015787b3          	add	a5,a5,s5
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
   1ad80:	00a00713          	li	a4,10
   1ad84:	f8f770e3          	bgeu	a4,a5,1ad04 <ip4_reass+0xd0>
      IPFRAG_STATS_INC(ip_frag.memerr);
   1ad88:	000227b7          	lui	a5,0x22
   1ad8c:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1ad90:	03c7d703          	lhu	a4,60(a5)
   1ad94:	00170713          	addi	a4,a4,1
   1ad98:	02e79e23          	sh	a4,60(a5)
      goto nullreturn;
   1ad9c:	f85ff06f          	j	1ad20 <ip4_reass+0xec>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
   1ada0:	0004a483          	lw	s1,0(s1)
   1ada4:	08048863          	beqz	s1,1ae34 <ip4_reass+0x200>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
   1ada8:	0144a683          	lw	a3,20(s1)
   1adac:	00c44783          	lbu	a5,12(s0)
   1adb0:	00d44703          	lbu	a4,13(s0)
   1adb4:	00871713          	slli	a4,a4,0x8
   1adb8:	00f76733          	or	a4,a4,a5
   1adbc:	00e44783          	lbu	a5,14(s0)
   1adc0:	01079793          	slli	a5,a5,0x10
   1adc4:	00e7e733          	or	a4,a5,a4
   1adc8:	00f44783          	lbu	a5,15(s0)
   1adcc:	01879793          	slli	a5,a5,0x18
   1add0:	00e7e7b3          	or	a5,a5,a4
   1add4:	fcf696e3          	bne	a3,a5,1ada0 <ip4_reass+0x16c>
   1add8:	0184a683          	lw	a3,24(s1)
   1addc:	01044783          	lbu	a5,16(s0)
   1ade0:	01144703          	lbu	a4,17(s0)
   1ade4:	00871713          	slli	a4,a4,0x8
   1ade8:	00f76733          	or	a4,a4,a5
   1adec:	01244783          	lbu	a5,18(s0)
   1adf0:	01079793          	slli	a5,a5,0x10
   1adf4:	00e7e733          	or	a4,a5,a4
   1adf8:	01344783          	lbu	a5,19(s0)
   1adfc:	01879793          	slli	a5,a5,0x18
   1ae00:	00e7e7b3          	or	a5,a5,a4
   1ae04:	f8f69ee3          	bne	a3,a5,1ada0 <ip4_reass+0x16c>
   1ae08:	00c4d703          	lhu	a4,12(s1)
   1ae0c:	00444683          	lbu	a3,4(s0)
   1ae10:	00544783          	lbu	a5,5(s0)
   1ae14:	00879793          	slli	a5,a5,0x8
   1ae18:	00d7e7b3          	or	a5,a5,a3
   1ae1c:	f8f712e3          	bne	a4,a5,1ada0 <ip4_reass+0x16c>
      IPFRAG_STATS_INC(ip_frag.cachehit);
   1ae20:	000227b7          	lui	a5,0x22
   1ae24:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1ae28:	0467d703          	lhu	a4,70(a5)
   1ae2c:	00170713          	addi	a4,a4,1
   1ae30:	04e79323          	sh	a4,70(a5)
  if (ipr == NULL) {
   1ae34:	0a048263          	beqz	s1,1aed8 <ip4_reass+0x2a4>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
   1ae38:	00644503          	lbu	a0,6(s0)
   1ae3c:	00744783          	lbu	a5,7(s0)
   1ae40:	00879793          	slli	a5,a5,0x8
   1ae44:	00a7e533          	or	a0,a5,a0
   1ae48:	e30ef0ef          	jal	ra,a478 <lwip_htons>
   1ae4c:	000027b7          	lui	a5,0x2
   1ae50:	fff78793          	addi	a5,a5,-1 # 1fff <_strtol_l.isra.0+0xd7>
   1ae54:	00f577b3          	and	a5,a0,a5
   1ae58:	01079793          	slli	a5,a5,0x10
   1ae5c:	0107d793          	srli	a5,a5,0x10
   1ae60:	08078863          	beqz	a5,1aef0 <ip4_reass+0x2bc>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
   1ae64:	00644403          	lbu	s0,6(s0)
   1ae68:	02047413          	andi	s0,s0,32
   1ae6c:	00143613          	seqz	a2,s0
  if (is_last) {
   1ae70:	02041063          	bnez	s0,1ae90 <ip4_reass+0x25c>
    u16_t datagram_len = (u16_t)(offset + len);
   1ae74:	014907b3          	add	a5,s2,s4
   1ae78:	01079793          	slli	a5,a5,0x10
   1ae7c:	0107d793          	srli	a5,a5,0x10
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
   1ae80:	1d27ee63          	bltu	a5,s2,1b05c <ip4_reass+0x428>
   1ae84:	00010737          	lui	a4,0x10
   1ae88:	feb70713          	addi	a4,a4,-21 # ffeb <tcp_input+0x16f>
   1ae8c:	1cf76863          	bltu	a4,a5,1b05c <ip4_reass+0x428>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
   1ae90:	00098593          	mv	a1,s3
   1ae94:	00048513          	mv	a0,s1
   1ae98:	849ff0ef          	jal	ra,1a6e0 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
   1ae9c:	fff00793          	li	a5,-1
   1aea0:	1af50e63          	beq	a0,a5,1b05c <ip4_reass+0x428>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
   1aea4:	9681d703          	lhu	a4,-1688(gp) # 1fb38 <ip_reass_pbufcount>
   1aea8:	00ea8ab3          	add	s5,s5,a4
   1aeac:	97519423          	sh	s5,-1688(gp) # 1fb38 <ip_reass_pbufcount>
  if (is_last) {
   1aeb0:	00041c63          	bnez	s0,1aec8 <ip4_reass+0x294>
    u16_t datagram_len = (u16_t)(offset + len);
   1aeb4:	01490933          	add	s2,s2,s4
    ipr->datagram_len = datagram_len;
   1aeb8:	01249e23          	sh	s2,28(s1)
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
   1aebc:	01e4c783          	lbu	a5,30(s1)
   1aec0:	0017e793          	ori	a5,a5,1
   1aec4:	00f48f23          	sb	a5,30(s1)
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
   1aec8:	00100793          	li	a5,1
   1aecc:	04f50c63          	beq	a0,a5,1af24 <ip4_reass+0x2f0>
  return NULL;
   1aed0:	00000913          	li	s2,0
   1aed4:	e6dff06f          	j	1ad40 <ip4_reass+0x10c>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
   1aed8:	000a8593          	mv	a1,s5
   1aedc:	00040513          	mv	a0,s0
   1aee0:	c3dff0ef          	jal	ra,1ab1c <ip_reass_enqueue_new_datagram>
   1aee4:	00050493          	mv	s1,a0
    if (ipr == NULL) {
   1aee8:	f6051ee3          	bnez	a0,1ae64 <ip4_reass+0x230>
   1aeec:	e35ff06f          	j	1ad20 <ip4_reass+0xec>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
   1aef0:	00e4d503          	lhu	a0,14(s1)
   1aef4:	d84ef0ef          	jal	ra,a478 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
   1aef8:	000027b7          	lui	a5,0x2
   1aefc:	fff78793          	addi	a5,a5,-1 # 1fff <_strtol_l.isra.0+0xd7>
   1af00:	00f577b3          	and	a5,a0,a5
   1af04:	01079793          	slli	a5,a5,0x10
   1af08:	0107d793          	srli	a5,a5,0x10
   1af0c:	f4078ce3          	beqz	a5,1ae64 <ip4_reass+0x230>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
   1af10:	01400613          	li	a2,20
   1af14:	00040593          	mv	a1,s0
   1af18:	00848513          	addi	a0,s1,8
   1af1c:	aa9e60ef          	jal	ra,19c4 <memcpy>
   1af20:	f45ff06f          	j	1ae64 <ip4_reass+0x230>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
   1af24:	01c4d983          	lhu	s3,28(s1)
   1af28:	01498993          	addi	s3,s3,20
   1af2c:	01099993          	slli	s3,s3,0x10
   1af30:	0109d993          	srli	s3,s3,0x10
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
   1af34:	0044a783          	lw	a5,4(s1)
   1af38:	0047a903          	lw	s2,4(a5)
   1af3c:	00094403          	lbu	s0,0(s2)
   1af40:	00194783          	lbu	a5,1(s2)
   1af44:	00879793          	slli	a5,a5,0x8
   1af48:	0087e433          	or	s0,a5,s0
   1af4c:	00294783          	lbu	a5,2(s2)
   1af50:	01079793          	slli	a5,a5,0x10
   1af54:	0087e7b3          	or	a5,a5,s0
   1af58:	00394403          	lbu	s0,3(s2)
   1af5c:	01841413          	slli	s0,s0,0x18
   1af60:	00f46433          	or	s0,s0,a5
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
   1af64:	01400613          	li	a2,20
   1af68:	00848593          	addi	a1,s1,8
   1af6c:	00090513          	mv	a0,s2
   1af70:	a55e60ef          	jal	ra,19c4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
   1af74:	00098513          	mv	a0,s3
   1af78:	d00ef0ef          	jal	ra,a478 <lwip_htons>
   1af7c:	00a90123          	sb	a0,2(s2)
   1af80:	00855513          	srli	a0,a0,0x8
   1af84:	00a901a3          	sb	a0,3(s2)
    IPH_OFFSET_SET(fraghdr, 0);
   1af88:	00090323          	sb	zero,6(s2)
   1af8c:	000903a3          	sb	zero,7(s2)
    IPH_CHKSUM_SET(fraghdr, 0);
   1af90:	00090523          	sb	zero,10(s2)
   1af94:	000905a3          	sb	zero,11(s2)
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
   1af98:	01400593          	li	a1,20
   1af9c:	00090513          	mv	a0,s2
   1afa0:	d29f90ef          	jal	ra,14cc8 <inet_chksum>
   1afa4:	00a90523          	sb	a0,10(s2)
   1afa8:	00855513          	srli	a0,a0,0x8
   1afac:	00a905a3          	sb	a0,11(s2)
    p = ipr->p;
   1afb0:	0044a903          	lw	s2,4(s1)
    while (r != NULL) {
   1afb4:	0480006f          	j	1affc <ip4_reass+0x3c8>
      iprh = (struct ip_reass_helper *)r->payload;
   1afb8:	00442983          	lw	s3,4(s0)
      pbuf_remove_header(r, IP_HLEN);
   1afbc:	01400593          	li	a1,20
   1afc0:	00040513          	mv	a0,s0
   1afc4:	a89f10ef          	jal	ra,ca4c <pbuf_remove_header>
      pbuf_cat(p, r);
   1afc8:	00040593          	mv	a1,s0
   1afcc:	00090513          	mv	a0,s2
   1afd0:	8ccf20ef          	jal	ra,d09c <pbuf_cat>
      r = iprh->next_pbuf;
   1afd4:	0009c403          	lbu	s0,0(s3)
   1afd8:	0019c783          	lbu	a5,1(s3)
   1afdc:	00879793          	slli	a5,a5,0x8
   1afe0:	0087e7b3          	or	a5,a5,s0
   1afe4:	0029c403          	lbu	s0,2(s3)
   1afe8:	01041413          	slli	s0,s0,0x10
   1afec:	00f467b3          	or	a5,s0,a5
   1aff0:	0039c403          	lbu	s0,3(s3)
   1aff4:	01841413          	slli	s0,s0,0x18
   1aff8:	00f46433          	or	s0,s0,a5
    while (r != NULL) {
   1affc:	fa041ee3          	bnez	s0,1afb8 <ip4_reass+0x384>
    if (ipr == reassdatagrams) {
   1b000:	96c1a583          	lw	a1,-1684(gp) # 1fb3c <reassdatagrams>
   1b004:	00958c63          	beq	a1,s1,1b01c <ip4_reass+0x3e8>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
   1b008:	00058c63          	beqz	a1,1b020 <ip4_reass+0x3ec>
        if (ipr_prev->next == ipr) {
   1b00c:	0005a783          	lw	a5,0(a1)
   1b010:	00978863          	beq	a5,s1,1b020 <ip4_reass+0x3ec>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
   1b014:	00078593          	mv	a1,a5
   1b018:	ff1ff06f          	j	1b008 <ip4_reass+0x3d4>
      ipr_prev = NULL;
   1b01c:	00040593          	mv	a1,s0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
   1b020:	00048513          	mv	a0,s1
   1b024:	af0ff0ef          	jal	ra,1a314 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
   1b028:	00090513          	mv	a0,s2
   1b02c:	810f20ef          	jal	ra,d03c <pbuf_clen>
   1b030:	00050413          	mv	s0,a0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
   1b034:	9681d783          	lhu	a5,-1688(gp) # 1fb38 <ip_reass_pbufcount>
   1b038:	00a7ea63          	bltu	a5,a0,1b04c <ip4_reass+0x418>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
   1b03c:	9681d783          	lhu	a5,-1688(gp) # 1fb38 <ip_reass_pbufcount>
   1b040:	408787b3          	sub	a5,a5,s0
   1b044:	96f19423          	sh	a5,-1688(gp) # 1fb38 <ip_reass_pbufcount>
    return p;
   1b048:	cf9ff06f          	j	1ad40 <ip4_reass+0x10c>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
   1b04c:	0001f537          	lui	a0,0x1f
   1b050:	ef450513          	addi	a0,a0,-268 # 1eef4 <memp_pools+0x730>
   1b054:	988ff0ef          	jal	ra,1a1dc <bsp_printf>
   1b058:	fe5ff06f          	j	1b03c <ip4_reass+0x408>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
   1b05c:	02048863          	beqz	s1,1b08c <ip4_reass+0x458>
  if (ipr->p == NULL) {
   1b060:	0044a783          	lw	a5,4(s1)
   1b064:	ca079ee3          	bnez	a5,1ad20 <ip4_reass+0xec>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
   1b068:	96c1a783          	lw	a5,-1684(gp) # 1fb3c <reassdatagrams>
   1b06c:	00978863          	beq	a5,s1,1b07c <ip4_reass+0x448>
   1b070:	0001f537          	lui	a0,0x1f
   1b074:	f1c50513          	addi	a0,a0,-228 # 1ef1c <memp_pools+0x758>
   1b078:	964ff0ef          	jal	ra,1a1dc <bsp_printf>
    ip_reass_dequeue_datagram(ipr, NULL);
   1b07c:	00000593          	li	a1,0
   1b080:	00048513          	mv	a0,s1
   1b084:	a90ff0ef          	jal	ra,1a314 <ip_reass_dequeue_datagram>
   1b088:	c99ff06f          	j	1ad20 <ip4_reass+0xec>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
   1b08c:	0001f537          	lui	a0,0x1f
   1b090:	f1050513          	addi	a0,a0,-240 # 1ef10 <memp_pools+0x74c>
   1b094:	948ff0ef          	jal	ra,1a1dc <bsp_printf>
   1b098:	fc9ff06f          	j	1b060 <ip4_reass+0x42c>

0001b09c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
   1b09c:	fb010113          	addi	sp,sp,-80
   1b0a0:	04112623          	sw	ra,76(sp)
   1b0a4:	04812423          	sw	s0,72(sp)
   1b0a8:	04912223          	sw	s1,68(sp)
   1b0ac:	05212023          	sw	s2,64(sp)
   1b0b0:	03312e23          	sw	s3,60(sp)
   1b0b4:	03412c23          	sw	s4,56(sp)
   1b0b8:	03512a23          	sw	s5,52(sp)
   1b0bc:	03612823          	sw	s6,48(sp)
   1b0c0:	03712623          	sw	s7,44(sp)
   1b0c4:	03812423          	sw	s8,40(sp)
   1b0c8:	03912223          	sw	s9,36(sp)
   1b0cc:	03a12023          	sw	s10,32(sp)
   1b0d0:	01b12e23          	sw	s11,28(sp)
   1b0d4:	00c12423          	sw	a2,8(sp)
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
   1b0d8:	02c5d783          	lhu	a5,44(a1)
   1b0dc:	fec78713          	addi	a4,a5,-20
   1b0e0:	41f75793          	srai	a5,a4,0x1f
   1b0e4:	0077f793          	andi	a5,a5,7
   1b0e8:	00e787b3          	add	a5,a5,a4
   1b0ec:	4037d793          	srai	a5,a5,0x3
   1b0f0:	01079793          	slli	a5,a5,0x10
   1b0f4:	0107d793          	srli	a5,a5,0x10
   1b0f8:	00f12023          	sw	a5,0(sp)
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
   1b0fc:	00452d03          	lw	s10,4(a0)
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
   1b100:	000d4783          	lbu	a5,0(s10)
   1b104:	00f7f793          	andi	a5,a5,15
   1b108:	00279793          	slli	a5,a5,0x2
   1b10c:	01400713          	li	a4,20
   1b110:	2ee79063          	bne	a5,a4,1b3f0 <ip4_frag+0x354>
   1b114:	00050913          	mv	s2,a0
   1b118:	00058d93          	mv	s11,a1
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
   1b11c:	00a55703          	lhu	a4,10(a0)
   1b120:	01300793          	li	a5,19
   1b124:	2ce7fa63          	bgeu	a5,a4,1b3f8 <ip4_frag+0x35c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
   1b128:	006d4503          	lbu	a0,6(s10)
   1b12c:	007d4783          	lbu	a5,7(s10)
   1b130:	00879793          	slli	a5,a5,0x8
   1b134:	00a7e533          	or	a0,a5,a0
   1b138:	b40ef0ef          	jal	ra,a478 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
   1b13c:	000027b7          	lui	a5,0x2
   1b140:	fff78793          	addi	a5,a5,-1 # 1fff <_strtol_l.isra.0+0xd7>
   1b144:	00f577b3          	and	a5,a0,a5
   1b148:	01079793          	slli	a5,a5,0x10
   1b14c:	0107d793          	srli	a5,a5,0x10
   1b150:	00f12223          	sw	a5,4(sp)
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
   1b154:	000027b7          	lui	a5,0x2
   1b158:	00f577b3          	and	a5,a0,a5
   1b15c:	00f12623          	sw	a5,12(sp)

  left = (u16_t)(p->tot_len - IP_HLEN);
   1b160:	00895b83          	lhu	s7,8(s2)
   1b164:	fecb8b93          	addi	s7,s7,-20
   1b168:	010b9b93          	slli	s7,s7,0x10
   1b16c:	010bdb93          	srli	s7,s7,0x10
  u16_t poff = IP_HLEN;
   1b170:	01400993          	li	s3,20
  u16_t newpbuflen = 0;
   1b174:	00000413          	li	s0,0

  while (left) {
   1b178:	260b8863          	beqz	s7,1b3e8 <ip4_frag+0x34c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
   1b17c:	00012783          	lw	a5,0(sp)
   1b180:	00379793          	slli	a5,a5,0x3
   1b184:	01079793          	slli	a5,a5,0x10
   1b188:	0107d793          	srli	a5,a5,0x10
   1b18c:	00078c13          	mv	s8,a5
   1b190:	00fbf463          	bgeu	s7,a5,1b198 <ip4_frag+0xfc>
   1b194:	000b8c13          	mv	s8,s7
   1b198:	010c1c13          	slli	s8,s8,0x10
   1b19c:	010c5c13          	srli	s8,s8,0x10
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
   1b1a0:	28000613          	li	a2,640
   1b1a4:	01400593          	li	a1,20
   1b1a8:	00e00513          	li	a0,14
   1b1ac:	abdf10ef          	jal	ra,cc68 <pbuf_alloc>
   1b1b0:	00050b13          	mv	s6,a0
    if (rambuf == NULL) {
   1b1b4:	24050663          	beqz	a0,1b400 <ip4_frag+0x364>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
   1b1b8:	00a55703          	lhu	a4,10(a0)
   1b1bc:	01300793          	li	a5,19
   1b1c0:	02e7f063          	bgeu	a5,a4,1b1e0 <ip4_frag+0x144>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
   1b1c4:	01400613          	li	a2,20
   1b1c8:	000d0593          	mv	a1,s10
   1b1cc:	004b2503          	lw	a0,4(s6)
   1b1d0:	ff4e60ef          	jal	ra,19c4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
   1b1d4:	004b2c83          	lw	s9,4(s6)

    left_to_copy = fragsize;
   1b1d8:	000c0493          	mv	s1,s8
    while (left_to_copy) {
   1b1dc:	0940006f          	j	1b270 <ip4_frag+0x1d4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
   1b1e0:	0001f537          	lui	a0,0x1f
   1b1e4:	f3c50513          	addi	a0,a0,-196 # 1ef3c <memp_pools+0x778>
   1b1e8:	ff5fe0ef          	jal	ra,1a1dc <bsp_printf>
   1b1ec:	fd9ff06f          	j	1b1c4 <ip4_frag+0x128>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
   1b1f0:	0001f537          	lui	a0,0x1f
   1b1f4:	f5c50513          	addi	a0,a0,-164 # 1ef5c <memp_pools+0x798>
   1b1f8:	fe5fe0ef          	jal	ra,1a1dc <bsp_printf>
   1b1fc:	08c0006f          	j	1b288 <ip4_frag+0x1ec>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
   1b200:	901ff0ef          	jal	ra,1ab00 <ip_frag_alloc_pbuf_custom_ref>
   1b204:	00050a13          	mv	s4,a0
      if (pcr == NULL) {
   1b208:	0a050263          	beqz	a0,1b2ac <ip4_frag+0x210>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
                                    (u8_t *)p->payload + poff, newpbuflen);
   1b20c:	00492703          	lw	a4,4(s2)
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
   1b210:	00040793          	mv	a5,s0
   1b214:	01370733          	add	a4,a4,s3
   1b218:	00050693          	mv	a3,a0
   1b21c:	04100613          	li	a2,65
   1b220:	00040593          	mv	a1,s0
   1b224:	00000513          	li	a0,0
   1b228:	f7cf10ef          	jal	ra,c9a4 <pbuf_alloced_custom>
   1b22c:	00050a93          	mv	s5,a0
      if (newpbuf == NULL) {
   1b230:	0c050263          	beqz	a0,1b2f4 <ip4_frag+0x258>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
   1b234:	00090513          	mv	a0,s2
   1b238:	e29f10ef          	jal	ra,d060 <pbuf_ref>
      pcr->original = p;
   1b23c:	012a2a23          	sw	s2,20(s4)
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
   1b240:	0001a7b7          	lui	a5,0x1a
   1b244:	69878793          	addi	a5,a5,1688 # 1a698 <ipfrag_free_pbuf_custom>
   1b248:	00fa2823          	sw	a5,16(s4)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
   1b24c:	000a8593          	mv	a1,s5
   1b250:	000b0513          	mv	a0,s6
   1b254:	e49f10ef          	jal	ra,d09c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
   1b258:	408484b3          	sub	s1,s1,s0
   1b25c:	01049493          	slli	s1,s1,0x10
   1b260:	0104d493          	srli	s1,s1,0x10
      if (left_to_copy) {
   1b264:	00048663          	beqz	s1,1b270 <ip4_frag+0x1d4>
        poff = 0;
        p = p->next;
   1b268:	00092903          	lw	s2,0(s2)
        poff = 0;
   1b26c:	00000993          	li	s3,0
    while (left_to_copy) {
   1b270:	08048e63          	beqz	s1,1b30c <ip4_frag+0x270>
      u16_t plen = (u16_t)(p->len - poff);
   1b274:	00a95783          	lhu	a5,10(s2)
   1b278:	41378a33          	sub	s4,a5,s3
   1b27c:	010a1a13          	slli	s4,s4,0x10
   1b280:	010a5a13          	srli	s4,s4,0x10
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
   1b284:	f737e6e3          	bltu	a5,s3,1b1f0 <ip4_frag+0x154>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
   1b288:	00048413          	mv	s0,s1
   1b28c:	009a7463          	bgeu	s4,s1,1b294 <ip4_frag+0x1f8>
   1b290:	000a0413          	mv	s0,s4
   1b294:	01041413          	slli	s0,s0,0x10
   1b298:	01045413          	srli	s0,s0,0x10
      if (!newpbuflen) {
   1b29c:	f60412e3          	bnez	s0,1b200 <ip4_frag+0x164>
        p = p->next;
   1b2a0:	00092903          	lw	s2,0(s2)
        poff = 0;
   1b2a4:	00040993          	mv	s3,s0
        continue;
   1b2a8:	fc9ff06f          	j	1b270 <ip4_frag+0x1d4>
        pbuf_free(rambuf);
   1b2ac:	000b0513          	mv	a0,s6
   1b2b0:	8a1f10ef          	jal	ra,cb50 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
   1b2b4:	fff00513          	li	a0,-1
}
   1b2b8:	04c12083          	lw	ra,76(sp)
   1b2bc:	04812403          	lw	s0,72(sp)
   1b2c0:	04412483          	lw	s1,68(sp)
   1b2c4:	04012903          	lw	s2,64(sp)
   1b2c8:	03c12983          	lw	s3,60(sp)
   1b2cc:	03812a03          	lw	s4,56(sp)
   1b2d0:	03412a83          	lw	s5,52(sp)
   1b2d4:	03012b03          	lw	s6,48(sp)
   1b2d8:	02c12b83          	lw	s7,44(sp)
   1b2dc:	02812c03          	lw	s8,40(sp)
   1b2e0:	02412c83          	lw	s9,36(sp)
   1b2e4:	02012d03          	lw	s10,32(sp)
   1b2e8:	01c12d83          	lw	s11,28(sp)
   1b2ec:	05010113          	addi	sp,sp,80
   1b2f0:	00008067          	ret
        ip_frag_free_pbuf_custom_ref(pcr);
   1b2f4:	000a0513          	mv	a0,s4
   1b2f8:	b60ff0ef          	jal	ra,1a658 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
   1b2fc:	000b0513          	mv	a0,s6
   1b300:	851f10ef          	jal	ra,cb50 <pbuf_free>
  return ERR_MEM;
   1b304:	fff00513          	li	a0,-1
        goto memerr;
   1b308:	fb1ff06f          	j	1b2b8 <ip4_frag+0x21c>
    poff = (u16_t)(poff + newpbuflen);
   1b30c:	013409b3          	add	s3,s0,s3
   1b310:	01099993          	slli	s3,s3,0x10
   1b314:	0109d993          	srli	s3,s3,0x10
    last = (left <= netif->mtu - IP_HLEN);
   1b318:	02cdd783          	lhu	a5,44(s11)
   1b31c:	fed78793          	addi	a5,a5,-19
    tmp = (IP_OFFMASK & (ofo));
   1b320:	00002537          	lui	a0,0x2
   1b324:	fff50513          	addi	a0,a0,-1 # 1fff <_strtol_l.isra.0+0xd7>
   1b328:	00412703          	lw	a4,4(sp)
   1b32c:	00a77533          	and	a0,a4,a0
    if (!last || mf_set) {
   1b330:	00fbd663          	bge	s7,a5,1b33c <ip4_frag+0x2a0>
   1b334:	00c12783          	lw	a5,12(sp)
   1b338:	00078663          	beqz	a5,1b344 <ip4_frag+0x2a8>
      tmp = tmp | IP_MF;
   1b33c:	000027b7          	lui	a5,0x2
   1b340:	00f56533          	or	a0,a0,a5
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
   1b344:	934ef0ef          	jal	ra,a478 <lwip_htons>
   1b348:	00ac8323          	sb	a0,6(s9)
   1b34c:	00855513          	srli	a0,a0,0x8
   1b350:	00ac83a3          	sb	a0,7(s9)
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
   1b354:	014c0513          	addi	a0,s8,20
   1b358:	01051513          	slli	a0,a0,0x10
   1b35c:	01055513          	srli	a0,a0,0x10
   1b360:	918ef0ef          	jal	ra,a478 <lwip_htons>
   1b364:	00ac8123          	sb	a0,2(s9)
   1b368:	00855513          	srli	a0,a0,0x8
   1b36c:	00ac81a3          	sb	a0,3(s9)
    IPH_CHKSUM_SET(iphdr, 0);
   1b370:	000c8523          	sb	zero,10(s9)
   1b374:	000c85a3          	sb	zero,11(s9)
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
   1b378:	01400593          	li	a1,20
   1b37c:	000c8513          	mv	a0,s9
   1b380:	949f90ef          	jal	ra,14cc8 <inet_chksum>
   1b384:	00ac8523          	sb	a0,10(s9)
   1b388:	00855513          	srli	a0,a0,0x8
   1b38c:	00ac85a3          	sb	a0,11(s9)
    netif->output(netif, rambuf, dest);
   1b390:	014da783          	lw	a5,20(s11)
   1b394:	00812603          	lw	a2,8(sp)
   1b398:	000b0593          	mv	a1,s6
   1b39c:	000d8513          	mv	a0,s11
   1b3a0:	000780e7          	jalr	a5 # 2000 <_strtol_l.isra.0+0xd8>
    IPFRAG_STATS_INC(ip_frag.xmit);
   1b3a4:	000227b7          	lui	a5,0x22
   1b3a8:	dc078793          	addi	a5,a5,-576 # 21dc0 <lwip_stats>
   1b3ac:	0307d703          	lhu	a4,48(a5)
   1b3b0:	00170713          	addi	a4,a4,1
   1b3b4:	02e79823          	sh	a4,48(a5)
    pbuf_free(rambuf);
   1b3b8:	000b0513          	mv	a0,s6
   1b3bc:	f94f10ef          	jal	ra,cb50 <pbuf_free>
    left = (u16_t)(left - fragsize);
   1b3c0:	418b8bb3          	sub	s7,s7,s8
   1b3c4:	010b9b93          	slli	s7,s7,0x10
   1b3c8:	010bdb93          	srli	s7,s7,0x10
    ofo = (u16_t)(ofo + nfb);
   1b3cc:	00412783          	lw	a5,4(sp)
   1b3d0:	00012703          	lw	a4,0(sp)
   1b3d4:	00e787b3          	add	a5,a5,a4
   1b3d8:	01079793          	slli	a5,a5,0x10
   1b3dc:	0107d793          	srli	a5,a5,0x10
   1b3e0:	00f12223          	sw	a5,4(sp)
   1b3e4:	d95ff06f          	j	1b178 <ip4_frag+0xdc>
  return ERR_OK;
   1b3e8:	00000513          	li	a0,0
   1b3ec:	ecdff06f          	j	1b2b8 <ip4_frag+0x21c>
    return ERR_VAL;
   1b3f0:	ffa00513          	li	a0,-6
   1b3f4:	ec5ff06f          	j	1b2b8 <ip4_frag+0x21c>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
   1b3f8:	ffa00513          	li	a0,-6
   1b3fc:	ebdff06f          	j	1b2b8 <ip4_frag+0x21c>
  return ERR_MEM;
   1b400:	fff00513          	li	a0,-1
   1b404:	eb5ff06f          	j	1b2b8 <ip4_frag+0x21c>

0001b408 <trap_entry>:
.global  trap_entry
.align(2) //mtvec require 32 bits allignement
trap_entry:
  addi sp,sp, -16*4
   1b408:	fc010113          	addi	sp,sp,-64
  sw x1,   0*4(sp)
   1b40c:	00112023          	sw	ra,0(sp)
  sw x5,   1*4(sp)
   1b410:	00512223          	sw	t0,4(sp)
  sw x6,   2*4(sp)
   1b414:	00612423          	sw	t1,8(sp)
  sw x7,   3*4(sp)
   1b418:	00712623          	sw	t2,12(sp)
  sw x10,  4*4(sp)
   1b41c:	00a12823          	sw	a0,16(sp)
  sw x11,  5*4(sp)
   1b420:	00b12a23          	sw	a1,20(sp)
  sw x12,  6*4(sp)
   1b424:	00c12c23          	sw	a2,24(sp)
  sw x13,  7*4(sp)
   1b428:	00d12e23          	sw	a3,28(sp)
  sw x14,  8*4(sp)
   1b42c:	02e12023          	sw	a4,32(sp)
  sw x15,  9*4(sp)
   1b430:	02f12223          	sw	a5,36(sp)
  sw x16, 10*4(sp)
   1b434:	03012423          	sw	a6,40(sp)
  sw x17, 11*4(sp)
   1b438:	03112623          	sw	a7,44(sp)
  sw x28, 12*4(sp)
   1b43c:	03c12823          	sw	t3,48(sp)
  sw x29, 13*4(sp)
   1b440:	03d12a23          	sw	t4,52(sp)
  sw x30, 14*4(sp)
   1b444:	03e12c23          	sw	t5,56(sp)
  sw x31, 15*4(sp)
   1b448:	03f12e23          	sw	t6,60(sp)
  call trap
   1b44c:	fede70ef          	jal	ra,3438 <trap>
  lw x1 ,  0*4(sp)
   1b450:	00012083          	lw	ra,0(sp)
  lw x5,   1*4(sp)
   1b454:	00412283          	lw	t0,4(sp)
  lw x6,   2*4(sp)
   1b458:	00812303          	lw	t1,8(sp)
  lw x7,   3*4(sp)
   1b45c:	00c12383          	lw	t2,12(sp)
  lw x10,  4*4(sp)
   1b460:	01012503          	lw	a0,16(sp)
  lw x11,  5*4(sp)
   1b464:	01412583          	lw	a1,20(sp)
  lw x12,  6*4(sp)
   1b468:	01812603          	lw	a2,24(sp)
  lw x13,  7*4(sp)
   1b46c:	01c12683          	lw	a3,28(sp)
  lw x14,  8*4(sp)
   1b470:	02012703          	lw	a4,32(sp)
  lw x15,  9*4(sp)
   1b474:	02412783          	lw	a5,36(sp)
  lw x16, 10*4(sp)
   1b478:	02812803          	lw	a6,40(sp)
  lw x17, 11*4(sp)
   1b47c:	02c12883          	lw	a7,44(sp)
  lw x28, 12*4(sp)
   1b480:	03012e03          	lw	t3,48(sp)
  lw x29, 13*4(sp)
   1b484:	03412e83          	lw	t4,52(sp)
  lw x30, 14*4(sp)
   1b488:	03812f03          	lw	t5,56(sp)
  lw x31, 15*4(sp)
   1b48c:	03c12f83          	lw	t6,60(sp)
  addi sp,sp, 16*4
   1b490:	04010113          	addi	sp,sp,64
  mret
   1b494:	30200073          	mret

0001b498 <__addsf3>:
   1b498:	ff010113          	addi	sp,sp,-16
   1b49c:	00800737          	lui	a4,0x800
   1b4a0:	fff70713          	addi	a4,a4,-1 # 7fffff <__freertos_irq_stack_top+0x7db0cf>
   1b4a4:	0175d813          	srli	a6,a1,0x17
   1b4a8:	00912223          	sw	s1,4(sp)
   1b4ac:	01755493          	srli	s1,a0,0x17
   1b4b0:	00a77333          	and	t1,a4,a0
   1b4b4:	0ff4f493          	andi	s1,s1,255
   1b4b8:	00b776b3          	and	a3,a4,a1
   1b4bc:	01212023          	sw	s2,0(sp)
   1b4c0:	0ff87813          	andi	a6,a6,255
   1b4c4:	01f55913          	srli	s2,a0,0x1f
   1b4c8:	00112623          	sw	ra,12(sp)
   1b4cc:	00812423          	sw	s0,8(sp)
   1b4d0:	01f5d593          	srli	a1,a1,0x1f
   1b4d4:	00030793          	mv	a5,t1
   1b4d8:	00048513          	mv	a0,s1
   1b4dc:	00090613          	mv	a2,s2
   1b4e0:	00331e13          	slli	t3,t1,0x3
   1b4e4:	00369e93          	slli	t4,a3,0x3
   1b4e8:	410488b3          	sub	a7,s1,a6
   1b4ec:	12b90663          	beq	s2,a1,1b618 <__addsf3+0x180>
   1b4f0:	0f105a63          	blez	a7,1b5e4 <__addsf3+0x14c>
   1b4f4:	18080863          	beqz	a6,1b684 <__addsf3+0x1ec>
   1b4f8:	0ff00793          	li	a5,255
   1b4fc:	1af48063          	beq	s1,a5,1b69c <__addsf3+0x204>
   1b500:	040007b7          	lui	a5,0x4000
   1b504:	00feeeb3          	or	t4,t4,a5
   1b508:	01b00793          	li	a5,27
   1b50c:	3117ce63          	blt	a5,a7,1b828 <__addsf3+0x390>
   1b510:	02000793          	li	a5,32
   1b514:	411787b3          	sub	a5,a5,a7
   1b518:	00fe97b3          	sll	a5,t4,a5
   1b51c:	011ed8b3          	srl	a7,t4,a7
   1b520:	00f037b3          	snez	a5,a5
   1b524:	00f8e7b3          	or	a5,a7,a5
   1b528:	40fe07b3          	sub	a5,t3,a5
   1b52c:	00579713          	slli	a4,a5,0x5
   1b530:	20075063          	bgez	a4,1b730 <__addsf3+0x298>
   1b534:	04000437          	lui	s0,0x4000
   1b538:	fff40413          	addi	s0,s0,-1 # 3ffffff <__freertos_irq_stack_top+0x3fdb0cf>
   1b53c:	0087f433          	and	s0,a5,s0
   1b540:	00040513          	mv	a0,s0
   1b544:	66d000ef          	jal	ra,1c3b0 <__clzsi2>
   1b548:	ffb50513          	addi	a0,a0,-5
   1b54c:	00a417b3          	sll	a5,s0,a0
   1b550:	20954c63          	blt	a0,s1,1b768 <__addsf3+0x2d0>
   1b554:	40950533          	sub	a0,a0,s1
   1b558:	00150413          	addi	s0,a0,1
   1b55c:	02000713          	li	a4,32
   1b560:	40870733          	sub	a4,a4,s0
   1b564:	00e79733          	sll	a4,a5,a4
   1b568:	00e03733          	snez	a4,a4
   1b56c:	0087d7b3          	srl	a5,a5,s0
   1b570:	00e7e7b3          	or	a5,a5,a4
   1b574:	00000493          	li	s1,0
   1b578:	0077f713          	andi	a4,a5,7
   1b57c:	00070a63          	beqz	a4,1b590 <__addsf3+0xf8>
   1b580:	00f7f713          	andi	a4,a5,15
   1b584:	00400693          	li	a3,4
   1b588:	00d70463          	beq	a4,a3,1b590 <__addsf3+0xf8>
   1b58c:	00478793          	addi	a5,a5,4 # 4000004 <__freertos_irq_stack_top+0x3fdb0d4>
   1b590:	00579713          	slli	a4,a5,0x5
   1b594:	1a075263          	bgez	a4,1b738 <__addsf3+0x2a0>
   1b598:	00148493          	addi	s1,s1,1
   1b59c:	0ff00713          	li	a4,255
   1b5a0:	00090613          	mv	a2,s2
   1b5a4:	1ae48c63          	beq	s1,a4,1b75c <__addsf3+0x2c4>
   1b5a8:	00679793          	slli	a5,a5,0x6
   1b5ac:	0097d793          	srli	a5,a5,0x9
   1b5b0:	0ff4f513          	andi	a0,s1,255
   1b5b4:	00c12083          	lw	ra,12(sp)
   1b5b8:	00812403          	lw	s0,8(sp)
   1b5bc:	00979793          	slli	a5,a5,0x9
   1b5c0:	01751493          	slli	s1,a0,0x17
   1b5c4:	0097d513          	srli	a0,a5,0x9
   1b5c8:	00956533          	or	a0,a0,s1
   1b5cc:	01f61613          	slli	a2,a2,0x1f
   1b5d0:	00412483          	lw	s1,4(sp)
   1b5d4:	00012903          	lw	s2,0(sp)
   1b5d8:	00c56533          	or	a0,a0,a2
   1b5dc:	01010113          	addi	sp,sp,16
   1b5e0:	00008067          	ret
   1b5e4:	0c089663          	bnez	a7,1b6b0 <__addsf3+0x218>
   1b5e8:	00148713          	addi	a4,s1,1
   1b5ec:	0fe77713          	andi	a4,a4,254
   1b5f0:	18071a63          	bnez	a4,1b784 <__addsf3+0x2ec>
   1b5f4:	2a049663          	bnez	s1,1b8a0 <__addsf3+0x408>
   1b5f8:	260e0c63          	beqz	t3,1b870 <__addsf3+0x3d8>
   1b5fc:	fa0e8ce3          	beqz	t4,1b5b4 <__addsf3+0x11c>
   1b600:	41de07b3          	sub	a5,t3,t4
   1b604:	00579713          	slli	a4,a5,0x5
   1b608:	2a075c63          	bgez	a4,1b8c0 <__addsf3+0x428>
   1b60c:	41ce87b3          	sub	a5,t4,t3
   1b610:	00058913          	mv	s2,a1
   1b614:	f65ff06f          	j	1b578 <__addsf3+0xe0>
   1b618:	0d105e63          	blez	a7,1b6f4 <__addsf3+0x25c>
   1b61c:	0a080e63          	beqz	a6,1b6d8 <__addsf3+0x240>
   1b620:	0ff00793          	li	a5,255
   1b624:	06f48c63          	beq	s1,a5,1b69c <__addsf3+0x204>
   1b628:	040007b7          	lui	a5,0x4000
   1b62c:	00feeeb3          	or	t4,t4,a5
   1b630:	01b00793          	li	a5,27
   1b634:	2717ce63          	blt	a5,a7,1b8b0 <__addsf3+0x418>
   1b638:	02000793          	li	a5,32
   1b63c:	411787b3          	sub	a5,a5,a7
   1b640:	00fe97b3          	sll	a5,t4,a5
   1b644:	011ed8b3          	srl	a7,t4,a7
   1b648:	00f037b3          	snez	a5,a5
   1b64c:	00f8e7b3          	or	a5,a7,a5
   1b650:	01c787b3          	add	a5,a5,t3
   1b654:	00579713          	slli	a4,a5,0x5
   1b658:	0c075c63          	bgez	a4,1b730 <__addsf3+0x298>
   1b65c:	00148493          	addi	s1,s1,1
   1b660:	0ff00713          	li	a4,255
   1b664:	0ee48c63          	beq	s1,a4,1b75c <__addsf3+0x2c4>
   1b668:	7e0006b7          	lui	a3,0x7e000
   1b66c:	0017d713          	srli	a4,a5,0x1
   1b670:	fff68693          	addi	a3,a3,-1 # 7dffffff <__freertos_irq_stack_top+0x7dfdb0cf>
   1b674:	0017f793          	andi	a5,a5,1
   1b678:	00d77733          	and	a4,a4,a3
   1b67c:	00f767b3          	or	a5,a4,a5
   1b680:	ef9ff06f          	j	1b578 <__addsf3+0xe0>
   1b684:	0a0e8c63          	beqz	t4,1b73c <__addsf3+0x2a4>
   1b688:	fff88893          	addi	a7,a7,-1
   1b68c:	41de07b3          	sub	a5,t3,t4
   1b690:	e8088ee3          	beqz	a7,1b52c <__addsf3+0x94>
   1b694:	0ff00793          	li	a5,255
   1b698:	e6f498e3          	bne	s1,a5,1b508 <__addsf3+0x70>
   1b69c:	0a030e63          	beqz	t1,1b758 <__addsf3+0x2c0>
   1b6a0:	00000613          	li	a2,0
   1b6a4:	0ff00513          	li	a0,255
   1b6a8:	004007b7          	lui	a5,0x400
   1b6ac:	f09ff06f          	j	1b5b4 <__addsf3+0x11c>
   1b6b0:	40980733          	sub	a4,a6,s1
   1b6b4:	12049a63          	bnez	s1,1b7e8 <__addsf3+0x350>
   1b6b8:	180e0e63          	beqz	t3,1b854 <__addsf3+0x3bc>
   1b6bc:	fff70713          	addi	a4,a4,-1
   1b6c0:	20070863          	beqz	a4,1b8d0 <__addsf3+0x438>
   1b6c4:	0ff00793          	li	a5,255
   1b6c8:	12f81863          	bne	a6,a5,1b7f8 <__addsf3+0x360>
   1b6cc:	00058913          	mv	s2,a1
   1b6d0:	00068313          	mv	t1,a3
   1b6d4:	fc9ff06f          	j	1b69c <__addsf3+0x204>
   1b6d8:	060e8263          	beqz	t4,1b73c <__addsf3+0x2a4>
   1b6dc:	fff88893          	addi	a7,a7,-1
   1b6e0:	01de07b3          	add	a5,t3,t4
   1b6e4:	f60888e3          	beqz	a7,1b654 <__addsf3+0x1bc>
   1b6e8:	0ff00793          	li	a5,255
   1b6ec:	f4f492e3          	bne	s1,a5,1b630 <__addsf3+0x198>
   1b6f0:	fadff06f          	j	1b69c <__addsf3+0x204>
   1b6f4:	0a089863          	bnez	a7,1b7a4 <__addsf3+0x30c>
   1b6f8:	00148493          	addi	s1,s1,1
   1b6fc:	0fe4f713          	andi	a4,s1,254
   1b700:	18071063          	bnez	a4,1b880 <__addsf3+0x3e8>
   1b704:	16051063          	bnez	a0,1b864 <__addsf3+0x3cc>
   1b708:	1c0e0c63          	beqz	t3,1b8e0 <__addsf3+0x448>
   1b70c:	ea0e84e3          	beqz	t4,1b5b4 <__addsf3+0x11c>
   1b710:	01de07b3          	add	a5,t3,t4
   1b714:	00579713          	slli	a4,a5,0x5
   1b718:	00000493          	li	s1,0
   1b71c:	00075a63          	bgez	a4,1b730 <__addsf3+0x298>
   1b720:	fc000737          	lui	a4,0xfc000
   1b724:	fff70713          	addi	a4,a4,-1 # fbffffff <__freertos_irq_stack_top+0xfbfdb0cf>
   1b728:	00e7f7b3          	and	a5,a5,a4
   1b72c:	00100493          	li	s1,1
   1b730:	0077f713          	andi	a4,a5,7
   1b734:	e40716e3          	bnez	a4,1b580 <__addsf3+0xe8>
   1b738:	0037d313          	srli	t1,a5,0x3
   1b73c:	0ff00793          	li	a5,255
   1b740:	f4f48ee3          	beq	s1,a5,1b69c <__addsf3+0x204>
   1b744:	00931793          	slli	a5,t1,0x9
   1b748:	0097d793          	srli	a5,a5,0x9
   1b74c:	0ff4f513          	andi	a0,s1,255
   1b750:	00090613          	mv	a2,s2
   1b754:	e61ff06f          	j	1b5b4 <__addsf3+0x11c>
   1b758:	00090613          	mv	a2,s2
   1b75c:	0ff00513          	li	a0,255
   1b760:	00000793          	li	a5,0
   1b764:	e51ff06f          	j	1b5b4 <__addsf3+0x11c>
   1b768:	fc000737          	lui	a4,0xfc000
   1b76c:	fff70713          	addi	a4,a4,-1 # fbffffff <__freertos_irq_stack_top+0xfbfdb0cf>
   1b770:	00e7f7b3          	and	a5,a5,a4
   1b774:	0077f713          	andi	a4,a5,7
   1b778:	40a484b3          	sub	s1,s1,a0
   1b77c:	e00712e3          	bnez	a4,1b580 <__addsf3+0xe8>
   1b780:	fb9ff06f          	j	1b738 <__addsf3+0x2a0>
   1b784:	41de0433          	sub	s0,t3,t4
   1b788:	00541793          	slli	a5,s0,0x5
   1b78c:	1007c463          	bltz	a5,1b894 <__addsf3+0x3fc>
   1b790:	da0418e3          	bnez	s0,1b540 <__addsf3+0xa8>
   1b794:	00000613          	li	a2,0
   1b798:	00000513          	li	a0,0
   1b79c:	00000793          	li	a5,0
   1b7a0:	e15ff06f          	j	1b5b4 <__addsf3+0x11c>
   1b7a4:	40980733          	sub	a4,a6,s1
   1b7a8:	08048463          	beqz	s1,1b830 <__addsf3+0x398>
   1b7ac:	0ff00793          	li	a5,255
   1b7b0:	f2f800e3          	beq	a6,a5,1b6d0 <__addsf3+0x238>
   1b7b4:	040007b7          	lui	a5,0x4000
   1b7b8:	00fe6e33          	or	t3,t3,a5
   1b7bc:	01b00793          	li	a5,27
   1b7c0:	12e7ca63          	blt	a5,a4,1b8f4 <__addsf3+0x45c>
   1b7c4:	02000793          	li	a5,32
   1b7c8:	40e787b3          	sub	a5,a5,a4
   1b7cc:	00fe17b3          	sll	a5,t3,a5
   1b7d0:	00ee5733          	srl	a4,t3,a4
   1b7d4:	00f037b3          	snez	a5,a5
   1b7d8:	00f767b3          	or	a5,a4,a5
   1b7dc:	01d787b3          	add	a5,a5,t4
   1b7e0:	00080493          	mv	s1,a6
   1b7e4:	e71ff06f          	j	1b654 <__addsf3+0x1bc>
   1b7e8:	0ff00793          	li	a5,255
   1b7ec:	eef800e3          	beq	a6,a5,1b6cc <__addsf3+0x234>
   1b7f0:	040007b7          	lui	a5,0x4000
   1b7f4:	00fe6e33          	or	t3,t3,a5
   1b7f8:	01b00793          	li	a5,27
   1b7fc:	0ae7ce63          	blt	a5,a4,1b8b8 <__addsf3+0x420>
   1b800:	02000693          	li	a3,32
   1b804:	40e686b3          	sub	a3,a3,a4
   1b808:	00de16b3          	sll	a3,t3,a3
   1b80c:	00ee57b3          	srl	a5,t3,a4
   1b810:	00d03733          	snez	a4,a3
   1b814:	00e7e7b3          	or	a5,a5,a4
   1b818:	40fe87b3          	sub	a5,t4,a5
   1b81c:	00080493          	mv	s1,a6
   1b820:	00058913          	mv	s2,a1
   1b824:	d09ff06f          	j	1b52c <__addsf3+0x94>
   1b828:	00100793          	li	a5,1
   1b82c:	cfdff06f          	j	1b528 <__addsf3+0x90>
   1b830:	0a0e0c63          	beqz	t3,1b8e8 <__addsf3+0x450>
   1b834:	fff70713          	addi	a4,a4,-1
   1b838:	01de07b3          	add	a5,t3,t4
   1b83c:	00080493          	mv	s1,a6
   1b840:	e0070ae3          	beqz	a4,1b654 <__addsf3+0x1bc>
   1b844:	0ff00793          	li	a5,255
   1b848:	f6f81ae3          	bne	a6,a5,1b7bc <__addsf3+0x324>
   1b84c:	00068313          	mv	t1,a3
   1b850:	e4dff06f          	j	1b69c <__addsf3+0x204>
   1b854:	00068313          	mv	t1,a3
   1b858:	00080493          	mv	s1,a6
   1b85c:	00058913          	mv	s2,a1
   1b860:	eddff06f          	j	1b73c <__addsf3+0x2a4>
   1b864:	e60e06e3          	beqz	t3,1b6d0 <__addsf3+0x238>
   1b868:	e20e8ae3          	beqz	t4,1b69c <__addsf3+0x204>
   1b86c:	e35ff06f          	j	1b6a0 <__addsf3+0x208>
   1b870:	040e8a63          	beqz	t4,1b8c4 <__addsf3+0x42c>
   1b874:	00058613          	mv	a2,a1
   1b878:	00068793          	mv	a5,a3
   1b87c:	d39ff06f          	j	1b5b4 <__addsf3+0x11c>
   1b880:	0ff00793          	li	a5,255
   1b884:	ecf48ce3          	beq	s1,a5,1b75c <__addsf3+0x2c4>
   1b888:	01de07b3          	add	a5,t3,t4
   1b88c:	0017d793          	srli	a5,a5,0x1
   1b890:	ea1ff06f          	j	1b730 <__addsf3+0x298>
   1b894:	41ce8433          	sub	s0,t4,t3
   1b898:	00058913          	mv	s2,a1
   1b89c:	ca5ff06f          	j	1b540 <__addsf3+0xa8>
   1b8a0:	fc0e14e3          	bnez	t3,1b868 <__addsf3+0x3d0>
   1b8a4:	de0e8ee3          	beqz	t4,1b6a0 <__addsf3+0x208>
   1b8a8:	00058913          	mv	s2,a1
   1b8ac:	e25ff06f          	j	1b6d0 <__addsf3+0x238>
   1b8b0:	00100793          	li	a5,1
   1b8b4:	d9dff06f          	j	1b650 <__addsf3+0x1b8>
   1b8b8:	00100793          	li	a5,1
   1b8bc:	f5dff06f          	j	1b818 <__addsf3+0x380>
   1b8c0:	e60798e3          	bnez	a5,1b730 <__addsf3+0x298>
   1b8c4:	00000613          	li	a2,0
   1b8c8:	00000793          	li	a5,0
   1b8cc:	ce9ff06f          	j	1b5b4 <__addsf3+0x11c>
   1b8d0:	41ce87b3          	sub	a5,t4,t3
   1b8d4:	00080493          	mv	s1,a6
   1b8d8:	00058913          	mv	s2,a1
   1b8dc:	c51ff06f          	j	1b52c <__addsf3+0x94>
   1b8e0:	00068793          	mv	a5,a3
   1b8e4:	cd1ff06f          	j	1b5b4 <__addsf3+0x11c>
   1b8e8:	00068313          	mv	t1,a3
   1b8ec:	00080493          	mv	s1,a6
   1b8f0:	e4dff06f          	j	1b73c <__addsf3+0x2a4>
   1b8f4:	00100793          	li	a5,1
   1b8f8:	ee5ff06f          	j	1b7dc <__addsf3+0x344>

0001b8fc <__gesf2>:
   1b8fc:	01755693          	srli	a3,a0,0x17
   1b900:	008007b7          	lui	a5,0x800
   1b904:	fff78793          	addi	a5,a5,-1 # 7fffff <__freertos_irq_stack_top+0x7db0cf>
   1b908:	0175d613          	srli	a2,a1,0x17
   1b90c:	0ff6f693          	andi	a3,a3,255
   1b910:	0ff00813          	li	a6,255
   1b914:	00a7f8b3          	and	a7,a5,a0
   1b918:	01f55713          	srli	a4,a0,0x1f
   1b91c:	00b7f7b3          	and	a5,a5,a1
   1b920:	0ff67613          	andi	a2,a2,255
   1b924:	01f5d513          	srli	a0,a1,0x1f
   1b928:	03068a63          	beq	a3,a6,1b95c <__gesf2+0x60>
   1b92c:	03060263          	beq	a2,a6,1b950 <__gesf2+0x54>
   1b930:	02069a63          	bnez	a3,1b964 <__gesf2+0x68>
   1b934:	00061463          	bnez	a2,1b93c <__gesf2+0x40>
   1b938:	04078a63          	beqz	a5,1b98c <__gesf2+0x90>
   1b93c:	04088263          	beqz	a7,1b980 <__gesf2+0x84>
   1b940:	06a70063          	beq	a4,a0,1b9a0 <__gesf2+0xa4>
   1b944:	00100513          	li	a0,1
   1b948:	02071e63          	bnez	a4,1b984 <__gesf2+0x88>
   1b94c:	00008067          	ret
   1b950:	fe0780e3          	beqz	a5,1b930 <__gesf2+0x34>
   1b954:	ffe00513          	li	a0,-2
   1b958:	00008067          	ret
   1b95c:	fe089ce3          	bnez	a7,1b954 <__gesf2+0x58>
   1b960:	02d60c63          	beq	a2,a3,1b998 <__gesf2+0x9c>
   1b964:	00061463          	bnez	a2,1b96c <__gesf2+0x70>
   1b968:	fc078ee3          	beqz	a5,1b944 <__gesf2+0x48>
   1b96c:	fca71ce3          	bne	a4,a0,1b944 <__gesf2+0x48>
   1b970:	02d65a63          	bge	a2,a3,1b9a4 <__gesf2+0xa8>
   1b974:	00051863          	bnez	a0,1b984 <__gesf2+0x88>
   1b978:	00100513          	li	a0,1
   1b97c:	00008067          	ret
   1b980:	fc0516e3          	bnez	a0,1b94c <__gesf2+0x50>
   1b984:	fff00513          	li	a0,-1
   1b988:	00008067          	ret
   1b98c:	00000513          	li	a0,0
   1b990:	fa089ae3          	bnez	a7,1b944 <__gesf2+0x48>
   1b994:	00008067          	ret
   1b998:	fc078ae3          	beqz	a5,1b96c <__gesf2+0x70>
   1b99c:	fb9ff06f          	j	1b954 <__gesf2+0x58>
   1b9a0:	00000693          	li	a3,0
   1b9a4:	00c6c863          	blt	a3,a2,1b9b4 <__gesf2+0xb8>
   1b9a8:	f917eee3          	bltu	a5,a7,1b944 <__gesf2+0x48>
   1b9ac:	00000513          	li	a0,0
   1b9b0:	f8f8fee3          	bgeu	a7,a5,1b94c <__gesf2+0x50>
   1b9b4:	fc0708e3          	beqz	a4,1b984 <__gesf2+0x88>
   1b9b8:	00070513          	mv	a0,a4
   1b9bc:	00008067          	ret

0001b9c0 <__lesf2>:
   1b9c0:	01755693          	srli	a3,a0,0x17
   1b9c4:	008007b7          	lui	a5,0x800
   1b9c8:	fff78793          	addi	a5,a5,-1 # 7fffff <__freertos_irq_stack_top+0x7db0cf>
   1b9cc:	0175d613          	srli	a2,a1,0x17
   1b9d0:	0ff6f693          	andi	a3,a3,255
   1b9d4:	0ff00813          	li	a6,255
   1b9d8:	00a7f8b3          	and	a7,a5,a0
   1b9dc:	01f55713          	srli	a4,a0,0x1f
   1b9e0:	00b7f7b3          	and	a5,a5,a1
   1b9e4:	0ff67613          	andi	a2,a2,255
   1b9e8:	01f5d513          	srli	a0,a1,0x1f
   1b9ec:	05068263          	beq	a3,a6,1ba30 <__lesf2+0x70>
   1b9f0:	01060e63          	beq	a2,a6,1ba0c <__lesf2+0x4c>
   1b9f4:	04069263          	bnez	a3,1ba38 <__lesf2+0x78>
   1b9f8:	02061063          	bnez	a2,1ba18 <__lesf2+0x58>
   1b9fc:	00079e63          	bnez	a5,1ba18 <__lesf2+0x58>
   1ba00:	00000513          	li	a0,0
   1ba04:	00089e63          	bnez	a7,1ba20 <__lesf2+0x60>
   1ba08:	00008067          	ret
   1ba0c:	fe0784e3          	beqz	a5,1b9f4 <__lesf2+0x34>
   1ba10:	00200513          	li	a0,2
   1ba14:	00008067          	ret
   1ba18:	02088e63          	beqz	a7,1ba54 <__lesf2+0x94>
   1ba1c:	04a70463          	beq	a4,a0,1ba64 <__lesf2+0xa4>
   1ba20:	00100513          	li	a0,1
   1ba24:	fe0702e3          	beqz	a4,1ba08 <__lesf2+0x48>
   1ba28:	fff00513          	li	a0,-1
   1ba2c:	00008067          	ret
   1ba30:	fe0890e3          	bnez	a7,1ba10 <__lesf2+0x50>
   1ba34:	02d60463          	beq	a2,a3,1ba5c <__lesf2+0x9c>
   1ba38:	00061463          	bnez	a2,1ba40 <__lesf2+0x80>
   1ba3c:	fe0782e3          	beqz	a5,1ba20 <__lesf2+0x60>
   1ba40:	fea710e3          	bne	a4,a0,1ba20 <__lesf2+0x60>
   1ba44:	02d65263          	bge	a2,a3,1ba68 <__lesf2+0xa8>
   1ba48:	fe0510e3          	bnez	a0,1ba28 <__lesf2+0x68>
   1ba4c:	00100513          	li	a0,1
   1ba50:	00008067          	ret
   1ba54:	fc050ae3          	beqz	a0,1ba28 <__lesf2+0x68>
   1ba58:	00008067          	ret
   1ba5c:	fe0782e3          	beqz	a5,1ba40 <__lesf2+0x80>
   1ba60:	fb1ff06f          	j	1ba10 <__lesf2+0x50>
   1ba64:	00000693          	li	a3,0
   1ba68:	00c6c863          	blt	a3,a2,1ba78 <__lesf2+0xb8>
   1ba6c:	fb17eae3          	bltu	a5,a7,1ba20 <__lesf2+0x60>
   1ba70:	00000513          	li	a0,0
   1ba74:	f8f8fae3          	bgeu	a7,a5,1ba08 <__lesf2+0x48>
   1ba78:	fa0708e3          	beqz	a4,1ba28 <__lesf2+0x68>
   1ba7c:	00070513          	mv	a0,a4
   1ba80:	00008067          	ret

0001ba84 <__mulsf3>:
   1ba84:	fd010113          	addi	sp,sp,-48
   1ba88:	02812423          	sw	s0,40(sp)
   1ba8c:	01755413          	srli	s0,a0,0x17
   1ba90:	01312e23          	sw	s3,28(sp)
   1ba94:	01412c23          	sw	s4,24(sp)
   1ba98:	00951993          	slli	s3,a0,0x9
   1ba9c:	02112623          	sw	ra,44(sp)
   1baa0:	02912223          	sw	s1,36(sp)
   1baa4:	03212023          	sw	s2,32(sp)
   1baa8:	01512a23          	sw	s5,20(sp)
   1baac:	01612823          	sw	s6,16(sp)
   1bab0:	0ff47413          	andi	s0,s0,255
   1bab4:	0099d993          	srli	s3,s3,0x9
   1bab8:	01f55a13          	srli	s4,a0,0x1f
   1babc:	12040063          	beqz	s0,1bbdc <__mulsf3+0x158>
   1bac0:	0ff00793          	li	a5,255
   1bac4:	14f40863          	beq	s0,a5,1bc14 <__mulsf3+0x190>
   1bac8:	00399793          	slli	a5,s3,0x3
   1bacc:	04000737          	lui	a4,0x4000
   1bad0:	00e7e9b3          	or	s3,a5,a4
   1bad4:	f8140413          	addi	s0,s0,-127
   1bad8:	00000493          	li	s1,0
   1badc:	00000b13          	li	s6,0
   1bae0:	0175d713          	srli	a4,a1,0x17
   1bae4:	00959a93          	slli	s5,a1,0x9
   1bae8:	0ff77713          	andi	a4,a4,255
   1baec:	009ada93          	srli	s5,s5,0x9
   1baf0:	01f5d913          	srli	s2,a1,0x1f
   1baf4:	10070863          	beqz	a4,1bc04 <__mulsf3+0x180>
   1baf8:	0ff00793          	li	a5,255
   1bafc:	04f70663          	beq	a4,a5,1bb48 <__mulsf3+0xc4>
   1bb00:	003a9a93          	slli	s5,s5,0x3
   1bb04:	f8170713          	addi	a4,a4,-127 # 3ffff81 <__freertos_irq_stack_top+0x3fdb051>
   1bb08:	040007b7          	lui	a5,0x4000
   1bb0c:	00faeab3          	or	s5,s5,a5
   1bb10:	00e40433          	add	s0,s0,a4
   1bb14:	00000613          	li	a2,0
   1bb18:	012a4533          	xor	a0,s4,s2
   1bb1c:	00f00793          	li	a5,15
   1bb20:	00050693          	mv	a3,a0
   1bb24:	00140593          	addi	a1,s0,1
   1bb28:	1897e263          	bltu	a5,s1,1bcac <__mulsf3+0x228>
   1bb2c:	00003717          	auipc	a4,0x3
   1bb30:	54470713          	addi	a4,a4,1348 # 1f070 <_ctype_+0x104>
   1bb34:	00249493          	slli	s1,s1,0x2
   1bb38:	00e484b3          	add	s1,s1,a4
   1bb3c:	0004a783          	lw	a5,0(s1)
   1bb40:	00e787b3          	add	a5,a5,a4
   1bb44:	00078067          	jr	a5 # 4000000 <__freertos_irq_stack_top+0x3fdb0d0>
   1bb48:	0ff40413          	addi	s0,s0,255
   1bb4c:	120a9c63          	bnez	s5,1bc84 <__mulsf3+0x200>
   1bb50:	0024e493          	ori	s1,s1,2
   1bb54:	00200613          	li	a2,2
   1bb58:	fc1ff06f          	j	1bb18 <__mulsf3+0x94>
   1bb5c:	00000513          	li	a0,0
   1bb60:	0ff00713          	li	a4,255
   1bb64:	004007b7          	lui	a5,0x400
   1bb68:	02c12083          	lw	ra,44(sp)
   1bb6c:	02812403          	lw	s0,40(sp)
   1bb70:	00979793          	slli	a5,a5,0x9
   1bb74:	01771713          	slli	a4,a4,0x17
   1bb78:	0097d793          	srli	a5,a5,0x9
   1bb7c:	01f51513          	slli	a0,a0,0x1f
   1bb80:	00e7e7b3          	or	a5,a5,a4
   1bb84:	02412483          	lw	s1,36(sp)
   1bb88:	02012903          	lw	s2,32(sp)
   1bb8c:	01c12983          	lw	s3,28(sp)
   1bb90:	01812a03          	lw	s4,24(sp)
   1bb94:	01412a83          	lw	s5,20(sp)
   1bb98:	01012b03          	lw	s6,16(sp)
   1bb9c:	00a7e533          	or	a0,a5,a0
   1bba0:	03010113          	addi	sp,sp,48
   1bba4:	00008067          	ret
   1bba8:	00090693          	mv	a3,s2
   1bbac:	000a8993          	mv	s3,s5
   1bbb0:	00060b13          	mv	s6,a2
   1bbb4:	00200793          	li	a5,2
   1bbb8:	0efb0263          	beq	s6,a5,1bc9c <__mulsf3+0x218>
   1bbbc:	00300793          	li	a5,3
   1bbc0:	f8fb0ee3          	beq	s6,a5,1bb5c <__mulsf3+0xd8>
   1bbc4:	00100793          	li	a5,1
   1bbc8:	00068513          	mv	a0,a3
   1bbcc:	22fb1463          	bne	s6,a5,1bdf4 <__mulsf3+0x370>
   1bbd0:	00000713          	li	a4,0
   1bbd4:	00000793          	li	a5,0
   1bbd8:	f91ff06f          	j	1bb68 <__mulsf3+0xe4>
   1bbdc:	06099e63          	bnez	s3,1bc58 <__mulsf3+0x1d4>
   1bbe0:	0175d713          	srli	a4,a1,0x17
   1bbe4:	00959a93          	slli	s5,a1,0x9
   1bbe8:	0ff77713          	andi	a4,a4,255
   1bbec:	00400493          	li	s1,4
   1bbf0:	00000413          	li	s0,0
   1bbf4:	00100b13          	li	s6,1
   1bbf8:	009ada93          	srli	s5,s5,0x9
   1bbfc:	01f5d913          	srli	s2,a1,0x1f
   1bc00:	ee071ce3          	bnez	a4,1baf8 <__mulsf3+0x74>
   1bc04:	020a9263          	bnez	s5,1bc28 <__mulsf3+0x1a4>
   1bc08:	0014e493          	ori	s1,s1,1
   1bc0c:	00100613          	li	a2,1
   1bc10:	f09ff06f          	j	1bb18 <__mulsf3+0x94>
   1bc14:	02099a63          	bnez	s3,1bc48 <__mulsf3+0x1c4>
   1bc18:	00800493          	li	s1,8
   1bc1c:	0ff00413          	li	s0,255
   1bc20:	00200b13          	li	s6,2
   1bc24:	ebdff06f          	j	1bae0 <__mulsf3+0x5c>
   1bc28:	000a8513          	mv	a0,s5
   1bc2c:	784000ef          	jal	ra,1c3b0 <__clzsi2>
   1bc30:	ffb50793          	addi	a5,a0,-5
   1bc34:	40a40433          	sub	s0,s0,a0
   1bc38:	00fa9ab3          	sll	s5,s5,a5
   1bc3c:	f8a40413          	addi	s0,s0,-118
   1bc40:	00000613          	li	a2,0
   1bc44:	ed5ff06f          	j	1bb18 <__mulsf3+0x94>
   1bc48:	00c00493          	li	s1,12
   1bc4c:	0ff00413          	li	s0,255
   1bc50:	00300b13          	li	s6,3
   1bc54:	e8dff06f          	j	1bae0 <__mulsf3+0x5c>
   1bc58:	00098513          	mv	a0,s3
   1bc5c:	00b12623          	sw	a1,12(sp)
   1bc60:	750000ef          	jal	ra,1c3b0 <__clzsi2>
   1bc64:	ffb50793          	addi	a5,a0,-5
   1bc68:	f8a00413          	li	s0,-118
   1bc6c:	00f999b3          	sll	s3,s3,a5
   1bc70:	40a40433          	sub	s0,s0,a0
   1bc74:	00000493          	li	s1,0
   1bc78:	00000b13          	li	s6,0
   1bc7c:	00c12583          	lw	a1,12(sp)
   1bc80:	e61ff06f          	j	1bae0 <__mulsf3+0x5c>
   1bc84:	0034e493          	ori	s1,s1,3
   1bc88:	00300613          	li	a2,3
   1bc8c:	e8dff06f          	j	1bb18 <__mulsf3+0x94>
   1bc90:	00200793          	li	a5,2
   1bc94:	000a0693          	mv	a3,s4
   1bc98:	f2fb12e3          	bne	s6,a5,1bbbc <__mulsf3+0x138>
   1bc9c:	00068513          	mv	a0,a3
   1bca0:	0ff00713          	li	a4,255
   1bca4:	00000793          	li	a5,0
   1bca8:	ec1ff06f          	j	1bb68 <__mulsf3+0xe4>
   1bcac:	00010337          	lui	t1,0x10
   1bcb0:	fff30693          	addi	a3,t1,-1 # ffff <tcp_input+0x183>
   1bcb4:	0109d613          	srli	a2,s3,0x10
   1bcb8:	010ad893          	srli	a7,s5,0x10
   1bcbc:	00d9f7b3          	and	a5,s3,a3
   1bcc0:	00dafab3          	and	s5,s5,a3
   1bcc4:	03578833          	mul	a6,a5,s5
   1bcc8:	02f889b3          	mul	s3,a7,a5
   1bccc:	01085713          	srli	a4,a6,0x10
   1bcd0:	03560ab3          	mul	s5,a2,s5
   1bcd4:	015989b3          	add	s3,s3,s5
   1bcd8:	01370733          	add	a4,a4,s3
   1bcdc:	03160633          	mul	a2,a2,a7
   1bce0:	01577463          	bgeu	a4,s5,1bce8 <__mulsf3+0x264>
   1bce4:	00660633          	add	a2,a2,t1
   1bce8:	000107b7          	lui	a5,0x10
   1bcec:	fff78793          	addi	a5,a5,-1 # ffff <tcp_input+0x183>
   1bcf0:	00f776b3          	and	a3,a4,a5
   1bcf4:	00f87833          	and	a6,a6,a5
   1bcf8:	01069693          	slli	a3,a3,0x10
   1bcfc:	010686b3          	add	a3,a3,a6
   1bd00:	00669993          	slli	s3,a3,0x6
   1bd04:	01075793          	srli	a5,a4,0x10
   1bd08:	013039b3          	snez	s3,s3
   1bd0c:	01a6d693          	srli	a3,a3,0x1a
   1bd10:	00c787b3          	add	a5,a5,a2
   1bd14:	00679793          	slli	a5,a5,0x6
   1bd18:	00d9e6b3          	or	a3,s3,a3
   1bd1c:	00d7e9b3          	or	s3,a5,a3
   1bd20:	00499793          	slli	a5,s3,0x4
   1bd24:	0007da63          	bgez	a5,1bd38 <__mulsf3+0x2b4>
   1bd28:	0019d713          	srli	a4,s3,0x1
   1bd2c:	0019f793          	andi	a5,s3,1
   1bd30:	00f769b3          	or	s3,a4,a5
   1bd34:	00058413          	mv	s0,a1
   1bd38:	07f40713          	addi	a4,s0,127
   1bd3c:	04e05663          	blez	a4,1bd88 <__mulsf3+0x304>
   1bd40:	0079f793          	andi	a5,s3,7
   1bd44:	00078a63          	beqz	a5,1bd58 <__mulsf3+0x2d4>
   1bd48:	00f9f793          	andi	a5,s3,15
   1bd4c:	00400693          	li	a3,4
   1bd50:	00d78463          	beq	a5,a3,1bd58 <__mulsf3+0x2d4>
   1bd54:	00498993          	addi	s3,s3,4
   1bd58:	00499793          	slli	a5,s3,0x4
   1bd5c:	0007da63          	bgez	a5,1bd70 <__mulsf3+0x2ec>
   1bd60:	f80007b7          	lui	a5,0xf8000
   1bd64:	fff78793          	addi	a5,a5,-1 # f7ffffff <__freertos_irq_stack_top+0xf7fdb0cf>
   1bd68:	00f9f9b3          	and	s3,s3,a5
   1bd6c:	08040713          	addi	a4,s0,128
   1bd70:	0fe00793          	li	a5,254
   1bd74:	06e7ca63          	blt	a5,a4,1bde8 <__mulsf3+0x364>
   1bd78:	00699793          	slli	a5,s3,0x6
   1bd7c:	0097d793          	srli	a5,a5,0x9
   1bd80:	0ff77713          	andi	a4,a4,255
   1bd84:	de5ff06f          	j	1bb68 <__mulsf3+0xe4>
   1bd88:	00100793          	li	a5,1
   1bd8c:	40e786b3          	sub	a3,a5,a4
   1bd90:	00070a63          	beqz	a4,1bda4 <__mulsf3+0x320>
   1bd94:	01b00613          	li	a2,27
   1bd98:	00000713          	li	a4,0
   1bd9c:	00000793          	li	a5,0
   1bda0:	dcd644e3          	blt	a2,a3,1bb68 <__mulsf3+0xe4>
   1bda4:	09e40713          	addi	a4,s0,158
   1bda8:	00e99733          	sll	a4,s3,a4
   1bdac:	00e03733          	snez	a4,a4
   1bdb0:	00d9d7b3          	srl	a5,s3,a3
   1bdb4:	00e7e7b3          	or	a5,a5,a4
   1bdb8:	0077f713          	andi	a4,a5,7
   1bdbc:	00070a63          	beqz	a4,1bdd0 <__mulsf3+0x34c>
   1bdc0:	00f7f713          	andi	a4,a5,15
   1bdc4:	00400693          	li	a3,4
   1bdc8:	00d70463          	beq	a4,a3,1bdd0 <__mulsf3+0x34c>
   1bdcc:	00478793          	addi	a5,a5,4
   1bdd0:	00579713          	slli	a4,a5,0x5
   1bdd4:	02074463          	bltz	a4,1bdfc <__mulsf3+0x378>
   1bdd8:	00679793          	slli	a5,a5,0x6
   1bddc:	0097d793          	srli	a5,a5,0x9
   1bde0:	00000713          	li	a4,0
   1bde4:	d85ff06f          	j	1bb68 <__mulsf3+0xe4>
   1bde8:	0ff00713          	li	a4,255
   1bdec:	00000793          	li	a5,0
   1bdf0:	d79ff06f          	j	1bb68 <__mulsf3+0xe4>
   1bdf4:	00058413          	mv	s0,a1
   1bdf8:	f41ff06f          	j	1bd38 <__mulsf3+0x2b4>
   1bdfc:	00100713          	li	a4,1
   1be00:	00000793          	li	a5,0
   1be04:	d65ff06f          	j	1bb68 <__mulsf3+0xe4>

0001be08 <__subsf3>:
   1be08:	00800737          	lui	a4,0x800
   1be0c:	ff010113          	addi	sp,sp,-16
   1be10:	fff70713          	addi	a4,a4,-1 # 7fffff <__freertos_irq_stack_top+0x7db0cf>
   1be14:	01755693          	srli	a3,a0,0x17
   1be18:	0175d813          	srli	a6,a1,0x17
   1be1c:	00a777b3          	and	a5,a4,a0
   1be20:	0ff6f693          	andi	a3,a3,255
   1be24:	01f55e93          	srli	t4,a0,0x1f
   1be28:	00b77633          	and	a2,a4,a1
   1be2c:	00912223          	sw	s1,4(sp)
   1be30:	01212023          	sw	s2,0(sp)
   1be34:	0ff87813          	andi	a6,a6,255
   1be38:	00112623          	sw	ra,12(sp)
   1be3c:	00812423          	sw	s0,8(sp)
   1be40:	0ff00313          	li	t1,255
   1be44:	00078e13          	mv	t3,a5
   1be48:	00068913          	mv	s2,a3
   1be4c:	000e8493          	mv	s1,t4
   1be50:	00379f13          	slli	t5,a5,0x3
   1be54:	01f5d593          	srli	a1,a1,0x1f
   1be58:	00361513          	slli	a0,a2,0x3
   1be5c:	410688b3          	sub	a7,a3,a6
   1be60:	14680063          	beq	a6,t1,1bfa0 <__subsf3+0x198>
   1be64:	0015c593          	xori	a1,a1,1
   1be68:	14be8c63          	beq	t4,a1,1bfc0 <__subsf3+0x1b8>
   1be6c:	0f105e63          	blez	a7,1bf68 <__subsf3+0x160>
   1be70:	12081e63          	bnez	a6,1bfac <__subsf3+0x1a4>
   1be74:	24050a63          	beqz	a0,1c0c8 <__subsf3+0x2c0>
   1be78:	fff88893          	addi	a7,a7,-1
   1be7c:	40af07b3          	sub	a5,t5,a0
   1be80:	02088863          	beqz	a7,1beb0 <__subsf3+0xa8>
   1be84:	0ff00793          	li	a5,255
   1be88:	1cf68463          	beq	a3,a5,1c050 <__subsf3+0x248>
   1be8c:	01b00793          	li	a5,27
   1be90:	3317c263          	blt	a5,a7,1c1b4 <__subsf3+0x3ac>
   1be94:	02000713          	li	a4,32
   1be98:	41170733          	sub	a4,a4,a7
   1be9c:	00e51733          	sll	a4,a0,a4
   1bea0:	011557b3          	srl	a5,a0,a7
   1bea4:	00e03733          	snez	a4,a4
   1bea8:	00e7e7b3          	or	a5,a5,a4
   1beac:	40ff07b3          	sub	a5,t5,a5
   1beb0:	00579713          	slli	a4,a5,0x5
   1beb4:	20075463          	bgez	a4,1c0bc <__subsf3+0x2b4>
   1beb8:	04000437          	lui	s0,0x4000
   1bebc:	fff40413          	addi	s0,s0,-1 # 3ffffff <__freertos_irq_stack_top+0x3fdb0cf>
   1bec0:	0087f433          	and	s0,a5,s0
   1bec4:	00040513          	mv	a0,s0
   1bec8:	4e8000ef          	jal	ra,1c3b0 <__clzsi2>
   1becc:	ffb50513          	addi	a0,a0,-5
   1bed0:	00a417b3          	sll	a5,s0,a0
   1bed4:	23254063          	blt	a0,s2,1c0f4 <__subsf3+0x2ec>
   1bed8:	41250533          	sub	a0,a0,s2
   1bedc:	00150413          	addi	s0,a0,1
   1bee0:	02000713          	li	a4,32
   1bee4:	40870733          	sub	a4,a4,s0
   1bee8:	00e79733          	sll	a4,a5,a4
   1beec:	00e03733          	snez	a4,a4
   1bef0:	0087d7b3          	srl	a5,a5,s0
   1bef4:	00e7e7b3          	or	a5,a5,a4
   1bef8:	00000913          	li	s2,0
   1befc:	0077f713          	andi	a4,a5,7
   1bf00:	00070a63          	beqz	a4,1bf14 <__subsf3+0x10c>
   1bf04:	00f7f713          	andi	a4,a5,15
   1bf08:	00400693          	li	a3,4
   1bf0c:	00d70463          	beq	a4,a3,1bf14 <__subsf3+0x10c>
   1bf10:	00478793          	addi	a5,a5,4
   1bf14:	00579713          	slli	a4,a5,0x5
   1bf18:	1a075663          	bgez	a4,1c0c4 <__subsf3+0x2bc>
   1bf1c:	00190693          	addi	a3,s2,1
   1bf20:	0ff00713          	li	a4,255
   1bf24:	0014fe93          	andi	t4,s1,1
   1bf28:	1ce68063          	beq	a3,a4,1c0e8 <__subsf3+0x2e0>
   1bf2c:	00679793          	slli	a5,a5,0x6
   1bf30:	0097d793          	srli	a5,a5,0x9
   1bf34:	0ff6f693          	andi	a3,a3,255
   1bf38:	00979793          	slli	a5,a5,0x9
   1bf3c:	00c12083          	lw	ra,12(sp)
   1bf40:	00812403          	lw	s0,8(sp)
   1bf44:	0097d513          	srli	a0,a5,0x9
   1bf48:	01769693          	slli	a3,a3,0x17
   1bf4c:	01fe9793          	slli	a5,t4,0x1f
   1bf50:	00d56533          	or	a0,a0,a3
   1bf54:	00412483          	lw	s1,4(sp)
   1bf58:	00012903          	lw	s2,0(sp)
   1bf5c:	00f56533          	or	a0,a0,a5
   1bf60:	01010113          	addi	sp,sp,16
   1bf64:	00008067          	ret
   1bf68:	0c089263          	bnez	a7,1c02c <__subsf3+0x224>
   1bf6c:	00168713          	addi	a4,a3,1
   1bf70:	0fe77713          	andi	a4,a4,254
   1bf74:	18071e63          	bnez	a4,1c110 <__subsf3+0x308>
   1bf78:	2a069a63          	bnez	a3,1c22c <__subsf3+0x424>
   1bf7c:	280f0063          	beqz	t5,1c1fc <__subsf3+0x3f4>
   1bf80:	fa050ce3          	beqz	a0,1bf38 <__subsf3+0x130>
   1bf84:	40af07b3          	sub	a5,t5,a0
   1bf88:	00579713          	slli	a4,a5,0x5
   1bf8c:	2c075063          	bgez	a4,1c24c <__subsf3+0x444>
   1bf90:	41e507b3          	sub	a5,a0,t5
   1bf94:	00000913          	li	s2,0
   1bf98:	00058493          	mv	s1,a1
   1bf9c:	f61ff06f          	j	1befc <__subsf3+0xf4>
   1bfa0:	ec0502e3          	beqz	a0,1be64 <__subsf3+0x5c>
   1bfa4:	0cbe8e63          	beq	t4,a1,1c080 <__subsf3+0x278>
   1bfa8:	fd1050e3          	blez	a7,1bf68 <__subsf3+0x160>
   1bfac:	0ff00793          	li	a5,255
   1bfb0:	0af68063          	beq	a3,a5,1c050 <__subsf3+0x248>
   1bfb4:	040007b7          	lui	a5,0x4000
   1bfb8:	00f56533          	or	a0,a0,a5
   1bfbc:	ed1ff06f          	j	1be8c <__subsf3+0x84>
   1bfc0:	0d105063          	blez	a7,1c080 <__subsf3+0x278>
   1bfc4:	0a080063          	beqz	a6,1c064 <__subsf3+0x25c>
   1bfc8:	0ff00793          	li	a5,255
   1bfcc:	08f68263          	beq	a3,a5,1c050 <__subsf3+0x248>
   1bfd0:	040007b7          	lui	a5,0x4000
   1bfd4:	00f56533          	or	a0,a0,a5
   1bfd8:	01b00793          	li	a5,27
   1bfdc:	2717c063          	blt	a5,a7,1c23c <__subsf3+0x434>
   1bfe0:	02000713          	li	a4,32
   1bfe4:	41170733          	sub	a4,a4,a7
   1bfe8:	00e51733          	sll	a4,a0,a4
   1bfec:	011557b3          	srl	a5,a0,a7
   1bff0:	00e03733          	snez	a4,a4
   1bff4:	00e7e7b3          	or	a5,a5,a4
   1bff8:	01e787b3          	add	a5,a5,t5
   1bffc:	00579713          	slli	a4,a5,0x5
   1c000:	0a075e63          	bgez	a4,1c0bc <__subsf3+0x2b4>
   1c004:	00190913          	addi	s2,s2,1
   1c008:	0ff00713          	li	a4,255
   1c00c:	0ce90e63          	beq	s2,a4,1c0e8 <__subsf3+0x2e0>
   1c010:	7e0006b7          	lui	a3,0x7e000
   1c014:	0017d713          	srli	a4,a5,0x1
   1c018:	fff68693          	addi	a3,a3,-1 # 7dffffff <__freertos_irq_stack_top+0x7dfdb0cf>
   1c01c:	0017f793          	andi	a5,a5,1
   1c020:	00d77733          	and	a4,a4,a3
   1c024:	00f767b3          	or	a5,a4,a5
   1c028:	ed5ff06f          	j	1befc <__subsf3+0xf4>
   1c02c:	40d80733          	sub	a4,a6,a3
   1c030:	14069263          	bnez	a3,1c174 <__subsf3+0x36c>
   1c034:	1a0f0663          	beqz	t5,1c1e0 <__subsf3+0x3d8>
   1c038:	fff70713          	addi	a4,a4,-1
   1c03c:	22070263          	beqz	a4,1c260 <__subsf3+0x458>
   1c040:	0ff00793          	li	a5,255
   1c044:	14f81063          	bne	a6,a5,1c184 <__subsf3+0x37c>
   1c048:	00058493          	mv	s1,a1
   1c04c:	00060e13          	mv	t3,a2
   1c050:	080e0a63          	beqz	t3,1c0e4 <__subsf3+0x2dc>
   1c054:	00000e93          	li	t4,0
   1c058:	0ff00693          	li	a3,255
   1c05c:	004007b7          	lui	a5,0x400
   1c060:	ed9ff06f          	j	1bf38 <__subsf3+0x130>
   1c064:	06050263          	beqz	a0,1c0c8 <__subsf3+0x2c0>
   1c068:	fff88893          	addi	a7,a7,-1
   1c06c:	00af07b3          	add	a5,t5,a0
   1c070:	f80886e3          	beqz	a7,1bffc <__subsf3+0x1f4>
   1c074:	0ff00793          	li	a5,255
   1c078:	f6f690e3          	bne	a3,a5,1bfd8 <__subsf3+0x1d0>
   1c07c:	fd5ff06f          	j	1c050 <__subsf3+0x248>
   1c080:	0a089863          	bnez	a7,1c130 <__subsf3+0x328>
   1c084:	00168913          	addi	s2,a3,1
   1c088:	0fe97713          	andi	a4,s2,254
   1c08c:	18071063          	bnez	a4,1c20c <__subsf3+0x404>
   1c090:	16069063          	bnez	a3,1c1f0 <__subsf3+0x3e8>
   1c094:	1c0f0e63          	beqz	t5,1c270 <__subsf3+0x468>
   1c098:	ea0500e3          	beqz	a0,1bf38 <__subsf3+0x130>
   1c09c:	00af07b3          	add	a5,t5,a0
   1c0a0:	00579713          	slli	a4,a5,0x5
   1c0a4:	00000913          	li	s2,0
   1c0a8:	00075a63          	bgez	a4,1c0bc <__subsf3+0x2b4>
   1c0ac:	fc000737          	lui	a4,0xfc000
   1c0b0:	fff70713          	addi	a4,a4,-1 # fbffffff <__freertos_irq_stack_top+0xfbfdb0cf>
   1c0b4:	00e7f7b3          	and	a5,a5,a4
   1c0b8:	00100913          	li	s2,1
   1c0bc:	0077f713          	andi	a4,a5,7
   1c0c0:	e40712e3          	bnez	a4,1bf04 <__subsf3+0xfc>
   1c0c4:	0037de13          	srli	t3,a5,0x3
   1c0c8:	0ff00793          	li	a5,255
   1c0cc:	f8f902e3          	beq	s2,a5,1c050 <__subsf3+0x248>
   1c0d0:	009e1793          	slli	a5,t3,0x9
   1c0d4:	0097d793          	srli	a5,a5,0x9
   1c0d8:	0ff97693          	andi	a3,s2,255
   1c0dc:	0014fe93          	andi	t4,s1,1
   1c0e0:	e59ff06f          	j	1bf38 <__subsf3+0x130>
   1c0e4:	0014fe93          	andi	t4,s1,1
   1c0e8:	0ff00693          	li	a3,255
   1c0ec:	00000793          	li	a5,0
   1c0f0:	e49ff06f          	j	1bf38 <__subsf3+0x130>
   1c0f4:	fc000737          	lui	a4,0xfc000
   1c0f8:	fff70713          	addi	a4,a4,-1 # fbffffff <__freertos_irq_stack_top+0xfbfdb0cf>
   1c0fc:	00e7f7b3          	and	a5,a5,a4
   1c100:	0077f713          	andi	a4,a5,7
   1c104:	40a90933          	sub	s2,s2,a0
   1c108:	de071ee3          	bnez	a4,1bf04 <__subsf3+0xfc>
   1c10c:	fb9ff06f          	j	1c0c4 <__subsf3+0x2bc>
   1c110:	40af0433          	sub	s0,t5,a0
   1c114:	00541793          	slli	a5,s0,0x5
   1c118:	1007c463          	bltz	a5,1c220 <__subsf3+0x418>
   1c11c:	da0414e3          	bnez	s0,1bec4 <__subsf3+0xbc>
   1c120:	00000e93          	li	t4,0
   1c124:	00000693          	li	a3,0
   1c128:	00000793          	li	a5,0
   1c12c:	e0dff06f          	j	1bf38 <__subsf3+0x130>
   1c130:	40d80733          	sub	a4,a6,a3
   1c134:	08068463          	beqz	a3,1c1bc <__subsf3+0x3b4>
   1c138:	0ff00793          	li	a5,255
   1c13c:	f0f808e3          	beq	a6,a5,1c04c <__subsf3+0x244>
   1c140:	040007b7          	lui	a5,0x4000
   1c144:	00ff6f33          	or	t5,t5,a5
   1c148:	01b00793          	li	a5,27
   1c14c:	12e7cc63          	blt	a5,a4,1c284 <__subsf3+0x47c>
   1c150:	02000793          	li	a5,32
   1c154:	40e787b3          	sub	a5,a5,a4
   1c158:	00ff17b3          	sll	a5,t5,a5
   1c15c:	00ef5733          	srl	a4,t5,a4
   1c160:	00f037b3          	snez	a5,a5
   1c164:	00f76733          	or	a4,a4,a5
   1c168:	00a707b3          	add	a5,a4,a0
   1c16c:	00080913          	mv	s2,a6
   1c170:	e8dff06f          	j	1bffc <__subsf3+0x1f4>
   1c174:	0ff00793          	li	a5,255
   1c178:	ecf808e3          	beq	a6,a5,1c048 <__subsf3+0x240>
   1c17c:	040007b7          	lui	a5,0x4000
   1c180:	00ff6f33          	or	t5,t5,a5
   1c184:	01b00793          	li	a5,27
   1c188:	0ae7ce63          	blt	a5,a4,1c244 <__subsf3+0x43c>
   1c18c:	02000793          	li	a5,32
   1c190:	40e787b3          	sub	a5,a5,a4
   1c194:	00ff17b3          	sll	a5,t5,a5
   1c198:	00ef5733          	srl	a4,t5,a4
   1c19c:	00f037b3          	snez	a5,a5
   1c1a0:	00f767b3          	or	a5,a4,a5
   1c1a4:	40f507b3          	sub	a5,a0,a5
   1c1a8:	00080913          	mv	s2,a6
   1c1ac:	00058493          	mv	s1,a1
   1c1b0:	d01ff06f          	j	1beb0 <__subsf3+0xa8>
   1c1b4:	00100793          	li	a5,1
   1c1b8:	cf5ff06f          	j	1beac <__subsf3+0xa4>
   1c1bc:	0a0f0e63          	beqz	t5,1c278 <__subsf3+0x470>
   1c1c0:	fff70713          	addi	a4,a4,-1
   1c1c4:	00af07b3          	add	a5,t5,a0
   1c1c8:	00080913          	mv	s2,a6
   1c1cc:	e20708e3          	beqz	a4,1bffc <__subsf3+0x1f4>
   1c1d0:	0ff00793          	li	a5,255
   1c1d4:	f6f81ae3          	bne	a6,a5,1c148 <__subsf3+0x340>
   1c1d8:	00060e13          	mv	t3,a2
   1c1dc:	e75ff06f          	j	1c050 <__subsf3+0x248>
   1c1e0:	00060e13          	mv	t3,a2
   1c1e4:	00080913          	mv	s2,a6
   1c1e8:	00058493          	mv	s1,a1
   1c1ec:	eddff06f          	j	1c0c8 <__subsf3+0x2c0>
   1c1f0:	e40f0ee3          	beqz	t5,1c04c <__subsf3+0x244>
   1c1f4:	e4050ee3          	beqz	a0,1c050 <__subsf3+0x248>
   1c1f8:	e5dff06f          	j	1c054 <__subsf3+0x24c>
   1c1fc:	04050c63          	beqz	a0,1c254 <__subsf3+0x44c>
   1c200:	00058e93          	mv	t4,a1
   1c204:	00060793          	mv	a5,a2
   1c208:	d31ff06f          	j	1bf38 <__subsf3+0x130>
   1c20c:	0ff00793          	li	a5,255
   1c210:	ecf90ce3          	beq	s2,a5,1c0e8 <__subsf3+0x2e0>
   1c214:	00af07b3          	add	a5,t5,a0
   1c218:	0017d793          	srli	a5,a5,0x1
   1c21c:	ea1ff06f          	j	1c0bc <__subsf3+0x2b4>
   1c220:	41e50433          	sub	s0,a0,t5
   1c224:	00058493          	mv	s1,a1
   1c228:	c9dff06f          	j	1bec4 <__subsf3+0xbc>
   1c22c:	fc0f14e3          	bnez	t5,1c1f4 <__subsf3+0x3ec>
   1c230:	e20502e3          	beqz	a0,1c054 <__subsf3+0x24c>
   1c234:	00058493          	mv	s1,a1
   1c238:	e15ff06f          	j	1c04c <__subsf3+0x244>
   1c23c:	00100793          	li	a5,1
   1c240:	db9ff06f          	j	1bff8 <__subsf3+0x1f0>
   1c244:	00100793          	li	a5,1
   1c248:	f5dff06f          	j	1c1a4 <__subsf3+0x39c>
   1c24c:	00000913          	li	s2,0
   1c250:	e60796e3          	bnez	a5,1c0bc <__subsf3+0x2b4>
   1c254:	00000e93          	li	t4,0
   1c258:	00000793          	li	a5,0
   1c25c:	cddff06f          	j	1bf38 <__subsf3+0x130>
   1c260:	41e507b3          	sub	a5,a0,t5
   1c264:	00080913          	mv	s2,a6
   1c268:	00058493          	mv	s1,a1
   1c26c:	c45ff06f          	j	1beb0 <__subsf3+0xa8>
   1c270:	00060793          	mv	a5,a2
   1c274:	cc5ff06f          	j	1bf38 <__subsf3+0x130>
   1c278:	00060e13          	mv	t3,a2
   1c27c:	00080913          	mv	s2,a6
   1c280:	e49ff06f          	j	1c0c8 <__subsf3+0x2c0>
   1c284:	00100713          	li	a4,1
   1c288:	ee1ff06f          	j	1c168 <__subsf3+0x360>

0001c28c <__floatunsisf>:
   1c28c:	ff010113          	addi	sp,sp,-16
   1c290:	00112623          	sw	ra,12(sp)
   1c294:	00812423          	sw	s0,8(sp)
   1c298:	04050c63          	beqz	a0,1c2f0 <__floatunsisf+0x64>
   1c29c:	00050413          	mv	s0,a0
   1c2a0:	110000ef          	jal	ra,1c3b0 <__clzsi2>
   1c2a4:	09e00793          	li	a5,158
   1c2a8:	40a78733          	sub	a4,a5,a0
   1c2ac:	09600793          	li	a5,150
   1c2b0:	06e7c463          	blt	a5,a4,1c318 <__floatunsisf+0x8c>
   1c2b4:	00800693          	li	a3,8
   1c2b8:	0ff77793          	andi	a5,a4,255
   1c2bc:	00a6d663          	bge	a3,a0,1c2c8 <__floatunsisf+0x3c>
   1c2c0:	ff850513          	addi	a0,a0,-8
   1c2c4:	00a41433          	sll	s0,s0,a0
   1c2c8:	00941413          	slli	s0,s0,0x9
   1c2cc:	00945413          	srli	s0,s0,0x9
   1c2d0:	00941413          	slli	s0,s0,0x9
   1c2d4:	00945513          	srli	a0,s0,0x9
   1c2d8:	00c12083          	lw	ra,12(sp)
   1c2dc:	00812403          	lw	s0,8(sp)
   1c2e0:	01779793          	slli	a5,a5,0x17
   1c2e4:	00f56533          	or	a0,a0,a5
   1c2e8:	01010113          	addi	sp,sp,16
   1c2ec:	00008067          	ret
   1c2f0:	00000413          	li	s0,0
   1c2f4:	00941413          	slli	s0,s0,0x9
   1c2f8:	00945513          	srli	a0,s0,0x9
   1c2fc:	00c12083          	lw	ra,12(sp)
   1c300:	00812403          	lw	s0,8(sp)
   1c304:	00000793          	li	a5,0
   1c308:	01779793          	slli	a5,a5,0x17
   1c30c:	00f56533          	or	a0,a0,a5
   1c310:	01010113          	addi	sp,sp,16
   1c314:	00008067          	ret
   1c318:	09900793          	li	a5,153
   1c31c:	02e7d063          	bge	a5,a4,1c33c <__floatunsisf+0xb0>
   1c320:	01b50793          	addi	a5,a0,27
   1c324:	00500693          	li	a3,5
   1c328:	00f417b3          	sll	a5,s0,a5
   1c32c:	40a686b3          	sub	a3,a3,a0
   1c330:	00f037b3          	snez	a5,a5
   1c334:	00d45433          	srl	s0,s0,a3
   1c338:	0087e433          	or	s0,a5,s0
   1c33c:	00500793          	li	a5,5
   1c340:	00a7d663          	bge	a5,a0,1c34c <__floatunsisf+0xc0>
   1c344:	ffb50793          	addi	a5,a0,-5
   1c348:	00f41433          	sll	s0,s0,a5
   1c34c:	fc0006b7          	lui	a3,0xfc000
   1c350:	fff68693          	addi	a3,a3,-1 # fbffffff <__freertos_irq_stack_top+0xfbfdb0cf>
   1c354:	00747793          	andi	a5,s0,7
   1c358:	00d47633          	and	a2,s0,a3
   1c35c:	02078463          	beqz	a5,1c384 <__floatunsisf+0xf8>
   1c360:	00f47793          	andi	a5,s0,15
   1c364:	00400593          	li	a1,4
   1c368:	00b78e63          	beq	a5,a1,1c384 <__floatunsisf+0xf8>
   1c36c:	00460613          	addi	a2,a2,4
   1c370:	00561793          	slli	a5,a2,0x5
   1c374:	0007d863          	bgez	a5,1c384 <__floatunsisf+0xf8>
   1c378:	09f00793          	li	a5,159
   1c37c:	00d67633          	and	a2,a2,a3
   1c380:	40a78733          	sub	a4,a5,a0
   1c384:	00661413          	slli	s0,a2,0x6
   1c388:	00945413          	srli	s0,s0,0x9
   1c38c:	00941413          	slli	s0,s0,0x9
   1c390:	00945513          	srli	a0,s0,0x9
   1c394:	00c12083          	lw	ra,12(sp)
   1c398:	00812403          	lw	s0,8(sp)
   1c39c:	0ff77793          	andi	a5,a4,255
   1c3a0:	01779793          	slli	a5,a5,0x17
   1c3a4:	00f56533          	or	a0,a0,a5
   1c3a8:	01010113          	addi	sp,sp,16
   1c3ac:	00008067          	ret

0001c3b0 <__clzsi2>:
   1c3b0:	000107b7          	lui	a5,0x10
   1c3b4:	04f57463          	bgeu	a0,a5,1c3fc <__clzsi2+0x4c>
   1c3b8:	0ff00793          	li	a5,255
   1c3bc:	02000713          	li	a4,32
   1c3c0:	00a7ee63          	bltu	a5,a0,1c3dc <__clzsi2+0x2c>
   1c3c4:	00003797          	auipc	a5,0x3
   1c3c8:	cec78793          	addi	a5,a5,-788 # 1f0b0 <__clz_tab>
   1c3cc:	00a787b3          	add	a5,a5,a0
   1c3d0:	0007c503          	lbu	a0,0(a5)
   1c3d4:	40a70533          	sub	a0,a4,a0
   1c3d8:	00008067          	ret
   1c3dc:	00855513          	srli	a0,a0,0x8
   1c3e0:	00003797          	auipc	a5,0x3
   1c3e4:	cd078793          	addi	a5,a5,-816 # 1f0b0 <__clz_tab>
   1c3e8:	00a787b3          	add	a5,a5,a0
   1c3ec:	0007c503          	lbu	a0,0(a5)
   1c3f0:	01800713          	li	a4,24
   1c3f4:	40a70533          	sub	a0,a4,a0
   1c3f8:	00008067          	ret
   1c3fc:	010007b7          	lui	a5,0x1000
   1c400:	02f56263          	bltu	a0,a5,1c424 <__clzsi2+0x74>
   1c404:	01855513          	srli	a0,a0,0x18
   1c408:	00003797          	auipc	a5,0x3
   1c40c:	ca878793          	addi	a5,a5,-856 # 1f0b0 <__clz_tab>
   1c410:	00a787b3          	add	a5,a5,a0
   1c414:	0007c503          	lbu	a0,0(a5)
   1c418:	00800713          	li	a4,8
   1c41c:	40a70533          	sub	a0,a4,a0
   1c420:	00008067          	ret
   1c424:	01055513          	srli	a0,a0,0x10
   1c428:	00003797          	auipc	a5,0x3
   1c42c:	c8878793          	addi	a5,a5,-888 # 1f0b0 <__clz_tab>
   1c430:	00a787b3          	add	a5,a5,a0
   1c434:	0007c503          	lbu	a0,0(a5)
   1c438:	01000713          	li	a4,16
   1c43c:	40a70533          	sub	a0,a4,a0
   1c440:	00008067          	ret

0001c444 <_sbrk>:
   1c444:	97c18793          	addi	a5,gp,-1668 # 1fb4c <heap_end.1518>
   1c448:	0007a783          	lw	a5,0(a5)
   1c44c:	00078a63          	beqz	a5,1c460 <_sbrk+0x1c>
   1c450:	00a78533          	add	a0,a5,a0
   1c454:	96a1ae23          	sw	a0,-1668(gp) # 1fb4c <heap_end.1518>
   1c458:	00078513          	mv	a0,a5
   1c45c:	00008067          	ret
   1c460:	00008797          	auipc	a5,0x8
   1c464:	ad078793          	addi	a5,a5,-1328 # 23f30 <_end>
   1c468:	00a78533          	add	a0,a5,a0
   1c46c:	96a1ae23          	sw	a0,-1668(gp) # 1fb4c <heap_end.1518>
   1c470:	00078513          	mv	a0,a5
   1c474:	00008067          	ret
